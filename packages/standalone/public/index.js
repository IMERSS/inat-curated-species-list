'use strict';

function _mergeNamespaces(n, m) {
    m.forEach(function (e) {
        e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
            if (k !== 'default' && !(k in n)) {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    });
    return Object.freeze(n);
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */


var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var react = {exports: {}};

var react_production = {};

/**
 * @license React
 * react.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReact_production;

function requireReact_production () {
	if (hasRequiredReact_production) return react_production;
	hasRequiredReact_production = 1;
	var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
	  REACT_PORTAL_TYPE = Symbol.for("react.portal"),
	  REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
	  REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
	  REACT_PROFILER_TYPE = Symbol.for("react.profiler"),
	  REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
	  REACT_CONTEXT_TYPE = Symbol.for("react.context"),
	  REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
	  REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
	  REACT_MEMO_TYPE = Symbol.for("react.memo"),
	  REACT_LAZY_TYPE = Symbol.for("react.lazy"),
	  MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
	function getIteratorFn(maybeIterable) {
	  if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
	  maybeIterable =
	    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
	    maybeIterable["@@iterator"];
	  return "function" === typeof maybeIterable ? maybeIterable : null;
	}
	var ReactNoopUpdateQueue = {
	    isMounted: function () {
	      return false;
	    },
	    enqueueForceUpdate: function () {},
	    enqueueReplaceState: function () {},
	    enqueueSetState: function () {}
	  },
	  assign = Object.assign,
	  emptyObject = {};
	function Component(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	Component.prototype.isReactComponent = {};
	Component.prototype.setState = function (partialState, callback) {
	  if (
	    "object" !== typeof partialState &&
	    "function" !== typeof partialState &&
	    null != partialState
	  )
	    throw Error(
	      "takes an object of state variables to update or a function which returns an object of state variables."
	    );
	  this.updater.enqueueSetState(this, partialState, callback, "setState");
	};
	Component.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
	};
	function ComponentDummy() {}
	ComponentDummy.prototype = Component.prototype;
	function PureComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	var pureComponentPrototype = (PureComponent.prototype = new ComponentDummy());
	pureComponentPrototype.constructor = PureComponent;
	assign(pureComponentPrototype, Component.prototype);
	pureComponentPrototype.isPureReactComponent = true;
	var isArrayImpl = Array.isArray,
	  ReactSharedInternals = { H: null, A: null, T: null, S: null },
	  hasOwnProperty = Object.prototype.hasOwnProperty;
	function ReactElement(type, key, self, source, owner, props) {
	  self = props.ref;
	  return {
	    $$typeof: REACT_ELEMENT_TYPE,
	    type: type,
	    key: key,
	    ref: undefined !== self ? self : null,
	    props: props
	  };
	}
	function cloneAndReplaceKey(oldElement, newKey) {
	  return ReactElement(
	    oldElement.type,
	    newKey,
	    undefined,
	    undefined,
	    undefined,
	    oldElement.props
	  );
	}
	function isValidElement(object) {
	  return (
	    "object" === typeof object &&
	    null !== object &&
	    object.$$typeof === REACT_ELEMENT_TYPE
	  );
	}
	function escape(key) {
	  var escaperLookup = { "=": "=0", ":": "=2" };
	  return (
	    "$" +
	    key.replace(/[=:]/g, function (match) {
	      return escaperLookup[match];
	    })
	  );
	}
	var userProvidedKeyEscapeRegex = /\/+/g;
	function getElementKey(element, index) {
	  return "object" === typeof element && null !== element && null != element.key
	    ? escape("" + element.key)
	    : index.toString(36);
	}
	function noop$1() {}
	function resolveThenable(thenable) {
	  switch (thenable.status) {
	    case "fulfilled":
	      return thenable.value;
	    case "rejected":
	      throw thenable.reason;
	    default:
	      switch (
	        ("string" === typeof thenable.status
	          ? thenable.then(noop$1, noop$1)
	          : ((thenable.status = "pending"),
	            thenable.then(
	              function (fulfilledValue) {
	                "pending" === thenable.status &&
	                  ((thenable.status = "fulfilled"),
	                  (thenable.value = fulfilledValue));
	              },
	              function (error) {
	                "pending" === thenable.status &&
	                  ((thenable.status = "rejected"), (thenable.reason = error));
	              }
	            )),
	        thenable.status)
	      ) {
	        case "fulfilled":
	          return thenable.value;
	        case "rejected":
	          throw thenable.reason;
	      }
	  }
	  throw thenable;
	}
	function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
	  var type = typeof children;
	  if ("undefined" === type || "boolean" === type) children = null;
	  var invokeCallback = false;
	  if (null === children) invokeCallback = true;
	  else
	    switch (type) {
	      case "bigint":
	      case "string":
	      case "number":
	        invokeCallback = true;
	        break;
	      case "object":
	        switch (children.$$typeof) {
	          case REACT_ELEMENT_TYPE:
	          case REACT_PORTAL_TYPE:
	            invokeCallback = true;
	            break;
	          case REACT_LAZY_TYPE:
	            return (
	              (invokeCallback = children._init),
	              mapIntoArray(
	                invokeCallback(children._payload),
	                array,
	                escapedPrefix,
	                nameSoFar,
	                callback
	              )
	            );
	        }
	    }
	  if (invokeCallback)
	    return (
	      (callback = callback(children)),
	      (invokeCallback =
	        "" === nameSoFar ? "." + getElementKey(children, 0) : nameSoFar),
	      isArrayImpl(callback)
	        ? ((escapedPrefix = ""),
	          null != invokeCallback &&
	            (escapedPrefix =
	              invokeCallback.replace(userProvidedKeyEscapeRegex, "$&/") + "/"),
	          mapIntoArray(callback, array, escapedPrefix, "", function (c) {
	            return c;
	          }))
	        : null != callback &&
	          (isValidElement(callback) &&
	            (callback = cloneAndReplaceKey(
	              callback,
	              escapedPrefix +
	                (null == callback.key ||
	                (children && children.key === callback.key)
	                  ? ""
	                  : ("" + callback.key).replace(
	                      userProvidedKeyEscapeRegex,
	                      "$&/"
	                    ) + "/") +
	                invokeCallback
	            )),
	          array.push(callback)),
	      1
	    );
	  invokeCallback = 0;
	  var nextNamePrefix = "" === nameSoFar ? "." : nameSoFar + ":";
	  if (isArrayImpl(children))
	    for (var i = 0; i < children.length; i++)
	      (nameSoFar = children[i]),
	        (type = nextNamePrefix + getElementKey(nameSoFar, i)),
	        (invokeCallback += mapIntoArray(
	          nameSoFar,
	          array,
	          escapedPrefix,
	          type,
	          callback
	        ));
	  else if (((i = getIteratorFn(children)), "function" === typeof i))
	    for (
	      children = i.call(children), i = 0;
	      !(nameSoFar = children.next()).done;

	    )
	      (nameSoFar = nameSoFar.value),
	        (type = nextNamePrefix + getElementKey(nameSoFar, i++)),
	        (invokeCallback += mapIntoArray(
	          nameSoFar,
	          array,
	          escapedPrefix,
	          type,
	          callback
	        ));
	  else if ("object" === type) {
	    if ("function" === typeof children.then)
	      return mapIntoArray(
	        resolveThenable(children),
	        array,
	        escapedPrefix,
	        nameSoFar,
	        callback
	      );
	    array = String(children);
	    throw Error(
	      "Objects are not valid as a React child (found: " +
	        ("[object Object]" === array
	          ? "object with keys {" + Object.keys(children).join(", ") + "}"
	          : array) +
	        "). If you meant to render a collection of children, use an array instead."
	    );
	  }
	  return invokeCallback;
	}
	function mapChildren(children, func, context) {
	  if (null == children) return children;
	  var result = [],
	    count = 0;
	  mapIntoArray(children, result, "", "", function (child) {
	    return func.call(context, child, count++);
	  });
	  return result;
	}
	function lazyInitializer(payload) {
	  if (-1 === payload._status) {
	    var ctor = payload._result;
	    ctor = ctor();
	    ctor.then(
	      function (moduleObject) {
	        if (0 === payload._status || -1 === payload._status)
	          (payload._status = 1), (payload._result = moduleObject);
	      },
	      function (error) {
	        if (0 === payload._status || -1 === payload._status)
	          (payload._status = 2), (payload._result = error);
	      }
	    );
	    -1 === payload._status && ((payload._status = 0), (payload._result = ctor));
	  }
	  if (1 === payload._status) return payload._result.default;
	  throw payload._result;
	}
	var reportGlobalError =
	  "function" === typeof reportError
	    ? reportError
	    : function (error) {
	        if (
	          "object" === typeof window &&
	          "function" === typeof window.ErrorEvent
	        ) {
	          var event = new window.ErrorEvent("error", {
	            bubbles: true,
	            cancelable: true,
	            message:
	              "object" === typeof error &&
	              null !== error &&
	              "string" === typeof error.message
	                ? String(error.message)
	                : String(error),
	            error: error
	          });
	          if (!window.dispatchEvent(event)) return;
	        } else if (
	          "object" === typeof process &&
	          "function" === typeof process.emit
	        ) {
	          process.emit("uncaughtException", error);
	          return;
	        }
	        console.error(error);
	      };
	function noop() {}
	react_production.Children = {
	  map: mapChildren,
	  forEach: function (children, forEachFunc, forEachContext) {
	    mapChildren(
	      children,
	      function () {
	        forEachFunc.apply(this, arguments);
	      },
	      forEachContext
	    );
	  },
	  count: function (children) {
	    var n = 0;
	    mapChildren(children, function () {
	      n++;
	    });
	    return n;
	  },
	  toArray: function (children) {
	    return (
	      mapChildren(children, function (child) {
	        return child;
	      }) || []
	    );
	  },
	  only: function (children) {
	    if (!isValidElement(children))
	      throw Error(
	        "React.Children.only expected to receive a single React element child."
	      );
	    return children;
	  }
	};
	react_production.Component = Component;
	react_production.Fragment = REACT_FRAGMENT_TYPE;
	react_production.Profiler = REACT_PROFILER_TYPE;
	react_production.PureComponent = PureComponent;
	react_production.StrictMode = REACT_STRICT_MODE_TYPE;
	react_production.Suspense = REACT_SUSPENSE_TYPE;
	react_production.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =
	  ReactSharedInternals;
	react_production.act = function () {
	  throw Error("act(...) is not supported in production builds of React.");
	};
	react_production.cache = function (fn) {
	  return function () {
	    return fn.apply(null, arguments);
	  };
	};
	react_production.cloneElement = function (element, config, children) {
	  if (null === element || undefined === element)
	    throw Error(
	      "The argument must be a React element, but you passed " + element + "."
	    );
	  var props = assign({}, element.props),
	    key = element.key,
	    owner = undefined;
	  if (null != config)
	    for (propName in (undefined !== config.ref && (owner = undefined),
	    undefined !== config.key && (key = "" + config.key),
	    config))
	      !hasOwnProperty.call(config, propName) ||
	        "key" === propName ||
	        "__self" === propName ||
	        "__source" === propName ||
	        ("ref" === propName && undefined === config.ref) ||
	        (props[propName] = config[propName]);
	  var propName = arguments.length - 2;
	  if (1 === propName) props.children = children;
	  else if (1 < propName) {
	    for (var childArray = Array(propName), i = 0; i < propName; i++)
	      childArray[i] = arguments[i + 2];
	    props.children = childArray;
	  }
	  return ReactElement(element.type, key, undefined, undefined, owner, props);
	};
	react_production.createContext = function (defaultValue) {
	  defaultValue = {
	    $$typeof: REACT_CONTEXT_TYPE,
	    _currentValue: defaultValue,
	    _currentValue2: defaultValue,
	    _threadCount: 0,
	    Provider: null,
	    Consumer: null
	  };
	  defaultValue.Provider = defaultValue;
	  defaultValue.Consumer = {
	    $$typeof: REACT_CONSUMER_TYPE,
	    _context: defaultValue
	  };
	  return defaultValue;
	};
	react_production.createElement = function (type, config, children) {
	  var propName,
	    props = {},
	    key = null;
	  if (null != config)
	    for (propName in (undefined !== config.key && (key = "" + config.key), config))
	      hasOwnProperty.call(config, propName) &&
	        "key" !== propName &&
	        "__self" !== propName &&
	        "__source" !== propName &&
	        (props[propName] = config[propName]);
	  var childrenLength = arguments.length - 2;
	  if (1 === childrenLength) props.children = children;
	  else if (1 < childrenLength) {
	    for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)
	      childArray[i] = arguments[i + 2];
	    props.children = childArray;
	  }
	  if (type && type.defaultProps)
	    for (propName in ((childrenLength = type.defaultProps), childrenLength))
	      undefined === props[propName] &&
	        (props[propName] = childrenLength[propName]);
	  return ReactElement(type, key, undefined, undefined, null, props);
	};
	react_production.createRef = function () {
	  return { current: null };
	};
	react_production.forwardRef = function (render) {
	  return { $$typeof: REACT_FORWARD_REF_TYPE, render: render };
	};
	react_production.isValidElement = isValidElement;
	react_production.lazy = function (ctor) {
	  return {
	    $$typeof: REACT_LAZY_TYPE,
	    _payload: { _status: -1, _result: ctor },
	    _init: lazyInitializer
	  };
	};
	react_production.memo = function (type, compare) {
	  return {
	    $$typeof: REACT_MEMO_TYPE,
	    type: type,
	    compare: undefined === compare ? null : compare
	  };
	};
	react_production.startTransition = function (scope) {
	  var prevTransition = ReactSharedInternals.T,
	    currentTransition = {};
	  ReactSharedInternals.T = currentTransition;
	  try {
	    var returnValue = scope(),
	      onStartTransitionFinish = ReactSharedInternals.S;
	    null !== onStartTransitionFinish &&
	      onStartTransitionFinish(currentTransition, returnValue);
	    "object" === typeof returnValue &&
	      null !== returnValue &&
	      "function" === typeof returnValue.then &&
	      returnValue.then(noop, reportGlobalError);
	  } catch (error) {
	    reportGlobalError(error);
	  } finally {
	    ReactSharedInternals.T = prevTransition;
	  }
	};
	react_production.unstable_useCacheRefresh = function () {
	  return ReactSharedInternals.H.useCacheRefresh();
	};
	react_production.use = function (usable) {
	  return ReactSharedInternals.H.use(usable);
	};
	react_production.useActionState = function (action, initialState, permalink) {
	  return ReactSharedInternals.H.useActionState(action, initialState, permalink);
	};
	react_production.useCallback = function (callback, deps) {
	  return ReactSharedInternals.H.useCallback(callback, deps);
	};
	react_production.useContext = function (Context) {
	  return ReactSharedInternals.H.useContext(Context);
	};
	react_production.useDebugValue = function () {};
	react_production.useDeferredValue = function (value, initialValue) {
	  return ReactSharedInternals.H.useDeferredValue(value, initialValue);
	};
	react_production.useEffect = function (create, deps) {
	  return ReactSharedInternals.H.useEffect(create, deps);
	};
	react_production.useId = function () {
	  return ReactSharedInternals.H.useId();
	};
	react_production.useImperativeHandle = function (ref, create, deps) {
	  return ReactSharedInternals.H.useImperativeHandle(ref, create, deps);
	};
	react_production.useInsertionEffect = function (create, deps) {
	  return ReactSharedInternals.H.useInsertionEffect(create, deps);
	};
	react_production.useLayoutEffect = function (create, deps) {
	  return ReactSharedInternals.H.useLayoutEffect(create, deps);
	};
	react_production.useMemo = function (create, deps) {
	  return ReactSharedInternals.H.useMemo(create, deps);
	};
	react_production.useOptimistic = function (passthrough, reducer) {
	  return ReactSharedInternals.H.useOptimistic(passthrough, reducer);
	};
	react_production.useReducer = function (reducer, initialArg, init) {
	  return ReactSharedInternals.H.useReducer(reducer, initialArg, init);
	};
	react_production.useRef = function (initialValue) {
	  return ReactSharedInternals.H.useRef(initialValue);
	};
	react_production.useState = function (initialState) {
	  return ReactSharedInternals.H.useState(initialState);
	};
	react_production.useSyncExternalStore = function (
	  subscribe,
	  getSnapshot,
	  getServerSnapshot
	) {
	  return ReactSharedInternals.H.useSyncExternalStore(
	    subscribe,
	    getSnapshot,
	    getServerSnapshot
	  );
	};
	react_production.useTransition = function () {
	  return ReactSharedInternals.H.useTransition();
	};
	react_production.version = "19.0.0";
	return react_production;
}

var react_development = {exports: {}};

/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
react_development.exports;

var hasRequiredReact_development;

function requireReact_development () {
	if (hasRequiredReact_development) return react_development.exports;
	hasRequiredReact_development = 1;
	(function (module, exports) {
		"production" !== process.env.NODE_ENV &&
		  (function () {
		    function defineDeprecationWarning(methodName, info) {
		      Object.defineProperty(Component.prototype, methodName, {
		        get: function () {
		          console.warn(
		            "%s(...) is deprecated in plain JavaScript React classes. %s",
		            info[0],
		            info[1]
		          );
		        }
		      });
		    }
		    function getIteratorFn(maybeIterable) {
		      if (null === maybeIterable || "object" !== typeof maybeIterable)
		        return null;
		      maybeIterable =
		        (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
		        maybeIterable["@@iterator"];
		      return "function" === typeof maybeIterable ? maybeIterable : null;
		    }
		    function warnNoop(publicInstance, callerName) {
		      publicInstance =
		        ((publicInstance = publicInstance.constructor) &&
		          (publicInstance.displayName || publicInstance.name)) ||
		        "ReactClass";
		      var warningKey = publicInstance + "." + callerName;
		      didWarnStateUpdateForUnmountedComponent[warningKey] ||
		        (console.error(
		          "Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",
		          callerName,
		          publicInstance
		        ),
		        (didWarnStateUpdateForUnmountedComponent[warningKey] = true));
		    }
		    function Component(props, context, updater) {
		      this.props = props;
		      this.context = context;
		      this.refs = emptyObject;
		      this.updater = updater || ReactNoopUpdateQueue;
		    }
		    function ComponentDummy() {}
		    function PureComponent(props, context, updater) {
		      this.props = props;
		      this.context = context;
		      this.refs = emptyObject;
		      this.updater = updater || ReactNoopUpdateQueue;
		    }
		    function testStringCoercion(value) {
		      return "" + value;
		    }
		    function checkKeyStringCoercion(value) {
		      try {
		        testStringCoercion(value);
		        var JSCompiler_inline_result = !1;
		      } catch (e) {
		        JSCompiler_inline_result = true;
		      }
		      if (JSCompiler_inline_result) {
		        JSCompiler_inline_result = console;
		        var JSCompiler_temp_const = JSCompiler_inline_result.error;
		        var JSCompiler_inline_result$jscomp$0 =
		          ("function" === typeof Symbol &&
		            Symbol.toStringTag &&
		            value[Symbol.toStringTag]) ||
		          value.constructor.name ||
		          "Object";
		        JSCompiler_temp_const.call(
		          JSCompiler_inline_result,
		          "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
		          JSCompiler_inline_result$jscomp$0
		        );
		        return testStringCoercion(value);
		      }
		    }
		    function getComponentNameFromType(type) {
		      if (null == type) return null;
		      if ("function" === typeof type)
		        return type.$$typeof === REACT_CLIENT_REFERENCE$2
		          ? null
		          : type.displayName || type.name || null;
		      if ("string" === typeof type) return type;
		      switch (type) {
		        case REACT_FRAGMENT_TYPE:
		          return "Fragment";
		        case REACT_PORTAL_TYPE:
		          return "Portal";
		        case REACT_PROFILER_TYPE:
		          return "Profiler";
		        case REACT_STRICT_MODE_TYPE:
		          return "StrictMode";
		        case REACT_SUSPENSE_TYPE:
		          return "Suspense";
		        case REACT_SUSPENSE_LIST_TYPE:
		          return "SuspenseList";
		      }
		      if ("object" === typeof type)
		        switch (
		          ("number" === typeof type.tag &&
		            console.error(
		              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
		            ),
		          type.$$typeof)
		        ) {
		          case REACT_CONTEXT_TYPE:
		            return (type.displayName || "Context") + ".Provider";
		          case REACT_CONSUMER_TYPE:
		            return (type._context.displayName || "Context") + ".Consumer";
		          case REACT_FORWARD_REF_TYPE:
		            var innerType = type.render;
		            type = type.displayName;
		            type ||
		              ((type = innerType.displayName || innerType.name || ""),
		              (type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef"));
		            return type;
		          case REACT_MEMO_TYPE:
		            return (
		              (innerType = type.displayName || null),
		              null !== innerType
		                ? innerType
		                : getComponentNameFromType(type.type) || "Memo"
		            );
		          case REACT_LAZY_TYPE:
		            innerType = type._payload;
		            type = type._init;
		            try {
		              return getComponentNameFromType(type(innerType));
		            } catch (x) {}
		        }
		      return null;
		    }
		    function isValidElementType(type) {
		      return "string" === typeof type ||
		        "function" === typeof type ||
		        type === REACT_FRAGMENT_TYPE ||
		        type === REACT_PROFILER_TYPE ||
		        type === REACT_STRICT_MODE_TYPE ||
		        type === REACT_SUSPENSE_TYPE ||
		        type === REACT_SUSPENSE_LIST_TYPE ||
		        type === REACT_OFFSCREEN_TYPE ||
		        ("object" === typeof type &&
		          null !== type &&
		          (type.$$typeof === REACT_LAZY_TYPE ||
		            type.$$typeof === REACT_MEMO_TYPE ||
		            type.$$typeof === REACT_CONTEXT_TYPE ||
		            type.$$typeof === REACT_CONSUMER_TYPE ||
		            type.$$typeof === REACT_FORWARD_REF_TYPE ||
		            type.$$typeof === REACT_CLIENT_REFERENCE$1 ||
		            undefined !== type.getModuleId))
		        ? true
		        : false;
		    }
		    function disabledLog() {}
		    function disableLogs() {
		      if (0 === disabledDepth) {
		        prevLog = console.log;
		        prevInfo = console.info;
		        prevWarn = console.warn;
		        prevError = console.error;
		        prevGroup = console.group;
		        prevGroupCollapsed = console.groupCollapsed;
		        prevGroupEnd = console.groupEnd;
		        var props = {
		          configurable: true,
		          enumerable: true,
		          value: disabledLog,
		          writable: true
		        };
		        Object.defineProperties(console, {
		          info: props,
		          log: props,
		          warn: props,
		          error: props,
		          group: props,
		          groupCollapsed: props,
		          groupEnd: props
		        });
		      }
		      disabledDepth++;
		    }
		    function reenableLogs() {
		      disabledDepth--;
		      if (0 === disabledDepth) {
		        var props = { configurable: true, enumerable: true, writable: true };
		        Object.defineProperties(console, {
		          log: assign({}, props, { value: prevLog }),
		          info: assign({}, props, { value: prevInfo }),
		          warn: assign({}, props, { value: prevWarn }),
		          error: assign({}, props, { value: prevError }),
		          group: assign({}, props, { value: prevGroup }),
		          groupCollapsed: assign({}, props, { value: prevGroupCollapsed }),
		          groupEnd: assign({}, props, { value: prevGroupEnd })
		        });
		      }
		      0 > disabledDepth &&
		        console.error(
		          "disabledDepth fell below zero. This is a bug in React. Please file an issue."
		        );
		    }
		    function describeBuiltInComponentFrame(name) {
		      if (undefined === prefix)
		        try {
		          throw Error();
		        } catch (x) {
		          var match = x.stack.trim().match(/\n( *(at )?)/);
		          prefix = (match && match[1]) || "";
		          suffix =
		            -1 < x.stack.indexOf("\n    at")
		              ? " (<anonymous>)"
		              : -1 < x.stack.indexOf("@")
		                ? "@unknown:0:0"
		                : "";
		        }
		      return "\n" + prefix + name + suffix;
		    }
		    function describeNativeComponentFrame(fn, construct) {
		      if (!fn || reentry) return "";
		      var frame = componentFrameCache.get(fn);
		      if (undefined !== frame) return frame;
		      reentry = true;
		      frame = Error.prepareStackTrace;
		      Error.prepareStackTrace = undefined;
		      var previousDispatcher = null;
		      previousDispatcher = ReactSharedInternals.H;
		      ReactSharedInternals.H = null;
		      disableLogs();
		      try {
		        var RunInRootFrame = {
		          DetermineComponentFrameRoot: function () {
		            try {
		              if (construct) {
		                var Fake = function () {
		                  throw Error();
		                };
		                Object.defineProperty(Fake.prototype, "props", {
		                  set: function () {
		                    throw Error();
		                  }
		                });
		                if ("object" === typeof Reflect && Reflect.construct) {
		                  try {
		                    Reflect.construct(Fake, []);
		                  } catch (x) {
		                    var control = x;
		                  }
		                  Reflect.construct(fn, [], Fake);
		                } else {
		                  try {
		                    Fake.call();
		                  } catch (x$0) {
		                    control = x$0;
		                  }
		                  fn.call(Fake.prototype);
		                }
		              } else {
		                try {
		                  throw Error();
		                } catch (x$1) {
		                  control = x$1;
		                }
		                (Fake = fn()) &&
		                  "function" === typeof Fake.catch &&
		                  Fake.catch(function () {});
		              }
		            } catch (sample) {
		              if (sample && control && "string" === typeof sample.stack)
		                return [sample.stack, control.stack];
		            }
		            return [null, null];
		          }
		        };
		        RunInRootFrame.DetermineComponentFrameRoot.displayName =
		          "DetermineComponentFrameRoot";
		        var namePropDescriptor = Object.getOwnPropertyDescriptor(
		          RunInRootFrame.DetermineComponentFrameRoot,
		          "name"
		        );
		        namePropDescriptor &&
		          namePropDescriptor.configurable &&
		          Object.defineProperty(
		            RunInRootFrame.DetermineComponentFrameRoot,
		            "name",
		            { value: "DetermineComponentFrameRoot" }
		          );
		        var _RunInRootFrame$Deter =
		            RunInRootFrame.DetermineComponentFrameRoot(),
		          sampleStack = _RunInRootFrame$Deter[0],
		          controlStack = _RunInRootFrame$Deter[1];
		        if (sampleStack && controlStack) {
		          var sampleLines = sampleStack.split("\n"),
		            controlLines = controlStack.split("\n");
		          for (
		            _RunInRootFrame$Deter = namePropDescriptor = 0;
		            namePropDescriptor < sampleLines.length &&
		            !sampleLines[namePropDescriptor].includes(
		              "DetermineComponentFrameRoot"
		            );

		          )
		            namePropDescriptor++;
		          for (
		            ;
		            _RunInRootFrame$Deter < controlLines.length &&
		            !controlLines[_RunInRootFrame$Deter].includes(
		              "DetermineComponentFrameRoot"
		            );

		          )
		            _RunInRootFrame$Deter++;
		          if (
		            namePropDescriptor === sampleLines.length ||
		            _RunInRootFrame$Deter === controlLines.length
		          )
		            for (
		              namePropDescriptor = sampleLines.length - 1,
		                _RunInRootFrame$Deter = controlLines.length - 1;
		              1 <= namePropDescriptor &&
		              0 <= _RunInRootFrame$Deter &&
		              sampleLines[namePropDescriptor] !==
		                controlLines[_RunInRootFrame$Deter];

		            )
		              _RunInRootFrame$Deter--;
		          for (
		            ;
		            1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter;
		            namePropDescriptor--, _RunInRootFrame$Deter--
		          )
		            if (
		              sampleLines[namePropDescriptor] !==
		              controlLines[_RunInRootFrame$Deter]
		            ) {
		              if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {
		                do
		                  if (
		                    (namePropDescriptor--,
		                    _RunInRootFrame$Deter--,
		                    0 > _RunInRootFrame$Deter ||
		                      sampleLines[namePropDescriptor] !==
		                        controlLines[_RunInRootFrame$Deter])
		                  ) {
		                    var _frame =
		                      "\n" +
		                      sampleLines[namePropDescriptor].replace(
		                        " at new ",
		                        " at "
		                      );
		                    fn.displayName &&
		                      _frame.includes("<anonymous>") &&
		                      (_frame = _frame.replace("<anonymous>", fn.displayName));
		                    "function" === typeof fn &&
		                      componentFrameCache.set(fn, _frame);
		                    return _frame;
		                  }
		                while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);
		              }
		              break;
		            }
		        }
		      } finally {
		        (reentry = false),
		          (ReactSharedInternals.H = previousDispatcher),
		          reenableLogs(),
		          (Error.prepareStackTrace = frame);
		      }
		      sampleLines = (sampleLines = fn ? fn.displayName || fn.name : "")
		        ? describeBuiltInComponentFrame(sampleLines)
		        : "";
		      "function" === typeof fn && componentFrameCache.set(fn, sampleLines);
		      return sampleLines;
		    }
		    function describeUnknownElementTypeFrameInDEV(type) {
		      if (null == type) return "";
		      if ("function" === typeof type) {
		        var prototype = type.prototype;
		        return describeNativeComponentFrame(
		          type,
		          !(!prototype || !prototype.isReactComponent)
		        );
		      }
		      if ("string" === typeof type) return describeBuiltInComponentFrame(type);
		      switch (type) {
		        case REACT_SUSPENSE_TYPE:
		          return describeBuiltInComponentFrame("Suspense");
		        case REACT_SUSPENSE_LIST_TYPE:
		          return describeBuiltInComponentFrame("SuspenseList");
		      }
		      if ("object" === typeof type)
		        switch (type.$$typeof) {
		          case REACT_FORWARD_REF_TYPE:
		            return (type = describeNativeComponentFrame(type.render, false)), type;
		          case REACT_MEMO_TYPE:
		            return describeUnknownElementTypeFrameInDEV(type.type);
		          case REACT_LAZY_TYPE:
		            prototype = type._payload;
		            type = type._init;
		            try {
		              return describeUnknownElementTypeFrameInDEV(type(prototype));
		            } catch (x) {}
		        }
		      return "";
		    }
		    function getOwner() {
		      var dispatcher = ReactSharedInternals.A;
		      return null === dispatcher ? null : dispatcher.getOwner();
		    }
		    function hasValidKey(config) {
		      if (hasOwnProperty.call(config, "key")) {
		        var getter = Object.getOwnPropertyDescriptor(config, "key").get;
		        if (getter && getter.isReactWarning) return false;
		      }
		      return undefined !== config.key;
		    }
		    function defineKeyPropWarningGetter(props, displayName) {
		      function warnAboutAccessingKey() {
		        specialPropKeyWarningShown ||
		          ((specialPropKeyWarningShown = true),
		          console.error(
		            "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
		            displayName
		          ));
		      }
		      warnAboutAccessingKey.isReactWarning = true;
		      Object.defineProperty(props, "key", {
		        get: warnAboutAccessingKey,
		        configurable: true
		      });
		    }
		    function elementRefGetterWithDeprecationWarning() {
		      var componentName = getComponentNameFromType(this.type);
		      didWarnAboutElementRef[componentName] ||
		        ((didWarnAboutElementRef[componentName] = true),
		        console.error(
		          "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
		        ));
		      componentName = this.props.ref;
		      return undefined !== componentName ? componentName : null;
		    }
		    function ReactElement(type, key, self, source, owner, props) {
		      self = props.ref;
		      type = {
		        $$typeof: REACT_ELEMENT_TYPE,
		        type: type,
		        key: key,
		        props: props,
		        _owner: owner
		      };
		      null !== (undefined !== self ? self : null)
		        ? Object.defineProperty(type, "ref", {
		            enumerable: false,
		            get: elementRefGetterWithDeprecationWarning
		          })
		        : Object.defineProperty(type, "ref", { enumerable: false, value: null });
		      type._store = {};
		      Object.defineProperty(type._store, "validated", {
		        configurable: false,
		        enumerable: false,
		        writable: true,
		        value: 0
		      });
		      Object.defineProperty(type, "_debugInfo", {
		        configurable: false,
		        enumerable: false,
		        writable: true,
		        value: null
		      });
		      Object.freeze && (Object.freeze(type.props), Object.freeze(type));
		      return type;
		    }
		    function cloneAndReplaceKey(oldElement, newKey) {
		      newKey = ReactElement(
		        oldElement.type,
		        newKey,
		        undefined,
		        undefined,
		        oldElement._owner,
		        oldElement.props
		      );
		      newKey._store.validated = oldElement._store.validated;
		      return newKey;
		    }
		    function validateChildKeys(node, parentType) {
		      if (
		        "object" === typeof node &&
		        node &&
		        node.$$typeof !== REACT_CLIENT_REFERENCE
		      )
		        if (isArrayImpl(node))
		          for (var i = 0; i < node.length; i++) {
		            var child = node[i];
		            isValidElement(child) && validateExplicitKey(child, parentType);
		          }
		        else if (isValidElement(node))
		          node._store && (node._store.validated = 1);
		        else if (
		          ((i = getIteratorFn(node)),
		          "function" === typeof i &&
		            i !== node.entries &&
		            ((i = i.call(node)), i !== node))
		        )
		          for (; !(node = i.next()).done; )
		            isValidElement(node.value) &&
		              validateExplicitKey(node.value, parentType);
		    }
		    function isValidElement(object) {
		      return (
		        "object" === typeof object &&
		        null !== object &&
		        object.$$typeof === REACT_ELEMENT_TYPE
		      );
		    }
		    function validateExplicitKey(element, parentType) {
		      if (
		        element._store &&
		        !element._store.validated &&
		        null == element.key &&
		        ((element._store.validated = 1),
		        (parentType = getCurrentComponentErrorInfo(parentType)),
		        !ownerHasKeyUseWarning[parentType])
		      ) {
		        ownerHasKeyUseWarning[parentType] = true;
		        var childOwner = "";
		        element &&
		          null != element._owner &&
		          element._owner !== getOwner() &&
		          ((childOwner = null),
		          "number" === typeof element._owner.tag
		            ? (childOwner = getComponentNameFromType(element._owner.type))
		            : "string" === typeof element._owner.name &&
		              (childOwner = element._owner.name),
		          (childOwner = " It was passed a child from " + childOwner + "."));
		        var prevGetCurrentStack = ReactSharedInternals.getCurrentStack;
		        ReactSharedInternals.getCurrentStack = function () {
		          var stack = describeUnknownElementTypeFrameInDEV(element.type);
		          prevGetCurrentStack && (stack += prevGetCurrentStack() || "");
		          return stack;
		        };
		        console.error(
		          'Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.',
		          parentType,
		          childOwner
		        );
		        ReactSharedInternals.getCurrentStack = prevGetCurrentStack;
		      }
		    }
		    function getCurrentComponentErrorInfo(parentType) {
		      var info = "",
		        owner = getOwner();
		      owner &&
		        (owner = getComponentNameFromType(owner.type)) &&
		        (info = "\n\nCheck the render method of `" + owner + "`.");
		      info ||
		        ((parentType = getComponentNameFromType(parentType)) &&
		          (info =
		            "\n\nCheck the top-level render call using <" + parentType + ">."));
		      return info;
		    }
		    function escape(key) {
		      var escaperLookup = { "=": "=0", ":": "=2" };
		      return (
		        "$" +
		        key.replace(/[=:]/g, function (match) {
		          return escaperLookup[match];
		        })
		      );
		    }
		    function getElementKey(element, index) {
		      return "object" === typeof element &&
		        null !== element &&
		        null != element.key
		        ? (checkKeyStringCoercion(element.key), escape("" + element.key))
		        : index.toString(36);
		    }
		    function noop$1() {}
		    function resolveThenable(thenable) {
		      switch (thenable.status) {
		        case "fulfilled":
		          return thenable.value;
		        case "rejected":
		          throw thenable.reason;
		        default:
		          switch (
		            ("string" === typeof thenable.status
		              ? thenable.then(noop$1, noop$1)
		              : ((thenable.status = "pending"),
		                thenable.then(
		                  function (fulfilledValue) {
		                    "pending" === thenable.status &&
		                      ((thenable.status = "fulfilled"),
		                      (thenable.value = fulfilledValue));
		                  },
		                  function (error) {
		                    "pending" === thenable.status &&
		                      ((thenable.status = "rejected"),
		                      (thenable.reason = error));
		                  }
		                )),
		            thenable.status)
		          ) {
		            case "fulfilled":
		              return thenable.value;
		            case "rejected":
		              throw thenable.reason;
		          }
		      }
		      throw thenable;
		    }
		    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
		      var type = typeof children;
		      if ("undefined" === type || "boolean" === type) children = null;
		      var invokeCallback = false;
		      if (null === children) invokeCallback = true;
		      else
		        switch (type) {
		          case "bigint":
		          case "string":
		          case "number":
		            invokeCallback = true;
		            break;
		          case "object":
		            switch (children.$$typeof) {
		              case REACT_ELEMENT_TYPE:
		              case REACT_PORTAL_TYPE:
		                invokeCallback = true;
		                break;
		              case REACT_LAZY_TYPE:
		                return (
		                  (invokeCallback = children._init),
		                  mapIntoArray(
		                    invokeCallback(children._payload),
		                    array,
		                    escapedPrefix,
		                    nameSoFar,
		                    callback
		                  )
		                );
		            }
		        }
		      if (invokeCallback) {
		        invokeCallback = children;
		        callback = callback(invokeCallback);
		        var childKey =
		          "" === nameSoFar ? "." + getElementKey(invokeCallback, 0) : nameSoFar;
		        isArrayImpl(callback)
		          ? ((escapedPrefix = ""),
		            null != childKey &&
		              (escapedPrefix =
		                childKey.replace(userProvidedKeyEscapeRegex, "$&/") + "/"),
		            mapIntoArray(callback, array, escapedPrefix, "", function (c) {
		              return c;
		            }))
		          : null != callback &&
		            (isValidElement(callback) &&
		              (null != callback.key &&
		                ((invokeCallback && invokeCallback.key === callback.key) ||
		                  checkKeyStringCoercion(callback.key)),
		              (escapedPrefix = cloneAndReplaceKey(
		                callback,
		                escapedPrefix +
		                  (null == callback.key ||
		                  (invokeCallback && invokeCallback.key === callback.key)
		                    ? ""
		                    : ("" + callback.key).replace(
		                        userProvidedKeyEscapeRegex,
		                        "$&/"
		                      ) + "/") +
		                  childKey
		              )),
		              "" !== nameSoFar &&
		                null != invokeCallback &&
		                isValidElement(invokeCallback) &&
		                null == invokeCallback.key &&
		                invokeCallback._store &&
		                !invokeCallback._store.validated &&
		                (escapedPrefix._store.validated = 2),
		              (callback = escapedPrefix)),
		            array.push(callback));
		        return 1;
		      }
		      invokeCallback = 0;
		      childKey = "" === nameSoFar ? "." : nameSoFar + ":";
		      if (isArrayImpl(children))
		        for (var i = 0; i < children.length; i++)
		          (nameSoFar = children[i]),
		            (type = childKey + getElementKey(nameSoFar, i)),
		            (invokeCallback += mapIntoArray(
		              nameSoFar,
		              array,
		              escapedPrefix,
		              type,
		              callback
		            ));
		      else if (((i = getIteratorFn(children)), "function" === typeof i))
		        for (
		          i === children.entries &&
		            (didWarnAboutMaps ||
		              console.warn(
		                "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
		              ),
		            (didWarnAboutMaps = true)),
		            children = i.call(children),
		            i = 0;
		          !(nameSoFar = children.next()).done;

		        )
		          (nameSoFar = nameSoFar.value),
		            (type = childKey + getElementKey(nameSoFar, i++)),
		            (invokeCallback += mapIntoArray(
		              nameSoFar,
		              array,
		              escapedPrefix,
		              type,
		              callback
		            ));
		      else if ("object" === type) {
		        if ("function" === typeof children.then)
		          return mapIntoArray(
		            resolveThenable(children),
		            array,
		            escapedPrefix,
		            nameSoFar,
		            callback
		          );
		        array = String(children);
		        throw Error(
		          "Objects are not valid as a React child (found: " +
		            ("[object Object]" === array
		              ? "object with keys {" + Object.keys(children).join(", ") + "}"
		              : array) +
		            "). If you meant to render a collection of children, use an array instead."
		        );
		      }
		      return invokeCallback;
		    }
		    function mapChildren(children, func, context) {
		      if (null == children) return children;
		      var result = [],
		        count = 0;
		      mapIntoArray(children, result, "", "", function (child) {
		        return func.call(context, child, count++);
		      });
		      return result;
		    }
		    function lazyInitializer(payload) {
		      if (-1 === payload._status) {
		        var ctor = payload._result;
		        ctor = ctor();
		        ctor.then(
		          function (moduleObject) {
		            if (0 === payload._status || -1 === payload._status)
		              (payload._status = 1), (payload._result = moduleObject);
		          },
		          function (error) {
		            if (0 === payload._status || -1 === payload._status)
		              (payload._status = 2), (payload._result = error);
		          }
		        );
		        -1 === payload._status &&
		          ((payload._status = 0), (payload._result = ctor));
		      }
		      if (1 === payload._status)
		        return (
		          (ctor = payload._result),
		          undefined === ctor &&
		            console.error(
		              "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?",
		              ctor
		            ),
		          "default" in ctor ||
		            console.error(
		              "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",
		              ctor
		            ),
		          ctor.default
		        );
		      throw payload._result;
		    }
		    function resolveDispatcher() {
		      var dispatcher = ReactSharedInternals.H;
		      null === dispatcher &&
		        console.error(
		          "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
		        );
		      return dispatcher;
		    }
		    function noop() {}
		    function enqueueTask(task) {
		      if (null === enqueueTaskImpl)
		        try {
		          var requireString = ("require" + Math.random()).slice(0, 7);
		          enqueueTaskImpl = (module && module[requireString]).call(
		            module,
		            "timers"
		          ).setImmediate;
		        } catch (_err) {
		          enqueueTaskImpl = function (callback) {
		            false === didWarnAboutMessageChannel &&
		              ((didWarnAboutMessageChannel = true),
		              "undefined" === typeof MessageChannel &&
		                console.error(
		                  "This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."
		                ));
		            var channel = new MessageChannel();
		            channel.port1.onmessage = callback;
		            channel.port2.postMessage(undefined);
		          };
		        }
		      return enqueueTaskImpl(task);
		    }
		    function aggregateErrors(errors) {
		      return 1 < errors.length && "function" === typeof AggregateError
		        ? new AggregateError(errors)
		        : errors[0];
		    }
		    function popActScope(prevActQueue, prevActScopeDepth) {
		      prevActScopeDepth !== actScopeDepth - 1 &&
		        console.error(
		          "You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "
		        );
		      actScopeDepth = prevActScopeDepth;
		    }
		    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
		      var queue = ReactSharedInternals.actQueue;
		      if (null !== queue)
		        if (0 !== queue.length)
		          try {
		            flushActQueue(queue);
		            enqueueTask(function () {
		              return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
		            });
		            return;
		          } catch (error) {
		            ReactSharedInternals.thrownErrors.push(error);
		          }
		        else ReactSharedInternals.actQueue = null;
		      0 < ReactSharedInternals.thrownErrors.length
		        ? ((queue = aggregateErrors(ReactSharedInternals.thrownErrors)),
		          (ReactSharedInternals.thrownErrors.length = 0),
		          reject(queue))
		        : resolve(returnValue);
		    }
		    function flushActQueue(queue) {
		      if (!isFlushing) {
		        isFlushing = true;
		        var i = 0;
		        try {
		          for (; i < queue.length; i++) {
		            var callback = queue[i];
		            do {
		              ReactSharedInternals.didUsePromise = !1;
		              var continuation = callback(!1);
		              if (null !== continuation) {
		                if (ReactSharedInternals.didUsePromise) {
		                  queue[i] = callback;
		                  queue.splice(0, i);
		                  return;
		                }
		                callback = continuation;
		              } else break;
		            } while (1);
		          }
		          queue.length = 0;
		        } catch (error) {
		          queue.splice(0, i + 1), ReactSharedInternals.thrownErrors.push(error);
		        } finally {
		          isFlushing = false;
		        }
		      }
		    }
		    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
		      "function" ===
		        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
		      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
		    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
		      REACT_PORTAL_TYPE = Symbol.for("react.portal"),
		      REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
		      REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
		      REACT_PROFILER_TYPE = Symbol.for("react.profiler");
		    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
		      REACT_CONTEXT_TYPE = Symbol.for("react.context"),
		      REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
		      REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
		      REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
		      REACT_MEMO_TYPE = Symbol.for("react.memo"),
		      REACT_LAZY_TYPE = Symbol.for("react.lazy"),
		      REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"),
		      MAYBE_ITERATOR_SYMBOL = Symbol.iterator,
		      didWarnStateUpdateForUnmountedComponent = {},
		      ReactNoopUpdateQueue = {
		        isMounted: function () {
		          return false;
		        },
		        enqueueForceUpdate: function (publicInstance) {
		          warnNoop(publicInstance, "forceUpdate");
		        },
		        enqueueReplaceState: function (publicInstance) {
		          warnNoop(publicInstance, "replaceState");
		        },
		        enqueueSetState: function (publicInstance) {
		          warnNoop(publicInstance, "setState");
		        }
		      },
		      assign = Object.assign,
		      emptyObject = {};
		    Object.freeze(emptyObject);
		    Component.prototype.isReactComponent = {};
		    Component.prototype.setState = function (partialState, callback) {
		      if (
		        "object" !== typeof partialState &&
		        "function" !== typeof partialState &&
		        null != partialState
		      )
		        throw Error(
		          "takes an object of state variables to update or a function which returns an object of state variables."
		        );
		      this.updater.enqueueSetState(this, partialState, callback, "setState");
		    };
		    Component.prototype.forceUpdate = function (callback) {
		      this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
		    };
		    var deprecatedAPIs = {
		        isMounted: [
		          "isMounted",
		          "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
		        ],
		        replaceState: [
		          "replaceState",
		          "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
		        ]
		      },
		      fnName;
		    for (fnName in deprecatedAPIs)
		      deprecatedAPIs.hasOwnProperty(fnName) &&
		        defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
		    ComponentDummy.prototype = Component.prototype;
		    deprecatedAPIs = PureComponent.prototype = new ComponentDummy();
		    deprecatedAPIs.constructor = PureComponent;
		    assign(deprecatedAPIs, Component.prototype);
		    deprecatedAPIs.isPureReactComponent = true;
		    var isArrayImpl = Array.isArray,
		      REACT_CLIENT_REFERENCE$2 = Symbol.for("react.client.reference"),
		      ReactSharedInternals = {
		        H: null,
		        A: null,
		        T: null,
		        S: null,
		        actQueue: null,
		        isBatchingLegacy: false,
		        didScheduleLegacyUpdate: false,
		        didUsePromise: false,
		        thrownErrors: [],
		        getCurrentStack: null
		      },
		      hasOwnProperty = Object.prototype.hasOwnProperty,
		      REACT_CLIENT_REFERENCE$1 = Symbol.for("react.client.reference"),
		      disabledDepth = 0,
		      prevLog,
		      prevInfo,
		      prevWarn,
		      prevError,
		      prevGroup,
		      prevGroupCollapsed,
		      prevGroupEnd;
		    disabledLog.__reactDisabledLog = true;
		    var prefix,
		      suffix,
		      reentry = false;
		    var componentFrameCache = new (
		      "function" === typeof WeakMap ? WeakMap : Map
		    )();
		    var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"),
		      specialPropKeyWarningShown,
		      didWarnAboutOldJSXRuntime;
		    var didWarnAboutElementRef = {};
		    var ownerHasKeyUseWarning = {},
		      didWarnAboutMaps = false,
		      userProvidedKeyEscapeRegex = /\/+/g,
		      reportGlobalError =
		        "function" === typeof reportError
		          ? reportError
		          : function (error) {
		              if (
		                "object" === typeof window &&
		                "function" === typeof window.ErrorEvent
		              ) {
		                var event = new window.ErrorEvent("error", {
		                  bubbles: true,
		                  cancelable: true,
		                  message:
		                    "object" === typeof error &&
		                    null !== error &&
		                    "string" === typeof error.message
		                      ? String(error.message)
		                      : String(error),
		                  error: error
		                });
		                if (!window.dispatchEvent(event)) return;
		              } else if (
		                "object" === typeof process &&
		                "function" === typeof process.emit
		              ) {
		                process.emit("uncaughtException", error);
		                return;
		              }
		              console.error(error);
		            },
		      didWarnAboutMessageChannel = false,
		      enqueueTaskImpl = null,
		      actScopeDepth = 0,
		      didWarnNoAwaitAct = false,
		      isFlushing = false,
		      queueSeveralMicrotasks =
		        "function" === typeof queueMicrotask
		          ? function (callback) {
		              queueMicrotask(function () {
		                return queueMicrotask(callback);
		              });
		            }
		          : enqueueTask;
		    exports.Children = {
		      map: mapChildren,
		      forEach: function (children, forEachFunc, forEachContext) {
		        mapChildren(
		          children,
		          function () {
		            forEachFunc.apply(this, arguments);
		          },
		          forEachContext
		        );
		      },
		      count: function (children) {
		        var n = 0;
		        mapChildren(children, function () {
		          n++;
		        });
		        return n;
		      },
		      toArray: function (children) {
		        return (
		          mapChildren(children, function (child) {
		            return child;
		          }) || []
		        );
		      },
		      only: function (children) {
		        if (!isValidElement(children))
		          throw Error(
		            "React.Children.only expected to receive a single React element child."
		          );
		        return children;
		      }
		    };
		    exports.Component = Component;
		    exports.Fragment = REACT_FRAGMENT_TYPE;
		    exports.Profiler = REACT_PROFILER_TYPE;
		    exports.PureComponent = PureComponent;
		    exports.StrictMode = REACT_STRICT_MODE_TYPE;
		    exports.Suspense = REACT_SUSPENSE_TYPE;
		    exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =
		      ReactSharedInternals;
		    exports.act = function (callback) {
		      var prevActQueue = ReactSharedInternals.actQueue,
		        prevActScopeDepth = actScopeDepth;
		      actScopeDepth++;
		      var queue = (ReactSharedInternals.actQueue =
		          null !== prevActQueue ? prevActQueue : []),
		        didAwaitActCall = false;
		      try {
		        var result = callback();
		      } catch (error) {
		        ReactSharedInternals.thrownErrors.push(error);
		      }
		      if (0 < ReactSharedInternals.thrownErrors.length)
		        throw (
		          (popActScope(prevActQueue, prevActScopeDepth),
		          (callback = aggregateErrors(ReactSharedInternals.thrownErrors)),
		          (ReactSharedInternals.thrownErrors.length = 0),
		          callback)
		        );
		      if (
		        null !== result &&
		        "object" === typeof result &&
		        "function" === typeof result.then
		      ) {
		        var thenable = result;
		        queueSeveralMicrotasks(function () {
		          didAwaitActCall ||
		            didWarnNoAwaitAct ||
		            ((didWarnNoAwaitAct = true),
		            console.error(
		              "You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"
		            ));
		        });
		        return {
		          then: function (resolve, reject) {
		            didAwaitActCall = true;
		            thenable.then(
		              function (returnValue) {
		                popActScope(prevActQueue, prevActScopeDepth);
		                if (0 === prevActScopeDepth) {
		                  try {
		                    flushActQueue(queue),
		                      enqueueTask(function () {
		                        return recursivelyFlushAsyncActWork(
		                          returnValue,
		                          resolve,
		                          reject
		                        );
		                      });
		                  } catch (error$2) {
		                    ReactSharedInternals.thrownErrors.push(error$2);
		                  }
		                  if (0 < ReactSharedInternals.thrownErrors.length) {
		                    var _thrownError = aggregateErrors(
		                      ReactSharedInternals.thrownErrors
		                    );
		                    ReactSharedInternals.thrownErrors.length = 0;
		                    reject(_thrownError);
		                  }
		                } else resolve(returnValue);
		              },
		              function (error) {
		                popActScope(prevActQueue, prevActScopeDepth);
		                0 < ReactSharedInternals.thrownErrors.length
		                  ? ((error = aggregateErrors(
		                      ReactSharedInternals.thrownErrors
		                    )),
		                    (ReactSharedInternals.thrownErrors.length = 0),
		                    reject(error))
		                  : reject(error);
		              }
		            );
		          }
		        };
		      }
		      var returnValue$jscomp$0 = result;
		      popActScope(prevActQueue, prevActScopeDepth);
		      0 === prevActScopeDepth &&
		        (flushActQueue(queue),
		        0 !== queue.length &&
		          queueSeveralMicrotasks(function () {
		            didAwaitActCall ||
		              didWarnNoAwaitAct ||
		              ((didWarnNoAwaitAct = true),
		              console.error(
		                "A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)"
		              ));
		          }),
		        (ReactSharedInternals.actQueue = null));
		      if (0 < ReactSharedInternals.thrownErrors.length)
		        throw (
		          ((callback = aggregateErrors(ReactSharedInternals.thrownErrors)),
		          (ReactSharedInternals.thrownErrors.length = 0),
		          callback)
		        );
		      return {
		        then: function (resolve, reject) {
		          didAwaitActCall = true;
		          0 === prevActScopeDepth
		            ? ((ReactSharedInternals.actQueue = queue),
		              enqueueTask(function () {
		                return recursivelyFlushAsyncActWork(
		                  returnValue$jscomp$0,
		                  resolve,
		                  reject
		                );
		              }))
		            : resolve(returnValue$jscomp$0);
		        }
		      };
		    };
		    exports.cache = function (fn) {
		      return function () {
		        return fn.apply(null, arguments);
		      };
		    };
		    exports.cloneElement = function (element, config, children) {
		      if (null === element || undefined === element)
		        throw Error(
		          "The argument must be a React element, but you passed " +
		            element +
		            "."
		        );
		      var props = assign({}, element.props),
		        key = element.key,
		        owner = element._owner;
		      if (null != config) {
		        var JSCompiler_inline_result;
		        a: {
		          if (
		            hasOwnProperty.call(config, "ref") &&
		            (JSCompiler_inline_result = Object.getOwnPropertyDescriptor(
		              config,
		              "ref"
		            ).get) &&
		            JSCompiler_inline_result.isReactWarning
		          ) {
		            JSCompiler_inline_result = false;
		            break a;
		          }
		          JSCompiler_inline_result = undefined !== config.ref;
		        }
		        JSCompiler_inline_result && (owner = getOwner());
		        hasValidKey(config) &&
		          (checkKeyStringCoercion(config.key), (key = "" + config.key));
		        for (propName in config)
		          !hasOwnProperty.call(config, propName) ||
		            "key" === propName ||
		            "__self" === propName ||
		            "__source" === propName ||
		            ("ref" === propName && undefined === config.ref) ||
		            (props[propName] = config[propName]);
		      }
		      var propName = arguments.length - 2;
		      if (1 === propName) props.children = children;
		      else if (1 < propName) {
		        JSCompiler_inline_result = Array(propName);
		        for (var i = 0; i < propName; i++)
		          JSCompiler_inline_result[i] = arguments[i + 2];
		        props.children = JSCompiler_inline_result;
		      }
		      props = ReactElement(element.type, key, undefined, undefined, owner, props);
		      for (key = 2; key < arguments.length; key++)
		        validateChildKeys(arguments[key], props.type);
		      return props;
		    };
		    exports.createContext = function (defaultValue) {
		      defaultValue = {
		        $$typeof: REACT_CONTEXT_TYPE,
		        _currentValue: defaultValue,
		        _currentValue2: defaultValue,
		        _threadCount: 0,
		        Provider: null,
		        Consumer: null
		      };
		      defaultValue.Provider = defaultValue;
		      defaultValue.Consumer = {
		        $$typeof: REACT_CONSUMER_TYPE,
		        _context: defaultValue
		      };
		      defaultValue._currentRenderer = null;
		      defaultValue._currentRenderer2 = null;
		      return defaultValue;
		    };
		    exports.createElement = function (type, config, children) {
		      if (isValidElementType(type))
		        for (var i = 2; i < arguments.length; i++)
		          validateChildKeys(arguments[i], type);
		      else {
		        i = "";
		        if (
		          undefined === type ||
		          ("object" === typeof type &&
		            null !== type &&
		            0 === Object.keys(type).length)
		        )
		          i +=
		            " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
		        if (null === type) var typeString = "null";
		        else
		          isArrayImpl(type)
		            ? (typeString = "array")
		            : undefined !== type && type.$$typeof === REACT_ELEMENT_TYPE
		              ? ((typeString =
		                  "<" +
		                  (getComponentNameFromType(type.type) || "Unknown") +
		                  " />"),
		                (i =
		                  " Did you accidentally export a JSX literal instead of a component?"))
		              : (typeString = typeof type);
		        console.error(
		          "React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",
		          typeString,
		          i
		        );
		      }
		      var propName;
		      i = {};
		      typeString = null;
		      if (null != config)
		        for (propName in (didWarnAboutOldJSXRuntime ||
		          !("__self" in config) ||
		          "key" in config ||
		          ((didWarnAboutOldJSXRuntime = true),
		          console.warn(
		            "Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform"
		          )),
		        hasValidKey(config) &&
		          (checkKeyStringCoercion(config.key), (typeString = "" + config.key)),
		        config))
		          hasOwnProperty.call(config, propName) &&
		            "key" !== propName &&
		            "__self" !== propName &&
		            "__source" !== propName &&
		            (i[propName] = config[propName]);
		      var childrenLength = arguments.length - 2;
		      if (1 === childrenLength) i.children = children;
		      else if (1 < childrenLength) {
		        for (
		          var childArray = Array(childrenLength), _i = 0;
		          _i < childrenLength;
		          _i++
		        )
		          childArray[_i] = arguments[_i + 2];
		        Object.freeze && Object.freeze(childArray);
		        i.children = childArray;
		      }
		      if (type && type.defaultProps)
		        for (propName in ((childrenLength = type.defaultProps), childrenLength))
		          undefined === i[propName] && (i[propName] = childrenLength[propName]);
		      typeString &&
		        defineKeyPropWarningGetter(
		          i,
		          "function" === typeof type
		            ? type.displayName || type.name || "Unknown"
		            : type
		        );
		      return ReactElement(type, typeString, undefined, undefined, getOwner(), i);
		    };
		    exports.createRef = function () {
		      var refObject = { current: null };
		      Object.seal(refObject);
		      return refObject;
		    };
		    exports.forwardRef = function (render) {
		      null != render && render.$$typeof === REACT_MEMO_TYPE
		        ? console.error(
		            "forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."
		          )
		        : "function" !== typeof render
		          ? console.error(
		              "forwardRef requires a render function but was given %s.",
		              null === render ? "null" : typeof render
		            )
		          : 0 !== render.length &&
		            2 !== render.length &&
		            console.error(
		              "forwardRef render functions accept exactly two parameters: props and ref. %s",
		              1 === render.length
		                ? "Did you forget to use the ref parameter?"
		                : "Any additional parameter will be undefined."
		            );
		      null != render &&
		        null != render.defaultProps &&
		        console.error(
		          "forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?"
		        );
		      var elementType = { $$typeof: REACT_FORWARD_REF_TYPE, render: render },
		        ownName;
		      Object.defineProperty(elementType, "displayName", {
		        enumerable: false,
		        configurable: true,
		        get: function () {
		          return ownName;
		        },
		        set: function (name) {
		          ownName = name;
		          render.name ||
		            render.displayName ||
		            (Object.defineProperty(render, "name", { value: name }),
		            (render.displayName = name));
		        }
		      });
		      return elementType;
		    };
		    exports.isValidElement = isValidElement;
		    exports.lazy = function (ctor) {
		      return {
		        $$typeof: REACT_LAZY_TYPE,
		        _payload: { _status: -1, _result: ctor },
		        _init: lazyInitializer
		      };
		    };
		    exports.memo = function (type, compare) {
		      isValidElementType(type) ||
		        console.error(
		          "memo: The first argument must be a component. Instead received: %s",
		          null === type ? "null" : typeof type
		        );
		      compare = {
		        $$typeof: REACT_MEMO_TYPE,
		        type: type,
		        compare: undefined === compare ? null : compare
		      };
		      var ownName;
		      Object.defineProperty(compare, "displayName", {
		        enumerable: false,
		        configurable: true,
		        get: function () {
		          return ownName;
		        },
		        set: function (name) {
		          ownName = name;
		          type.name ||
		            type.displayName ||
		            (Object.defineProperty(type, "name", { value: name }),
		            (type.displayName = name));
		        }
		      });
		      return compare;
		    };
		    exports.startTransition = function (scope) {
		      var prevTransition = ReactSharedInternals.T,
		        currentTransition = {};
		      ReactSharedInternals.T = currentTransition;
		      currentTransition._updatedFibers = new Set();
		      try {
		        var returnValue = scope(),
		          onStartTransitionFinish = ReactSharedInternals.S;
		        null !== onStartTransitionFinish &&
		          onStartTransitionFinish(currentTransition, returnValue);
		        "object" === typeof returnValue &&
		          null !== returnValue &&
		          "function" === typeof returnValue.then &&
		          returnValue.then(noop, reportGlobalError);
		      } catch (error) {
		        reportGlobalError(error);
		      } finally {
		        null === prevTransition &&
		          currentTransition._updatedFibers &&
		          ((scope = currentTransition._updatedFibers.size),
		          currentTransition._updatedFibers.clear(),
		          10 < scope &&
		            console.warn(
		              "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
		            )),
		          (ReactSharedInternals.T = prevTransition);
		      }
		    };
		    exports.unstable_useCacheRefresh = function () {
		      return resolveDispatcher().useCacheRefresh();
		    };
		    exports.use = function (usable) {
		      return resolveDispatcher().use(usable);
		    };
		    exports.useActionState = function (action, initialState, permalink) {
		      return resolveDispatcher().useActionState(
		        action,
		        initialState,
		        permalink
		      );
		    };
		    exports.useCallback = function (callback, deps) {
		      return resolveDispatcher().useCallback(callback, deps);
		    };
		    exports.useContext = function (Context) {
		      var dispatcher = resolveDispatcher();
		      Context.$$typeof === REACT_CONSUMER_TYPE &&
		        console.error(
		          "Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?"
		        );
		      return dispatcher.useContext(Context);
		    };
		    exports.useDebugValue = function (value, formatterFn) {
		      return resolveDispatcher().useDebugValue(value, formatterFn);
		    };
		    exports.useDeferredValue = function (value, initialValue) {
		      return resolveDispatcher().useDeferredValue(value, initialValue);
		    };
		    exports.useEffect = function (create, deps) {
		      return resolveDispatcher().useEffect(create, deps);
		    };
		    exports.useId = function () {
		      return resolveDispatcher().useId();
		    };
		    exports.useImperativeHandle = function (ref, create, deps) {
		      return resolveDispatcher().useImperativeHandle(ref, create, deps);
		    };
		    exports.useInsertionEffect = function (create, deps) {
		      return resolveDispatcher().useInsertionEffect(create, deps);
		    };
		    exports.useLayoutEffect = function (create, deps) {
		      return resolveDispatcher().useLayoutEffect(create, deps);
		    };
		    exports.useMemo = function (create, deps) {
		      return resolveDispatcher().useMemo(create, deps);
		    };
		    exports.useOptimistic = function (passthrough, reducer) {
		      return resolveDispatcher().useOptimistic(passthrough, reducer);
		    };
		    exports.useReducer = function (reducer, initialArg, init) {
		      return resolveDispatcher().useReducer(reducer, initialArg, init);
		    };
		    exports.useRef = function (initialValue) {
		      return resolveDispatcher().useRef(initialValue);
		    };
		    exports.useState = function (initialState) {
		      return resolveDispatcher().useState(initialState);
		    };
		    exports.useSyncExternalStore = function (
		      subscribe,
		      getSnapshot,
		      getServerSnapshot
		    ) {
		      return resolveDispatcher().useSyncExternalStore(
		        subscribe,
		        getSnapshot,
		        getServerSnapshot
		      );
		    };
		    exports.useTransition = function () {
		      return resolveDispatcher().useTransition();
		    };
		    exports.version = "19.0.0";
		    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
		      "function" ===
		        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
		      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
		  })(); 
	} (react_development, react_development.exports));
	return react_development.exports;
}

var hasRequiredReact;

function requireReact () {
	if (hasRequiredReact) return react.exports;
	hasRequiredReact = 1;

	if (process.env.NODE_ENV === 'production') {
	  react.exports = requireReact_production();
	} else {
	  react.exports = requireReact_development();
	}
	return react.exports;
}

var reactExports = requireReact();
var React = /*@__PURE__*/getDefaultExportFromCjs(reactExports);

var React$1 = /*#__PURE__*/_mergeNamespaces({
    __proto__: null,
    default: React
}, [reactExports]);

var client = {exports: {}};

var reactDomClient_production = {};

var scheduler = {exports: {}};

var scheduler_production = {};

/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredScheduler_production;

function requireScheduler_production () {
	if (hasRequiredScheduler_production) return scheduler_production;
	hasRequiredScheduler_production = 1;
	(function (exports) {
		function push(heap, node) {
		  var index = heap.length;
		  heap.push(node);
		  a: for (; 0 < index; ) {
		    var parentIndex = (index - 1) >>> 1,
		      parent = heap[parentIndex];
		    if (0 < compare(parent, node))
		      (heap[parentIndex] = node), (heap[index] = parent), (index = parentIndex);
		    else break a;
		  }
		}
		function peek(heap) {
		  return 0 === heap.length ? null : heap[0];
		}
		function pop(heap) {
		  if (0 === heap.length) return null;
		  var first = heap[0],
		    last = heap.pop();
		  if (last !== first) {
		    heap[0] = last;
		    a: for (
		      var index = 0, length = heap.length, halfLength = length >>> 1;
		      index < halfLength;

		    ) {
		      var leftIndex = 2 * (index + 1) - 1,
		        left = heap[leftIndex],
		        rightIndex = leftIndex + 1,
		        right = heap[rightIndex];
		      if (0 > compare(left, last))
		        rightIndex < length && 0 > compare(right, left)
		          ? ((heap[index] = right),
		            (heap[rightIndex] = last),
		            (index = rightIndex))
		          : ((heap[index] = left),
		            (heap[leftIndex] = last),
		            (index = leftIndex));
		      else if (rightIndex < length && 0 > compare(right, last))
		        (heap[index] = right), (heap[rightIndex] = last), (index = rightIndex);
		      else break a;
		    }
		  }
		  return first;
		}
		function compare(a, b) {
		  var diff = a.sortIndex - b.sortIndex;
		  return 0 !== diff ? diff : a.id - b.id;
		}
		exports.unstable_now = undefined;
		if ("object" === typeof performance && "function" === typeof performance.now) {
		  var localPerformance = performance;
		  exports.unstable_now = function () {
		    return localPerformance.now();
		  };
		} else {
		  var localDate = Date,
		    initialTime = localDate.now();
		  exports.unstable_now = function () {
		    return localDate.now() - initialTime;
		  };
		}
		var taskQueue = [],
		  timerQueue = [],
		  taskIdCounter = 1,
		  currentTask = null,
		  currentPriorityLevel = 3,
		  isPerformingWork = false,
		  isHostCallbackScheduled = false,
		  isHostTimeoutScheduled = false,
		  localSetTimeout = "function" === typeof setTimeout ? setTimeout : null,
		  localClearTimeout = "function" === typeof clearTimeout ? clearTimeout : null,
		  localSetImmediate = "undefined" !== typeof setImmediate ? setImmediate : null;
		function advanceTimers(currentTime) {
		  for (var timer = peek(timerQueue); null !== timer; ) {
		    if (null === timer.callback) pop(timerQueue);
		    else if (timer.startTime <= currentTime)
		      pop(timerQueue),
		        (timer.sortIndex = timer.expirationTime),
		        push(taskQueue, timer);
		    else break;
		    timer = peek(timerQueue);
		  }
		}
		function handleTimeout(currentTime) {
		  isHostTimeoutScheduled = false;
		  advanceTimers(currentTime);
		  if (!isHostCallbackScheduled)
		    if (null !== peek(taskQueue))
		      (isHostCallbackScheduled = true), requestHostCallback();
		    else {
		      var firstTimer = peek(timerQueue);
		      null !== firstTimer &&
		        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
		    }
		}
		var isMessageLoopRunning = false,
		  taskTimeoutID = -1,
		  frameInterval = 5,
		  startTime = -1;
		function shouldYieldToHost() {
		  return exports.unstable_now() - startTime < frameInterval ? false : true;
		}
		function performWorkUntilDeadline() {
		  if (isMessageLoopRunning) {
		    var currentTime = exports.unstable_now();
		    startTime = currentTime;
		    var hasMoreWork = true;
		    try {
		      a: {
		        isHostCallbackScheduled = !1;
		        isHostTimeoutScheduled &&
		          ((isHostTimeoutScheduled = !1),
		          localClearTimeout(taskTimeoutID),
		          (taskTimeoutID = -1));
		        isPerformingWork = !0;
		        var previousPriorityLevel = currentPriorityLevel;
		        try {
		          b: {
		            advanceTimers(currentTime);
		            for (
		              currentTask = peek(taskQueue);
		              null !== currentTask &&
		              !(
		                currentTask.expirationTime > currentTime && shouldYieldToHost()
		              );

		            ) {
		              var callback = currentTask.callback;
		              if ("function" === typeof callback) {
		                currentTask.callback = null;
		                currentPriorityLevel = currentTask.priorityLevel;
		                var continuationCallback = callback(
		                  currentTask.expirationTime <= currentTime
		                );
		                currentTime = exports.unstable_now();
		                if ("function" === typeof continuationCallback) {
		                  currentTask.callback = continuationCallback;
		                  advanceTimers(currentTime);
		                  hasMoreWork = !0;
		                  break b;
		                }
		                currentTask === peek(taskQueue) && pop(taskQueue);
		                advanceTimers(currentTime);
		              } else pop(taskQueue);
		              currentTask = peek(taskQueue);
		            }
		            if (null !== currentTask) hasMoreWork = !0;
		            else {
		              var firstTimer = peek(timerQueue);
		              null !== firstTimer &&
		                requestHostTimeout(
		                  handleTimeout,
		                  firstTimer.startTime - currentTime
		                );
		              hasMoreWork = !1;
		            }
		          }
		          break a;
		        } finally {
		          (currentTask = null),
		            (currentPriorityLevel = previousPriorityLevel),
		            (isPerformingWork = !1);
		        }
		        hasMoreWork = void 0;
		      }
		    } finally {
		      hasMoreWork
		        ? schedulePerformWorkUntilDeadline()
		        : (isMessageLoopRunning = false);
		    }
		  }
		}
		var schedulePerformWorkUntilDeadline;
		if ("function" === typeof localSetImmediate)
		  schedulePerformWorkUntilDeadline = function () {
		    localSetImmediate(performWorkUntilDeadline);
		  };
		else if ("undefined" !== typeof MessageChannel) {
		  var channel = new MessageChannel(),
		    port = channel.port2;
		  channel.port1.onmessage = performWorkUntilDeadline;
		  schedulePerformWorkUntilDeadline = function () {
		    port.postMessage(null);
		  };
		} else
		  schedulePerformWorkUntilDeadline = function () {
		    localSetTimeout(performWorkUntilDeadline, 0);
		  };
		function requestHostCallback() {
		  isMessageLoopRunning ||
		    ((isMessageLoopRunning = true), schedulePerformWorkUntilDeadline());
		}
		function requestHostTimeout(callback, ms) {
		  taskTimeoutID = localSetTimeout(function () {
		    callback(exports.unstable_now());
		  }, ms);
		}
		exports.unstable_IdlePriority = 5;
		exports.unstable_ImmediatePriority = 1;
		exports.unstable_LowPriority = 4;
		exports.unstable_NormalPriority = 3;
		exports.unstable_Profiling = null;
		exports.unstable_UserBlockingPriority = 2;
		exports.unstable_cancelCallback = function (task) {
		  task.callback = null;
		};
		exports.unstable_continueExecution = function () {
		  isHostCallbackScheduled ||
		    isPerformingWork ||
		    ((isHostCallbackScheduled = true), requestHostCallback());
		};
		exports.unstable_forceFrameRate = function (fps) {
		  0 > fps || 125 < fps
		    ? console.error(
		        "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
		      )
		    : (frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5);
		};
		exports.unstable_getCurrentPriorityLevel = function () {
		  return currentPriorityLevel;
		};
		exports.unstable_getFirstCallbackNode = function () {
		  return peek(taskQueue);
		};
		exports.unstable_next = function (eventHandler) {
		  switch (currentPriorityLevel) {
		    case 1:
		    case 2:
		    case 3:
		      var priorityLevel = 3;
		      break;
		    default:
		      priorityLevel = currentPriorityLevel;
		  }
		  var previousPriorityLevel = currentPriorityLevel;
		  currentPriorityLevel = priorityLevel;
		  try {
		    return eventHandler();
		  } finally {
		    currentPriorityLevel = previousPriorityLevel;
		  }
		};
		exports.unstable_pauseExecution = function () {};
		exports.unstable_requestPaint = function () {};
		exports.unstable_runWithPriority = function (priorityLevel, eventHandler) {
		  switch (priorityLevel) {
		    case 1:
		    case 2:
		    case 3:
		    case 4:
		    case 5:
		      break;
		    default:
		      priorityLevel = 3;
		  }
		  var previousPriorityLevel = currentPriorityLevel;
		  currentPriorityLevel = priorityLevel;
		  try {
		    return eventHandler();
		  } finally {
		    currentPriorityLevel = previousPriorityLevel;
		  }
		};
		exports.unstable_scheduleCallback = function (
		  priorityLevel,
		  callback,
		  options
		) {
		  var currentTime = exports.unstable_now();
		  "object" === typeof options && null !== options
		    ? ((options = options.delay),
		      (options =
		        "number" === typeof options && 0 < options
		          ? currentTime + options
		          : currentTime))
		    : (options = currentTime);
		  switch (priorityLevel) {
		    case 1:
		      var timeout = -1;
		      break;
		    case 2:
		      timeout = 250;
		      break;
		    case 5:
		      timeout = 1073741823;
		      break;
		    case 4:
		      timeout = 1e4;
		      break;
		    default:
		      timeout = 5e3;
		  }
		  timeout = options + timeout;
		  priorityLevel = {
		    id: taskIdCounter++,
		    callback: callback,
		    priorityLevel: priorityLevel,
		    startTime: options,
		    expirationTime: timeout,
		    sortIndex: -1
		  };
		  options > currentTime
		    ? ((priorityLevel.sortIndex = options),
		      push(timerQueue, priorityLevel),
		      null === peek(taskQueue) &&
		        priorityLevel === peek(timerQueue) &&
		        (isHostTimeoutScheduled
		          ? (localClearTimeout(taskTimeoutID), (taskTimeoutID = -1))
		          : (isHostTimeoutScheduled = true),
		        requestHostTimeout(handleTimeout, options - currentTime)))
		    : ((priorityLevel.sortIndex = timeout),
		      push(taskQueue, priorityLevel),
		      isHostCallbackScheduled ||
		        isPerformingWork ||
		        ((isHostCallbackScheduled = true), requestHostCallback()));
		  return priorityLevel;
		};
		exports.unstable_shouldYield = shouldYieldToHost;
		exports.unstable_wrapCallback = function (callback) {
		  var parentPriorityLevel = currentPriorityLevel;
		  return function () {
		    var previousPriorityLevel = currentPriorityLevel;
		    currentPriorityLevel = parentPriorityLevel;
		    try {
		      return callback.apply(this, arguments);
		    } finally {
		      currentPriorityLevel = previousPriorityLevel;
		    }
		  };
		}; 
	} (scheduler_production));
	return scheduler_production;
}

var scheduler_development = {};

/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredScheduler_development;

function requireScheduler_development () {
	if (hasRequiredScheduler_development) return scheduler_development;
	hasRequiredScheduler_development = 1;
	(function (exports) {
		"production" !== process.env.NODE_ENV &&
		  (function () {
		    function performWorkUntilDeadline() {
		      if (isMessageLoopRunning) {
		        var currentTime = exports.unstable_now();
		        startTime = currentTime;
		        var hasMoreWork = true;
		        try {
		          a: {
		            isHostCallbackScheduled = !1;
		            isHostTimeoutScheduled &&
		              ((isHostTimeoutScheduled = !1),
		              localClearTimeout(taskTimeoutID),
		              (taskTimeoutID = -1));
		            isPerformingWork = !0;
		            var previousPriorityLevel = currentPriorityLevel;
		            try {
		              b: {
		                advanceTimers(currentTime);
		                for (
		                  currentTask = peek(taskQueue);
		                  null !== currentTask &&
		                  !(
		                    currentTask.expirationTime > currentTime &&
		                    shouldYieldToHost()
		                  );

		                ) {
		                  var callback = currentTask.callback;
		                  if ("function" === typeof callback) {
		                    currentTask.callback = null;
		                    currentPriorityLevel = currentTask.priorityLevel;
		                    var continuationCallback = callback(
		                      currentTask.expirationTime <= currentTime
		                    );
		                    currentTime = exports.unstable_now();
		                    if ("function" === typeof continuationCallback) {
		                      currentTask.callback = continuationCallback;
		                      advanceTimers(currentTime);
		                      hasMoreWork = !0;
		                      break b;
		                    }
		                    currentTask === peek(taskQueue) && pop(taskQueue);
		                    advanceTimers(currentTime);
		                  } else pop(taskQueue);
		                  currentTask = peek(taskQueue);
		                }
		                if (null !== currentTask) hasMoreWork = !0;
		                else {
		                  var firstTimer = peek(timerQueue);
		                  null !== firstTimer &&
		                    requestHostTimeout(
		                      handleTimeout,
		                      firstTimer.startTime - currentTime
		                    );
		                  hasMoreWork = !1;
		                }
		              }
		              break a;
		            } finally {
		              (currentTask = null),
		                (currentPriorityLevel = previousPriorityLevel),
		                (isPerformingWork = !1);
		            }
		            hasMoreWork = void 0;
		          }
		        } finally {
		          hasMoreWork
		            ? schedulePerformWorkUntilDeadline()
		            : (isMessageLoopRunning = false);
		        }
		      }
		    }
		    function push(heap, node) {
		      var index = heap.length;
		      heap.push(node);
		      a: for (; 0 < index; ) {
		        var parentIndex = (index - 1) >>> 1,
		          parent = heap[parentIndex];
		        if (0 < compare(parent, node))
		          (heap[parentIndex] = node),
		            (heap[index] = parent),
		            (index = parentIndex);
		        else break a;
		      }
		    }
		    function peek(heap) {
		      return 0 === heap.length ? null : heap[0];
		    }
		    function pop(heap) {
		      if (0 === heap.length) return null;
		      var first = heap[0],
		        last = heap.pop();
		      if (last !== first) {
		        heap[0] = last;
		        a: for (
		          var index = 0, length = heap.length, halfLength = length >>> 1;
		          index < halfLength;

		        ) {
		          var leftIndex = 2 * (index + 1) - 1,
		            left = heap[leftIndex],
		            rightIndex = leftIndex + 1,
		            right = heap[rightIndex];
		          if (0 > compare(left, last))
		            rightIndex < length && 0 > compare(right, left)
		              ? ((heap[index] = right),
		                (heap[rightIndex] = last),
		                (index = rightIndex))
		              : ((heap[index] = left),
		                (heap[leftIndex] = last),
		                (index = leftIndex));
		          else if (rightIndex < length && 0 > compare(right, last))
		            (heap[index] = right),
		              (heap[rightIndex] = last),
		              (index = rightIndex);
		          else break a;
		        }
		      }
		      return first;
		    }
		    function compare(a, b) {
		      var diff = a.sortIndex - b.sortIndex;
		      return 0 !== diff ? diff : a.id - b.id;
		    }
		    function advanceTimers(currentTime) {
		      for (var timer = peek(timerQueue); null !== timer; ) {
		        if (null === timer.callback) pop(timerQueue);
		        else if (timer.startTime <= currentTime)
		          pop(timerQueue),
		            (timer.sortIndex = timer.expirationTime),
		            push(taskQueue, timer);
		        else break;
		        timer = peek(timerQueue);
		      }
		    }
		    function handleTimeout(currentTime) {
		      isHostTimeoutScheduled = false;
		      advanceTimers(currentTime);
		      if (!isHostCallbackScheduled)
		        if (null !== peek(taskQueue))
		          (isHostCallbackScheduled = true), requestHostCallback();
		        else {
		          var firstTimer = peek(timerQueue);
		          null !== firstTimer &&
		            requestHostTimeout(
		              handleTimeout,
		              firstTimer.startTime - currentTime
		            );
		        }
		    }
		    function shouldYieldToHost() {
		      return exports.unstable_now() - startTime < frameInterval ? false : true;
		    }
		    function requestHostCallback() {
		      isMessageLoopRunning ||
		        ((isMessageLoopRunning = true), schedulePerformWorkUntilDeadline());
		    }
		    function requestHostTimeout(callback, ms) {
		      taskTimeoutID = localSetTimeout(function () {
		        callback(exports.unstable_now());
		      }, ms);
		    }
		    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
		      "function" ===
		        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
		      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
		    exports.unstable_now = undefined;
		    if (
		      "object" === typeof performance &&
		      "function" === typeof performance.now
		    ) {
		      var localPerformance = performance;
		      exports.unstable_now = function () {
		        return localPerformance.now();
		      };
		    } else {
		      var localDate = Date,
		        initialTime = localDate.now();
		      exports.unstable_now = function () {
		        return localDate.now() - initialTime;
		      };
		    }
		    var taskQueue = [],
		      timerQueue = [],
		      taskIdCounter = 1,
		      currentTask = null,
		      currentPriorityLevel = 3,
		      isPerformingWork = false,
		      isHostCallbackScheduled = false,
		      isHostTimeoutScheduled = false,
		      localSetTimeout = "function" === typeof setTimeout ? setTimeout : null,
		      localClearTimeout =
		        "function" === typeof clearTimeout ? clearTimeout : null,
		      localSetImmediate =
		        "undefined" !== typeof setImmediate ? setImmediate : null,
		      isMessageLoopRunning = false,
		      taskTimeoutID = -1,
		      frameInterval = 5,
		      startTime = -1;
		    if ("function" === typeof localSetImmediate)
		      var schedulePerformWorkUntilDeadline = function () {
		        localSetImmediate(performWorkUntilDeadline);
		      };
		    else if ("undefined" !== typeof MessageChannel) {
		      var channel = new MessageChannel(),
		        port = channel.port2;
		      channel.port1.onmessage = performWorkUntilDeadline;
		      schedulePerformWorkUntilDeadline = function () {
		        port.postMessage(null);
		      };
		    } else
		      schedulePerformWorkUntilDeadline = function () {
		        localSetTimeout(performWorkUntilDeadline, 0);
		      };
		    exports.unstable_IdlePriority = 5;
		    exports.unstable_ImmediatePriority = 1;
		    exports.unstable_LowPriority = 4;
		    exports.unstable_NormalPriority = 3;
		    exports.unstable_Profiling = null;
		    exports.unstable_UserBlockingPriority = 2;
		    exports.unstable_cancelCallback = function (task) {
		      task.callback = null;
		    };
		    exports.unstable_continueExecution = function () {
		      isHostCallbackScheduled ||
		        isPerformingWork ||
		        ((isHostCallbackScheduled = true), requestHostCallback());
		    };
		    exports.unstable_forceFrameRate = function (fps) {
		      0 > fps || 125 < fps
		        ? console.error(
		            "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
		          )
		        : (frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5);
		    };
		    exports.unstable_getCurrentPriorityLevel = function () {
		      return currentPriorityLevel;
		    };
		    exports.unstable_getFirstCallbackNode = function () {
		      return peek(taskQueue);
		    };
		    exports.unstable_next = function (eventHandler) {
		      switch (currentPriorityLevel) {
		        case 1:
		        case 2:
		        case 3:
		          var priorityLevel = 3;
		          break;
		        default:
		          priorityLevel = currentPriorityLevel;
		      }
		      var previousPriorityLevel = currentPriorityLevel;
		      currentPriorityLevel = priorityLevel;
		      try {
		        return eventHandler();
		      } finally {
		        currentPriorityLevel = previousPriorityLevel;
		      }
		    };
		    exports.unstable_pauseExecution = function () {};
		    exports.unstable_requestPaint = function () {};
		    exports.unstable_runWithPriority = function (priorityLevel, eventHandler) {
		      switch (priorityLevel) {
		        case 1:
		        case 2:
		        case 3:
		        case 4:
		        case 5:
		          break;
		        default:
		          priorityLevel = 3;
		      }
		      var previousPriorityLevel = currentPriorityLevel;
		      currentPriorityLevel = priorityLevel;
		      try {
		        return eventHandler();
		      } finally {
		        currentPriorityLevel = previousPriorityLevel;
		      }
		    };
		    exports.unstable_scheduleCallback = function (
		      priorityLevel,
		      callback,
		      options
		    ) {
		      var currentTime = exports.unstable_now();
		      "object" === typeof options && null !== options
		        ? ((options = options.delay),
		          (options =
		            "number" === typeof options && 0 < options
		              ? currentTime + options
		              : currentTime))
		        : (options = currentTime);
		      switch (priorityLevel) {
		        case 1:
		          var timeout = -1;
		          break;
		        case 2:
		          timeout = 250;
		          break;
		        case 5:
		          timeout = 1073741823;
		          break;
		        case 4:
		          timeout = 1e4;
		          break;
		        default:
		          timeout = 5e3;
		      }
		      timeout = options + timeout;
		      priorityLevel = {
		        id: taskIdCounter++,
		        callback: callback,
		        priorityLevel: priorityLevel,
		        startTime: options,
		        expirationTime: timeout,
		        sortIndex: -1
		      };
		      options > currentTime
		        ? ((priorityLevel.sortIndex = options),
		          push(timerQueue, priorityLevel),
		          null === peek(taskQueue) &&
		            priorityLevel === peek(timerQueue) &&
		            (isHostTimeoutScheduled
		              ? (localClearTimeout(taskTimeoutID), (taskTimeoutID = -1))
		              : (isHostTimeoutScheduled = true),
		            requestHostTimeout(handleTimeout, options - currentTime)))
		        : ((priorityLevel.sortIndex = timeout),
		          push(taskQueue, priorityLevel),
		          isHostCallbackScheduled ||
		            isPerformingWork ||
		            ((isHostCallbackScheduled = true), requestHostCallback()));
		      return priorityLevel;
		    };
		    exports.unstable_shouldYield = shouldYieldToHost;
		    exports.unstable_wrapCallback = function (callback) {
		      var parentPriorityLevel = currentPriorityLevel;
		      return function () {
		        var previousPriorityLevel = currentPriorityLevel;
		        currentPriorityLevel = parentPriorityLevel;
		        try {
		          return callback.apply(this, arguments);
		        } finally {
		          currentPriorityLevel = previousPriorityLevel;
		        }
		      };
		    };
		    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
		      "function" ===
		        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
		      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
		  })(); 
	} (scheduler_development));
	return scheduler_development;
}

var hasRequiredScheduler;

function requireScheduler () {
	if (hasRequiredScheduler) return scheduler.exports;
	hasRequiredScheduler = 1;

	if (process.env.NODE_ENV === 'production') {
	  scheduler.exports = requireScheduler_production();
	} else {
	  scheduler.exports = requireScheduler_development();
	}
	return scheduler.exports;
}

var reactDom = {exports: {}};

var reactDom_production = {};

/**
 * @license React
 * react-dom.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactDom_production;

function requireReactDom_production () {
	if (hasRequiredReactDom_production) return reactDom_production;
	hasRequiredReactDom_production = 1;
	var React = requireReact();
	function formatProdErrorMessage(code) {
	  var url = "https://react.dev/errors/" + code;
	  if (1 < arguments.length) {
	    url += "?args[]=" + encodeURIComponent(arguments[1]);
	    for (var i = 2; i < arguments.length; i++)
	      url += "&args[]=" + encodeURIComponent(arguments[i]);
	  }
	  return (
	    "Minified React error #" +
	    code +
	    "; visit " +
	    url +
	    " for the full message or use the non-minified dev environment for full errors and additional helpful warnings."
	  );
	}
	function noop() {}
	var Internals = {
	    d: {
	      f: noop,
	      r: function () {
	        throw Error(formatProdErrorMessage(522));
	      },
	      D: noop,
	      C: noop,
	      L: noop,
	      m: noop,
	      X: noop,
	      S: noop,
	      M: noop
	    },
	    p: 0,
	    findDOMNode: null
	  },
	  REACT_PORTAL_TYPE = Symbol.for("react.portal");
	function createPortal$1(children, containerInfo, implementation) {
	  var key =
	    3 < arguments.length && undefined !== arguments[3] ? arguments[3] : null;
	  return {
	    $$typeof: REACT_PORTAL_TYPE,
	    key: null == key ? null : "" + key,
	    children: children,
	    containerInfo: containerInfo,
	    implementation: implementation
	  };
	}
	var ReactSharedInternals =
	  React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
	function getCrossOriginStringAs(as, input) {
	  if ("font" === as) return "";
	  if ("string" === typeof input)
	    return "use-credentials" === input ? input : "";
	}
	reactDom_production.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =
	  Internals;
	reactDom_production.createPortal = function (children, container) {
	  var key =
	    2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null;
	  if (
	    !container ||
	    (1 !== container.nodeType &&
	      9 !== container.nodeType &&
	      11 !== container.nodeType)
	  )
	    throw Error(formatProdErrorMessage(299));
	  return createPortal$1(children, container, null, key);
	};
	reactDom_production.flushSync = function (fn) {
	  var previousTransition = ReactSharedInternals.T,
	    previousUpdatePriority = Internals.p;
	  try {
	    if (((ReactSharedInternals.T = null), (Internals.p = 2), fn)) return fn();
	  } finally {
	    (ReactSharedInternals.T = previousTransition),
	      (Internals.p = previousUpdatePriority),
	      Internals.d.f();
	  }
	};
	reactDom_production.preconnect = function (href, options) {
	  "string" === typeof href &&
	    (options
	      ? ((options = options.crossOrigin),
	        (options =
	          "string" === typeof options
	            ? "use-credentials" === options
	              ? options
	              : ""
	            : undefined))
	      : (options = null),
	    Internals.d.C(href, options));
	};
	reactDom_production.prefetchDNS = function (href) {
	  "string" === typeof href && Internals.d.D(href);
	};
	reactDom_production.preinit = function (href, options) {
	  if ("string" === typeof href && options && "string" === typeof options.as) {
	    var as = options.as,
	      crossOrigin = getCrossOriginStringAs(as, options.crossOrigin),
	      integrity =
	        "string" === typeof options.integrity ? options.integrity : undefined,
	      fetchPriority =
	        "string" === typeof options.fetchPriority
	          ? options.fetchPriority
	          : undefined;
	    "style" === as
	      ? Internals.d.S(
	          href,
	          "string" === typeof options.precedence ? options.precedence : undefined,
	          {
	            crossOrigin: crossOrigin,
	            integrity: integrity,
	            fetchPriority: fetchPriority
	          }
	        )
	      : "script" === as &&
	        Internals.d.X(href, {
	          crossOrigin: crossOrigin,
	          integrity: integrity,
	          fetchPriority: fetchPriority,
	          nonce: "string" === typeof options.nonce ? options.nonce : undefined
	        });
	  }
	};
	reactDom_production.preinitModule = function (href, options) {
	  if ("string" === typeof href)
	    if ("object" === typeof options && null !== options) {
	      if (null == options.as || "script" === options.as) {
	        var crossOrigin = getCrossOriginStringAs(
	          options.as,
	          options.crossOrigin
	        );
	        Internals.d.M(href, {
	          crossOrigin: crossOrigin,
	          integrity:
	            "string" === typeof options.integrity ? options.integrity : undefined,
	          nonce: "string" === typeof options.nonce ? options.nonce : undefined
	        });
	      }
	    } else null == options && Internals.d.M(href);
	};
	reactDom_production.preload = function (href, options) {
	  if (
	    "string" === typeof href &&
	    "object" === typeof options &&
	    null !== options &&
	    "string" === typeof options.as
	  ) {
	    var as = options.as,
	      crossOrigin = getCrossOriginStringAs(as, options.crossOrigin);
	    Internals.d.L(href, as, {
	      crossOrigin: crossOrigin,
	      integrity:
	        "string" === typeof options.integrity ? options.integrity : undefined,
	      nonce: "string" === typeof options.nonce ? options.nonce : undefined,
	      type: "string" === typeof options.type ? options.type : undefined,
	      fetchPriority:
	        "string" === typeof options.fetchPriority
	          ? options.fetchPriority
	          : undefined,
	      referrerPolicy:
	        "string" === typeof options.referrerPolicy
	          ? options.referrerPolicy
	          : undefined,
	      imageSrcSet:
	        "string" === typeof options.imageSrcSet ? options.imageSrcSet : undefined,
	      imageSizes:
	        "string" === typeof options.imageSizes ? options.imageSizes : undefined,
	      media: "string" === typeof options.media ? options.media : undefined
	    });
	  }
	};
	reactDom_production.preloadModule = function (href, options) {
	  if ("string" === typeof href)
	    if (options) {
	      var crossOrigin = getCrossOriginStringAs(options.as, options.crossOrigin);
	      Internals.d.m(href, {
	        as:
	          "string" === typeof options.as && "script" !== options.as
	            ? options.as
	            : undefined,
	        crossOrigin: crossOrigin,
	        integrity:
	          "string" === typeof options.integrity ? options.integrity : undefined
	      });
	    } else Internals.d.m(href);
	};
	reactDom_production.requestFormReset = function (form) {
	  Internals.d.r(form);
	};
	reactDom_production.unstable_batchedUpdates = function (fn, a) {
	  return fn(a);
	};
	reactDom_production.useFormState = function (action, initialState, permalink) {
	  return ReactSharedInternals.H.useFormState(action, initialState, permalink);
	};
	reactDom_production.useFormStatus = function () {
	  return ReactSharedInternals.H.useHostTransitionStatus();
	};
	reactDom_production.version = "19.0.0";
	return reactDom_production;
}

var reactDom_development = {};

/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactDom_development;

function requireReactDom_development () {
	if (hasRequiredReactDom_development) return reactDom_development;
	hasRequiredReactDom_development = 1;
	"production" !== process.env.NODE_ENV &&
	  (function () {
	    function noop() {}
	    function testStringCoercion(value) {
	      return "" + value;
	    }
	    function createPortal$1(children, containerInfo, implementation) {
	      var key =
	        3 < arguments.length && undefined !== arguments[3] ? arguments[3] : null;
	      try {
	        testStringCoercion(key);
	        var JSCompiler_inline_result = !1;
	      } catch (e) {
	        JSCompiler_inline_result = true;
	      }
	      JSCompiler_inline_result &&
	        (console.error(
	          "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
	          ("function" === typeof Symbol &&
	            Symbol.toStringTag &&
	            key[Symbol.toStringTag]) ||
	            key.constructor.name ||
	            "Object"
	        ),
	        testStringCoercion(key));
	      return {
	        $$typeof: REACT_PORTAL_TYPE,
	        key: null == key ? null : "" + key,
	        children: children,
	        containerInfo: containerInfo,
	        implementation: implementation
	      };
	    }
	    function getCrossOriginStringAs(as, input) {
	      if ("font" === as) return "";
	      if ("string" === typeof input)
	        return "use-credentials" === input ? input : "";
	    }
	    function getValueDescriptorExpectingObjectForWarning(thing) {
	      return null === thing
	        ? "`null`"
	        : undefined === thing
	          ? "`undefined`"
	          : "" === thing
	            ? "an empty string"
	            : 'something with type "' + typeof thing + '"';
	    }
	    function getValueDescriptorExpectingEnumForWarning(thing) {
	      return null === thing
	        ? "`null`"
	        : undefined === thing
	          ? "`undefined`"
	          : "" === thing
	            ? "an empty string"
	            : "string" === typeof thing
	              ? JSON.stringify(thing)
	              : "number" === typeof thing
	                ? "`" + thing + "`"
	                : 'something with type "' + typeof thing + '"';
	    }
	    function resolveDispatcher() {
	      var dispatcher = ReactSharedInternals.H;
	      null === dispatcher &&
	        console.error(
	          "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
	        );
	      return dispatcher;
	    }
	    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
	      "function" ===
	        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
	      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
	    var React = requireReact(),
	      Internals = {
	        d: {
	          f: noop,
	          r: function () {
	            throw Error(
	              "Invalid form element. requestFormReset must be passed a form that was rendered by React."
	            );
	          },
	          D: noop,
	          C: noop,
	          L: noop,
	          m: noop,
	          X: noop,
	          S: noop,
	          M: noop
	        },
	        p: 0,
	        findDOMNode: null
	      },
	      REACT_PORTAL_TYPE = Symbol.for("react.portal"),
	      ReactSharedInternals =
	        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
	    ("function" === typeof Map &&
	      null != Map.prototype &&
	      "function" === typeof Map.prototype.forEach &&
	      "function" === typeof Set &&
	      null != Set.prototype &&
	      "function" === typeof Set.prototype.clear &&
	      "function" === typeof Set.prototype.forEach) ||
	      console.error(
	        "React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"
	      );
	    reactDom_development.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =
	      Internals;
	    reactDom_development.createPortal = function (children, container) {
	      var key =
	        2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null;
	      if (
	        !container ||
	        (1 !== container.nodeType &&
	          9 !== container.nodeType &&
	          11 !== container.nodeType)
	      )
	        throw Error("Target container is not a DOM element.");
	      return createPortal$1(children, container, null, key);
	    };
	    reactDom_development.flushSync = function (fn) {
	      var previousTransition = ReactSharedInternals.T,
	        previousUpdatePriority = Internals.p;
	      try {
	        if (((ReactSharedInternals.T = null), (Internals.p = 2), fn))
	          return fn();
	      } finally {
	        (ReactSharedInternals.T = previousTransition),
	          (Internals.p = previousUpdatePriority),
	          Internals.d.f() &&
	            console.error(
	              "flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."
	            );
	      }
	    };
	    reactDom_development.preconnect = function (href, options) {
	      "string" === typeof href && href
	        ? null != options && "object" !== typeof options
	          ? console.error(
	              "ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.",
	              getValueDescriptorExpectingEnumForWarning(options)
	            )
	          : null != options &&
	            "string" !== typeof options.crossOrigin &&
	            console.error(
	              "ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.",
	              getValueDescriptorExpectingObjectForWarning(options.crossOrigin)
	            )
	        : console.error(
	            "ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
	            getValueDescriptorExpectingObjectForWarning(href)
	          );
	      "string" === typeof href &&
	        (options
	          ? ((options = options.crossOrigin),
	            (options =
	              "string" === typeof options
	                ? "use-credentials" === options
	                  ? options
	                  : ""
	                : undefined))
	          : (options = null),
	        Internals.d.C(href, options));
	    };
	    reactDom_development.prefetchDNS = function (href) {
	      if ("string" !== typeof href || !href)
	        console.error(
	          "ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
	          getValueDescriptorExpectingObjectForWarning(href)
	        );
	      else if (1 < arguments.length) {
	        var options = arguments[1];
	        "object" === typeof options && options.hasOwnProperty("crossOrigin")
	          ? console.error(
	              "ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",
	              getValueDescriptorExpectingEnumForWarning(options)
	            )
	          : console.error(
	              "ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",
	              getValueDescriptorExpectingEnumForWarning(options)
	            );
	      }
	      "string" === typeof href && Internals.d.D(href);
	    };
	    reactDom_development.preinit = function (href, options) {
	      "string" === typeof href && href
	        ? null == options || "object" !== typeof options
	          ? console.error(
	              "ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.",
	              getValueDescriptorExpectingEnumForWarning(options)
	            )
	          : "style" !== options.as &&
	            "script" !== options.as &&
	            console.error(
	              'ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are "style" and "script".',
	              getValueDescriptorExpectingEnumForWarning(options.as)
	            )
	        : console.error(
	            "ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
	            getValueDescriptorExpectingObjectForWarning(href)
	          );
	      if (
	        "string" === typeof href &&
	        options &&
	        "string" === typeof options.as
	      ) {
	        var as = options.as,
	          crossOrigin = getCrossOriginStringAs(as, options.crossOrigin),
	          integrity =
	            "string" === typeof options.integrity ? options.integrity : undefined,
	          fetchPriority =
	            "string" === typeof options.fetchPriority
	              ? options.fetchPriority
	              : undefined;
	        "style" === as
	          ? Internals.d.S(
	              href,
	              "string" === typeof options.precedence
	                ? options.precedence
	                : undefined,
	              {
	                crossOrigin: crossOrigin,
	                integrity: integrity,
	                fetchPriority: fetchPriority
	              }
	            )
	          : "script" === as &&
	            Internals.d.X(href, {
	              crossOrigin: crossOrigin,
	              integrity: integrity,
	              fetchPriority: fetchPriority,
	              nonce: "string" === typeof options.nonce ? options.nonce : undefined
	            });
	      }
	    };
	    reactDom_development.preinitModule = function (href, options) {
	      var encountered = "";
	      ("string" === typeof href && href) ||
	        (encountered +=
	          " The `href` argument encountered was " +
	          getValueDescriptorExpectingObjectForWarning(href) +
	          ".");
	      undefined !== options && "object" !== typeof options
	        ? (encountered +=
	            " The `options` argument encountered was " +
	            getValueDescriptorExpectingObjectForWarning(options) +
	            ".")
	        : options &&
	          "as" in options &&
	          "script" !== options.as &&
	          (encountered +=
	            " The `as` option encountered was " +
	            getValueDescriptorExpectingEnumForWarning(options.as) +
	            ".");
	      if (encountered)
	        console.error(
	          "ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s",
	          encountered
	        );
	      else
	        switch (
	          ((encountered =
	            options && "string" === typeof options.as ? options.as : "script"),
	          encountered)
	        ) {
	          case "script":
	            break;
	          default:
	            (encountered =
	              getValueDescriptorExpectingEnumForWarning(encountered)),
	              console.error(
	                'ReactDOM.preinitModule(): Currently the only supported "as" type for this function is "script" but received "%s" instead. This warning was generated for `href` "%s". In the future other module types will be supported, aligning with the import-attributes proposal. Learn more here: (https://github.com/tc39/proposal-import-attributes)',
	                encountered,
	                href
	              );
	        }
	      if ("string" === typeof href)
	        if ("object" === typeof options && null !== options) {
	          if (null == options.as || "script" === options.as)
	            (encountered = getCrossOriginStringAs(
	              options.as,
	              options.crossOrigin
	            )),
	              Internals.d.M(href, {
	                crossOrigin: encountered,
	                integrity:
	                  "string" === typeof options.integrity
	                    ? options.integrity
	                    : undefined,
	                nonce:
	                  "string" === typeof options.nonce ? options.nonce : undefined
	              });
	        } else null == options && Internals.d.M(href);
	    };
	    reactDom_development.preload = function (href, options) {
	      var encountered = "";
	      ("string" === typeof href && href) ||
	        (encountered +=
	          " The `href` argument encountered was " +
	          getValueDescriptorExpectingObjectForWarning(href) +
	          ".");
	      null == options || "object" !== typeof options
	        ? (encountered +=
	            " The `options` argument encountered was " +
	            getValueDescriptorExpectingObjectForWarning(options) +
	            ".")
	        : ("string" === typeof options.as && options.as) ||
	          (encountered +=
	            " The `as` option encountered was " +
	            getValueDescriptorExpectingObjectForWarning(options.as) +
	            ".");
	      encountered &&
	        console.error(
	          'ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel="preload" as="..." />` tag.%s',
	          encountered
	        );
	      if (
	        "string" === typeof href &&
	        "object" === typeof options &&
	        null !== options &&
	        "string" === typeof options.as
	      ) {
	        encountered = options.as;
	        var crossOrigin = getCrossOriginStringAs(
	          encountered,
	          options.crossOrigin
	        );
	        Internals.d.L(href, encountered, {
	          crossOrigin: crossOrigin,
	          integrity:
	            "string" === typeof options.integrity ? options.integrity : undefined,
	          nonce: "string" === typeof options.nonce ? options.nonce : undefined,
	          type: "string" === typeof options.type ? options.type : undefined,
	          fetchPriority:
	            "string" === typeof options.fetchPriority
	              ? options.fetchPriority
	              : undefined,
	          referrerPolicy:
	            "string" === typeof options.referrerPolicy
	              ? options.referrerPolicy
	              : undefined,
	          imageSrcSet:
	            "string" === typeof options.imageSrcSet
	              ? options.imageSrcSet
	              : undefined,
	          imageSizes:
	            "string" === typeof options.imageSizes
	              ? options.imageSizes
	              : undefined,
	          media: "string" === typeof options.media ? options.media : undefined
	        });
	      }
	    };
	    reactDom_development.preloadModule = function (href, options) {
	      var encountered = "";
	      ("string" === typeof href && href) ||
	        (encountered +=
	          " The `href` argument encountered was " +
	          getValueDescriptorExpectingObjectForWarning(href) +
	          ".");
	      undefined !== options && "object" !== typeof options
	        ? (encountered +=
	            " The `options` argument encountered was " +
	            getValueDescriptorExpectingObjectForWarning(options) +
	            ".")
	        : options &&
	          "as" in options &&
	          "string" !== typeof options.as &&
	          (encountered +=
	            " The `as` option encountered was " +
	            getValueDescriptorExpectingObjectForWarning(options.as) +
	            ".");
	      encountered &&
	        console.error(
	          'ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel="modulepreload" as="..." />` tag.%s',
	          encountered
	        );
	      "string" === typeof href &&
	        (options
	          ? ((encountered = getCrossOriginStringAs(
	              options.as,
	              options.crossOrigin
	            )),
	            Internals.d.m(href, {
	              as:
	                "string" === typeof options.as && "script" !== options.as
	                  ? options.as
	                  : undefined,
	              crossOrigin: encountered,
	              integrity:
	                "string" === typeof options.integrity
	                  ? options.integrity
	                  : undefined
	            }))
	          : Internals.d.m(href));
	    };
	    reactDom_development.requestFormReset = function (form) {
	      Internals.d.r(form);
	    };
	    reactDom_development.unstable_batchedUpdates = function (fn, a) {
	      return fn(a);
	    };
	    reactDom_development.useFormState = function (action, initialState, permalink) {
	      return resolveDispatcher().useFormState(action, initialState, permalink);
	    };
	    reactDom_development.useFormStatus = function () {
	      return resolveDispatcher().useHostTransitionStatus();
	    };
	    reactDom_development.version = "19.0.0";
	    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
	      "function" ===
	        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
	      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
	  })();
	return reactDom_development;
}

var hasRequiredReactDom;

function requireReactDom () {
	if (hasRequiredReactDom) return reactDom.exports;
	hasRequiredReactDom = 1;

	function checkDCE() {
	  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	  if (
	    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
	    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
	  ) {
	    return;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // This branch is unreachable because this function is only called
	    // in production, but the condition is true only in development.
	    // Therefore if the branch is still here, dead code elimination wasn't
	    // properly applied.
	    // Don't change the message. React DevTools relies on it. Also make sure
	    // this message doesn't occur elsewhere in this function, or it will cause
	    // a false positive.
	    throw new Error('^_^');
	  }
	  try {
	    // Verify that the code above has been dead code eliminated (DCE'd).
	    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
	  } catch (err) {
	    // DevTools shouldn't crash React, no matter what.
	    // We should still report in case we break this code.
	    console.error(err);
	  }
	}

	if (process.env.NODE_ENV === 'production') {
	  // DCE check should happen before ReactDOM bundle executes so that
	  // DevTools can report bad minification during injection.
	  checkDCE();
	  reactDom.exports = requireReactDom_production();
	} else {
	  reactDom.exports = requireReactDom_development();
	}
	return reactDom.exports;
}

/**
 * @license React
 * react-dom-client.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactDomClient_production;

function requireReactDomClient_production () {
	if (hasRequiredReactDomClient_production) return reactDomClient_production;
	hasRequiredReactDomClient_production = 1;
	var Scheduler = requireScheduler(),
	  React = requireReact(),
	  ReactDOM = requireReactDom();
	function formatProdErrorMessage(code) {
	  var url = "https://react.dev/errors/" + code;
	  if (1 < arguments.length) {
	    url += "?args[]=" + encodeURIComponent(arguments[1]);
	    for (var i = 2; i < arguments.length; i++)
	      url += "&args[]=" + encodeURIComponent(arguments[i]);
	  }
	  return (
	    "Minified React error #" +
	    code +
	    "; visit " +
	    url +
	    " for the full message or use the non-minified dev environment for full errors and additional helpful warnings."
	  );
	}
	function isValidContainer(node) {
	  return !(
	    !node ||
	    (1 !== node.nodeType && 9 !== node.nodeType && 11 !== node.nodeType)
	  );
	}
	var REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"),
	  REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
	  REACT_PORTAL_TYPE = Symbol.for("react.portal"),
	  REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
	  REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
	  REACT_PROFILER_TYPE = Symbol.for("react.profiler"),
	  REACT_PROVIDER_TYPE = Symbol.for("react.provider"),
	  REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
	  REACT_CONTEXT_TYPE = Symbol.for("react.context"),
	  REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
	  REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
	  REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
	  REACT_MEMO_TYPE = Symbol.for("react.memo"),
	  REACT_LAZY_TYPE = Symbol.for("react.lazy");
	var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
	var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel"),
	  MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
	function getIteratorFn(maybeIterable) {
	  if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
	  maybeIterable =
	    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
	    maybeIterable["@@iterator"];
	  return "function" === typeof maybeIterable ? maybeIterable : null;
	}
	var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
	function getComponentNameFromType(type) {
	  if (null == type) return null;
	  if ("function" === typeof type)
	    return type.$$typeof === REACT_CLIENT_REFERENCE
	      ? null
	      : type.displayName || type.name || null;
	  if ("string" === typeof type) return type;
	  switch (type) {
	    case REACT_FRAGMENT_TYPE:
	      return "Fragment";
	    case REACT_PORTAL_TYPE:
	      return "Portal";
	    case REACT_PROFILER_TYPE:
	      return "Profiler";
	    case REACT_STRICT_MODE_TYPE:
	      return "StrictMode";
	    case REACT_SUSPENSE_TYPE:
	      return "Suspense";
	    case REACT_SUSPENSE_LIST_TYPE:
	      return "SuspenseList";
	  }
	  if ("object" === typeof type)
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        return (type.displayName || "Context") + ".Provider";
	      case REACT_CONSUMER_TYPE:
	        return (type._context.displayName || "Context") + ".Consumer";
	      case REACT_FORWARD_REF_TYPE:
	        var innerType = type.render;
	        type = type.displayName;
	        type ||
	          ((type = innerType.displayName || innerType.name || ""),
	          (type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef"));
	        return type;
	      case REACT_MEMO_TYPE:
	        return (
	          (innerType = type.displayName || null),
	          null !== innerType
	            ? innerType
	            : getComponentNameFromType(type.type) || "Memo"
	        );
	      case REACT_LAZY_TYPE:
	        innerType = type._payload;
	        type = type._init;
	        try {
	          return getComponentNameFromType(type(innerType));
	        } catch (x) {}
	    }
	  return null;
	}
	var ReactSharedInternals =
	    React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
	  assign = Object.assign,
	  prefix,
	  suffix;
	function describeBuiltInComponentFrame(name) {
	  if (undefined === prefix)
	    try {
	      throw Error();
	    } catch (x) {
	      var match = x.stack.trim().match(/\n( *(at )?)/);
	      prefix = (match && match[1]) || "";
	      suffix =
	        -1 < x.stack.indexOf("\n    at")
	          ? " (<anonymous>)"
	          : -1 < x.stack.indexOf("@")
	            ? "@unknown:0:0"
	            : "";
	    }
	  return "\n" + prefix + name + suffix;
	}
	var reentry = false;
	function describeNativeComponentFrame(fn, construct) {
	  if (!fn || reentry) return "";
	  reentry = true;
	  var previousPrepareStackTrace = Error.prepareStackTrace;
	  Error.prepareStackTrace = undefined;
	  try {
	    var RunInRootFrame = {
	      DetermineComponentFrameRoot: function () {
	        try {
	          if (construct) {
	            var Fake = function () {
	              throw Error();
	            };
	            Object.defineProperty(Fake.prototype, "props", {
	              set: function () {
	                throw Error();
	              }
	            });
	            if ("object" === typeof Reflect && Reflect.construct) {
	              try {
	                Reflect.construct(Fake, []);
	              } catch (x) {
	                var control = x;
	              }
	              Reflect.construct(fn, [], Fake);
	            } else {
	              try {
	                Fake.call();
	              } catch (x$0) {
	                control = x$0;
	              }
	              fn.call(Fake.prototype);
	            }
	          } else {
	            try {
	              throw Error();
	            } catch (x$1) {
	              control = x$1;
	            }
	            (Fake = fn()) &&
	              "function" === typeof Fake.catch &&
	              Fake.catch(function () {});
	          }
	        } catch (sample) {
	          if (sample && control && "string" === typeof sample.stack)
	            return [sample.stack, control.stack];
	        }
	        return [null, null];
	      }
	    };
	    RunInRootFrame.DetermineComponentFrameRoot.displayName =
	      "DetermineComponentFrameRoot";
	    var namePropDescriptor = Object.getOwnPropertyDescriptor(
	      RunInRootFrame.DetermineComponentFrameRoot,
	      "name"
	    );
	    namePropDescriptor &&
	      namePropDescriptor.configurable &&
	      Object.defineProperty(
	        RunInRootFrame.DetermineComponentFrameRoot,
	        "name",
	        { value: "DetermineComponentFrameRoot" }
	      );
	    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),
	      sampleStack = _RunInRootFrame$Deter[0],
	      controlStack = _RunInRootFrame$Deter[1];
	    if (sampleStack && controlStack) {
	      var sampleLines = sampleStack.split("\n"),
	        controlLines = controlStack.split("\n");
	      for (
	        namePropDescriptor = RunInRootFrame = 0;
	        RunInRootFrame < sampleLines.length &&
	        !sampleLines[RunInRootFrame].includes("DetermineComponentFrameRoot");

	      )
	        RunInRootFrame++;
	      for (
	        ;
	        namePropDescriptor < controlLines.length &&
	        !controlLines[namePropDescriptor].includes(
	          "DetermineComponentFrameRoot"
	        );

	      )
	        namePropDescriptor++;
	      if (
	        RunInRootFrame === sampleLines.length ||
	        namePropDescriptor === controlLines.length
	      )
	        for (
	          RunInRootFrame = sampleLines.length - 1,
	            namePropDescriptor = controlLines.length - 1;
	          1 <= RunInRootFrame &&
	          0 <= namePropDescriptor &&
	          sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor];

	        )
	          namePropDescriptor--;
	      for (
	        ;
	        1 <= RunInRootFrame && 0 <= namePropDescriptor;
	        RunInRootFrame--, namePropDescriptor--
	      )
	        if (sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
	          if (1 !== RunInRootFrame || 1 !== namePropDescriptor) {
	            do
	              if (
	                (RunInRootFrame--,
	                namePropDescriptor--,
	                0 > namePropDescriptor ||
	                  sampleLines[RunInRootFrame] !==
	                    controlLines[namePropDescriptor])
	              ) {
	                var frame =
	                  "\n" +
	                  sampleLines[RunInRootFrame].replace(" at new ", " at ");
	                fn.displayName &&
	                  frame.includes("<anonymous>") &&
	                  (frame = frame.replace("<anonymous>", fn.displayName));
	                return frame;
	              }
	            while (1 <= RunInRootFrame && 0 <= namePropDescriptor);
	          }
	          break;
	        }
	    }
	  } finally {
	    (reentry = false), (Error.prepareStackTrace = previousPrepareStackTrace);
	  }
	  return (previousPrepareStackTrace = fn ? fn.displayName || fn.name : "")
	    ? describeBuiltInComponentFrame(previousPrepareStackTrace)
	    : "";
	}
	function describeFiber(fiber) {
	  switch (fiber.tag) {
	    case 26:
	    case 27:
	    case 5:
	      return describeBuiltInComponentFrame(fiber.type);
	    case 16:
	      return describeBuiltInComponentFrame("Lazy");
	    case 13:
	      return describeBuiltInComponentFrame("Suspense");
	    case 19:
	      return describeBuiltInComponentFrame("SuspenseList");
	    case 0:
	    case 15:
	      return (fiber = describeNativeComponentFrame(fiber.type, false)), fiber;
	    case 11:
	      return (
	        (fiber = describeNativeComponentFrame(fiber.type.render, false)), fiber
	      );
	    case 1:
	      return (fiber = describeNativeComponentFrame(fiber.type, true)), fiber;
	    default:
	      return "";
	  }
	}
	function getStackByFiberInDevAndProd(workInProgress) {
	  try {
	    var info = "";
	    do
	      (info += describeFiber(workInProgress)),
	        (workInProgress = workInProgress.return);
	    while (workInProgress);
	    return info;
	  } catch (x) {
	    return "\nError generating stack: " + x.message + "\n" + x.stack;
	  }
	}
	function getNearestMountedFiber(fiber) {
	  var node = fiber,
	    nearestMounted = fiber;
	  if (fiber.alternate) for (; node.return; ) node = node.return;
	  else {
	    fiber = node;
	    do
	      (node = fiber),
	        0 !== (node.flags & 4098) && (nearestMounted = node.return),
	        (fiber = node.return);
	    while (fiber);
	  }
	  return 3 === node.tag ? nearestMounted : null;
	}
	function getSuspenseInstanceFromFiber(fiber) {
	  if (13 === fiber.tag) {
	    var suspenseState = fiber.memoizedState;
	    null === suspenseState &&
	      ((fiber = fiber.alternate),
	      null !== fiber && (suspenseState = fiber.memoizedState));
	    if (null !== suspenseState) return suspenseState.dehydrated;
	  }
	  return null;
	}
	function assertIsMounted(fiber) {
	  if (getNearestMountedFiber(fiber) !== fiber)
	    throw Error(formatProdErrorMessage(188));
	}
	function findCurrentFiberUsingSlowPath(fiber) {
	  var alternate = fiber.alternate;
	  if (!alternate) {
	    alternate = getNearestMountedFiber(fiber);
	    if (null === alternate) throw Error(formatProdErrorMessage(188));
	    return alternate !== fiber ? null : fiber;
	  }
	  for (var a = fiber, b = alternate; ; ) {
	    var parentA = a.return;
	    if (null === parentA) break;
	    var parentB = parentA.alternate;
	    if (null === parentB) {
	      b = parentA.return;
	      if (null !== b) {
	        a = b;
	        continue;
	      }
	      break;
	    }
	    if (parentA.child === parentB.child) {
	      for (parentB = parentA.child; parentB; ) {
	        if (parentB === a) return assertIsMounted(parentA), fiber;
	        if (parentB === b) return assertIsMounted(parentA), alternate;
	        parentB = parentB.sibling;
	      }
	      throw Error(formatProdErrorMessage(188));
	    }
	    if (a.return !== b.return) (a = parentA), (b = parentB);
	    else {
	      for (var didFindChild = false, child$2 = parentA.child; child$2; ) {
	        if (child$2 === a) {
	          didFindChild = true;
	          a = parentA;
	          b = parentB;
	          break;
	        }
	        if (child$2 === b) {
	          didFindChild = true;
	          b = parentA;
	          a = parentB;
	          break;
	        }
	        child$2 = child$2.sibling;
	      }
	      if (!didFindChild) {
	        for (child$2 = parentB.child; child$2; ) {
	          if (child$2 === a) {
	            didFindChild = true;
	            a = parentB;
	            b = parentA;
	            break;
	          }
	          if (child$2 === b) {
	            didFindChild = true;
	            b = parentB;
	            a = parentA;
	            break;
	          }
	          child$2 = child$2.sibling;
	        }
	        if (!didFindChild) throw Error(formatProdErrorMessage(189));
	      }
	    }
	    if (a.alternate !== b) throw Error(formatProdErrorMessage(190));
	  }
	  if (3 !== a.tag) throw Error(formatProdErrorMessage(188));
	  return a.stateNode.current === a ? fiber : alternate;
	}
	function findCurrentHostFiberImpl(node) {
	  var tag = node.tag;
	  if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
	  for (node = node.child; null !== node; ) {
	    tag = findCurrentHostFiberImpl(node);
	    if (null !== tag) return tag;
	    node = node.sibling;
	  }
	  return null;
	}
	var isArrayImpl = Array.isArray,
	  ReactDOMSharedInternals =
	    ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
	  sharedNotPendingObject = {
	    pending: false,
	    data: null,
	    method: null,
	    action: null
	  },
	  valueStack = [],
	  index = -1;
	function createCursor(defaultValue) {
	  return { current: defaultValue };
	}
	function pop(cursor) {
	  0 > index ||
	    ((cursor.current = valueStack[index]), (valueStack[index] = null), index--);
	}
	function push(cursor, value) {
	  index++;
	  valueStack[index] = cursor.current;
	  cursor.current = value;
	}
	var contextStackCursor = createCursor(null),
	  contextFiberStackCursor = createCursor(null),
	  rootInstanceStackCursor = createCursor(null),
	  hostTransitionProviderCursor = createCursor(null);
	function pushHostContainer(fiber, nextRootInstance) {
	  push(rootInstanceStackCursor, nextRootInstance);
	  push(contextFiberStackCursor, fiber);
	  push(contextStackCursor, null);
	  fiber = nextRootInstance.nodeType;
	  switch (fiber) {
	    case 9:
	    case 11:
	      nextRootInstance = (nextRootInstance = nextRootInstance.documentElement)
	        ? (nextRootInstance = nextRootInstance.namespaceURI)
	          ? getOwnHostContext(nextRootInstance)
	          : 0
	        : 0;
	      break;
	    default:
	      if (
	        ((fiber = 8 === fiber ? nextRootInstance.parentNode : nextRootInstance),
	        (nextRootInstance = fiber.tagName),
	        (fiber = fiber.namespaceURI))
	      )
	        (fiber = getOwnHostContext(fiber)),
	          (nextRootInstance = getChildHostContextProd(fiber, nextRootInstance));
	      else
	        switch (nextRootInstance) {
	          case "svg":
	            nextRootInstance = 1;
	            break;
	          case "math":
	            nextRootInstance = 2;
	            break;
	          default:
	            nextRootInstance = 0;
	        }
	  }
	  pop(contextStackCursor);
	  push(contextStackCursor, nextRootInstance);
	}
	function popHostContainer() {
	  pop(contextStackCursor);
	  pop(contextFiberStackCursor);
	  pop(rootInstanceStackCursor);
	}
	function pushHostContext(fiber) {
	  null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber);
	  var context = contextStackCursor.current;
	  var JSCompiler_inline_result = getChildHostContextProd(context, fiber.type);
	  context !== JSCompiler_inline_result &&
	    (push(contextFiberStackCursor, fiber),
	    push(contextStackCursor, JSCompiler_inline_result));
	}
	function popHostContext(fiber) {
	  contextFiberStackCursor.current === fiber &&
	    (pop(contextStackCursor), pop(contextFiberStackCursor));
	  hostTransitionProviderCursor.current === fiber &&
	    (pop(hostTransitionProviderCursor),
	    (HostTransitionContext._currentValue = sharedNotPendingObject));
	}
	var hasOwnProperty = Object.prototype.hasOwnProperty,
	  scheduleCallback$3 = Scheduler.unstable_scheduleCallback,
	  cancelCallback$1 = Scheduler.unstable_cancelCallback,
	  shouldYield = Scheduler.unstable_shouldYield,
	  requestPaint = Scheduler.unstable_requestPaint,
	  now = Scheduler.unstable_now,
	  getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
	  ImmediatePriority = Scheduler.unstable_ImmediatePriority,
	  UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
	  NormalPriority$1 = Scheduler.unstable_NormalPriority,
	  LowPriority = Scheduler.unstable_LowPriority,
	  IdlePriority = Scheduler.unstable_IdlePriority,
	  log$1 = Scheduler.log,
	  unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue,
	  rendererID = null,
	  injectedHook = null;
	function onCommitRoot(root) {
	  if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot)
	    try {
	      injectedHook.onCommitFiberRoot(
	        rendererID,
	        root,
	        void 0,
	        128 === (root.current.flags & 128)
	      );
	    } catch (err) {}
	}
	function setIsStrictModeForDevtools(newIsStrictMode) {
	  "function" === typeof log$1 && unstable_setDisableYieldValue(newIsStrictMode);
	  if (injectedHook && "function" === typeof injectedHook.setStrictMode)
	    try {
	      injectedHook.setStrictMode(rendererID, newIsStrictMode);
	    } catch (err) {}
	}
	var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback,
	  log = Math.log,
	  LN2 = Math.LN2;
	function clz32Fallback(x) {
	  x >>>= 0;
	  return 0 === x ? 32 : (31 - ((log(x) / LN2) | 0)) | 0;
	}
	var nextTransitionLane = 128,
	  nextRetryLane = 4194304;
	function getHighestPriorityLanes(lanes) {
	  var pendingSyncLanes = lanes & 42;
	  if (0 !== pendingSyncLanes) return pendingSyncLanes;
	  switch (lanes & -lanes) {
	    case 1:
	      return 1;
	    case 2:
	      return 2;
	    case 4:
	      return 4;
	    case 8:
	      return 8;
	    case 16:
	      return 16;
	    case 32:
	      return 32;
	    case 64:
	      return 64;
	    case 128:
	    case 256:
	    case 512:
	    case 1024:
	    case 2048:
	    case 4096:
	    case 8192:
	    case 16384:
	    case 32768:
	    case 65536:
	    case 131072:
	    case 262144:
	    case 524288:
	    case 1048576:
	    case 2097152:
	      return lanes & 4194176;
	    case 4194304:
	    case 8388608:
	    case 16777216:
	    case 33554432:
	      return lanes & 62914560;
	    case 67108864:
	      return 67108864;
	    case 134217728:
	      return 134217728;
	    case 268435456:
	      return 268435456;
	    case 536870912:
	      return 536870912;
	    case 1073741824:
	      return 0;
	    default:
	      return lanes;
	  }
	}
	function getNextLanes(root, wipLanes) {
	  var pendingLanes = root.pendingLanes;
	  if (0 === pendingLanes) return 0;
	  var nextLanes = 0,
	    suspendedLanes = root.suspendedLanes,
	    pingedLanes = root.pingedLanes,
	    warmLanes = root.warmLanes;
	  root = 0 !== root.finishedLanes;
	  var nonIdlePendingLanes = pendingLanes & 134217727;
	  0 !== nonIdlePendingLanes
	    ? ((pendingLanes = nonIdlePendingLanes & ~suspendedLanes),
	      0 !== pendingLanes
	        ? (nextLanes = getHighestPriorityLanes(pendingLanes))
	        : ((pingedLanes &= nonIdlePendingLanes),
	          0 !== pingedLanes
	            ? (nextLanes = getHighestPriorityLanes(pingedLanes))
	            : root ||
	              ((warmLanes = nonIdlePendingLanes & ~warmLanes),
	              0 !== warmLanes &&
	                (nextLanes = getHighestPriorityLanes(warmLanes)))))
	    : ((nonIdlePendingLanes = pendingLanes & ~suspendedLanes),
	      0 !== nonIdlePendingLanes
	        ? (nextLanes = getHighestPriorityLanes(nonIdlePendingLanes))
	        : 0 !== pingedLanes
	          ? (nextLanes = getHighestPriorityLanes(pingedLanes))
	          : root ||
	            ((warmLanes = pendingLanes & ~warmLanes),
	            0 !== warmLanes &&
	              (nextLanes = getHighestPriorityLanes(warmLanes))));
	  return 0 === nextLanes
	    ? 0
	    : 0 !== wipLanes &&
	        wipLanes !== nextLanes &&
	        0 === (wipLanes & suspendedLanes) &&
	        ((suspendedLanes = nextLanes & -nextLanes),
	        (warmLanes = wipLanes & -wipLanes),
	        suspendedLanes >= warmLanes ||
	          (32 === suspendedLanes && 0 !== (warmLanes & 4194176)))
	      ? wipLanes
	      : nextLanes;
	}
	function checkIfRootIsPrerendering(root, renderLanes) {
	  return (
	    0 ===
	    (root.pendingLanes &
	      ~(root.suspendedLanes & ~root.pingedLanes) &
	      renderLanes)
	  );
	}
	function computeExpirationTime(lane, currentTime) {
	  switch (lane) {
	    case 1:
	    case 2:
	    case 4:
	    case 8:
	      return currentTime + 250;
	    case 16:
	    case 32:
	    case 64:
	    case 128:
	    case 256:
	    case 512:
	    case 1024:
	    case 2048:
	    case 4096:
	    case 8192:
	    case 16384:
	    case 32768:
	    case 65536:
	    case 131072:
	    case 262144:
	    case 524288:
	    case 1048576:
	    case 2097152:
	      return currentTime + 5e3;
	    case 4194304:
	    case 8388608:
	    case 16777216:
	    case 33554432:
	      return -1;
	    case 67108864:
	    case 134217728:
	    case 268435456:
	    case 536870912:
	    case 1073741824:
	      return -1;
	    default:
	      return -1;
	  }
	}
	function claimNextTransitionLane() {
	  var lane = nextTransitionLane;
	  nextTransitionLane <<= 1;
	  0 === (nextTransitionLane & 4194176) && (nextTransitionLane = 128);
	  return lane;
	}
	function claimNextRetryLane() {
	  var lane = nextRetryLane;
	  nextRetryLane <<= 1;
	  0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
	  return lane;
	}
	function createLaneMap(initial) {
	  for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);
	  return laneMap;
	}
	function markRootUpdated$1(root, updateLane) {
	  root.pendingLanes |= updateLane;
	  268435456 !== updateLane &&
	    ((root.suspendedLanes = 0), (root.pingedLanes = 0), (root.warmLanes = 0));
	}
	function markRootFinished(
	  root,
	  finishedLanes,
	  remainingLanes,
	  spawnedLane,
	  updatedLanes,
	  suspendedRetryLanes
	) {
	  var previouslyPendingLanes = root.pendingLanes;
	  root.pendingLanes = remainingLanes;
	  root.suspendedLanes = 0;
	  root.pingedLanes = 0;
	  root.warmLanes = 0;
	  root.expiredLanes &= remainingLanes;
	  root.entangledLanes &= remainingLanes;
	  root.errorRecoveryDisabledLanes &= remainingLanes;
	  root.shellSuspendCounter = 0;
	  var entanglements = root.entanglements,
	    expirationTimes = root.expirationTimes,
	    hiddenUpdates = root.hiddenUpdates;
	  for (
	    remainingLanes = previouslyPendingLanes & ~remainingLanes;
	    0 < remainingLanes;

	  ) {
	    var index$7 = 31 - clz32(remainingLanes),
	      lane = 1 << index$7;
	    entanglements[index$7] = 0;
	    expirationTimes[index$7] = -1;
	    var hiddenUpdatesForLane = hiddenUpdates[index$7];
	    if (null !== hiddenUpdatesForLane)
	      for (
	        hiddenUpdates[index$7] = null, index$7 = 0;
	        index$7 < hiddenUpdatesForLane.length;
	        index$7++
	      ) {
	        var update = hiddenUpdatesForLane[index$7];
	        null !== update && (update.lane &= -536870913);
	      }
	    remainingLanes &= ~lane;
	  }
	  0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, 0);
	  0 !== suspendedRetryLanes &&
	    0 === updatedLanes &&
	    0 !== root.tag &&
	    (root.suspendedLanes |=
	      suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
	}
	function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {
	  root.pendingLanes |= spawnedLane;
	  root.suspendedLanes &= ~spawnedLane;
	  var spawnedLaneIndex = 31 - clz32(spawnedLane);
	  root.entangledLanes |= spawnedLane;
	  root.entanglements[spawnedLaneIndex] =
	    root.entanglements[spawnedLaneIndex] |
	    1073741824 |
	    (entangledLanes & 4194218);
	}
	function markRootEntangled(root, entangledLanes) {
	  var rootEntangledLanes = (root.entangledLanes |= entangledLanes);
	  for (root = root.entanglements; rootEntangledLanes; ) {
	    var index$8 = 31 - clz32(rootEntangledLanes),
	      lane = 1 << index$8;
	    (lane & entangledLanes) | (root[index$8] & entangledLanes) &&
	      (root[index$8] |= entangledLanes);
	    rootEntangledLanes &= ~lane;
	  }
	}
	function lanesToEventPriority(lanes) {
	  lanes &= -lanes;
	  return 2 < lanes
	    ? 8 < lanes
	      ? 0 !== (lanes & 134217727)
	        ? 32
	        : 268435456
	      : 8
	    : 2;
	}
	function resolveUpdatePriority() {
	  var updatePriority = ReactDOMSharedInternals.p;
	  if (0 !== updatePriority) return updatePriority;
	  updatePriority = window.event;
	  return undefined === updatePriority ? 32 : getEventPriority(updatePriority.type);
	}
	function runWithPriority(priority, fn) {
	  var previousPriority = ReactDOMSharedInternals.p;
	  try {
	    return (ReactDOMSharedInternals.p = priority), fn();
	  } finally {
	    ReactDOMSharedInternals.p = previousPriority;
	  }
	}
	var randomKey = Math.random().toString(36).slice(2),
	  internalInstanceKey = "__reactFiber$" + randomKey,
	  internalPropsKey = "__reactProps$" + randomKey,
	  internalContainerInstanceKey = "__reactContainer$" + randomKey,
	  internalEventHandlersKey = "__reactEvents$" + randomKey,
	  internalEventHandlerListenersKey = "__reactListeners$" + randomKey,
	  internalEventHandlesSetKey = "__reactHandles$" + randomKey,
	  internalRootNodeResourcesKey = "__reactResources$" + randomKey,
	  internalHoistableMarker = "__reactMarker$" + randomKey;
	function detachDeletedInstance(node) {
	  delete node[internalInstanceKey];
	  delete node[internalPropsKey];
	  delete node[internalEventHandlersKey];
	  delete node[internalEventHandlerListenersKey];
	  delete node[internalEventHandlesSetKey];
	}
	function getClosestInstanceFromNode(targetNode) {
	  var targetInst = targetNode[internalInstanceKey];
	  if (targetInst) return targetInst;
	  for (var parentNode = targetNode.parentNode; parentNode; ) {
	    if (
	      (targetInst =
	        parentNode[internalContainerInstanceKey] ||
	        parentNode[internalInstanceKey])
	    ) {
	      parentNode = targetInst.alternate;
	      if (
	        null !== targetInst.child ||
	        (null !== parentNode && null !== parentNode.child)
	      )
	        for (
	          targetNode = getParentSuspenseInstance(targetNode);
	          null !== targetNode;

	        ) {
	          if ((parentNode = targetNode[internalInstanceKey])) return parentNode;
	          targetNode = getParentSuspenseInstance(targetNode);
	        }
	      return targetInst;
	    }
	    targetNode = parentNode;
	    parentNode = targetNode.parentNode;
	  }
	  return null;
	}
	function getInstanceFromNode(node) {
	  if (
	    (node = node[internalInstanceKey] || node[internalContainerInstanceKey])
	  ) {
	    var tag = node.tag;
	    if (
	      5 === tag ||
	      6 === tag ||
	      13 === tag ||
	      26 === tag ||
	      27 === tag ||
	      3 === tag
	    )
	      return node;
	  }
	  return null;
	}
	function getNodeFromInstance(inst) {
	  var tag = inst.tag;
	  if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return inst.stateNode;
	  throw Error(formatProdErrorMessage(33));
	}
	function getResourcesFromRoot(root) {
	  var resources = root[internalRootNodeResourcesKey];
	  resources ||
	    (resources = root[internalRootNodeResourcesKey] =
	      { hoistableStyles: new Map(), hoistableScripts: new Map() });
	  return resources;
	}
	function markNodeAsHoistable(node) {
	  node[internalHoistableMarker] = true;
	}
	var allNativeEvents = new Set(),
	  registrationNameDependencies = {};
	function registerTwoPhaseEvent(registrationName, dependencies) {
	  registerDirectEvent(registrationName, dependencies);
	  registerDirectEvent(registrationName + "Capture", dependencies);
	}
	function registerDirectEvent(registrationName, dependencies) {
	  registrationNameDependencies[registrationName] = dependencies;
	  for (
	    registrationName = 0;
	    registrationName < dependencies.length;
	    registrationName++
	  )
	    allNativeEvents.add(dependencies[registrationName]);
	}
	var canUseDOM = !(
	    "undefined" === typeof window ||
	    "undefined" === typeof window.document ||
	    "undefined" === typeof window.document.createElement
	  ),
	  VALID_ATTRIBUTE_NAME_REGEX = RegExp(
	    "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
	  ),
	  illegalAttributeNameCache = {},
	  validatedAttributeNameCache = {};
	function isAttributeNameSafe(attributeName) {
	  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName))
	    return true;
	  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
	    return (validatedAttributeNameCache[attributeName] = true);
	  illegalAttributeNameCache[attributeName] = true;
	  return false;
	}
	function setValueForAttribute(node, name, value) {
	  if (isAttributeNameSafe(name))
	    if (null === value) node.removeAttribute(name);
	    else {
	      switch (typeof value) {
	        case "undefined":
	        case "function":
	        case "symbol":
	          node.removeAttribute(name);
	          return;
	        case "boolean":
	          var prefix$10 = name.toLowerCase().slice(0, 5);
	          if ("data-" !== prefix$10 && "aria-" !== prefix$10) {
	            node.removeAttribute(name);
	            return;
	          }
	      }
	      node.setAttribute(name, "" + value);
	    }
	}
	function setValueForKnownAttribute(node, name, value) {
	  if (null === value) node.removeAttribute(name);
	  else {
	    switch (typeof value) {
	      case "undefined":
	      case "function":
	      case "symbol":
	      case "boolean":
	        node.removeAttribute(name);
	        return;
	    }
	    node.setAttribute(name, "" + value);
	  }
	}
	function setValueForNamespacedAttribute(node, namespace, name, value) {
	  if (null === value) node.removeAttribute(name);
	  else {
	    switch (typeof value) {
	      case "undefined":
	      case "function":
	      case "symbol":
	      case "boolean":
	        node.removeAttribute(name);
	        return;
	    }
	    node.setAttributeNS(namespace, name, "" + value);
	  }
	}
	function getToStringValue(value) {
	  switch (typeof value) {
	    case "bigint":
	    case "boolean":
	    case "number":
	    case "string":
	    case "undefined":
	      return value;
	    case "object":
	      return value;
	    default:
	      return "";
	  }
	}
	function isCheckable(elem) {
	  var type = elem.type;
	  return (
	    (elem = elem.nodeName) &&
	    "input" === elem.toLowerCase() &&
	    ("checkbox" === type || "radio" === type)
	  );
	}
	function trackValueOnNode(node) {
	  var valueField = isCheckable(node) ? "checked" : "value",
	    descriptor = Object.getOwnPropertyDescriptor(
	      node.constructor.prototype,
	      valueField
	    ),
	    currentValue = "" + node[valueField];
	  if (
	    !node.hasOwnProperty(valueField) &&
	    "undefined" !== typeof descriptor &&
	    "function" === typeof descriptor.get &&
	    "function" === typeof descriptor.set
	  ) {
	    var get = descriptor.get,
	      set = descriptor.set;
	    Object.defineProperty(node, valueField, {
	      configurable: true,
	      get: function () {
	        return get.call(this);
	      },
	      set: function (value) {
	        currentValue = "" + value;
	        set.call(this, value);
	      }
	    });
	    Object.defineProperty(node, valueField, {
	      enumerable: descriptor.enumerable
	    });
	    return {
	      getValue: function () {
	        return currentValue;
	      },
	      setValue: function (value) {
	        currentValue = "" + value;
	      },
	      stopTracking: function () {
	        node._valueTracker = null;
	        delete node[valueField];
	      }
	    };
	  }
	}
	function track(node) {
	  node._valueTracker || (node._valueTracker = trackValueOnNode(node));
	}
	function updateValueIfChanged(node) {
	  if (!node) return false;
	  var tracker = node._valueTracker;
	  if (!tracker) return true;
	  var lastValue = tracker.getValue();
	  var value = "";
	  node &&
	    (value = isCheckable(node)
	      ? node.checked
	        ? "true"
	        : "false"
	      : node.value);
	  node = value;
	  return node !== lastValue ? (tracker.setValue(node), true) : false;
	}
	function getActiveElement(doc) {
	  doc = doc || ("undefined" !== typeof document ? document : undefined);
	  if ("undefined" === typeof doc) return null;
	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}
	var escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n"\\]/g;
	function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
	  return value.replace(
	    escapeSelectorAttributeValueInsideDoubleQuotesRegex,
	    function (ch) {
	      return "\\" + ch.charCodeAt(0).toString(16) + " ";
	    }
	  );
	}
	function updateInput(
	  element,
	  value,
	  defaultValue,
	  lastDefaultValue,
	  checked,
	  defaultChecked,
	  type,
	  name
	) {
	  element.name = "";
	  null != type &&
	  "function" !== typeof type &&
	  "symbol" !== typeof type &&
	  "boolean" !== typeof type
	    ? (element.type = type)
	    : element.removeAttribute("type");
	  if (null != value)
	    if ("number" === type) {
	      if ((0 === value && "" === element.value) || element.value != value)
	        element.value = "" + getToStringValue(value);
	    } else
	      element.value !== "" + getToStringValue(value) &&
	        (element.value = "" + getToStringValue(value));
	  else
	    ("submit" !== type && "reset" !== type) || element.removeAttribute("value");
	  null != value
	    ? setDefaultValue(element, type, getToStringValue(value))
	    : null != defaultValue
	      ? setDefaultValue(element, type, getToStringValue(defaultValue))
	      : null != lastDefaultValue && element.removeAttribute("value");
	  null == checked &&
	    null != defaultChecked &&
	    (element.defaultChecked = !!defaultChecked);
	  null != checked &&
	    (element.checked =
	      checked && "function" !== typeof checked && "symbol" !== typeof checked);
	  null != name &&
	  "function" !== typeof name &&
	  "symbol" !== typeof name &&
	  "boolean" !== typeof name
	    ? (element.name = "" + getToStringValue(name))
	    : element.removeAttribute("name");
	}
	function initInput(
	  element,
	  value,
	  defaultValue,
	  checked,
	  defaultChecked,
	  type,
	  name,
	  isHydrating
	) {
	  null != type &&
	    "function" !== typeof type &&
	    "symbol" !== typeof type &&
	    "boolean" !== typeof type &&
	    (element.type = type);
	  if (null != value || null != defaultValue) {
	    if (
	      !(
	        ("submit" !== type && "reset" !== type) ||
	        (undefined !== value && null !== value)
	      )
	    )
	      return;
	    defaultValue =
	      null != defaultValue ? "" + getToStringValue(defaultValue) : "";
	    value = null != value ? "" + getToStringValue(value) : defaultValue;
	    isHydrating || value === element.value || (element.value = value);
	    element.defaultValue = value;
	  }
	  checked = null != checked ? checked : defaultChecked;
	  checked =
	    "function" !== typeof checked && "symbol" !== typeof checked && !!checked;
	  element.checked = isHydrating ? element.checked : !!checked;
	  element.defaultChecked = !!checked;
	  null != name &&
	    "function" !== typeof name &&
	    "symbol" !== typeof name &&
	    "boolean" !== typeof name &&
	    (element.name = name);
	}
	function setDefaultValue(node, type, value) {
	  ("number" === type && getActiveElement(node.ownerDocument) === node) ||
	    node.defaultValue === "" + value ||
	    (node.defaultValue = "" + value);
	}
	function updateOptions(node, multiple, propValue, setDefaultSelected) {
	  node = node.options;
	  if (multiple) {
	    multiple = {};
	    for (var i = 0; i < propValue.length; i++)
	      multiple["$" + propValue[i]] = true;
	    for (propValue = 0; propValue < node.length; propValue++)
	      (i = multiple.hasOwnProperty("$" + node[propValue].value)),
	        node[propValue].selected !== i && (node[propValue].selected = i),
	        i && setDefaultSelected && (node[propValue].defaultSelected = true);
	  } else {
	    propValue = "" + getToStringValue(propValue);
	    multiple = null;
	    for (i = 0; i < node.length; i++) {
	      if (node[i].value === propValue) {
	        node[i].selected = true;
	        setDefaultSelected && (node[i].defaultSelected = true);
	        return;
	      }
	      null !== multiple || node[i].disabled || (multiple = node[i]);
	    }
	    null !== multiple && (multiple.selected = true);
	  }
	}
	function updateTextarea(element, value, defaultValue) {
	  if (
	    null != value &&
	    ((value = "" + getToStringValue(value)),
	    value !== element.value && (element.value = value),
	    null == defaultValue)
	  ) {
	    element.defaultValue !== value && (element.defaultValue = value);
	    return;
	  }
	  element.defaultValue =
	    null != defaultValue ? "" + getToStringValue(defaultValue) : "";
	}
	function initTextarea(element, value, defaultValue, children) {
	  if (null == value) {
	    if (null != children) {
	      if (null != defaultValue) throw Error(formatProdErrorMessage(92));
	      if (isArrayImpl(children)) {
	        if (1 < children.length) throw Error(formatProdErrorMessage(93));
	        children = children[0];
	      }
	      defaultValue = children;
	    }
	    null == defaultValue && (defaultValue = "");
	    value = defaultValue;
	  }
	  defaultValue = getToStringValue(value);
	  element.defaultValue = defaultValue;
	  children = element.textContent;
	  children === defaultValue &&
	    "" !== children &&
	    null !== children &&
	    (element.value = children);
	}
	function setTextContent(node, text) {
	  if (text) {
	    var firstChild = node.firstChild;
	    if (
	      firstChild &&
	      firstChild === node.lastChild &&
	      3 === firstChild.nodeType
	    ) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	}
	var unitlessNumbers = new Set(
	  "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
	    " "
	  )
	);
	function setValueForStyle(style, styleName, value) {
	  var isCustomProperty = 0 === styleName.indexOf("--");
	  null == value || "boolean" === typeof value || "" === value
	    ? isCustomProperty
	      ? style.setProperty(styleName, "")
	      : "float" === styleName
	        ? (style.cssFloat = "")
	        : (style[styleName] = "")
	    : isCustomProperty
	      ? style.setProperty(styleName, value)
	      : "number" !== typeof value ||
	          0 === value ||
	          unitlessNumbers.has(styleName)
	        ? "float" === styleName
	          ? (style.cssFloat = value)
	          : (style[styleName] = ("" + value).trim())
	        : (style[styleName] = value + "px");
	}
	function setValueForStyles(node, styles, prevStyles) {
	  if (null != styles && "object" !== typeof styles)
	    throw Error(formatProdErrorMessage(62));
	  node = node.style;
	  if (null != prevStyles) {
	    for (var styleName in prevStyles)
	      !prevStyles.hasOwnProperty(styleName) ||
	        (null != styles && styles.hasOwnProperty(styleName)) ||
	        (0 === styleName.indexOf("--")
	          ? node.setProperty(styleName, "")
	          : "float" === styleName
	            ? (node.cssFloat = "")
	            : (node[styleName] = ""));
	    for (var styleName$16 in styles)
	      (styleName = styles[styleName$16]),
	        styles.hasOwnProperty(styleName$16) &&
	          prevStyles[styleName$16] !== styleName &&
	          setValueForStyle(node, styleName$16, styleName);
	  } else
	    for (var styleName$17 in styles)
	      styles.hasOwnProperty(styleName$17) &&
	        setValueForStyle(node, styleName$17, styles[styleName$17]);
	}
	function isCustomElement(tagName) {
	  if (-1 === tagName.indexOf("-")) return false;
	  switch (tagName) {
	    case "annotation-xml":
	    case "color-profile":
	    case "font-face":
	    case "font-face-src":
	    case "font-face-uri":
	    case "font-face-format":
	    case "font-face-name":
	    case "missing-glyph":
	      return false;
	    default:
	      return true;
	  }
	}
	var aliases = new Map([
	    ["acceptCharset", "accept-charset"],
	    ["htmlFor", "for"],
	    ["httpEquiv", "http-equiv"],
	    ["crossOrigin", "crossorigin"],
	    ["accentHeight", "accent-height"],
	    ["alignmentBaseline", "alignment-baseline"],
	    ["arabicForm", "arabic-form"],
	    ["baselineShift", "baseline-shift"],
	    ["capHeight", "cap-height"],
	    ["clipPath", "clip-path"],
	    ["clipRule", "clip-rule"],
	    ["colorInterpolation", "color-interpolation"],
	    ["colorInterpolationFilters", "color-interpolation-filters"],
	    ["colorProfile", "color-profile"],
	    ["colorRendering", "color-rendering"],
	    ["dominantBaseline", "dominant-baseline"],
	    ["enableBackground", "enable-background"],
	    ["fillOpacity", "fill-opacity"],
	    ["fillRule", "fill-rule"],
	    ["floodColor", "flood-color"],
	    ["floodOpacity", "flood-opacity"],
	    ["fontFamily", "font-family"],
	    ["fontSize", "font-size"],
	    ["fontSizeAdjust", "font-size-adjust"],
	    ["fontStretch", "font-stretch"],
	    ["fontStyle", "font-style"],
	    ["fontVariant", "font-variant"],
	    ["fontWeight", "font-weight"],
	    ["glyphName", "glyph-name"],
	    ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
	    ["glyphOrientationVertical", "glyph-orientation-vertical"],
	    ["horizAdvX", "horiz-adv-x"],
	    ["horizOriginX", "horiz-origin-x"],
	    ["imageRendering", "image-rendering"],
	    ["letterSpacing", "letter-spacing"],
	    ["lightingColor", "lighting-color"],
	    ["markerEnd", "marker-end"],
	    ["markerMid", "marker-mid"],
	    ["markerStart", "marker-start"],
	    ["overlinePosition", "overline-position"],
	    ["overlineThickness", "overline-thickness"],
	    ["paintOrder", "paint-order"],
	    ["panose-1", "panose-1"],
	    ["pointerEvents", "pointer-events"],
	    ["renderingIntent", "rendering-intent"],
	    ["shapeRendering", "shape-rendering"],
	    ["stopColor", "stop-color"],
	    ["stopOpacity", "stop-opacity"],
	    ["strikethroughPosition", "strikethrough-position"],
	    ["strikethroughThickness", "strikethrough-thickness"],
	    ["strokeDasharray", "stroke-dasharray"],
	    ["strokeDashoffset", "stroke-dashoffset"],
	    ["strokeLinecap", "stroke-linecap"],
	    ["strokeLinejoin", "stroke-linejoin"],
	    ["strokeMiterlimit", "stroke-miterlimit"],
	    ["strokeOpacity", "stroke-opacity"],
	    ["strokeWidth", "stroke-width"],
	    ["textAnchor", "text-anchor"],
	    ["textDecoration", "text-decoration"],
	    ["textRendering", "text-rendering"],
	    ["transformOrigin", "transform-origin"],
	    ["underlinePosition", "underline-position"],
	    ["underlineThickness", "underline-thickness"],
	    ["unicodeBidi", "unicode-bidi"],
	    ["unicodeRange", "unicode-range"],
	    ["unitsPerEm", "units-per-em"],
	    ["vAlphabetic", "v-alphabetic"],
	    ["vHanging", "v-hanging"],
	    ["vIdeographic", "v-ideographic"],
	    ["vMathematical", "v-mathematical"],
	    ["vectorEffect", "vector-effect"],
	    ["vertAdvY", "vert-adv-y"],
	    ["vertOriginX", "vert-origin-x"],
	    ["vertOriginY", "vert-origin-y"],
	    ["wordSpacing", "word-spacing"],
	    ["writingMode", "writing-mode"],
	    ["xmlnsXlink", "xmlns:xlink"],
	    ["xHeight", "x-height"]
	  ]),
	  isJavaScriptProtocol =
	    /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;
	function sanitizeURL(url) {
	  return isJavaScriptProtocol.test("" + url)
	    ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')"
	    : url;
	}
	var currentReplayingEvent = null;
	function getEventTarget(nativeEvent) {
	  nativeEvent = nativeEvent.target || nativeEvent.srcElement || window;
	  nativeEvent.correspondingUseElement &&
	    (nativeEvent = nativeEvent.correspondingUseElement);
	  return 3 === nativeEvent.nodeType ? nativeEvent.parentNode : nativeEvent;
	}
	var restoreTarget = null,
	  restoreQueue = null;
	function restoreStateOfTarget(target) {
	  var internalInstance = getInstanceFromNode(target);
	  if (internalInstance && (target = internalInstance.stateNode)) {
	    var props = target[internalPropsKey] || null;
	    a: switch (((target = internalInstance.stateNode), internalInstance.type)) {
	      case "input":
	        updateInput(
	          target,
	          props.value,
	          props.defaultValue,
	          props.defaultValue,
	          props.checked,
	          props.defaultChecked,
	          props.type,
	          props.name
	        );
	        internalInstance = props.name;
	        if ("radio" === props.type && null != internalInstance) {
	          for (props = target; props.parentNode; ) props = props.parentNode;
	          props = props.querySelectorAll(
	            'input[name="' +
	              escapeSelectorAttributeValueInsideDoubleQuotes(
	                "" + internalInstance
	              ) +
	              '"][type="radio"]'
	          );
	          for (
	            internalInstance = 0;
	            internalInstance < props.length;
	            internalInstance++
	          ) {
	            var otherNode = props[internalInstance];
	            if (otherNode !== target && otherNode.form === target.form) {
	              var otherProps = otherNode[internalPropsKey] || null;
	              if (!otherProps) throw Error(formatProdErrorMessage(90));
	              updateInput(
	                otherNode,
	                otherProps.value,
	                otherProps.defaultValue,
	                otherProps.defaultValue,
	                otherProps.checked,
	                otherProps.defaultChecked,
	                otherProps.type,
	                otherProps.name
	              );
	            }
	          }
	          for (
	            internalInstance = 0;
	            internalInstance < props.length;
	            internalInstance++
	          )
	            (otherNode = props[internalInstance]),
	              otherNode.form === target.form && updateValueIfChanged(otherNode);
	        }
	        break a;
	      case "textarea":
	        updateTextarea(target, props.value, props.defaultValue);
	        break a;
	      case "select":
	        (internalInstance = props.value),
	          null != internalInstance &&
	            updateOptions(target, !!props.multiple, internalInstance, false);
	    }
	  }
	}
	var isInsideEventHandler = false;
	function batchedUpdates$1(fn, a, b) {
	  if (isInsideEventHandler) return fn(a, b);
	  isInsideEventHandler = true;
	  try {
	    var JSCompiler_inline_result = fn(a);
	    return JSCompiler_inline_result;
	  } finally {
	    if (
	      ((isInsideEventHandler = false),
	      null !== restoreTarget || null !== restoreQueue)
	    )
	      if (
	        (flushSyncWork$1(),
	        restoreTarget &&
	          ((a = restoreTarget),
	          (fn = restoreQueue),
	          (restoreQueue = restoreTarget = null),
	          restoreStateOfTarget(a),
	          fn))
	      )
	        for (a = 0; a < fn.length; a++) restoreStateOfTarget(fn[a]);
	  }
	}
	function getListener(inst, registrationName) {
	  var stateNode = inst.stateNode;
	  if (null === stateNode) return null;
	  var props = stateNode[internalPropsKey] || null;
	  if (null === props) return null;
	  stateNode = props[registrationName];
	  a: switch (registrationName) {
	    case "onClick":
	    case "onClickCapture":
	    case "onDoubleClick":
	    case "onDoubleClickCapture":
	    case "onMouseDown":
	    case "onMouseDownCapture":
	    case "onMouseMove":
	    case "onMouseMoveCapture":
	    case "onMouseUp":
	    case "onMouseUpCapture":
	    case "onMouseEnter":
	      (props = !props.disabled) ||
	        ((inst = inst.type),
	        (props = !(
	          "button" === inst ||
	          "input" === inst ||
	          "select" === inst ||
	          "textarea" === inst
	        )));
	      inst = !props;
	      break a;
	    default:
	      inst = false;
	  }
	  if (inst) return null;
	  if (stateNode && "function" !== typeof stateNode)
	    throw Error(
	      formatProdErrorMessage(231, registrationName, typeof stateNode)
	    );
	  return stateNode;
	}
	var passiveBrowserEventsSupported = false;
	if (canUseDOM)
	  try {
	    var options = {};
	    Object.defineProperty(options, "passive", {
	      get: function () {
	        passiveBrowserEventsSupported = !0;
	      }
	    });
	    window.addEventListener("test", options, options);
	    window.removeEventListener("test", options, options);
	  } catch (e) {
	    passiveBrowserEventsSupported = false;
	  }
	var root = null,
	  startText = null,
	  fallbackText = null;
	function getData() {
	  if (fallbackText) return fallbackText;
	  var start,
	    startValue = startText,
	    startLength = startValue.length,
	    end,
	    endValue = "value" in root ? root.value : root.textContent,
	    endLength = endValue.length;
	  for (
	    start = 0;
	    start < startLength && startValue[start] === endValue[start];
	    start++
	  );
	  var minEnd = startLength - start;
	  for (
	    end = 1;
	    end <= minEnd &&
	    startValue[startLength - end] === endValue[endLength - end];
	    end++
	  );
	  return (fallbackText = endValue.slice(start, 1 < end ? 1 - end : undefined));
	}
	function getEventCharCode(nativeEvent) {
	  var keyCode = nativeEvent.keyCode;
	  "charCode" in nativeEvent
	    ? ((nativeEvent = nativeEvent.charCode),
	      0 === nativeEvent && 13 === keyCode && (nativeEvent = 13))
	    : (nativeEvent = keyCode);
	  10 === nativeEvent && (nativeEvent = 13);
	  return 32 <= nativeEvent || 13 === nativeEvent ? nativeEvent : 0;
	}
	function functionThatReturnsTrue() {
	  return true;
	}
	function functionThatReturnsFalse() {
	  return false;
	}
	function createSyntheticEvent(Interface) {
	  function SyntheticBaseEvent(
	    reactName,
	    reactEventType,
	    targetInst,
	    nativeEvent,
	    nativeEventTarget
	  ) {
	    this._reactName = reactName;
	    this._targetInst = targetInst;
	    this.type = reactEventType;
	    this.nativeEvent = nativeEvent;
	    this.target = nativeEventTarget;
	    this.currentTarget = null;
	    for (var propName in Interface)
	      Interface.hasOwnProperty(propName) &&
	        ((reactName = Interface[propName]),
	        (this[propName] = reactName
	          ? reactName(nativeEvent)
	          : nativeEvent[propName]));
	    this.isDefaultPrevented = (
	      null != nativeEvent.defaultPrevented
	        ? nativeEvent.defaultPrevented
	        : false === nativeEvent.returnValue
	    )
	      ? functionThatReturnsTrue
	      : functionThatReturnsFalse;
	    this.isPropagationStopped = functionThatReturnsFalse;
	    return this;
	  }
	  assign(SyntheticBaseEvent.prototype, {
	    preventDefault: function () {
	      this.defaultPrevented = true;
	      var event = this.nativeEvent;
	      event &&
	        (event.preventDefault
	          ? event.preventDefault()
	          : "unknown" !== typeof event.returnValue && (event.returnValue = false),
	        (this.isDefaultPrevented = functionThatReturnsTrue));
	    },
	    stopPropagation: function () {
	      var event = this.nativeEvent;
	      event &&
	        (event.stopPropagation
	          ? event.stopPropagation()
	          : "unknown" !== typeof event.cancelBubble &&
	            (event.cancelBubble = true),
	        (this.isPropagationStopped = functionThatReturnsTrue));
	    },
	    persist: function () {},
	    isPersistent: functionThatReturnsTrue
	  });
	  return SyntheticBaseEvent;
	}
	var EventInterface = {
	    eventPhase: 0,
	    bubbles: 0,
	    cancelable: 0,
	    timeStamp: function (event) {
	      return event.timeStamp || Date.now();
	    },
	    defaultPrevented: 0,
	    isTrusted: 0
	  },
	  SyntheticEvent = createSyntheticEvent(EventInterface),
	  UIEventInterface = assign({}, EventInterface, { view: 0, detail: 0 }),
	  SyntheticUIEvent = createSyntheticEvent(UIEventInterface),
	  lastMovementX,
	  lastMovementY,
	  lastMouseEvent,
	  MouseEventInterface = assign({}, UIEventInterface, {
	    screenX: 0,
	    screenY: 0,
	    clientX: 0,
	    clientY: 0,
	    pageX: 0,
	    pageY: 0,
	    ctrlKey: 0,
	    shiftKey: 0,
	    altKey: 0,
	    metaKey: 0,
	    getModifierState: getEventModifierState,
	    button: 0,
	    buttons: 0,
	    relatedTarget: function (event) {
	      return undefined === event.relatedTarget
	        ? event.fromElement === event.srcElement
	          ? event.toElement
	          : event.fromElement
	        : event.relatedTarget;
	    },
	    movementX: function (event) {
	      if ("movementX" in event) return event.movementX;
	      event !== lastMouseEvent &&
	        (lastMouseEvent && "mousemove" === event.type
	          ? ((lastMovementX = event.screenX - lastMouseEvent.screenX),
	            (lastMovementY = event.screenY - lastMouseEvent.screenY))
	          : (lastMovementY = lastMovementX = 0),
	        (lastMouseEvent = event));
	      return lastMovementX;
	    },
	    movementY: function (event) {
	      return "movementY" in event ? event.movementY : lastMovementY;
	    }
	  }),
	  SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface),
	  DragEventInterface = assign({}, MouseEventInterface, { dataTransfer: 0 }),
	  SyntheticDragEvent = createSyntheticEvent(DragEventInterface),
	  FocusEventInterface = assign({}, UIEventInterface, { relatedTarget: 0 }),
	  SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface),
	  AnimationEventInterface = assign({}, EventInterface, {
	    animationName: 0,
	    elapsedTime: 0,
	    pseudoElement: 0
	  }),
	  SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface),
	  ClipboardEventInterface = assign({}, EventInterface, {
	    clipboardData: function (event) {
	      return "clipboardData" in event
	        ? event.clipboardData
	        : window.clipboardData;
	    }
	  }),
	  SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface),
	  CompositionEventInterface = assign({}, EventInterface, { data: 0 }),
	  SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface),
	  normalizeKey = {
	    Esc: "Escape",
	    Spacebar: " ",
	    Left: "ArrowLeft",
	    Up: "ArrowUp",
	    Right: "ArrowRight",
	    Down: "ArrowDown",
	    Del: "Delete",
	    Win: "OS",
	    Menu: "ContextMenu",
	    Apps: "ContextMenu",
	    Scroll: "ScrollLock",
	    MozPrintableKey: "Unidentified"
	  },
	  translateToKey = {
	    8: "Backspace",
	    9: "Tab",
	    12: "Clear",
	    13: "Enter",
	    16: "Shift",
	    17: "Control",
	    18: "Alt",
	    19: "Pause",
	    20: "CapsLock",
	    27: "Escape",
	    32: " ",
	    33: "PageUp",
	    34: "PageDown",
	    35: "End",
	    36: "Home",
	    37: "ArrowLeft",
	    38: "ArrowUp",
	    39: "ArrowRight",
	    40: "ArrowDown",
	    45: "Insert",
	    46: "Delete",
	    112: "F1",
	    113: "F2",
	    114: "F3",
	    115: "F4",
	    116: "F5",
	    117: "F6",
	    118: "F7",
	    119: "F8",
	    120: "F9",
	    121: "F10",
	    122: "F11",
	    123: "F12",
	    144: "NumLock",
	    145: "ScrollLock",
	    224: "Meta"
	  },
	  modifierKeyToProp = {
	    Alt: "altKey",
	    Control: "ctrlKey",
	    Meta: "metaKey",
	    Shift: "shiftKey"
	  };
	function modifierStateGetter(keyArg) {
	  var nativeEvent = this.nativeEvent;
	  return nativeEvent.getModifierState
	    ? nativeEvent.getModifierState(keyArg)
	    : (keyArg = modifierKeyToProp[keyArg])
	      ? !!nativeEvent[keyArg]
	      : false;
	}
	function getEventModifierState() {
	  return modifierStateGetter;
	}
	var KeyboardEventInterface = assign({}, UIEventInterface, {
	    key: function (nativeEvent) {
	      if (nativeEvent.key) {
	        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	        if ("Unidentified" !== key) return key;
	      }
	      return "keypress" === nativeEvent.type
	        ? ((nativeEvent = getEventCharCode(nativeEvent)),
	          13 === nativeEvent ? "Enter" : String.fromCharCode(nativeEvent))
	        : "keydown" === nativeEvent.type || "keyup" === nativeEvent.type
	          ? translateToKey[nativeEvent.keyCode] || "Unidentified"
	          : "";
	    },
	    code: 0,
	    location: 0,
	    ctrlKey: 0,
	    shiftKey: 0,
	    altKey: 0,
	    metaKey: 0,
	    repeat: 0,
	    locale: 0,
	    getModifierState: getEventModifierState,
	    charCode: function (event) {
	      return "keypress" === event.type ? getEventCharCode(event) : 0;
	    },
	    keyCode: function (event) {
	      return "keydown" === event.type || "keyup" === event.type
	        ? event.keyCode
	        : 0;
	    },
	    which: function (event) {
	      return "keypress" === event.type
	        ? getEventCharCode(event)
	        : "keydown" === event.type || "keyup" === event.type
	          ? event.keyCode
	          : 0;
	    }
	  }),
	  SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface),
	  PointerEventInterface = assign({}, MouseEventInterface, {
	    pointerId: 0,
	    width: 0,
	    height: 0,
	    pressure: 0,
	    tangentialPressure: 0,
	    tiltX: 0,
	    tiltY: 0,
	    twist: 0,
	    pointerType: 0,
	    isPrimary: 0
	  }),
	  SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface),
	  TouchEventInterface = assign({}, UIEventInterface, {
	    touches: 0,
	    targetTouches: 0,
	    changedTouches: 0,
	    altKey: 0,
	    metaKey: 0,
	    ctrlKey: 0,
	    shiftKey: 0,
	    getModifierState: getEventModifierState
	  }),
	  SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface),
	  TransitionEventInterface = assign({}, EventInterface, {
	    propertyName: 0,
	    elapsedTime: 0,
	    pseudoElement: 0
	  }),
	  SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface),
	  WheelEventInterface = assign({}, MouseEventInterface, {
	    deltaX: function (event) {
	      return "deltaX" in event
	        ? event.deltaX
	        : "wheelDeltaX" in event
	          ? -event.wheelDeltaX
	          : 0;
	    },
	    deltaY: function (event) {
	      return "deltaY" in event
	        ? event.deltaY
	        : "wheelDeltaY" in event
	          ? -event.wheelDeltaY
	          : "wheelDelta" in event
	            ? -event.wheelDelta
	            : 0;
	    },
	    deltaZ: 0,
	    deltaMode: 0
	  }),
	  SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface),
	  ToggleEventInterface = assign({}, EventInterface, {
	    newState: 0,
	    oldState: 0
	  }),
	  SyntheticToggleEvent = createSyntheticEvent(ToggleEventInterface),
	  END_KEYCODES = [9, 13, 27, 32],
	  canUseCompositionEvent = canUseDOM && "CompositionEvent" in window,
	  documentMode = null;
	canUseDOM &&
	  "documentMode" in document &&
	  (documentMode = document.documentMode);
	var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode,
	  useFallbackCompositionData =
	    canUseDOM &&
	    (!canUseCompositionEvent ||
	      (documentMode && 8 < documentMode && 11 >= documentMode)),
	  SPACEBAR_CHAR = String.fromCharCode(32),
	  hasSpaceKeypress = false;
	function isFallbackCompositionEnd(domEventName, nativeEvent) {
	  switch (domEventName) {
	    case "keyup":
	      return -1 !== END_KEYCODES.indexOf(nativeEvent.keyCode);
	    case "keydown":
	      return 229 !== nativeEvent.keyCode;
	    case "keypress":
	    case "mousedown":
	    case "focusout":
	      return true;
	    default:
	      return false;
	  }
	}
	function getDataFromCustomEvent(nativeEvent) {
	  nativeEvent = nativeEvent.detail;
	  return "object" === typeof nativeEvent && "data" in nativeEvent
	    ? nativeEvent.data
	    : null;
	}
	var isComposing = false;
	function getNativeBeforeInputChars(domEventName, nativeEvent) {
	  switch (domEventName) {
	    case "compositionend":
	      return getDataFromCustomEvent(nativeEvent);
	    case "keypress":
	      if (32 !== nativeEvent.which) return null;
	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;
	    case "textInput":
	      return (
	        (domEventName = nativeEvent.data),
	        domEventName === SPACEBAR_CHAR && hasSpaceKeypress ? null : domEventName
	      );
	    default:
	      return null;
	  }
	}
	function getFallbackBeforeInputChars(domEventName, nativeEvent) {
	  if (isComposing)
	    return "compositionend" === domEventName ||
	      (!canUseCompositionEvent &&
	        isFallbackCompositionEnd(domEventName, nativeEvent))
	      ? ((domEventName = getData()),
	        (fallbackText = startText = root = null),
	        (isComposing = false),
	        domEventName)
	      : null;
	  switch (domEventName) {
	    case "paste":
	      return null;
	    case "keypress":
	      if (
	        !(nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) ||
	        (nativeEvent.ctrlKey && nativeEvent.altKey)
	      ) {
	        if (nativeEvent.char && 1 < nativeEvent.char.length)
	          return nativeEvent.char;
	        if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case "compositionend":
	      return useFallbackCompositionData && "ko" !== nativeEvent.locale
	        ? null
	        : nativeEvent.data;
	    default:
	      return null;
	  }
	}
	var supportedInputTypes = {
	  color: true,
	  date: true,
	  datetime: true,
	  "datetime-local": true,
	  email: true,
	  month: true,
	  number: true,
	  password: true,
	  range: true,
	  search: true,
	  tel: true,
	  text: true,
	  time: true,
	  url: true,
	  week: true
	};
	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return "input" === nodeName
	    ? !!supportedInputTypes[elem.type]
	    : "textarea" === nodeName
	      ? true
	      : false;
	}
	function createAndAccumulateChangeEvent(
	  dispatchQueue,
	  inst,
	  nativeEvent,
	  target
	) {
	  restoreTarget
	    ? restoreQueue
	      ? restoreQueue.push(target)
	      : (restoreQueue = [target])
	    : (restoreTarget = target);
	  inst = accumulateTwoPhaseListeners(inst, "onChange");
	  0 < inst.length &&
	    ((nativeEvent = new SyntheticEvent(
	      "onChange",
	      "change",
	      null,
	      nativeEvent,
	      target
	    )),
	    dispatchQueue.push({ event: nativeEvent, listeners: inst }));
	}
	var activeElement$1 = null,
	  activeElementInst$1 = null;
	function runEventInBatch(dispatchQueue) {
	  processDispatchQueue(dispatchQueue, 0);
	}
	function getInstIfValueChanged(targetInst) {
	  var targetNode = getNodeFromInstance(targetInst);
	  if (updateValueIfChanged(targetNode)) return targetInst;
	}
	function getTargetInstForChangeEvent(domEventName, targetInst) {
	  if ("change" === domEventName) return targetInst;
	}
	var isInputEventSupported = false;
	if (canUseDOM) {
	  var JSCompiler_inline_result$jscomp$283;
	  if (canUseDOM) {
	    var isSupported$jscomp$inline_418 = "oninput" in document;
	    if (!isSupported$jscomp$inline_418) {
	      var element$jscomp$inline_419 = document.createElement("div");
	      element$jscomp$inline_419.setAttribute("oninput", "return;");
	      isSupported$jscomp$inline_418 =
	        "function" === typeof element$jscomp$inline_419.oninput;
	    }
	    JSCompiler_inline_result$jscomp$283 = isSupported$jscomp$inline_418;
	  } else JSCompiler_inline_result$jscomp$283 = false;
	  isInputEventSupported =
	    JSCompiler_inline_result$jscomp$283 &&
	    (!document.documentMode || 9 < document.documentMode);
	}
	function stopWatchingForValueChange() {
	  activeElement$1 &&
	    (activeElement$1.detachEvent("onpropertychange", handlePropertyChange),
	    (activeElementInst$1 = activeElement$1 = null));
	}
	function handlePropertyChange(nativeEvent) {
	  if (
	    "value" === nativeEvent.propertyName &&
	    getInstIfValueChanged(activeElementInst$1)
	  ) {
	    var dispatchQueue = [];
	    createAndAccumulateChangeEvent(
	      dispatchQueue,
	      activeElementInst$1,
	      nativeEvent,
	      getEventTarget(nativeEvent)
	    );
	    batchedUpdates$1(runEventInBatch, dispatchQueue);
	  }
	}
	function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
	  "focusin" === domEventName
	    ? (stopWatchingForValueChange(),
	      (activeElement$1 = target),
	      (activeElementInst$1 = targetInst),
	      activeElement$1.attachEvent("onpropertychange", handlePropertyChange))
	    : "focusout" === domEventName && stopWatchingForValueChange();
	}
	function getTargetInstForInputEventPolyfill(domEventName) {
	  if (
	    "selectionchange" === domEventName ||
	    "keyup" === domEventName ||
	    "keydown" === domEventName
	  )
	    return getInstIfValueChanged(activeElementInst$1);
	}
	function getTargetInstForClickEvent(domEventName, targetInst) {
	  if ("click" === domEventName) return getInstIfValueChanged(targetInst);
	}
	function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
	  if ("input" === domEventName || "change" === domEventName)
	    return getInstIfValueChanged(targetInst);
	}
	function is(x, y) {
	  return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);
	}
	var objectIs = "function" === typeof Object.is ? Object.is : is;
	function shallowEqual(objA, objB) {
	  if (objectIs(objA, objB)) return true;
	  if (
	    "object" !== typeof objA ||
	    null === objA ||
	    "object" !== typeof objB ||
	    null === objB
	  )
	    return false;
	  var keysA = Object.keys(objA),
	    keysB = Object.keys(objB);
	  if (keysA.length !== keysB.length) return false;
	  for (keysB = 0; keysB < keysA.length; keysB++) {
	    var currentKey = keysA[keysB];
	    if (
	      !hasOwnProperty.call(objB, currentKey) ||
	      !objectIs(objA[currentKey], objB[currentKey])
	    )
	      return false;
	  }
	  return true;
	}
	function getLeafNode(node) {
	  for (; node && node.firstChild; ) node = node.firstChild;
	  return node;
	}
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  root = 0;
	  for (var nodeEnd; node; ) {
	    if (3 === node.nodeType) {
	      nodeEnd = root + node.textContent.length;
	      if (root <= offset && nodeEnd >= offset)
	        return { node: node, offset: offset - root };
	      root = nodeEnd;
	    }
	    a: {
	      for (; node; ) {
	        if (node.nextSibling) {
	          node = node.nextSibling;
	          break a;
	        }
	        node = node.parentNode;
	      }
	      node = undefined;
	    }
	    node = getLeafNode(node);
	  }
	}
	function containsNode(outerNode, innerNode) {
	  return outerNode && innerNode
	    ? outerNode === innerNode
	      ? true
	      : outerNode && 3 === outerNode.nodeType
	        ? false
	        : innerNode && 3 === innerNode.nodeType
	          ? containsNode(outerNode, innerNode.parentNode)
	          : "contains" in outerNode
	            ? outerNode.contains(innerNode)
	            : outerNode.compareDocumentPosition
	              ? !!(outerNode.compareDocumentPosition(innerNode) & 16)
	              : false
	    : false;
	}
	function getActiveElementDeep(containerInfo) {
	  containerInfo =
	    null != containerInfo &&
	    null != containerInfo.ownerDocument &&
	    null != containerInfo.ownerDocument.defaultView
	      ? containerInfo.ownerDocument.defaultView
	      : window;
	  for (
	    var element = getActiveElement(containerInfo.document);
	    element instanceof containerInfo.HTMLIFrameElement;

	  ) {
	    try {
	      var JSCompiler_inline_result =
	        "string" === typeof element.contentWindow.location.href;
	    } catch (err) {
	      JSCompiler_inline_result = false;
	    }
	    if (JSCompiler_inline_result) containerInfo = element.contentWindow;
	    else break;
	    element = getActiveElement(containerInfo.document);
	  }
	  return element;
	}
	function hasSelectionCapabilities(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return (
	    nodeName &&
	    (("input" === nodeName &&
	      ("text" === elem.type ||
	        "search" === elem.type ||
	        "tel" === elem.type ||
	        "url" === elem.type ||
	        "password" === elem.type)) ||
	      "textarea" === nodeName ||
	      "true" === elem.contentEditable)
	  );
	}
	function restoreSelection(priorSelectionInformation, containerInfo) {
	  var curFocusedElem = getActiveElementDeep(containerInfo);
	  containerInfo = priorSelectionInformation.focusedElem;
	  var priorSelectionRange = priorSelectionInformation.selectionRange;
	  if (
	    curFocusedElem !== containerInfo &&
	    containerInfo &&
	    containerInfo.ownerDocument &&
	    containsNode(containerInfo.ownerDocument.documentElement, containerInfo)
	  ) {
	    if (null !== priorSelectionRange && hasSelectionCapabilities(containerInfo))
	      if (
	        ((priorSelectionInformation = priorSelectionRange.start),
	        (curFocusedElem = priorSelectionRange.end),
	        undefined === curFocusedElem &&
	          (curFocusedElem = priorSelectionInformation),
	        "selectionStart" in containerInfo)
	      )
	        (containerInfo.selectionStart = priorSelectionInformation),
	          (containerInfo.selectionEnd = Math.min(
	            curFocusedElem,
	            containerInfo.value.length
	          ));
	      else if (
	        ((curFocusedElem =
	          ((priorSelectionInformation =
	            containerInfo.ownerDocument || document) &&
	            priorSelectionInformation.defaultView) ||
	          window),
	        curFocusedElem.getSelection)
	      ) {
	        curFocusedElem = curFocusedElem.getSelection();
	        var length = containerInfo.textContent.length,
	          start = Math.min(priorSelectionRange.start, length);
	        priorSelectionRange =
	          undefined === priorSelectionRange.end
	            ? start
	            : Math.min(priorSelectionRange.end, length);
	        !curFocusedElem.extend &&
	          start > priorSelectionRange &&
	          ((length = priorSelectionRange),
	          (priorSelectionRange = start),
	          (start = length));
	        length = getNodeForCharacterOffset(containerInfo, start);
	        var endMarker = getNodeForCharacterOffset(
	          containerInfo,
	          priorSelectionRange
	        );
	        length &&
	          endMarker &&
	          (1 !== curFocusedElem.rangeCount ||
	            curFocusedElem.anchorNode !== length.node ||
	            curFocusedElem.anchorOffset !== length.offset ||
	            curFocusedElem.focusNode !== endMarker.node ||
	            curFocusedElem.focusOffset !== endMarker.offset) &&
	          ((priorSelectionInformation =
	            priorSelectionInformation.createRange()),
	          priorSelectionInformation.setStart(length.node, length.offset),
	          curFocusedElem.removeAllRanges(),
	          start > priorSelectionRange
	            ? (curFocusedElem.addRange(priorSelectionInformation),
	              curFocusedElem.extend(endMarker.node, endMarker.offset))
	            : (priorSelectionInformation.setEnd(
	                endMarker.node,
	                endMarker.offset
	              ),
	              curFocusedElem.addRange(priorSelectionInformation)));
	      }
	    priorSelectionInformation = [];
	    for (
	      curFocusedElem = containerInfo;
	      (curFocusedElem = curFocusedElem.parentNode);

	    )
	      1 === curFocusedElem.nodeType &&
	        priorSelectionInformation.push({
	          element: curFocusedElem,
	          left: curFocusedElem.scrollLeft,
	          top: curFocusedElem.scrollTop
	        });
	    "function" === typeof containerInfo.focus && containerInfo.focus();
	    for (
	      containerInfo = 0;
	      containerInfo < priorSelectionInformation.length;
	      containerInfo++
	    )
	      (curFocusedElem = priorSelectionInformation[containerInfo]),
	        (curFocusedElem.element.scrollLeft = curFocusedElem.left),
	        (curFocusedElem.element.scrollTop = curFocusedElem.top);
	  }
	}
	var skipSelectionChangeEvent =
	    canUseDOM && "documentMode" in document && 11 >= document.documentMode,
	  activeElement = null,
	  activeElementInst = null,
	  lastSelection = null,
	  mouseDown = false;
	function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
	  var doc =
	    nativeEventTarget.window === nativeEventTarget
	      ? nativeEventTarget.document
	      : 9 === nativeEventTarget.nodeType
	        ? nativeEventTarget
	        : nativeEventTarget.ownerDocument;
	  mouseDown ||
	    null == activeElement ||
	    activeElement !== getActiveElement(doc) ||
	    ((doc = activeElement),
	    "selectionStart" in doc && hasSelectionCapabilities(doc)
	      ? (doc = { start: doc.selectionStart, end: doc.selectionEnd })
	      : ((doc = (
	          (doc.ownerDocument && doc.ownerDocument.defaultView) ||
	          window
	        ).getSelection()),
	        (doc = {
	          anchorNode: doc.anchorNode,
	          anchorOffset: doc.anchorOffset,
	          focusNode: doc.focusNode,
	          focusOffset: doc.focusOffset
	        })),
	    (lastSelection && shallowEqual(lastSelection, doc)) ||
	      ((lastSelection = doc),
	      (doc = accumulateTwoPhaseListeners(activeElementInst, "onSelect")),
	      0 < doc.length &&
	        ((nativeEvent = new SyntheticEvent(
	          "onSelect",
	          "select",
	          null,
	          nativeEvent,
	          nativeEventTarget
	        )),
	        dispatchQueue.push({ event: nativeEvent, listeners: doc }),
	        (nativeEvent.target = activeElement))));
	}
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};
	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes["Webkit" + styleProp] = "webkit" + eventName;
	  prefixes["Moz" + styleProp] = "moz" + eventName;
	  return prefixes;
	}
	var vendorPrefixes = {
	    animationend: makePrefixMap("Animation", "AnimationEnd"),
	    animationiteration: makePrefixMap("Animation", "AnimationIteration"),
	    animationstart: makePrefixMap("Animation", "AnimationStart"),
	    transitionrun: makePrefixMap("Transition", "TransitionRun"),
	    transitionstart: makePrefixMap("Transition", "TransitionStart"),
	    transitioncancel: makePrefixMap("Transition", "TransitionCancel"),
	    transitionend: makePrefixMap("Transition", "TransitionEnd")
	  },
	  prefixedEventNames = {},
	  style = {};
	canUseDOM &&
	  ((style = document.createElement("div").style),
	  "AnimationEvent" in window ||
	    (delete vendorPrefixes.animationend.animation,
	    delete vendorPrefixes.animationiteration.animation,
	    delete vendorPrefixes.animationstart.animation),
	  "TransitionEvent" in window ||
	    delete vendorPrefixes.transitionend.transition);
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
	  if (!vendorPrefixes[eventName]) return eventName;
	  var prefixMap = vendorPrefixes[eventName],
	    styleProp;
	  for (styleProp in prefixMap)
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
	      return (prefixedEventNames[eventName] = prefixMap[styleProp]);
	  return eventName;
	}
	var ANIMATION_END = getVendorPrefixedEventName("animationend"),
	  ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"),
	  ANIMATION_START = getVendorPrefixedEventName("animationstart"),
	  TRANSITION_RUN = getVendorPrefixedEventName("transitionrun"),
	  TRANSITION_START = getVendorPrefixedEventName("transitionstart"),
	  TRANSITION_CANCEL = getVendorPrefixedEventName("transitioncancel"),
	  TRANSITION_END = getVendorPrefixedEventName("transitionend"),
	  topLevelEventsToReactNames = new Map(),
	  simpleEventPluginEvents =
	    "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel".split(
	      " "
	    );
	function registerSimpleEvent(domEventName, reactName) {
	  topLevelEventsToReactNames.set(domEventName, reactName);
	  registerTwoPhaseEvent(reactName, [domEventName]);
	}
	var concurrentQueues = [],
	  concurrentQueuesIndex = 0,
	  concurrentlyUpdatedLanes = 0;
	function finishQueueingConcurrentUpdates() {
	  for (
	    var endIndex = concurrentQueuesIndex,
	      i = (concurrentlyUpdatedLanes = concurrentQueuesIndex = 0);
	    i < endIndex;

	  ) {
	    var fiber = concurrentQueues[i];
	    concurrentQueues[i++] = null;
	    var queue = concurrentQueues[i];
	    concurrentQueues[i++] = null;
	    var update = concurrentQueues[i];
	    concurrentQueues[i++] = null;
	    var lane = concurrentQueues[i];
	    concurrentQueues[i++] = null;
	    if (null !== queue && null !== update) {
	      var pending = queue.pending;
	      null === pending
	        ? (update.next = update)
	        : ((update.next = pending.next), (pending.next = update));
	      queue.pending = update;
	    }
	    0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
	  }
	}
	function enqueueUpdate$1(fiber, queue, update, lane) {
	  concurrentQueues[concurrentQueuesIndex++] = fiber;
	  concurrentQueues[concurrentQueuesIndex++] = queue;
	  concurrentQueues[concurrentQueuesIndex++] = update;
	  concurrentQueues[concurrentQueuesIndex++] = lane;
	  concurrentlyUpdatedLanes |= lane;
	  fiber.lanes |= lane;
	  fiber = fiber.alternate;
	  null !== fiber && (fiber.lanes |= lane);
	}
	function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
	  enqueueUpdate$1(fiber, queue, update, lane);
	  return getRootForUpdatedFiber(fiber);
	}
	function enqueueConcurrentRenderForLane(fiber, lane) {
	  enqueueUpdate$1(fiber, null, null, lane);
	  return getRootForUpdatedFiber(fiber);
	}
	function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
	  sourceFiber.lanes |= lane;
	  var alternate = sourceFiber.alternate;
	  null !== alternate && (alternate.lanes |= lane);
	  for (var isHidden = false, parent = sourceFiber.return; null !== parent; )
	    (parent.childLanes |= lane),
	      (alternate = parent.alternate),
	      null !== alternate && (alternate.childLanes |= lane),
	      22 === parent.tag &&
	        ((sourceFiber = parent.stateNode),
	        null === sourceFiber || sourceFiber._visibility & 1 || (isHidden = true)),
	      (sourceFiber = parent),
	      (parent = parent.return);
	  isHidden &&
	    null !== update &&
	    3 === sourceFiber.tag &&
	    ((parent = sourceFiber.stateNode),
	    (isHidden = 31 - clz32(lane)),
	    (parent = parent.hiddenUpdates),
	    (sourceFiber = parent[isHidden]),
	    null === sourceFiber
	      ? (parent[isHidden] = [update])
	      : sourceFiber.push(update),
	    (update.lane = lane | 536870912));
	}
	function getRootForUpdatedFiber(sourceFiber) {
	  if (50 < nestedUpdateCount)
	    throw (
	      ((nestedUpdateCount = 0),
	      (rootWithNestedUpdates = null),
	      Error(formatProdErrorMessage(185)))
	    );
	  for (var parent = sourceFiber.return; null !== parent; )
	    (sourceFiber = parent), (parent = sourceFiber.return);
	  return 3 === sourceFiber.tag ? sourceFiber.stateNode : null;
	}
	var emptyContextObject = {},
	  CapturedStacks = new WeakMap();
	function createCapturedValueAtFiber(value, source) {
	  if ("object" === typeof value && null !== value) {
	    var existing = CapturedStacks.get(value);
	    if (undefined !== existing) return existing;
	    source = {
	      value: value,
	      source: source,
	      stack: getStackByFiberInDevAndProd(source)
	    };
	    CapturedStacks.set(value, source);
	    return source;
	  }
	  return {
	    value: value,
	    source: source,
	    stack: getStackByFiberInDevAndProd(source)
	  };
	}
	var forkStack = [],
	  forkStackIndex = 0,
	  treeForkProvider = null,
	  treeForkCount = 0,
	  idStack = [],
	  idStackIndex = 0,
	  treeContextProvider = null,
	  treeContextId = 1,
	  treeContextOverflow = "";
	function pushTreeFork(workInProgress, totalChildren) {
	  forkStack[forkStackIndex++] = treeForkCount;
	  forkStack[forkStackIndex++] = treeForkProvider;
	  treeForkProvider = workInProgress;
	  treeForkCount = totalChildren;
	}
	function pushTreeId(workInProgress, totalChildren, index) {
	  idStack[idStackIndex++] = treeContextId;
	  idStack[idStackIndex++] = treeContextOverflow;
	  idStack[idStackIndex++] = treeContextProvider;
	  treeContextProvider = workInProgress;
	  var baseIdWithLeadingBit = treeContextId;
	  workInProgress = treeContextOverflow;
	  var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
	  baseIdWithLeadingBit &= ~(1 << baseLength);
	  index += 1;
	  var length = 32 - clz32(totalChildren) + baseLength;
	  if (30 < length) {
	    var numberOfOverflowBits = baseLength - (baseLength % 5);
	    length = (
	      baseIdWithLeadingBit &
	      ((1 << numberOfOverflowBits) - 1)
	    ).toString(32);
	    baseIdWithLeadingBit >>= numberOfOverflowBits;
	    baseLength -= numberOfOverflowBits;
	    treeContextId =
	      (1 << (32 - clz32(totalChildren) + baseLength)) |
	      (index << baseLength) |
	      baseIdWithLeadingBit;
	    treeContextOverflow = length + workInProgress;
	  } else
	    (treeContextId =
	      (1 << length) | (index << baseLength) | baseIdWithLeadingBit),
	      (treeContextOverflow = workInProgress);
	}
	function pushMaterializedTreeId(workInProgress) {
	  null !== workInProgress.return &&
	    (pushTreeFork(workInProgress, 1), pushTreeId(workInProgress, 1, 0));
	}
	function popTreeContext(workInProgress) {
	  for (; workInProgress === treeForkProvider; )
	    (treeForkProvider = forkStack[--forkStackIndex]),
	      (forkStack[forkStackIndex] = null),
	      (treeForkCount = forkStack[--forkStackIndex]),
	      (forkStack[forkStackIndex] = null);
	  for (; workInProgress === treeContextProvider; )
	    (treeContextProvider = idStack[--idStackIndex]),
	      (idStack[idStackIndex] = null),
	      (treeContextOverflow = idStack[--idStackIndex]),
	      (idStack[idStackIndex] = null),
	      (treeContextId = idStack[--idStackIndex]),
	      (idStack[idStackIndex] = null);
	}
	var hydrationParentFiber = null,
	  nextHydratableInstance = null,
	  isHydrating = false,
	  hydrationErrors = null,
	  rootOrSingletonContext = false,
	  HydrationMismatchException = Error(formatProdErrorMessage(519));
	function throwOnHydrationMismatch(fiber) {
	  var error = Error(formatProdErrorMessage(418, ""));
	  queueHydrationError(createCapturedValueAtFiber(error, fiber));
	  throw HydrationMismatchException;
	}
	function prepareToHydrateHostInstance(fiber) {
	  var instance = fiber.stateNode,
	    type = fiber.type,
	    props = fiber.memoizedProps;
	  instance[internalInstanceKey] = fiber;
	  instance[internalPropsKey] = props;
	  switch (type) {
	    case "dialog":
	      listenToNonDelegatedEvent("cancel", instance);
	      listenToNonDelegatedEvent("close", instance);
	      break;
	    case "iframe":
	    case "object":
	    case "embed":
	      listenToNonDelegatedEvent("load", instance);
	      break;
	    case "video":
	    case "audio":
	      for (type = 0; type < mediaEventTypes.length; type++)
	        listenToNonDelegatedEvent(mediaEventTypes[type], instance);
	      break;
	    case "source":
	      listenToNonDelegatedEvent("error", instance);
	      break;
	    case "img":
	    case "image":
	    case "link":
	      listenToNonDelegatedEvent("error", instance);
	      listenToNonDelegatedEvent("load", instance);
	      break;
	    case "details":
	      listenToNonDelegatedEvent("toggle", instance);
	      break;
	    case "input":
	      listenToNonDelegatedEvent("invalid", instance);
	      initInput(
	        instance,
	        props.value,
	        props.defaultValue,
	        props.checked,
	        props.defaultChecked,
	        props.type,
	        props.name,
	        true
	      );
	      track(instance);
	      break;
	    case "select":
	      listenToNonDelegatedEvent("invalid", instance);
	      break;
	    case "textarea":
	      listenToNonDelegatedEvent("invalid", instance),
	        initTextarea(instance, props.value, props.defaultValue, props.children),
	        track(instance);
	  }
	  type = props.children;
	  ("string" !== typeof type &&
	    "number" !== typeof type &&
	    "bigint" !== typeof type) ||
	  instance.textContent === "" + type ||
	  true === props.suppressHydrationWarning ||
	  checkForUnmatchedText(instance.textContent, type)
	    ? (null != props.popover &&
	        (listenToNonDelegatedEvent("beforetoggle", instance),
	        listenToNonDelegatedEvent("toggle", instance)),
	      null != props.onScroll && listenToNonDelegatedEvent("scroll", instance),
	      null != props.onScrollEnd &&
	        listenToNonDelegatedEvent("scrollend", instance),
	      null != props.onClick && (instance.onclick = noop$1),
	      (instance = true))
	    : (instance = false);
	  instance || throwOnHydrationMismatch(fiber);
	}
	function popToNextHostParent(fiber) {
	  for (hydrationParentFiber = fiber.return; hydrationParentFiber; )
	    switch (hydrationParentFiber.tag) {
	      case 3:
	      case 27:
	        rootOrSingletonContext = true;
	        return;
	      case 5:
	      case 13:
	        rootOrSingletonContext = false;
	        return;
	      default:
	        hydrationParentFiber = hydrationParentFiber.return;
	    }
	}
	function popHydrationState(fiber) {
	  if (fiber !== hydrationParentFiber) return false;
	  if (!isHydrating) return popToNextHostParent(fiber), (isHydrating = true), false;
	  var shouldClear = false,
	    JSCompiler_temp;
	  if ((JSCompiler_temp = 3 !== fiber.tag && 27 !== fiber.tag)) {
	    if ((JSCompiler_temp = 5 === fiber.tag))
	      (JSCompiler_temp = fiber.type),
	        (JSCompiler_temp =
	          !("form" !== JSCompiler_temp && "button" !== JSCompiler_temp) ||
	          shouldSetTextContent(fiber.type, fiber.memoizedProps));
	    JSCompiler_temp = !JSCompiler_temp;
	  }
	  JSCompiler_temp && (shouldClear = true);
	  shouldClear && nextHydratableInstance && throwOnHydrationMismatch(fiber);
	  popToNextHostParent(fiber);
	  if (13 === fiber.tag) {
	    fiber = fiber.memoizedState;
	    fiber = null !== fiber ? fiber.dehydrated : null;
	    if (!fiber) throw Error(formatProdErrorMessage(317));
	    a: {
	      fiber = fiber.nextSibling;
	      for (shouldClear = 0; fiber; ) {
	        if (8 === fiber.nodeType)
	          if (((JSCompiler_temp = fiber.data), "/$" === JSCompiler_temp)) {
	            if (0 === shouldClear) {
	              nextHydratableInstance = getNextHydratable(fiber.nextSibling);
	              break a;
	            }
	            shouldClear--;
	          } else
	            ("$" !== JSCompiler_temp &&
	              "$!" !== JSCompiler_temp &&
	              "$?" !== JSCompiler_temp) ||
	              shouldClear++;
	        fiber = fiber.nextSibling;
	      }
	      nextHydratableInstance = null;
	    }
	  } else
	    nextHydratableInstance = hydrationParentFiber
	      ? getNextHydratable(fiber.stateNode.nextSibling)
	      : null;
	  return true;
	}
	function resetHydrationState() {
	  nextHydratableInstance = hydrationParentFiber = null;
	  isHydrating = false;
	}
	function queueHydrationError(error) {
	  null === hydrationErrors
	    ? (hydrationErrors = [error])
	    : hydrationErrors.push(error);
	}
	var SuspenseException = Error(formatProdErrorMessage(460)),
	  SuspenseyCommitException = Error(formatProdErrorMessage(474)),
	  noopSuspenseyCommitThenable = { then: function () {} };
	function isThenableResolved(thenable) {
	  thenable = thenable.status;
	  return "fulfilled" === thenable || "rejected" === thenable;
	}
	function noop$3() {}
	function trackUsedThenable(thenableState, thenable, index) {
	  index = thenableState[index];
	  undefined === index
	    ? thenableState.push(thenable)
	    : index !== thenable && (thenable.then(noop$3, noop$3), (thenable = index));
	  switch (thenable.status) {
	    case "fulfilled":
	      return thenable.value;
	    case "rejected":
	      thenableState = thenable.reason;
	      if (thenableState === SuspenseException)
	        throw Error(formatProdErrorMessage(483));
	      throw thenableState;
	    default:
	      if ("string" === typeof thenable.status) thenable.then(noop$3, noop$3);
	      else {
	        thenableState = workInProgressRoot;
	        if (null !== thenableState && 100 < thenableState.shellSuspendCounter)
	          throw Error(formatProdErrorMessage(482));
	        thenableState = thenable;
	        thenableState.status = "pending";
	        thenableState.then(
	          function (fulfilledValue) {
	            if ("pending" === thenable.status) {
	              var fulfilledThenable = thenable;
	              fulfilledThenable.status = "fulfilled";
	              fulfilledThenable.value = fulfilledValue;
	            }
	          },
	          function (error) {
	            if ("pending" === thenable.status) {
	              var rejectedThenable = thenable;
	              rejectedThenable.status = "rejected";
	              rejectedThenable.reason = error;
	            }
	          }
	        );
	      }
	      switch (thenable.status) {
	        case "fulfilled":
	          return thenable.value;
	        case "rejected":
	          thenableState = thenable.reason;
	          if (thenableState === SuspenseException)
	            throw Error(formatProdErrorMessage(483));
	          throw thenableState;
	      }
	      suspendedThenable = thenable;
	      throw SuspenseException;
	  }
	}
	var suspendedThenable = null;
	function getSuspendedThenable() {
	  if (null === suspendedThenable) throw Error(formatProdErrorMessage(459));
	  var thenable = suspendedThenable;
	  suspendedThenable = null;
	  return thenable;
	}
	var thenableState$1 = null,
	  thenableIndexCounter$1 = 0;
	function unwrapThenable(thenable) {
	  var index = thenableIndexCounter$1;
	  thenableIndexCounter$1 += 1;
	  null === thenableState$1 && (thenableState$1 = []);
	  return trackUsedThenable(thenableState$1, thenable, index);
	}
	function coerceRef(workInProgress, element) {
	  element = element.props.ref;
	  workInProgress.ref = undefined !== element ? element : null;
	}
	function throwOnInvalidObjectType(returnFiber, newChild) {
	  if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)
	    throw Error(formatProdErrorMessage(525));
	  returnFiber = Object.prototype.toString.call(newChild);
	  throw Error(
	    formatProdErrorMessage(
	      31,
	      "[object Object]" === returnFiber
	        ? "object with keys {" + Object.keys(newChild).join(", ") + "}"
	        : returnFiber
	    )
	  );
	}
	function resolveLazy(lazyType) {
	  var init = lazyType._init;
	  return init(lazyType._payload);
	}
	function createChildReconciler(shouldTrackSideEffects) {
	  function deleteChild(returnFiber, childToDelete) {
	    if (shouldTrackSideEffects) {
	      var deletions = returnFiber.deletions;
	      null === deletions
	        ? ((returnFiber.deletions = [childToDelete]), (returnFiber.flags |= 16))
	        : deletions.push(childToDelete);
	    }
	  }
	  function deleteRemainingChildren(returnFiber, currentFirstChild) {
	    if (!shouldTrackSideEffects) return null;
	    for (; null !== currentFirstChild; )
	      deleteChild(returnFiber, currentFirstChild),
	        (currentFirstChild = currentFirstChild.sibling);
	    return null;
	  }
	  function mapRemainingChildren(currentFirstChild) {
	    for (var existingChildren = new Map(); null !== currentFirstChild; )
	      null !== currentFirstChild.key
	        ? existingChildren.set(currentFirstChild.key, currentFirstChild)
	        : existingChildren.set(currentFirstChild.index, currentFirstChild),
	        (currentFirstChild = currentFirstChild.sibling);
	    return existingChildren;
	  }
	  function useFiber(fiber, pendingProps) {
	    fiber = createWorkInProgress(fiber, pendingProps);
	    fiber.index = 0;
	    fiber.sibling = null;
	    return fiber;
	  }
	  function placeChild(newFiber, lastPlacedIndex, newIndex) {
	    newFiber.index = newIndex;
	    if (!shouldTrackSideEffects)
	      return (newFiber.flags |= 1048576), lastPlacedIndex;
	    newIndex = newFiber.alternate;
	    if (null !== newIndex)
	      return (
	        (newIndex = newIndex.index),
	        newIndex < lastPlacedIndex
	          ? ((newFiber.flags |= 33554434), lastPlacedIndex)
	          : newIndex
	      );
	    newFiber.flags |= 33554434;
	    return lastPlacedIndex;
	  }
	  function placeSingleChild(newFiber) {
	    shouldTrackSideEffects &&
	      null === newFiber.alternate &&
	      (newFiber.flags |= 33554434);
	    return newFiber;
	  }
	  function updateTextNode(returnFiber, current, textContent, lanes) {
	    if (null === current || 6 !== current.tag)
	      return (
	        (current = createFiberFromText(textContent, returnFiber.mode, lanes)),
	        (current.return = returnFiber),
	        current
	      );
	    current = useFiber(current, textContent);
	    current.return = returnFiber;
	    return current;
	  }
	  function updateElement(returnFiber, current, element, lanes) {
	    var elementType = element.type;
	    if (elementType === REACT_FRAGMENT_TYPE)
	      return updateFragment(
	        returnFiber,
	        current,
	        element.props.children,
	        lanes,
	        element.key
	      );
	    if (
	      null !== current &&
	      (current.elementType === elementType ||
	        ("object" === typeof elementType &&
	          null !== elementType &&
	          elementType.$$typeof === REACT_LAZY_TYPE &&
	          resolveLazy(elementType) === current.type))
	    )
	      return (
	        (current = useFiber(current, element.props)),
	        coerceRef(current, element),
	        (current.return = returnFiber),
	        current
	      );
	    current = createFiberFromTypeAndProps(
	      element.type,
	      element.key,
	      element.props,
	      null,
	      returnFiber.mode,
	      lanes
	    );
	    coerceRef(current, element);
	    current.return = returnFiber;
	    return current;
	  }
	  function updatePortal(returnFiber, current, portal, lanes) {
	    if (
	      null === current ||
	      4 !== current.tag ||
	      current.stateNode.containerInfo !== portal.containerInfo ||
	      current.stateNode.implementation !== portal.implementation
	    )
	      return (
	        (current = createFiberFromPortal(portal, returnFiber.mode, lanes)),
	        (current.return = returnFiber),
	        current
	      );
	    current = useFiber(current, portal.children || []);
	    current.return = returnFiber;
	    return current;
	  }
	  function updateFragment(returnFiber, current, fragment, lanes, key) {
	    if (null === current || 7 !== current.tag)
	      return (
	        (current = createFiberFromFragment(
	          fragment,
	          returnFiber.mode,
	          lanes,
	          key
	        )),
	        (current.return = returnFiber),
	        current
	      );
	    current = useFiber(current, fragment);
	    current.return = returnFiber;
	    return current;
	  }
	  function createChild(returnFiber, newChild, lanes) {
	    if (
	      ("string" === typeof newChild && "" !== newChild) ||
	      "number" === typeof newChild ||
	      "bigint" === typeof newChild
	    )
	      return (
	        (newChild = createFiberFromText(
	          "" + newChild,
	          returnFiber.mode,
	          lanes
	        )),
	        (newChild.return = returnFiber),
	        newChild
	      );
	    if ("object" === typeof newChild && null !== newChild) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          return (
	            (lanes = createFiberFromTypeAndProps(
	              newChild.type,
	              newChild.key,
	              newChild.props,
	              null,
	              returnFiber.mode,
	              lanes
	            )),
	            coerceRef(lanes, newChild),
	            (lanes.return = returnFiber),
	            lanes
	          );
	        case REACT_PORTAL_TYPE:
	          return (
	            (newChild = createFiberFromPortal(
	              newChild,
	              returnFiber.mode,
	              lanes
	            )),
	            (newChild.return = returnFiber),
	            newChild
	          );
	        case REACT_LAZY_TYPE:
	          var init = newChild._init;
	          newChild = init(newChild._payload);
	          return createChild(returnFiber, newChild, lanes);
	      }
	      if (isArrayImpl(newChild) || getIteratorFn(newChild))
	        return (
	          (newChild = createFiberFromFragment(
	            newChild,
	            returnFiber.mode,
	            lanes,
	            null
	          )),
	          (newChild.return = returnFiber),
	          newChild
	        );
	      if ("function" === typeof newChild.then)
	        return createChild(returnFiber, unwrapThenable(newChild), lanes);
	      if (newChild.$$typeof === REACT_CONTEXT_TYPE)
	        return createChild(
	          returnFiber,
	          readContextDuringReconciliation(returnFiber, newChild),
	          lanes
	        );
	      throwOnInvalidObjectType(returnFiber, newChild);
	    }
	    return null;
	  }
	  function updateSlot(returnFiber, oldFiber, newChild, lanes) {
	    var key = null !== oldFiber ? oldFiber.key : null;
	    if (
	      ("string" === typeof newChild && "" !== newChild) ||
	      "number" === typeof newChild ||
	      "bigint" === typeof newChild
	    )
	      return null !== key
	        ? null
	        : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
	    if ("object" === typeof newChild && null !== newChild) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          return newChild.key === key
	            ? updateElement(returnFiber, oldFiber, newChild, lanes)
	            : null;
	        case REACT_PORTAL_TYPE:
	          return newChild.key === key
	            ? updatePortal(returnFiber, oldFiber, newChild, lanes)
	            : null;
	        case REACT_LAZY_TYPE:
	          return (
	            (key = newChild._init),
	            (newChild = key(newChild._payload)),
	            updateSlot(returnFiber, oldFiber, newChild, lanes)
	          );
	      }
	      if (isArrayImpl(newChild) || getIteratorFn(newChild))
	        return null !== key
	          ? null
	          : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
	      if ("function" === typeof newChild.then)
	        return updateSlot(
	          returnFiber,
	          oldFiber,
	          unwrapThenable(newChild),
	          lanes
	        );
	      if (newChild.$$typeof === REACT_CONTEXT_TYPE)
	        return updateSlot(
	          returnFiber,
	          oldFiber,
	          readContextDuringReconciliation(returnFiber, newChild),
	          lanes
	        );
	      throwOnInvalidObjectType(returnFiber, newChild);
	    }
	    return null;
	  }
	  function updateFromMap(
	    existingChildren,
	    returnFiber,
	    newIdx,
	    newChild,
	    lanes
	  ) {
	    if (
	      ("string" === typeof newChild && "" !== newChild) ||
	      "number" === typeof newChild ||
	      "bigint" === typeof newChild
	    )
	      return (
	        (existingChildren = existingChildren.get(newIdx) || null),
	        updateTextNode(returnFiber, existingChildren, "" + newChild, lanes)
	      );
	    if ("object" === typeof newChild && null !== newChild) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          return (
	            (existingChildren =
	              existingChildren.get(
	                null === newChild.key ? newIdx : newChild.key
	              ) || null),
	            updateElement(returnFiber, existingChildren, newChild, lanes)
	          );
	        case REACT_PORTAL_TYPE:
	          return (
	            (existingChildren =
	              existingChildren.get(
	                null === newChild.key ? newIdx : newChild.key
	              ) || null),
	            updatePortal(returnFiber, existingChildren, newChild, lanes)
	          );
	        case REACT_LAZY_TYPE:
	          var init = newChild._init;
	          newChild = init(newChild._payload);
	          return updateFromMap(
	            existingChildren,
	            returnFiber,
	            newIdx,
	            newChild,
	            lanes
	          );
	      }
	      if (isArrayImpl(newChild) || getIteratorFn(newChild))
	        return (
	          (existingChildren = existingChildren.get(newIdx) || null),
	          updateFragment(returnFiber, existingChildren, newChild, lanes, null)
	        );
	      if ("function" === typeof newChild.then)
	        return updateFromMap(
	          existingChildren,
	          returnFiber,
	          newIdx,
	          unwrapThenable(newChild),
	          lanes
	        );
	      if (newChild.$$typeof === REACT_CONTEXT_TYPE)
	        return updateFromMap(
	          existingChildren,
	          returnFiber,
	          newIdx,
	          readContextDuringReconciliation(returnFiber, newChild),
	          lanes
	        );
	      throwOnInvalidObjectType(returnFiber, newChild);
	    }
	    return null;
	  }
	  function reconcileChildrenArray(
	    returnFiber,
	    currentFirstChild,
	    newChildren,
	    lanes
	  ) {
	    for (
	      var resultingFirstChild = null,
	        previousNewFiber = null,
	        oldFiber = currentFirstChild,
	        newIdx = (currentFirstChild = 0),
	        nextOldFiber = null;
	      null !== oldFiber && newIdx < newChildren.length;
	      newIdx++
	    ) {
	      oldFiber.index > newIdx
	        ? ((nextOldFiber = oldFiber), (oldFiber = null))
	        : (nextOldFiber = oldFiber.sibling);
	      var newFiber = updateSlot(
	        returnFiber,
	        oldFiber,
	        newChildren[newIdx],
	        lanes
	      );
	      if (null === newFiber) {
	        null === oldFiber && (oldFiber = nextOldFiber);
	        break;
	      }
	      shouldTrackSideEffects &&
	        oldFiber &&
	        null === newFiber.alternate &&
	        deleteChild(returnFiber, oldFiber);
	      currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
	      null === previousNewFiber
	        ? (resultingFirstChild = newFiber)
	        : (previousNewFiber.sibling = newFiber);
	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }
	    if (newIdx === newChildren.length)
	      return (
	        deleteRemainingChildren(returnFiber, oldFiber),
	        isHydrating && pushTreeFork(returnFiber, newIdx),
	        resultingFirstChild
	      );
	    if (null === oldFiber) {
	      for (; newIdx < newChildren.length; newIdx++)
	        (oldFiber = createChild(returnFiber, newChildren[newIdx], lanes)),
	          null !== oldFiber &&
	            ((currentFirstChild = placeChild(
	              oldFiber,
	              currentFirstChild,
	              newIdx
	            )),
	            null === previousNewFiber
	              ? (resultingFirstChild = oldFiber)
	              : (previousNewFiber.sibling = oldFiber),
	            (previousNewFiber = oldFiber));
	      isHydrating && pushTreeFork(returnFiber, newIdx);
	      return resultingFirstChild;
	    }
	    for (
	      oldFiber = mapRemainingChildren(oldFiber);
	      newIdx < newChildren.length;
	      newIdx++
	    )
	      (nextOldFiber = updateFromMap(
	        oldFiber,
	        returnFiber,
	        newIdx,
	        newChildren[newIdx],
	        lanes
	      )),
	        null !== nextOldFiber &&
	          (shouldTrackSideEffects &&
	            null !== nextOldFiber.alternate &&
	            oldFiber.delete(
	              null === nextOldFiber.key ? newIdx : nextOldFiber.key
	            ),
	          (currentFirstChild = placeChild(
	            nextOldFiber,
	            currentFirstChild,
	            newIdx
	          )),
	          null === previousNewFiber
	            ? (resultingFirstChild = nextOldFiber)
	            : (previousNewFiber.sibling = nextOldFiber),
	          (previousNewFiber = nextOldFiber));
	    shouldTrackSideEffects &&
	      oldFiber.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    isHydrating && pushTreeFork(returnFiber, newIdx);
	    return resultingFirstChild;
	  }
	  function reconcileChildrenIterator(
	    returnFiber,
	    currentFirstChild,
	    newChildren,
	    lanes
	  ) {
	    if (null == newChildren) throw Error(formatProdErrorMessage(151));
	    for (
	      var resultingFirstChild = null,
	        previousNewFiber = null,
	        oldFiber = currentFirstChild,
	        newIdx = (currentFirstChild = 0),
	        nextOldFiber = null,
	        step = newChildren.next();
	      null !== oldFiber && !step.done;
	      newIdx++, step = newChildren.next()
	    ) {
	      oldFiber.index > newIdx
	        ? ((nextOldFiber = oldFiber), (oldFiber = null))
	        : (nextOldFiber = oldFiber.sibling);
	      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
	      if (null === newFiber) {
	        null === oldFiber && (oldFiber = nextOldFiber);
	        break;
	      }
	      shouldTrackSideEffects &&
	        oldFiber &&
	        null === newFiber.alternate &&
	        deleteChild(returnFiber, oldFiber);
	      currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
	      null === previousNewFiber
	        ? (resultingFirstChild = newFiber)
	        : (previousNewFiber.sibling = newFiber);
	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }
	    if (step.done)
	      return (
	        deleteRemainingChildren(returnFiber, oldFiber),
	        isHydrating && pushTreeFork(returnFiber, newIdx),
	        resultingFirstChild
	      );
	    if (null === oldFiber) {
	      for (; !step.done; newIdx++, step = newChildren.next())
	        (step = createChild(returnFiber, step.value, lanes)),
	          null !== step &&
	            ((currentFirstChild = placeChild(step, currentFirstChild, newIdx)),
	            null === previousNewFiber
	              ? (resultingFirstChild = step)
	              : (previousNewFiber.sibling = step),
	            (previousNewFiber = step));
	      isHydrating && pushTreeFork(returnFiber, newIdx);
	      return resultingFirstChild;
	    }
	    for (
	      oldFiber = mapRemainingChildren(oldFiber);
	      !step.done;
	      newIdx++, step = newChildren.next()
	    )
	      (step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes)),
	        null !== step &&
	          (shouldTrackSideEffects &&
	            null !== step.alternate &&
	            oldFiber.delete(null === step.key ? newIdx : step.key),
	          (currentFirstChild = placeChild(step, currentFirstChild, newIdx)),
	          null === previousNewFiber
	            ? (resultingFirstChild = step)
	            : (previousNewFiber.sibling = step),
	          (previousNewFiber = step));
	    shouldTrackSideEffects &&
	      oldFiber.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    isHydrating && pushTreeFork(returnFiber, newIdx);
	    return resultingFirstChild;
	  }
	  function reconcileChildFibersImpl(
	    returnFiber,
	    currentFirstChild,
	    newChild,
	    lanes
	  ) {
	    "object" === typeof newChild &&
	      null !== newChild &&
	      newChild.type === REACT_FRAGMENT_TYPE &&
	      null === newChild.key &&
	      (newChild = newChild.props.children);
	    if ("object" === typeof newChild && null !== newChild) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          a: {
	            for (var key = newChild.key; null !== currentFirstChild; ) {
	              if (currentFirstChild.key === key) {
	                key = newChild.type;
	                if (key === REACT_FRAGMENT_TYPE) {
	                  if (7 === currentFirstChild.tag) {
	                    deleteRemainingChildren(
	                      returnFiber,
	                      currentFirstChild.sibling
	                    );
	                    lanes = useFiber(
	                      currentFirstChild,
	                      newChild.props.children
	                    );
	                    lanes.return = returnFiber;
	                    returnFiber = lanes;
	                    break a;
	                  }
	                } else if (
	                  currentFirstChild.elementType === key ||
	                  ("object" === typeof key &&
	                    null !== key &&
	                    key.$$typeof === REACT_LAZY_TYPE &&
	                    resolveLazy(key) === currentFirstChild.type)
	                ) {
	                  deleteRemainingChildren(
	                    returnFiber,
	                    currentFirstChild.sibling
	                  );
	                  lanes = useFiber(currentFirstChild, newChild.props);
	                  coerceRef(lanes, newChild);
	                  lanes.return = returnFiber;
	                  returnFiber = lanes;
	                  break a;
	                }
	                deleteRemainingChildren(returnFiber, currentFirstChild);
	                break;
	              } else deleteChild(returnFiber, currentFirstChild);
	              currentFirstChild = currentFirstChild.sibling;
	            }
	            newChild.type === REACT_FRAGMENT_TYPE
	              ? ((lanes = createFiberFromFragment(
	                  newChild.props.children,
	                  returnFiber.mode,
	                  lanes,
	                  newChild.key
	                )),
	                (lanes.return = returnFiber),
	                (returnFiber = lanes))
	              : ((lanes = createFiberFromTypeAndProps(
	                  newChild.type,
	                  newChild.key,
	                  newChild.props,
	                  null,
	                  returnFiber.mode,
	                  lanes
	                )),
	                coerceRef(lanes, newChild),
	                (lanes.return = returnFiber),
	                (returnFiber = lanes));
	          }
	          return placeSingleChild(returnFiber);
	        case REACT_PORTAL_TYPE:
	          a: {
	            for (key = newChild.key; null !== currentFirstChild; ) {
	              if (currentFirstChild.key === key)
	                if (
	                  4 === currentFirstChild.tag &&
	                  currentFirstChild.stateNode.containerInfo ===
	                    newChild.containerInfo &&
	                  currentFirstChild.stateNode.implementation ===
	                    newChild.implementation
	                ) {
	                  deleteRemainingChildren(
	                    returnFiber,
	                    currentFirstChild.sibling
	                  );
	                  lanes = useFiber(currentFirstChild, newChild.children || []);
	                  lanes.return = returnFiber;
	                  returnFiber = lanes;
	                  break a;
	                } else {
	                  deleteRemainingChildren(returnFiber, currentFirstChild);
	                  break;
	                }
	              else deleteChild(returnFiber, currentFirstChild);
	              currentFirstChild = currentFirstChild.sibling;
	            }
	            lanes = createFiberFromPortal(newChild, returnFiber.mode, lanes);
	            lanes.return = returnFiber;
	            returnFiber = lanes;
	          }
	          return placeSingleChild(returnFiber);
	        case REACT_LAZY_TYPE:
	          return (
	            (key = newChild._init),
	            (newChild = key(newChild._payload)),
	            reconcileChildFibersImpl(
	              returnFiber,
	              currentFirstChild,
	              newChild,
	              lanes
	            )
	          );
	      }
	      if (isArrayImpl(newChild))
	        return reconcileChildrenArray(
	          returnFiber,
	          currentFirstChild,
	          newChild,
	          lanes
	        );
	      if (getIteratorFn(newChild)) {
	        key = getIteratorFn(newChild);
	        if ("function" !== typeof key) throw Error(formatProdErrorMessage(150));
	        newChild = key.call(newChild);
	        return reconcileChildrenIterator(
	          returnFiber,
	          currentFirstChild,
	          newChild,
	          lanes
	        );
	      }
	      if ("function" === typeof newChild.then)
	        return reconcileChildFibersImpl(
	          returnFiber,
	          currentFirstChild,
	          unwrapThenable(newChild),
	          lanes
	        );
	      if (newChild.$$typeof === REACT_CONTEXT_TYPE)
	        return reconcileChildFibersImpl(
	          returnFiber,
	          currentFirstChild,
	          readContextDuringReconciliation(returnFiber, newChild),
	          lanes
	        );
	      throwOnInvalidObjectType(returnFiber, newChild);
	    }
	    return ("string" === typeof newChild && "" !== newChild) ||
	      "number" === typeof newChild ||
	      "bigint" === typeof newChild
	      ? ((newChild = "" + newChild),
	        null !== currentFirstChild && 6 === currentFirstChild.tag
	          ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling),
	            (lanes = useFiber(currentFirstChild, newChild)),
	            (lanes.return = returnFiber),
	            (returnFiber = lanes))
	          : (deleteRemainingChildren(returnFiber, currentFirstChild),
	            (lanes = createFiberFromText(newChild, returnFiber.mode, lanes)),
	            (lanes.return = returnFiber),
	            (returnFiber = lanes)),
	        placeSingleChild(returnFiber))
	      : deleteRemainingChildren(returnFiber, currentFirstChild);
	  }
	  return function (returnFiber, currentFirstChild, newChild, lanes) {
	    try {
	      thenableIndexCounter$1 = 0;
	      var firstChildFiber = reconcileChildFibersImpl(
	        returnFiber,
	        currentFirstChild,
	        newChild,
	        lanes
	      );
	      thenableState$1 = null;
	      return firstChildFiber;
	    } catch (x) {
	      if (x === SuspenseException) throw x;
	      var fiber = createFiberImplClass(29, x, null, returnFiber.mode);
	      fiber.lanes = lanes;
	      fiber.return = returnFiber;
	      return fiber;
	    } finally {
	    }
	  };
	}
	var reconcileChildFibers = createChildReconciler(true),
	  mountChildFibers = createChildReconciler(false),
	  currentTreeHiddenStackCursor = createCursor(null),
	  prevEntangledRenderLanesCursor = createCursor(0);
	function pushHiddenContext(fiber, context) {
	  fiber = entangledRenderLanes;
	  push(prevEntangledRenderLanesCursor, fiber);
	  push(currentTreeHiddenStackCursor, context);
	  entangledRenderLanes = fiber | context.baseLanes;
	}
	function reuseHiddenContextOnStack() {
	  push(prevEntangledRenderLanesCursor, entangledRenderLanes);
	  push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current);
	}
	function popHiddenContext() {
	  entangledRenderLanes = prevEntangledRenderLanesCursor.current;
	  pop(currentTreeHiddenStackCursor);
	  pop(prevEntangledRenderLanesCursor);
	}
	var suspenseHandlerStackCursor = createCursor(null),
	  shellBoundary = null;
	function pushPrimaryTreeSuspenseHandler(handler) {
	  var current = handler.alternate;
	  push(suspenseStackCursor, suspenseStackCursor.current & 1);
	  push(suspenseHandlerStackCursor, handler);
	  null === shellBoundary &&
	    (null === current || null !== currentTreeHiddenStackCursor.current
	      ? (shellBoundary = handler)
	      : null !== current.memoizedState && (shellBoundary = handler));
	}
	function pushOffscreenSuspenseHandler(fiber) {
	  if (22 === fiber.tag) {
	    if (
	      (push(suspenseStackCursor, suspenseStackCursor.current),
	      push(suspenseHandlerStackCursor, fiber),
	      null === shellBoundary)
	    ) {
	      var current = fiber.alternate;
	      null !== current &&
	        null !== current.memoizedState &&
	        (shellBoundary = fiber);
	    }
	  } else reuseSuspenseHandlerOnStack();
	}
	function reuseSuspenseHandlerOnStack() {
	  push(suspenseStackCursor, suspenseStackCursor.current);
	  push(suspenseHandlerStackCursor, suspenseHandlerStackCursor.current);
	}
	function popSuspenseHandler(fiber) {
	  pop(suspenseHandlerStackCursor);
	  shellBoundary === fiber && (shellBoundary = null);
	  pop(suspenseStackCursor);
	}
	var suspenseStackCursor = createCursor(0);
	function findFirstSuspended(row) {
	  for (var node = row; null !== node; ) {
	    if (13 === node.tag) {
	      var state = node.memoizedState;
	      if (
	        null !== state &&
	        ((state = state.dehydrated),
	        null === state || "$?" === state.data || "$!" === state.data)
	      )
	        return node;
	    } else if (19 === node.tag && undefined !== node.memoizedProps.revealOrder) {
	      if (0 !== (node.flags & 128)) return node;
	    } else if (null !== node.child) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }
	    if (node === row) break;
	    for (; null === node.sibling; ) {
	      if (null === node.return || node.return === row) return null;
	      node = node.return;
	    }
	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	  return null;
	}
	var AbortControllerLocal =
	    "undefined" !== typeof AbortController
	      ? AbortController
	      : function () {
	          var listeners = [],
	            signal = (this.signal = {
	              aborted: false,
	              addEventListener: function (type, listener) {
	                listeners.push(listener);
	              }
	            });
	          this.abort = function () {
	            signal.aborted = true;
	            listeners.forEach(function (listener) {
	              return listener();
	            });
	          };
	        },
	  scheduleCallback$2 = Scheduler.unstable_scheduleCallback,
	  NormalPriority = Scheduler.unstable_NormalPriority,
	  CacheContext = {
	    $$typeof: REACT_CONTEXT_TYPE,
	    Consumer: null,
	    Provider: null,
	    _currentValue: null,
	    _currentValue2: null,
	    _threadCount: 0
	  };
	function createCache() {
	  return {
	    controller: new AbortControllerLocal(),
	    data: new Map(),
	    refCount: 0
	  };
	}
	function releaseCache(cache) {
	  cache.refCount--;
	  0 === cache.refCount &&
	    scheduleCallback$2(NormalPriority, function () {
	      cache.controller.abort();
	    });
	}
	var currentEntangledListeners = null,
	  currentEntangledPendingCount = 0,
	  currentEntangledLane = 0,
	  currentEntangledActionThenable = null;
	function entangleAsyncAction(transition, thenable) {
	  if (null === currentEntangledListeners) {
	    var entangledListeners = (currentEntangledListeners = []);
	    currentEntangledPendingCount = 0;
	    currentEntangledLane = requestTransitionLane();
	    currentEntangledActionThenable = {
	      status: "pending",
	      value: undefined,
	      then: function (resolve) {
	        entangledListeners.push(resolve);
	      }
	    };
	  }
	  currentEntangledPendingCount++;
	  thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
	  return thenable;
	}
	function pingEngtangledActionScope() {
	  if (
	    0 === --currentEntangledPendingCount &&
	    null !== currentEntangledListeners
	  ) {
	    null !== currentEntangledActionThenable &&
	      (currentEntangledActionThenable.status = "fulfilled");
	    var listeners = currentEntangledListeners;
	    currentEntangledListeners = null;
	    currentEntangledLane = 0;
	    currentEntangledActionThenable = null;
	    for (var i = 0; i < listeners.length; i++) (0, listeners[i])();
	  }
	}
	function chainThenableValue(thenable, result) {
	  var listeners = [],
	    thenableWithOverride = {
	      status: "pending",
	      value: null,
	      reason: null,
	      then: function (resolve) {
	        listeners.push(resolve);
	      }
	    };
	  thenable.then(
	    function () {
	      thenableWithOverride.status = "fulfilled";
	      thenableWithOverride.value = result;
	      for (var i = 0; i < listeners.length; i++) (0, listeners[i])(result);
	    },
	    function (error) {
	      thenableWithOverride.status = "rejected";
	      thenableWithOverride.reason = error;
	      for (error = 0; error < listeners.length; error++)
	        (0, listeners[error])(undefined);
	    }
	  );
	  return thenableWithOverride;
	}
	var prevOnStartTransitionFinish = ReactSharedInternals.S;
	ReactSharedInternals.S = function (transition, returnValue) {
	  "object" === typeof returnValue &&
	    null !== returnValue &&
	    "function" === typeof returnValue.then &&
	    entangleAsyncAction(transition, returnValue);
	  null !== prevOnStartTransitionFinish &&
	    prevOnStartTransitionFinish(transition, returnValue);
	};
	var resumedCache = createCursor(null);
	function peekCacheFromPool() {
	  var cacheResumedFromPreviousRender = resumedCache.current;
	  return null !== cacheResumedFromPreviousRender
	    ? cacheResumedFromPreviousRender
	    : workInProgressRoot.pooledCache;
	}
	function pushTransition(offscreenWorkInProgress, prevCachePool) {
	  null === prevCachePool
	    ? push(resumedCache, resumedCache.current)
	    : push(resumedCache, prevCachePool.pool);
	}
	function getSuspendedCache() {
	  var cacheFromPool = peekCacheFromPool();
	  return null === cacheFromPool
	    ? null
	    : { parent: CacheContext._currentValue, pool: cacheFromPool };
	}
	var renderLanes = 0,
	  currentlyRenderingFiber$1 = null,
	  currentHook = null,
	  workInProgressHook = null,
	  didScheduleRenderPhaseUpdate = false,
	  didScheduleRenderPhaseUpdateDuringThisPass = false,
	  shouldDoubleInvokeUserFnsInHooksDEV = false,
	  localIdCounter = 0,
	  thenableIndexCounter = 0,
	  thenableState = null,
	  globalClientIdCounter = 0;
	function throwInvalidHookError() {
	  throw Error(formatProdErrorMessage(321));
	}
	function areHookInputsEqual(nextDeps, prevDeps) {
	  if (null === prevDeps) return false;
	  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
	    if (!objectIs(nextDeps[i], prevDeps[i])) return false;
	  return true;
	}
	function renderWithHooks(
	  current,
	  workInProgress,
	  Component,
	  props,
	  secondArg,
	  nextRenderLanes
	) {
	  renderLanes = nextRenderLanes;
	  currentlyRenderingFiber$1 = workInProgress;
	  workInProgress.memoizedState = null;
	  workInProgress.updateQueue = null;
	  workInProgress.lanes = 0;
	  ReactSharedInternals.H =
	    null === current || null === current.memoizedState
	      ? HooksDispatcherOnMount
	      : HooksDispatcherOnUpdate;
	  shouldDoubleInvokeUserFnsInHooksDEV = false;
	  nextRenderLanes = Component(props, secondArg);
	  shouldDoubleInvokeUserFnsInHooksDEV = false;
	  didScheduleRenderPhaseUpdateDuringThisPass &&
	    (nextRenderLanes = renderWithHooksAgain(
	      workInProgress,
	      Component,
	      props,
	      secondArg
	    ));
	  finishRenderingHooks(current);
	  return nextRenderLanes;
	}
	function finishRenderingHooks(current) {
	  ReactSharedInternals.H = ContextOnlyDispatcher;
	  var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next;
	  renderLanes = 0;
	  workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
	  didScheduleRenderPhaseUpdate = false;
	  thenableIndexCounter = 0;
	  thenableState = null;
	  if (didRenderTooFewHooks) throw Error(formatProdErrorMessage(300));
	  null === current ||
	    didReceiveUpdate ||
	    ((current = current.dependencies),
	    null !== current &&
	      checkIfContextChanged(current) &&
	      (didReceiveUpdate = true));
	}
	function renderWithHooksAgain(workInProgress, Component, props, secondArg) {
	  currentlyRenderingFiber$1 = workInProgress;
	  var numberOfReRenders = 0;
	  do {
	    didScheduleRenderPhaseUpdateDuringThisPass && (thenableState = null);
	    thenableIndexCounter = 0;
	    didScheduleRenderPhaseUpdateDuringThisPass = false;
	    if (25 <= numberOfReRenders) throw Error(formatProdErrorMessage(301));
	    numberOfReRenders += 1;
	    workInProgressHook = currentHook = null;
	    if (null != workInProgress.updateQueue) {
	      var children = workInProgress.updateQueue;
	      children.lastEffect = null;
	      children.events = null;
	      children.stores = null;
	      null != children.memoCache && (children.memoCache.index = 0);
	    }
	    ReactSharedInternals.H = HooksDispatcherOnRerender;
	    children = Component(props, secondArg);
	  } while (didScheduleRenderPhaseUpdateDuringThisPass);
	  return children;
	}
	function TransitionAwareHostComponent() {
	  var dispatcher = ReactSharedInternals.H,
	    maybeThenable = dispatcher.useState()[0];
	  maybeThenable =
	    "function" === typeof maybeThenable.then
	      ? useThenable(maybeThenable)
	      : maybeThenable;
	  dispatcher = dispatcher.useState()[0];
	  (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher &&
	    (currentlyRenderingFiber$1.flags |= 1024);
	  return maybeThenable;
	}
	function checkDidRenderIdHook() {
	  var didRenderIdHook = 0 !== localIdCounter;
	  localIdCounter = 0;
	  return didRenderIdHook;
	}
	function bailoutHooks(current, workInProgress, lanes) {
	  workInProgress.updateQueue = current.updateQueue;
	  workInProgress.flags &= -2053;
	  current.lanes &= ~lanes;
	}
	function resetHooksOnUnwind(workInProgress) {
	  if (didScheduleRenderPhaseUpdate) {
	    for (
	      workInProgress = workInProgress.memoizedState;
	      null !== workInProgress;

	    ) {
	      var queue = workInProgress.queue;
	      null !== queue && (queue.pending = null);
	      workInProgress = workInProgress.next;
	    }
	    didScheduleRenderPhaseUpdate = false;
	  }
	  renderLanes = 0;
	  workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
	  didScheduleRenderPhaseUpdateDuringThisPass = false;
	  thenableIndexCounter = localIdCounter = 0;
	  thenableState = null;
	}
	function mountWorkInProgressHook() {
	  var hook = {
	    memoizedState: null,
	    baseState: null,
	    baseQueue: null,
	    queue: null,
	    next: null
	  };
	  null === workInProgressHook
	    ? (currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook)
	    : (workInProgressHook = workInProgressHook.next = hook);
	  return workInProgressHook;
	}
	function updateWorkInProgressHook() {
	  if (null === currentHook) {
	    var nextCurrentHook = currentlyRenderingFiber$1.alternate;
	    nextCurrentHook =
	      null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
	  } else nextCurrentHook = currentHook.next;
	  var nextWorkInProgressHook =
	    null === workInProgressHook
	      ? currentlyRenderingFiber$1.memoizedState
	      : workInProgressHook.next;
	  if (null !== nextWorkInProgressHook)
	    (workInProgressHook = nextWorkInProgressHook),
	      (currentHook = nextCurrentHook);
	  else {
	    if (null === nextCurrentHook) {
	      if (null === currentlyRenderingFiber$1.alternate)
	        throw Error(formatProdErrorMessage(467));
	      throw Error(formatProdErrorMessage(310));
	    }
	    currentHook = nextCurrentHook;
	    nextCurrentHook = {
	      memoizedState: currentHook.memoizedState,
	      baseState: currentHook.baseState,
	      baseQueue: currentHook.baseQueue,
	      queue: currentHook.queue,
	      next: null
	    };
	    null === workInProgressHook
	      ? (currentlyRenderingFiber$1.memoizedState = workInProgressHook =
	          nextCurrentHook)
	      : (workInProgressHook = workInProgressHook.next = nextCurrentHook);
	  }
	  return workInProgressHook;
	}
	var createFunctionComponentUpdateQueue;
	createFunctionComponentUpdateQueue = function () {
	  return { lastEffect: null, events: null, stores: null, memoCache: null };
	};
	function useThenable(thenable) {
	  var index = thenableIndexCounter;
	  thenableIndexCounter += 1;
	  null === thenableState && (thenableState = []);
	  thenable = trackUsedThenable(thenableState, thenable, index);
	  index = currentlyRenderingFiber$1;
	  null ===
	    (null === workInProgressHook
	      ? index.memoizedState
	      : workInProgressHook.next) &&
	    ((index = index.alternate),
	    (ReactSharedInternals.H =
	      null === index || null === index.memoizedState
	        ? HooksDispatcherOnMount
	        : HooksDispatcherOnUpdate));
	  return thenable;
	}
	function use(usable) {
	  if (null !== usable && "object" === typeof usable) {
	    if ("function" === typeof usable.then) return useThenable(usable);
	    if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
	  }
	  throw Error(formatProdErrorMessage(438, String(usable)));
	}
	function useMemoCache(size) {
	  var memoCache = null,
	    updateQueue = currentlyRenderingFiber$1.updateQueue;
	  null !== updateQueue && (memoCache = updateQueue.memoCache);
	  if (null == memoCache) {
	    var current = currentlyRenderingFiber$1.alternate;
	    null !== current &&
	      ((current = current.updateQueue),
	      null !== current &&
	        ((current = current.memoCache),
	        null != current &&
	          (memoCache = {
	            data: current.data.map(function (array) {
	              return array.slice();
	            }),
	            index: 0
	          })));
	  }
	  null == memoCache && (memoCache = { data: [], index: 0 });
	  null === updateQueue &&
	    ((updateQueue = createFunctionComponentUpdateQueue()),
	    (currentlyRenderingFiber$1.updateQueue = updateQueue));
	  updateQueue.memoCache = memoCache;
	  updateQueue = memoCache.data[memoCache.index];
	  if (undefined === updateQueue)
	    for (
	      updateQueue = memoCache.data[memoCache.index] = Array(size), current = 0;
	      current < size;
	      current++
	    )
	      updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;
	  memoCache.index++;
	  return updateQueue;
	}
	function basicStateReducer(state, action) {
	  return "function" === typeof action ? action(state) : action;
	}
	function updateReducer(reducer) {
	  var hook = updateWorkInProgressHook();
	  return updateReducerImpl(hook, currentHook, reducer);
	}
	function updateReducerImpl(hook, current, reducer) {
	  var queue = hook.queue;
	  if (null === queue) throw Error(formatProdErrorMessage(311));
	  queue.lastRenderedReducer = reducer;
	  var baseQueue = hook.baseQueue,
	    pendingQueue = queue.pending;
	  if (null !== pendingQueue) {
	    if (null !== baseQueue) {
	      var baseFirst = baseQueue.next;
	      baseQueue.next = pendingQueue.next;
	      pendingQueue.next = baseFirst;
	    }
	    current.baseQueue = baseQueue = pendingQueue;
	    queue.pending = null;
	  }
	  pendingQueue = hook.baseState;
	  if (null === baseQueue) hook.memoizedState = pendingQueue;
	  else {
	    current = baseQueue.next;
	    var newBaseQueueFirst = (baseFirst = null),
	      newBaseQueueLast = null,
	      update = current,
	      didReadFromEntangledAsyncAction$54 = false;
	    do {
	      var updateLane = update.lane & -536870913;
	      if (
	        updateLane !== update.lane
	          ? (workInProgressRootRenderLanes & updateLane) === updateLane
	          : (renderLanes & updateLane) === updateLane
	      ) {
	        var revertLane = update.revertLane;
	        if (0 === revertLane)
	          null !== newBaseQueueLast &&
	            (newBaseQueueLast = newBaseQueueLast.next =
	              {
	                lane: 0,
	                revertLane: 0,
	                action: update.action,
	                hasEagerState: update.hasEagerState,
	                eagerState: update.eagerState,
	                next: null
	              }),
	            updateLane === currentEntangledLane &&
	              (didReadFromEntangledAsyncAction$54 = true);
	        else if ((renderLanes & revertLane) === revertLane) {
	          update = update.next;
	          revertLane === currentEntangledLane &&
	            (didReadFromEntangledAsyncAction$54 = true);
	          continue;
	        } else
	          (updateLane = {
	            lane: 0,
	            revertLane: update.revertLane,
	            action: update.action,
	            hasEagerState: update.hasEagerState,
	            eagerState: update.eagerState,
	            next: null
	          }),
	            null === newBaseQueueLast
	              ? ((newBaseQueueFirst = newBaseQueueLast = updateLane),
	                (baseFirst = pendingQueue))
	              : (newBaseQueueLast = newBaseQueueLast.next = updateLane),
	            (currentlyRenderingFiber$1.lanes |= revertLane),
	            (workInProgressRootSkippedLanes |= revertLane);
	        updateLane = update.action;
	        shouldDoubleInvokeUserFnsInHooksDEV &&
	          reducer(pendingQueue, updateLane);
	        pendingQueue = update.hasEagerState
	          ? update.eagerState
	          : reducer(pendingQueue, updateLane);
	      } else
	        (revertLane = {
	          lane: updateLane,
	          revertLane: update.revertLane,
	          action: update.action,
	          hasEagerState: update.hasEagerState,
	          eagerState: update.eagerState,
	          next: null
	        }),
	          null === newBaseQueueLast
	            ? ((newBaseQueueFirst = newBaseQueueLast = revertLane),
	              (baseFirst = pendingQueue))
	            : (newBaseQueueLast = newBaseQueueLast.next = revertLane),
	          (currentlyRenderingFiber$1.lanes |= updateLane),
	          (workInProgressRootSkippedLanes |= updateLane);
	      update = update.next;
	    } while (null !== update && update !== current);
	    null === newBaseQueueLast
	      ? (baseFirst = pendingQueue)
	      : (newBaseQueueLast.next = newBaseQueueFirst);
	    if (
	      !objectIs(pendingQueue, hook.memoizedState) &&
	      ((didReceiveUpdate = true),
	      didReadFromEntangledAsyncAction$54 &&
	        ((reducer = currentEntangledActionThenable), null !== reducer))
	    )
	      throw reducer;
	    hook.memoizedState = pendingQueue;
	    hook.baseState = baseFirst;
	    hook.baseQueue = newBaseQueueLast;
	    queue.lastRenderedState = pendingQueue;
	  }
	  null === baseQueue && (queue.lanes = 0);
	  return [hook.memoizedState, queue.dispatch];
	}
	function rerenderReducer(reducer) {
	  var hook = updateWorkInProgressHook(),
	    queue = hook.queue;
	  if (null === queue) throw Error(formatProdErrorMessage(311));
	  queue.lastRenderedReducer = reducer;
	  var dispatch = queue.dispatch,
	    lastRenderPhaseUpdate = queue.pending,
	    newState = hook.memoizedState;
	  if (null !== lastRenderPhaseUpdate) {
	    queue.pending = null;
	    var update = (lastRenderPhaseUpdate = lastRenderPhaseUpdate.next);
	    do (newState = reducer(newState, update.action)), (update = update.next);
	    while (update !== lastRenderPhaseUpdate);
	    objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
	    hook.memoizedState = newState;
	    null === hook.baseQueue && (hook.baseState = newState);
	    queue.lastRenderedState = newState;
	  }
	  return [newState, dispatch];
	}
	function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
	  var fiber = currentlyRenderingFiber$1,
	    hook = updateWorkInProgressHook(),
	    isHydrating$jscomp$0 = isHydrating;
	  if (isHydrating$jscomp$0) {
	    if (undefined === getServerSnapshot) throw Error(formatProdErrorMessage(407));
	    getServerSnapshot = getServerSnapshot();
	  } else getServerSnapshot = getSnapshot();
	  var snapshotChanged = !objectIs(
	    (currentHook || hook).memoizedState,
	    getServerSnapshot
	  );
	  snapshotChanged &&
	    ((hook.memoizedState = getServerSnapshot), (didReceiveUpdate = true));
	  hook = hook.queue;
	  updateEffect(subscribeToStore.bind(null, fiber, hook, subscribe), [
	    subscribe
	  ]);
	  if (
	    hook.getSnapshot !== getSnapshot ||
	    snapshotChanged ||
	    (null !== workInProgressHook && workInProgressHook.memoizedState.tag & 1)
	  ) {
	    fiber.flags |= 2048;
	    pushEffect(
	      9,
	      updateStoreInstance.bind(
	        null,
	        fiber,
	        hook,
	        getServerSnapshot,
	        getSnapshot
	      ),
	      { destroy: undefined },
	      null
	    );
	    if (null === workInProgressRoot) throw Error(formatProdErrorMessage(349));
	    isHydrating$jscomp$0 ||
	      0 !== (renderLanes & 60) ||
	      pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
	  }
	  return getServerSnapshot;
	}
	function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
	  fiber.flags |= 16384;
	  fiber = { getSnapshot: getSnapshot, value: renderedSnapshot };
	  getSnapshot = currentlyRenderingFiber$1.updateQueue;
	  null === getSnapshot
	    ? ((getSnapshot = createFunctionComponentUpdateQueue()),
	      (currentlyRenderingFiber$1.updateQueue = getSnapshot),
	      (getSnapshot.stores = [fiber]))
	    : ((renderedSnapshot = getSnapshot.stores),
	      null === renderedSnapshot
	        ? (getSnapshot.stores = [fiber])
	        : renderedSnapshot.push(fiber));
	}
	function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
	  inst.value = nextSnapshot;
	  inst.getSnapshot = getSnapshot;
	  checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
	}
	function subscribeToStore(fiber, inst, subscribe) {
	  return subscribe(function () {
	    checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
	  });
	}
	function checkIfSnapshotChanged(inst) {
	  var latestGetSnapshot = inst.getSnapshot;
	  inst = inst.value;
	  try {
	    var nextValue = latestGetSnapshot();
	    return !objectIs(inst, nextValue);
	  } catch (error) {
	    return true;
	  }
	}
	function forceStoreRerender(fiber) {
	  var root = enqueueConcurrentRenderForLane(fiber, 2);
	  null !== root && scheduleUpdateOnFiber(root, fiber, 2);
	}
	function mountStateImpl(initialState) {
	  var hook = mountWorkInProgressHook();
	  if ("function" === typeof initialState) {
	    var initialStateInitializer = initialState;
	    initialState = initialStateInitializer();
	    if (shouldDoubleInvokeUserFnsInHooksDEV) {
	      setIsStrictModeForDevtools(true);
	      try {
	        initialStateInitializer();
	      } finally {
	        setIsStrictModeForDevtools(false);
	      }
	    }
	  }
	  hook.memoizedState = hook.baseState = initialState;
	  hook.queue = {
	    pending: null,
	    lanes: 0,
	    dispatch: null,
	    lastRenderedReducer: basicStateReducer,
	    lastRenderedState: initialState
	  };
	  return hook;
	}
	function updateOptimisticImpl(hook, current, passthrough, reducer) {
	  hook.baseState = passthrough;
	  return updateReducerImpl(
	    hook,
	    currentHook,
	    "function" === typeof reducer ? reducer : basicStateReducer
	  );
	}
	function dispatchActionState(
	  fiber,
	  actionQueue,
	  setPendingState,
	  setState,
	  payload
	) {
	  if (isRenderPhaseUpdate(fiber)) throw Error(formatProdErrorMessage(485));
	  fiber = actionQueue.action;
	  if (null !== fiber) {
	    var actionNode = {
	      payload: payload,
	      action: fiber,
	      next: null,
	      isTransition: true,
	      status: "pending",
	      value: null,
	      reason: null,
	      listeners: [],
	      then: function (listener) {
	        actionNode.listeners.push(listener);
	      }
	    };
	    null !== ReactSharedInternals.T
	      ? setPendingState(true)
	      : (actionNode.isTransition = false);
	    setState(actionNode);
	    setPendingState = actionQueue.pending;
	    null === setPendingState
	      ? ((actionNode.next = actionQueue.pending = actionNode),
	        runActionStateAction(actionQueue, actionNode))
	      : ((actionNode.next = setPendingState.next),
	        (actionQueue.pending = setPendingState.next = actionNode));
	  }
	}
	function runActionStateAction(actionQueue, node) {
	  var action = node.action,
	    payload = node.payload,
	    prevState = actionQueue.state;
	  if (node.isTransition) {
	    var prevTransition = ReactSharedInternals.T,
	      currentTransition = {};
	    ReactSharedInternals.T = currentTransition;
	    try {
	      var returnValue = action(prevState, payload),
	        onStartTransitionFinish = ReactSharedInternals.S;
	      null !== onStartTransitionFinish &&
	        onStartTransitionFinish(currentTransition, returnValue);
	      handleActionReturnValue(actionQueue, node, returnValue);
	    } catch (error) {
	      onActionError(actionQueue, node, error);
	    } finally {
	      ReactSharedInternals.T = prevTransition;
	    }
	  } else
	    try {
	      (prevTransition = action(prevState, payload)),
	        handleActionReturnValue(actionQueue, node, prevTransition);
	    } catch (error$60) {
	      onActionError(actionQueue, node, error$60);
	    }
	}
	function handleActionReturnValue(actionQueue, node, returnValue) {
	  null !== returnValue &&
	  "object" === typeof returnValue &&
	  "function" === typeof returnValue.then
	    ? returnValue.then(
	        function (nextState) {
	          onActionSuccess(actionQueue, node, nextState);
	        },
	        function (error) {
	          return onActionError(actionQueue, node, error);
	        }
	      )
	    : onActionSuccess(actionQueue, node, returnValue);
	}
	function onActionSuccess(actionQueue, actionNode, nextState) {
	  actionNode.status = "fulfilled";
	  actionNode.value = nextState;
	  notifyActionListeners(actionNode);
	  actionQueue.state = nextState;
	  actionNode = actionQueue.pending;
	  null !== actionNode &&
	    ((nextState = actionNode.next),
	    nextState === actionNode
	      ? (actionQueue.pending = null)
	      : ((nextState = nextState.next),
	        (actionNode.next = nextState),
	        runActionStateAction(actionQueue, nextState)));
	}
	function onActionError(actionQueue, actionNode, error) {
	  var last = actionQueue.pending;
	  actionQueue.pending = null;
	  if (null !== last) {
	    last = last.next;
	    do
	      (actionNode.status = "rejected"),
	        (actionNode.reason = error),
	        notifyActionListeners(actionNode),
	        (actionNode = actionNode.next);
	    while (actionNode !== last);
	  }
	  actionQueue.action = null;
	}
	function notifyActionListeners(actionNode) {
	  actionNode = actionNode.listeners;
	  for (var i = 0; i < actionNode.length; i++) (0, actionNode[i])();
	}
	function actionStateReducer(oldState, newState) {
	  return newState;
	}
	function mountActionState(action, initialStateProp) {
	  if (isHydrating) {
	    var ssrFormState = workInProgressRoot.formState;
	    if (null !== ssrFormState) {
	      a: {
	        var JSCompiler_inline_result = currentlyRenderingFiber$1;
	        if (isHydrating) {
	          if (nextHydratableInstance) {
	            b: {
	              var JSCompiler_inline_result$jscomp$0 = nextHydratableInstance;
	              for (
	                var inRootOrSingleton = rootOrSingletonContext;
	                8 !== JSCompiler_inline_result$jscomp$0.nodeType;

	              ) {
	                if (!inRootOrSingleton) {
	                  JSCompiler_inline_result$jscomp$0 = null;
	                  break b;
	                }
	                JSCompiler_inline_result$jscomp$0 = getNextHydratable(
	                  JSCompiler_inline_result$jscomp$0.nextSibling
	                );
	                if (null === JSCompiler_inline_result$jscomp$0) {
	                  JSCompiler_inline_result$jscomp$0 = null;
	                  break b;
	                }
	              }
	              inRootOrSingleton = JSCompiler_inline_result$jscomp$0.data;
	              JSCompiler_inline_result$jscomp$0 =
	                "F!" === inRootOrSingleton || "F" === inRootOrSingleton
	                  ? JSCompiler_inline_result$jscomp$0
	                  : null;
	            }
	            if (JSCompiler_inline_result$jscomp$0) {
	              nextHydratableInstance = getNextHydratable(
	                JSCompiler_inline_result$jscomp$0.nextSibling
	              );
	              JSCompiler_inline_result =
	                "F!" === JSCompiler_inline_result$jscomp$0.data;
	              break a;
	            }
	          }
	          throwOnHydrationMismatch(JSCompiler_inline_result);
	        }
	        JSCompiler_inline_result = false;
	      }
	      JSCompiler_inline_result && (initialStateProp = ssrFormState[0]);
	    }
	  }
	  ssrFormState = mountWorkInProgressHook();
	  ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;
	  JSCompiler_inline_result = {
	    pending: null,
	    lanes: 0,
	    dispatch: null,
	    lastRenderedReducer: actionStateReducer,
	    lastRenderedState: initialStateProp
	  };
	  ssrFormState.queue = JSCompiler_inline_result;
	  ssrFormState = dispatchSetState.bind(
	    null,
	    currentlyRenderingFiber$1,
	    JSCompiler_inline_result
	  );
	  JSCompiler_inline_result.dispatch = ssrFormState;
	  JSCompiler_inline_result = mountStateImpl(false);
	  inRootOrSingleton = dispatchOptimisticSetState.bind(
	    null,
	    currentlyRenderingFiber$1,
	    false,
	    JSCompiler_inline_result.queue
	  );
	  JSCompiler_inline_result = mountWorkInProgressHook();
	  JSCompiler_inline_result$jscomp$0 = {
	    state: initialStateProp,
	    dispatch: null,
	    action: action,
	    pending: null
	  };
	  JSCompiler_inline_result.queue = JSCompiler_inline_result$jscomp$0;
	  ssrFormState = dispatchActionState.bind(
	    null,
	    currentlyRenderingFiber$1,
	    JSCompiler_inline_result$jscomp$0,
	    inRootOrSingleton,
	    ssrFormState
	  );
	  JSCompiler_inline_result$jscomp$0.dispatch = ssrFormState;
	  JSCompiler_inline_result.memoizedState = action;
	  return [initialStateProp, ssrFormState, false];
	}
	function updateActionState(action) {
	  var stateHook = updateWorkInProgressHook();
	  return updateActionStateImpl(stateHook, currentHook, action);
	}
	function updateActionStateImpl(stateHook, currentStateHook, action) {
	  currentStateHook = updateReducerImpl(
	    stateHook,
	    currentStateHook,
	    actionStateReducer
	  )[0];
	  stateHook = updateReducer(basicStateReducer)[0];
	  currentStateHook =
	    "object" === typeof currentStateHook &&
	    null !== currentStateHook &&
	    "function" === typeof currentStateHook.then
	      ? useThenable(currentStateHook)
	      : currentStateHook;
	  var actionQueueHook = updateWorkInProgressHook(),
	    actionQueue = actionQueueHook.queue,
	    dispatch = actionQueue.dispatch;
	  action !== actionQueueHook.memoizedState &&
	    ((currentlyRenderingFiber$1.flags |= 2048),
	    pushEffect(
	      9,
	      actionStateActionEffect.bind(null, actionQueue, action),
	      { destroy: undefined },
	      null
	    ));
	  return [currentStateHook, dispatch, stateHook];
	}
	function actionStateActionEffect(actionQueue, action) {
	  actionQueue.action = action;
	}
	function rerenderActionState(action) {
	  var stateHook = updateWorkInProgressHook(),
	    currentStateHook = currentHook;
	  if (null !== currentStateHook)
	    return updateActionStateImpl(stateHook, currentStateHook, action);
	  updateWorkInProgressHook();
	  stateHook = stateHook.memoizedState;
	  currentStateHook = updateWorkInProgressHook();
	  var dispatch = currentStateHook.queue.dispatch;
	  currentStateHook.memoizedState = action;
	  return [stateHook, dispatch, false];
	}
	function pushEffect(tag, create, inst, deps) {
	  tag = { tag: tag, create: create, inst: inst, deps: deps, next: null };
	  create = currentlyRenderingFiber$1.updateQueue;
	  null === create &&
	    ((create = createFunctionComponentUpdateQueue()),
	    (currentlyRenderingFiber$1.updateQueue = create));
	  inst = create.lastEffect;
	  null === inst
	    ? (create.lastEffect = tag.next = tag)
	    : ((deps = inst.next),
	      (inst.next = tag),
	      (tag.next = deps),
	      (create.lastEffect = tag));
	  return tag;
	}
	function updateRef() {
	  return updateWorkInProgressHook().memoizedState;
	}
	function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
	  var hook = mountWorkInProgressHook();
	  currentlyRenderingFiber$1.flags |= fiberFlags;
	  hook.memoizedState = pushEffect(
	    1 | hookFlags,
	    create,
	    { destroy: undefined },
	    undefined === deps ? null : deps
	  );
	}
	function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
	  var hook = updateWorkInProgressHook();
	  deps = undefined === deps ? null : deps;
	  var inst = hook.memoizedState.inst;
	  null !== currentHook &&
	  null !== deps &&
	  areHookInputsEqual(deps, currentHook.memoizedState.deps)
	    ? (hook.memoizedState = pushEffect(hookFlags, create, inst, deps))
	    : ((currentlyRenderingFiber$1.flags |= fiberFlags),
	      (hook.memoizedState = pushEffect(1 | hookFlags, create, inst, deps)));
	}
	function mountEffect(create, deps) {
	  mountEffectImpl(8390656, 8, create, deps);
	}
	function updateEffect(create, deps) {
	  updateEffectImpl(2048, 8, create, deps);
	}
	function updateInsertionEffect(create, deps) {
	  return updateEffectImpl(4, 2, create, deps);
	}
	function updateLayoutEffect(create, deps) {
	  return updateEffectImpl(4, 4, create, deps);
	}
	function imperativeHandleEffect(create, ref) {
	  if ("function" === typeof ref) {
	    create = create();
	    var refCleanup = ref(create);
	    return function () {
	      "function" === typeof refCleanup ? refCleanup() : ref(null);
	    };
	  }
	  if (null !== ref && undefined !== ref)
	    return (
	      (create = create()),
	      (ref.current = create),
	      function () {
	        ref.current = null;
	      }
	    );
	}
	function updateImperativeHandle(ref, create, deps) {
	  deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
	  updateEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
	}
	function mountDebugValue() {}
	function updateCallback(callback, deps) {
	  var hook = updateWorkInProgressHook();
	  deps = undefined === deps ? null : deps;
	  var prevState = hook.memoizedState;
	  if (null !== deps && areHookInputsEqual(deps, prevState[1]))
	    return prevState[0];
	  hook.memoizedState = [callback, deps];
	  return callback;
	}
	function updateMemo(nextCreate, deps) {
	  var hook = updateWorkInProgressHook();
	  deps = undefined === deps ? null : deps;
	  var prevState = hook.memoizedState;
	  if (null !== deps && areHookInputsEqual(deps, prevState[1]))
	    return prevState[0];
	  prevState = nextCreate();
	  if (shouldDoubleInvokeUserFnsInHooksDEV) {
	    setIsStrictModeForDevtools(true);
	    try {
	      nextCreate();
	    } finally {
	      setIsStrictModeForDevtools(false);
	    }
	  }
	  hook.memoizedState = [prevState, deps];
	  return prevState;
	}
	function mountDeferredValueImpl(hook, value, initialValue) {
	  if (undefined === initialValue || 0 !== (renderLanes & 1073741824))
	    return (hook.memoizedState = value);
	  hook.memoizedState = initialValue;
	  hook = requestDeferredLane();
	  currentlyRenderingFiber$1.lanes |= hook;
	  workInProgressRootSkippedLanes |= hook;
	  return initialValue;
	}
	function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
	  if (objectIs(value, prevValue)) return value;
	  if (null !== currentTreeHiddenStackCursor.current)
	    return (
	      (hook = mountDeferredValueImpl(hook, value, initialValue)),
	      objectIs(hook, prevValue) || (didReceiveUpdate = true),
	      hook
	    );
	  if (0 === (renderLanes & 42))
	    return (didReceiveUpdate = true), (hook.memoizedState = value);
	  hook = requestDeferredLane();
	  currentlyRenderingFiber$1.lanes |= hook;
	  workInProgressRootSkippedLanes |= hook;
	  return prevValue;
	}
	function startTransition(fiber, queue, pendingState, finishedState, callback) {
	  var previousPriority = ReactDOMSharedInternals.p;
	  ReactDOMSharedInternals.p =
	    0 !== previousPriority && 8 > previousPriority ? previousPriority : 8;
	  var prevTransition = ReactSharedInternals.T,
	    currentTransition = {};
	  ReactSharedInternals.T = currentTransition;
	  dispatchOptimisticSetState(fiber, false, queue, pendingState);
	  try {
	    var returnValue = callback(),
	      onStartTransitionFinish = ReactSharedInternals.S;
	    null !== onStartTransitionFinish &&
	      onStartTransitionFinish(currentTransition, returnValue);
	    if (
	      null !== returnValue &&
	      "object" === typeof returnValue &&
	      "function" === typeof returnValue.then
	    ) {
	      var thenableForFinishedState = chainThenableValue(
	        returnValue,
	        finishedState
	      );
	      dispatchSetStateInternal(
	        fiber,
	        queue,
	        thenableForFinishedState,
	        requestUpdateLane(fiber)
	      );
	    } else
	      dispatchSetStateInternal(
	        fiber,
	        queue,
	        finishedState,
	        requestUpdateLane(fiber)
	      );
	  } catch (error) {
	    dispatchSetStateInternal(
	      fiber,
	      queue,
	      { then: function () {}, status: "rejected", reason: error },
	      requestUpdateLane()
	    );
	  } finally {
	    (ReactDOMSharedInternals.p = previousPriority),
	      (ReactSharedInternals.T = prevTransition);
	  }
	}
	function noop$2() {}
	function startHostTransition(formFiber, pendingState, action, formData) {
	  if (5 !== formFiber.tag) throw Error(formatProdErrorMessage(476));
	  var queue = ensureFormComponentIsStateful(formFiber).queue;
	  startTransition(
	    formFiber,
	    queue,
	    pendingState,
	    sharedNotPendingObject,
	    null === action
	      ? noop$2
	      : function () {
	          requestFormReset$1(formFiber);
	          return action(formData);
	        }
	  );
	}
	function ensureFormComponentIsStateful(formFiber) {
	  var existingStateHook = formFiber.memoizedState;
	  if (null !== existingStateHook) return existingStateHook;
	  existingStateHook = {
	    memoizedState: sharedNotPendingObject,
	    baseState: sharedNotPendingObject,
	    baseQueue: null,
	    queue: {
	      pending: null,
	      lanes: 0,
	      dispatch: null,
	      lastRenderedReducer: basicStateReducer,
	      lastRenderedState: sharedNotPendingObject
	    },
	    next: null
	  };
	  var initialResetState = {};
	  existingStateHook.next = {
	    memoizedState: initialResetState,
	    baseState: initialResetState,
	    baseQueue: null,
	    queue: {
	      pending: null,
	      lanes: 0,
	      dispatch: null,
	      lastRenderedReducer: basicStateReducer,
	      lastRenderedState: initialResetState
	    },
	    next: null
	  };
	  formFiber.memoizedState = existingStateHook;
	  formFiber = formFiber.alternate;
	  null !== formFiber && (formFiber.memoizedState = existingStateHook);
	  return existingStateHook;
	}
	function requestFormReset$1(formFiber) {
	  var resetStateQueue = ensureFormComponentIsStateful(formFiber).next.queue;
	  dispatchSetStateInternal(formFiber, resetStateQueue, {}, requestUpdateLane());
	}
	function useHostTransitionStatus() {
	  return readContext(HostTransitionContext);
	}
	function updateId() {
	  return updateWorkInProgressHook().memoizedState;
	}
	function updateRefresh() {
	  return updateWorkInProgressHook().memoizedState;
	}
	function refreshCache(fiber) {
	  for (var provider = fiber.return; null !== provider; ) {
	    switch (provider.tag) {
	      case 24:
	      case 3:
	        var lane = requestUpdateLane();
	        fiber = createUpdate(lane);
	        var root$63 = enqueueUpdate(provider, fiber, lane);
	        null !== root$63 &&
	          (scheduleUpdateOnFiber(root$63, provider, lane),
	          entangleTransitions(root$63, provider, lane));
	        provider = { cache: createCache() };
	        fiber.payload = provider;
	        return;
	    }
	    provider = provider.return;
	  }
	}
	function dispatchReducerAction(fiber, queue, action) {
	  var lane = requestUpdateLane();
	  action = {
	    lane: lane,
	    revertLane: 0,
	    action: action,
	    hasEagerState: false,
	    eagerState: null,
	    next: null
	  };
	  isRenderPhaseUpdate(fiber)
	    ? enqueueRenderPhaseUpdate(queue, action)
	    : ((action = enqueueConcurrentHookUpdate(fiber, queue, action, lane)),
	      null !== action &&
	        (scheduleUpdateOnFiber(action, fiber, lane),
	        entangleTransitionUpdate(action, queue, lane)));
	}
	function dispatchSetState(fiber, queue, action) {
	  var lane = requestUpdateLane();
	  dispatchSetStateInternal(fiber, queue, action, lane);
	}
	function dispatchSetStateInternal(fiber, queue, action, lane) {
	  var update = {
	    lane: lane,
	    revertLane: 0,
	    action: action,
	    hasEagerState: false,
	    eagerState: null,
	    next: null
	  };
	  if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
	  else {
	    var alternate = fiber.alternate;
	    if (
	      0 === fiber.lanes &&
	      (null === alternate || 0 === alternate.lanes) &&
	      ((alternate = queue.lastRenderedReducer), null !== alternate)
	    )
	      try {
	        var currentState = queue.lastRenderedState,
	          eagerState = alternate(currentState, action);
	        update.hasEagerState = !0;
	        update.eagerState = eagerState;
	        if (objectIs(eagerState, currentState))
	          return (
	            enqueueUpdate$1(fiber, queue, update, 0),
	            null === workInProgressRoot && finishQueueingConcurrentUpdates(),
	            !1
	          );
	      } catch (error) {
	      } finally {
	      }
	    action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
	    if (null !== action)
	      return (
	        scheduleUpdateOnFiber(action, fiber, lane),
	        entangleTransitionUpdate(action, queue, lane),
	        true
	      );
	  }
	  return false;
	}
	function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
	  action = {
	    lane: 2,
	    revertLane: requestTransitionLane(),
	    action: action,
	    hasEagerState: false,
	    eagerState: null,
	    next: null
	  };
	  if (isRenderPhaseUpdate(fiber)) {
	    if (throwIfDuringRender) throw Error(formatProdErrorMessage(479));
	  } else
	    (throwIfDuringRender = enqueueConcurrentHookUpdate(
	      fiber,
	      queue,
	      action,
	      2
	    )),
	      null !== throwIfDuringRender &&
	        scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
	}
	function isRenderPhaseUpdate(fiber) {
	  var alternate = fiber.alternate;
	  return (
	    fiber === currentlyRenderingFiber$1 ||
	    (null !== alternate && alternate === currentlyRenderingFiber$1)
	  );
	}
	function enqueueRenderPhaseUpdate(queue, update) {
	  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate =
	    true;
	  var pending = queue.pending;
	  null === pending
	    ? (update.next = update)
	    : ((update.next = pending.next), (pending.next = update));
	  queue.pending = update;
	}
	function entangleTransitionUpdate(root, queue, lane) {
	  if (0 !== (lane & 4194176)) {
	    var queueLanes = queue.lanes;
	    queueLanes &= root.pendingLanes;
	    lane |= queueLanes;
	    queue.lanes = lane;
	    markRootEntangled(root, lane);
	  }
	}
	var ContextOnlyDispatcher = {
	  readContext: readContext,
	  use: use,
	  useCallback: throwInvalidHookError,
	  useContext: throwInvalidHookError,
	  useEffect: throwInvalidHookError,
	  useImperativeHandle: throwInvalidHookError,
	  useLayoutEffect: throwInvalidHookError,
	  useInsertionEffect: throwInvalidHookError,
	  useMemo: throwInvalidHookError,
	  useReducer: throwInvalidHookError,
	  useRef: throwInvalidHookError,
	  useState: throwInvalidHookError,
	  useDebugValue: throwInvalidHookError,
	  useDeferredValue: throwInvalidHookError,
	  useTransition: throwInvalidHookError,
	  useSyncExternalStore: throwInvalidHookError,
	  useId: throwInvalidHookError
	};
	ContextOnlyDispatcher.useCacheRefresh = throwInvalidHookError;
	ContextOnlyDispatcher.useMemoCache = throwInvalidHookError;
	ContextOnlyDispatcher.useHostTransitionStatus = throwInvalidHookError;
	ContextOnlyDispatcher.useFormState = throwInvalidHookError;
	ContextOnlyDispatcher.useActionState = throwInvalidHookError;
	ContextOnlyDispatcher.useOptimistic = throwInvalidHookError;
	var HooksDispatcherOnMount = {
	  readContext: readContext,
	  use: use,
	  useCallback: function (callback, deps) {
	    mountWorkInProgressHook().memoizedState = [
	      callback,
	      undefined === deps ? null : deps
	    ];
	    return callback;
	  },
	  useContext: readContext,
	  useEffect: mountEffect,
	  useImperativeHandle: function (ref, create, deps) {
	    deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
	    mountEffectImpl(
	      4194308,
	      4,
	      imperativeHandleEffect.bind(null, create, ref),
	      deps
	    );
	  },
	  useLayoutEffect: function (create, deps) {
	    return mountEffectImpl(4194308, 4, create, deps);
	  },
	  useInsertionEffect: function (create, deps) {
	    mountEffectImpl(4, 2, create, deps);
	  },
	  useMemo: function (nextCreate, deps) {
	    var hook = mountWorkInProgressHook();
	    deps = undefined === deps ? null : deps;
	    var nextValue = nextCreate();
	    if (shouldDoubleInvokeUserFnsInHooksDEV) {
	      setIsStrictModeForDevtools(true);
	      try {
	        nextCreate();
	      } finally {
	        setIsStrictModeForDevtools(false);
	      }
	    }
	    hook.memoizedState = [nextValue, deps];
	    return nextValue;
	  },
	  useReducer: function (reducer, initialArg, init) {
	    var hook = mountWorkInProgressHook();
	    if (undefined !== init) {
	      var initialState = init(initialArg);
	      if (shouldDoubleInvokeUserFnsInHooksDEV) {
	        setIsStrictModeForDevtools(true);
	        try {
	          init(initialArg);
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }
	    } else initialState = initialArg;
	    hook.memoizedState = hook.baseState = initialState;
	    reducer = {
	      pending: null,
	      lanes: 0,
	      dispatch: null,
	      lastRenderedReducer: reducer,
	      lastRenderedState: initialState
	    };
	    hook.queue = reducer;
	    reducer = reducer.dispatch = dispatchReducerAction.bind(
	      null,
	      currentlyRenderingFiber$1,
	      reducer
	    );
	    return [hook.memoizedState, reducer];
	  },
	  useRef: function (initialValue) {
	    var hook = mountWorkInProgressHook();
	    initialValue = { current: initialValue };
	    return (hook.memoizedState = initialValue);
	  },
	  useState: function (initialState) {
	    initialState = mountStateImpl(initialState);
	    var queue = initialState.queue,
	      dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
	    queue.dispatch = dispatch;
	    return [initialState.memoizedState, dispatch];
	  },
	  useDebugValue: mountDebugValue,
	  useDeferredValue: function (value, initialValue) {
	    var hook = mountWorkInProgressHook();
	    return mountDeferredValueImpl(hook, value, initialValue);
	  },
	  useTransition: function () {
	    var stateHook = mountStateImpl(false);
	    stateHook = startTransition.bind(
	      null,
	      currentlyRenderingFiber$1,
	      stateHook.queue,
	      true,
	      false
	    );
	    mountWorkInProgressHook().memoizedState = stateHook;
	    return [false, stateHook];
	  },
	  useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	    var fiber = currentlyRenderingFiber$1,
	      hook = mountWorkInProgressHook();
	    if (isHydrating) {
	      if (undefined === getServerSnapshot)
	        throw Error(formatProdErrorMessage(407));
	      getServerSnapshot = getServerSnapshot();
	    } else {
	      getServerSnapshot = getSnapshot();
	      if (null === workInProgressRoot) throw Error(formatProdErrorMessage(349));
	      0 !== (workInProgressRootRenderLanes & 60) ||
	        pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
	    }
	    hook.memoizedState = getServerSnapshot;
	    var inst = { value: getServerSnapshot, getSnapshot: getSnapshot };
	    hook.queue = inst;
	    mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
	      subscribe
	    ]);
	    fiber.flags |= 2048;
	    pushEffect(
	      9,
	      updateStoreInstance.bind(
	        null,
	        fiber,
	        inst,
	        getServerSnapshot,
	        getSnapshot
	      ),
	      { destroy: undefined },
	      null
	    );
	    return getServerSnapshot;
	  },
	  useId: function () {
	    var hook = mountWorkInProgressHook(),
	      identifierPrefix = workInProgressRoot.identifierPrefix;
	    if (isHydrating) {
	      var JSCompiler_inline_result = treeContextOverflow;
	      var idWithLeadingBit = treeContextId;
	      JSCompiler_inline_result =
	        (
	          idWithLeadingBit & ~(1 << (32 - clz32(idWithLeadingBit) - 1))
	        ).toString(32) + JSCompiler_inline_result;
	      identifierPrefix =
	        ":" + identifierPrefix + "R" + JSCompiler_inline_result;
	      JSCompiler_inline_result = localIdCounter++;
	      0 < JSCompiler_inline_result &&
	        (identifierPrefix += "H" + JSCompiler_inline_result.toString(32));
	      identifierPrefix += ":";
	    } else
	      (JSCompiler_inline_result = globalClientIdCounter++),
	        (identifierPrefix =
	          ":" +
	          identifierPrefix +
	          "r" +
	          JSCompiler_inline_result.toString(32) +
	          ":");
	    return (hook.memoizedState = identifierPrefix);
	  },
	  useCacheRefresh: function () {
	    return (mountWorkInProgressHook().memoizedState = refreshCache.bind(
	      null,
	      currentlyRenderingFiber$1
	    ));
	  }
	};
	HooksDispatcherOnMount.useMemoCache = useMemoCache;
	HooksDispatcherOnMount.useHostTransitionStatus = useHostTransitionStatus;
	HooksDispatcherOnMount.useFormState = mountActionState;
	HooksDispatcherOnMount.useActionState = mountActionState;
	HooksDispatcherOnMount.useOptimistic = function (passthrough) {
	  var hook = mountWorkInProgressHook();
	  hook.memoizedState = hook.baseState = passthrough;
	  var queue = {
	    pending: null,
	    lanes: 0,
	    dispatch: null,
	    lastRenderedReducer: null,
	    lastRenderedState: null
	  };
	  hook.queue = queue;
	  hook = dispatchOptimisticSetState.bind(
	    null,
	    currentlyRenderingFiber$1,
	    true,
	    queue
	  );
	  queue.dispatch = hook;
	  return [passthrough, hook];
	};
	var HooksDispatcherOnUpdate = {
	  readContext: readContext,
	  use: use,
	  useCallback: updateCallback,
	  useContext: readContext,
	  useEffect: updateEffect,
	  useImperativeHandle: updateImperativeHandle,
	  useInsertionEffect: updateInsertionEffect,
	  useLayoutEffect: updateLayoutEffect,
	  useMemo: updateMemo,
	  useReducer: updateReducer,
	  useRef: updateRef,
	  useState: function () {
	    return updateReducer(basicStateReducer);
	  },
	  useDebugValue: mountDebugValue,
	  useDeferredValue: function (value, initialValue) {
	    var hook = updateWorkInProgressHook();
	    return updateDeferredValueImpl(
	      hook,
	      currentHook.memoizedState,
	      value,
	      initialValue
	    );
	  },
	  useTransition: function () {
	    var booleanOrThenable = updateReducer(basicStateReducer)[0],
	      start = updateWorkInProgressHook().memoizedState;
	    return [
	      "boolean" === typeof booleanOrThenable
	        ? booleanOrThenable
	        : useThenable(booleanOrThenable),
	      start
	    ];
	  },
	  useSyncExternalStore: updateSyncExternalStore,
	  useId: updateId
	};
	HooksDispatcherOnUpdate.useCacheRefresh = updateRefresh;
	HooksDispatcherOnUpdate.useMemoCache = useMemoCache;
	HooksDispatcherOnUpdate.useHostTransitionStatus = useHostTransitionStatus;
	HooksDispatcherOnUpdate.useFormState = updateActionState;
	HooksDispatcherOnUpdate.useActionState = updateActionState;
	HooksDispatcherOnUpdate.useOptimistic = function (passthrough, reducer) {
	  var hook = updateWorkInProgressHook();
	  return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
	};
	var HooksDispatcherOnRerender = {
	  readContext: readContext,
	  use: use,
	  useCallback: updateCallback,
	  useContext: readContext,
	  useEffect: updateEffect,
	  useImperativeHandle: updateImperativeHandle,
	  useInsertionEffect: updateInsertionEffect,
	  useLayoutEffect: updateLayoutEffect,
	  useMemo: updateMemo,
	  useReducer: rerenderReducer,
	  useRef: updateRef,
	  useState: function () {
	    return rerenderReducer(basicStateReducer);
	  },
	  useDebugValue: mountDebugValue,
	  useDeferredValue: function (value, initialValue) {
	    var hook = updateWorkInProgressHook();
	    return null === currentHook
	      ? mountDeferredValueImpl(hook, value, initialValue)
	      : updateDeferredValueImpl(
	          hook,
	          currentHook.memoizedState,
	          value,
	          initialValue
	        );
	  },
	  useTransition: function () {
	    var booleanOrThenable = rerenderReducer(basicStateReducer)[0],
	      start = updateWorkInProgressHook().memoizedState;
	    return [
	      "boolean" === typeof booleanOrThenable
	        ? booleanOrThenable
	        : useThenable(booleanOrThenable),
	      start
	    ];
	  },
	  useSyncExternalStore: updateSyncExternalStore,
	  useId: updateId
	};
	HooksDispatcherOnRerender.useCacheRefresh = updateRefresh;
	HooksDispatcherOnRerender.useMemoCache = useMemoCache;
	HooksDispatcherOnRerender.useHostTransitionStatus = useHostTransitionStatus;
	HooksDispatcherOnRerender.useFormState = rerenderActionState;
	HooksDispatcherOnRerender.useActionState = rerenderActionState;
	HooksDispatcherOnRerender.useOptimistic = function (passthrough, reducer) {
	  var hook = updateWorkInProgressHook();
	  if (null !== currentHook)
	    return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
	  hook.baseState = passthrough;
	  return [passthrough, hook.queue.dispatch];
	};
	function applyDerivedStateFromProps(
	  workInProgress,
	  ctor,
	  getDerivedStateFromProps,
	  nextProps
	) {
	  ctor = workInProgress.memoizedState;
	  getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
	  getDerivedStateFromProps =
	    null === getDerivedStateFromProps || undefined === getDerivedStateFromProps
	      ? ctor
	      : assign({}, ctor, getDerivedStateFromProps);
	  workInProgress.memoizedState = getDerivedStateFromProps;
	  0 === workInProgress.lanes &&
	    (workInProgress.updateQueue.baseState = getDerivedStateFromProps);
	}
	var classComponentUpdater = {
	  isMounted: function (component) {
	    return (component = component._reactInternals)
	      ? getNearestMountedFiber(component) === component
	      : false;
	  },
	  enqueueSetState: function (inst, payload, callback) {
	    inst = inst._reactInternals;
	    var lane = requestUpdateLane(),
	      update = createUpdate(lane);
	    update.payload = payload;
	    undefined !== callback && null !== callback && (update.callback = callback);
	    payload = enqueueUpdate(inst, update, lane);
	    null !== payload &&
	      (scheduleUpdateOnFiber(payload, inst, lane),
	      entangleTransitions(payload, inst, lane));
	  },
	  enqueueReplaceState: function (inst, payload, callback) {
	    inst = inst._reactInternals;
	    var lane = requestUpdateLane(),
	      update = createUpdate(lane);
	    update.tag = 1;
	    update.payload = payload;
	    undefined !== callback && null !== callback && (update.callback = callback);
	    payload = enqueueUpdate(inst, update, lane);
	    null !== payload &&
	      (scheduleUpdateOnFiber(payload, inst, lane),
	      entangleTransitions(payload, inst, lane));
	  },
	  enqueueForceUpdate: function (inst, callback) {
	    inst = inst._reactInternals;
	    var lane = requestUpdateLane(),
	      update = createUpdate(lane);
	    update.tag = 2;
	    undefined !== callback && null !== callback && (update.callback = callback);
	    callback = enqueueUpdate(inst, update, lane);
	    null !== callback &&
	      (scheduleUpdateOnFiber(callback, inst, lane),
	      entangleTransitions(callback, inst, lane));
	  }
	};
	function checkShouldComponentUpdate(
	  workInProgress,
	  ctor,
	  oldProps,
	  newProps,
	  oldState,
	  newState,
	  nextContext
	) {
	  workInProgress = workInProgress.stateNode;
	  return "function" === typeof workInProgress.shouldComponentUpdate
	    ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext)
	    : ctor.prototype && ctor.prototype.isPureReactComponent
	      ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)
	      : true;
	}
	function callComponentWillReceiveProps(
	  workInProgress,
	  instance,
	  newProps,
	  nextContext
	) {
	  workInProgress = instance.state;
	  "function" === typeof instance.componentWillReceiveProps &&
	    instance.componentWillReceiveProps(newProps, nextContext);
	  "function" === typeof instance.UNSAFE_componentWillReceiveProps &&
	    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
	  instance.state !== workInProgress &&
	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	}
	function resolveClassComponentProps(Component, baseProps) {
	  var newProps = baseProps;
	  if ("ref" in baseProps) {
	    newProps = {};
	    for (var propName in baseProps)
	      "ref" !== propName && (newProps[propName] = baseProps[propName]);
	  }
	  if ((Component = Component.defaultProps)) {
	    newProps === baseProps && (newProps = assign({}, newProps));
	    for (var propName$67 in Component)
	      undefined === newProps[propName$67] &&
	        (newProps[propName$67] = Component[propName$67]);
	  }
	  return newProps;
	}
	var reportGlobalError =
	  "function" === typeof reportError
	    ? reportError
	    : function (error) {
	        if (
	          "object" === typeof window &&
	          "function" === typeof window.ErrorEvent
	        ) {
	          var event = new window.ErrorEvent("error", {
	            bubbles: true,
	            cancelable: true,
	            message:
	              "object" === typeof error &&
	              null !== error &&
	              "string" === typeof error.message
	                ? String(error.message)
	                : String(error),
	            error: error
	          });
	          if (!window.dispatchEvent(event)) return;
	        } else if (
	          "object" === typeof process &&
	          "function" === typeof process.emit
	        ) {
	          process.emit("uncaughtException", error);
	          return;
	        }
	        console.error(error);
	      };
	function defaultOnUncaughtError(error) {
	  reportGlobalError(error);
	}
	function defaultOnCaughtError(error) {
	  console.error(error);
	}
	function defaultOnRecoverableError(error) {
	  reportGlobalError(error);
	}
	function logUncaughtError(root, errorInfo) {
	  try {
	    var onUncaughtError = root.onUncaughtError;
	    onUncaughtError(errorInfo.value, { componentStack: errorInfo.stack });
	  } catch (e$68) {
	    setTimeout(function () {
	      throw e$68;
	    });
	  }
	}
	function logCaughtError(root, boundary, errorInfo) {
	  try {
	    var onCaughtError = root.onCaughtError;
	    onCaughtError(errorInfo.value, {
	      componentStack: errorInfo.stack,
	      errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
	    });
	  } catch (e$69) {
	    setTimeout(function () {
	      throw e$69;
	    });
	  }
	}
	function createRootErrorUpdate(root, errorInfo, lane) {
	  lane = createUpdate(lane);
	  lane.tag = 3;
	  lane.payload = { element: null };
	  lane.callback = function () {
	    logUncaughtError(root, errorInfo);
	  };
	  return lane;
	}
	function createClassErrorUpdate(lane) {
	  lane = createUpdate(lane);
	  lane.tag = 3;
	  return lane;
	}
	function initializeClassErrorUpdate(update, root, fiber, errorInfo) {
	  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
	  if ("function" === typeof getDerivedStateFromError) {
	    var error = errorInfo.value;
	    update.payload = function () {
	      return getDerivedStateFromError(error);
	    };
	    update.callback = function () {
	      logCaughtError(root, fiber, errorInfo);
	    };
	  }
	  var inst = fiber.stateNode;
	  null !== inst &&
	    "function" === typeof inst.componentDidCatch &&
	    (update.callback = function () {
	      logCaughtError(root, fiber, errorInfo);
	      "function" !== typeof getDerivedStateFromError &&
	        (null === legacyErrorBoundariesThatAlreadyFailed
	          ? (legacyErrorBoundariesThatAlreadyFailed = new Set([this]))
	          : legacyErrorBoundariesThatAlreadyFailed.add(this));
	      var stack = errorInfo.stack;
	      this.componentDidCatch(errorInfo.value, {
	        componentStack: null !== stack ? stack : ""
	      });
	    });
	}
	function throwException(
	  root,
	  returnFiber,
	  sourceFiber,
	  value,
	  rootRenderLanes
	) {
	  sourceFiber.flags |= 32768;
	  if (
	    null !== value &&
	    "object" === typeof value &&
	    "function" === typeof value.then
	  ) {
	    returnFiber = sourceFiber.alternate;
	    null !== returnFiber &&
	      propagateParentContextChanges(
	        returnFiber,
	        sourceFiber,
	        rootRenderLanes,
	        true
	      );
	    sourceFiber = suspenseHandlerStackCursor.current;
	    if (null !== sourceFiber) {
	      switch (sourceFiber.tag) {
	        case 13:
	          return (
	            null === shellBoundary
	              ? renderDidSuspendDelayIfPossible()
	              : null === sourceFiber.alternate &&
	                0 === workInProgressRootExitStatus &&
	                (workInProgressRootExitStatus = 3),
	            (sourceFiber.flags &= -257),
	            (sourceFiber.flags |= 65536),
	            (sourceFiber.lanes = rootRenderLanes),
	            value === noopSuspenseyCommitThenable
	              ? (sourceFiber.flags |= 16384)
	              : ((returnFiber = sourceFiber.updateQueue),
	                null === returnFiber
	                  ? (sourceFiber.updateQueue = new Set([value]))
	                  : returnFiber.add(value),
	                attachPingListener(root, value, rootRenderLanes)),
	            false
	          );
	        case 22:
	          return (
	            (sourceFiber.flags |= 65536),
	            value === noopSuspenseyCommitThenable
	              ? (sourceFiber.flags |= 16384)
	              : ((returnFiber = sourceFiber.updateQueue),
	                null === returnFiber
	                  ? ((returnFiber = {
	                      transitions: null,
	                      markerInstances: null,
	                      retryQueue: new Set([value])
	                    }),
	                    (sourceFiber.updateQueue = returnFiber))
	                  : ((sourceFiber = returnFiber.retryQueue),
	                    null === sourceFiber
	                      ? (returnFiber.retryQueue = new Set([value]))
	                      : sourceFiber.add(value)),
	                attachPingListener(root, value, rootRenderLanes)),
	            false
	          );
	      }
	      throw Error(formatProdErrorMessage(435, sourceFiber.tag));
	    }
	    attachPingListener(root, value, rootRenderLanes);
	    renderDidSuspendDelayIfPossible();
	    return false;
	  }
	  if (isHydrating)
	    return (
	      (returnFiber = suspenseHandlerStackCursor.current),
	      null !== returnFiber
	        ? (0 === (returnFiber.flags & 65536) && (returnFiber.flags |= 256),
	          (returnFiber.flags |= 65536),
	          (returnFiber.lanes = rootRenderLanes),
	          value !== HydrationMismatchException &&
	            ((root = Error(formatProdErrorMessage(422), { cause: value })),
	            queueHydrationError(createCapturedValueAtFiber(root, sourceFiber))))
	        : (value !== HydrationMismatchException &&
	            ((returnFiber = Error(formatProdErrorMessage(423), {
	              cause: value
	            })),
	            queueHydrationError(
	              createCapturedValueAtFiber(returnFiber, sourceFiber)
	            )),
	          (root = root.current.alternate),
	          (root.flags |= 65536),
	          (rootRenderLanes &= -rootRenderLanes),
	          (root.lanes |= rootRenderLanes),
	          (value = createCapturedValueAtFiber(value, sourceFiber)),
	          (rootRenderLanes = createRootErrorUpdate(
	            root.stateNode,
	            value,
	            rootRenderLanes
	          )),
	          enqueueCapturedUpdate(root, rootRenderLanes),
	          4 !== workInProgressRootExitStatus &&
	            (workInProgressRootExitStatus = 2)),
	      false
	    );
	  var wrapperError = Error(formatProdErrorMessage(520), { cause: value });
	  wrapperError = createCapturedValueAtFiber(wrapperError, sourceFiber);
	  null === workInProgressRootConcurrentErrors
	    ? (workInProgressRootConcurrentErrors = [wrapperError])
	    : workInProgressRootConcurrentErrors.push(wrapperError);
	  4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2);
	  if (null === returnFiber) return true;
	  value = createCapturedValueAtFiber(value, sourceFiber);
	  sourceFiber = returnFiber;
	  do {
	    switch (sourceFiber.tag) {
	      case 3:
	        return (
	          (sourceFiber.flags |= 65536),
	          (root = rootRenderLanes & -rootRenderLanes),
	          (sourceFiber.lanes |= root),
	          (root = createRootErrorUpdate(sourceFiber.stateNode, value, root)),
	          enqueueCapturedUpdate(sourceFiber, root),
	          false
	        );
	      case 1:
	        if (
	          ((returnFiber = sourceFiber.type),
	          (wrapperError = sourceFiber.stateNode),
	          0 === (sourceFiber.flags & 128) &&
	            ("function" === typeof returnFiber.getDerivedStateFromError ||
	              (null !== wrapperError &&
	                "function" === typeof wrapperError.componentDidCatch &&
	                (null === legacyErrorBoundariesThatAlreadyFailed ||
	                  !legacyErrorBoundariesThatAlreadyFailed.has(wrapperError)))))
	        )
	          return (
	            (sourceFiber.flags |= 65536),
	            (rootRenderLanes &= -rootRenderLanes),
	            (sourceFiber.lanes |= rootRenderLanes),
	            (rootRenderLanes = createClassErrorUpdate(rootRenderLanes)),
	            initializeClassErrorUpdate(
	              rootRenderLanes,
	              root,
	              sourceFiber,
	              value
	            ),
	            enqueueCapturedUpdate(sourceFiber, rootRenderLanes),
	            false
	          );
	    }
	    sourceFiber = sourceFiber.return;
	  } while (null !== sourceFiber);
	  return false;
	}
	var SelectiveHydrationException = Error(formatProdErrorMessage(461)),
	  didReceiveUpdate = false;
	function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
	  workInProgress.child =
	    null === current
	      ? mountChildFibers(workInProgress, null, nextChildren, renderLanes)
	      : reconcileChildFibers(
	          workInProgress,
	          current.child,
	          nextChildren,
	          renderLanes
	        );
	}
	function updateForwardRef(
	  current,
	  workInProgress,
	  Component,
	  nextProps,
	  renderLanes
	) {
	  Component = Component.render;
	  var ref = workInProgress.ref;
	  if ("ref" in nextProps) {
	    var propsWithoutRef = {};
	    for (var key in nextProps)
	      "ref" !== key && (propsWithoutRef[key] = nextProps[key]);
	  } else propsWithoutRef = nextProps;
	  prepareToReadContext(workInProgress);
	  nextProps = renderWithHooks(
	    current,
	    workInProgress,
	    Component,
	    propsWithoutRef,
	    ref,
	    renderLanes
	  );
	  key = checkDidRenderIdHook();
	  if (null !== current && !didReceiveUpdate)
	    return (
	      bailoutHooks(current, workInProgress, renderLanes),
	      bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
	    );
	  isHydrating && key && pushMaterializedTreeId(workInProgress);
	  workInProgress.flags |= 1;
	  reconcileChildren(current, workInProgress, nextProps, renderLanes);
	  return workInProgress.child;
	}
	function updateMemoComponent(
	  current,
	  workInProgress,
	  Component,
	  nextProps,
	  renderLanes
	) {
	  if (null === current) {
	    var type = Component.type;
	    if (
	      "function" === typeof type &&
	      !shouldConstruct(type) &&
	      undefined === type.defaultProps &&
	      null === Component.compare
	    )
	      return (
	        (workInProgress.tag = 15),
	        (workInProgress.type = type),
	        updateSimpleMemoComponent(
	          current,
	          workInProgress,
	          type,
	          nextProps,
	          renderLanes
	        )
	      );
	    current = createFiberFromTypeAndProps(
	      Component.type,
	      null,
	      nextProps,
	      workInProgress,
	      workInProgress.mode,
	      renderLanes
	    );
	    current.ref = workInProgress.ref;
	    current.return = workInProgress;
	    return (workInProgress.child = current);
	  }
	  type = current.child;
	  if (!checkScheduledUpdateOrContext(current, renderLanes)) {
	    var prevProps = type.memoizedProps;
	    Component = Component.compare;
	    Component = null !== Component ? Component : shallowEqual;
	    if (Component(prevProps, nextProps) && current.ref === workInProgress.ref)
	      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	  }
	  workInProgress.flags |= 1;
	  current = createWorkInProgress(type, nextProps);
	  current.ref = workInProgress.ref;
	  current.return = workInProgress;
	  return (workInProgress.child = current);
	}
	function updateSimpleMemoComponent(
	  current,
	  workInProgress,
	  Component,
	  nextProps,
	  renderLanes
	) {
	  if (null !== current) {
	    var prevProps = current.memoizedProps;
	    if (
	      shallowEqual(prevProps, nextProps) &&
	      current.ref === workInProgress.ref
	    )
	      if (
	        ((didReceiveUpdate = false),
	        (workInProgress.pendingProps = nextProps = prevProps),
	        checkScheduledUpdateOrContext(current, renderLanes))
	      )
	        0 !== (current.flags & 131072) && (didReceiveUpdate = true);
	      else
	        return (
	          (workInProgress.lanes = current.lanes),
	          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
	        );
	  }
	  return updateFunctionComponent(
	    current,
	    workInProgress,
	    Component,
	    nextProps,
	    renderLanes
	  );
	}
	function updateOffscreenComponent(current, workInProgress, renderLanes) {
	  var nextProps = workInProgress.pendingProps,
	    nextChildren = nextProps.children,
	    nextIsDetached = 0 !== (workInProgress.stateNode._pendingVisibility & 2),
	    prevState = null !== current ? current.memoizedState : null;
	  markRef(current, workInProgress);
	  if ("hidden" === nextProps.mode || nextIsDetached) {
	    if (0 !== (workInProgress.flags & 128)) {
	      nextProps =
	        null !== prevState ? prevState.baseLanes | renderLanes : renderLanes;
	      if (null !== current) {
	        nextChildren = workInProgress.child = current.child;
	        for (nextIsDetached = 0; null !== nextChildren; )
	          (nextIsDetached =
	            nextIsDetached | nextChildren.lanes | nextChildren.childLanes),
	            (nextChildren = nextChildren.sibling);
	        workInProgress.childLanes = nextIsDetached & ~nextProps;
	      } else (workInProgress.childLanes = 0), (workInProgress.child = null);
	      return deferHiddenOffscreenComponent(
	        current,
	        workInProgress,
	        nextProps,
	        renderLanes
	      );
	    }
	    if (0 !== (renderLanes & 536870912))
	      (workInProgress.memoizedState = { baseLanes: 0, cachePool: null }),
	        null !== current &&
	          pushTransition(
	            workInProgress,
	            null !== prevState ? prevState.cachePool : null
	          ),
	        null !== prevState
	          ? pushHiddenContext(workInProgress, prevState)
	          : reuseHiddenContextOnStack(),
	        pushOffscreenSuspenseHandler(workInProgress);
	    else
	      return (
	        (workInProgress.lanes = workInProgress.childLanes = 536870912),
	        deferHiddenOffscreenComponent(
	          current,
	          workInProgress,
	          null !== prevState ? prevState.baseLanes | renderLanes : renderLanes,
	          renderLanes
	        )
	      );
	  } else
	    null !== prevState
	      ? (pushTransition(workInProgress, prevState.cachePool),
	        pushHiddenContext(workInProgress, prevState),
	        reuseSuspenseHandlerOnStack(),
	        (workInProgress.memoizedState = null))
	      : (null !== current && pushTransition(workInProgress, null),
	        reuseHiddenContextOnStack(),
	        reuseSuspenseHandlerOnStack());
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}
	function deferHiddenOffscreenComponent(
	  current,
	  workInProgress,
	  nextBaseLanes,
	  renderLanes
	) {
	  var JSCompiler_inline_result = peekCacheFromPool();
	  JSCompiler_inline_result =
	    null === JSCompiler_inline_result
	      ? null
	      : { parent: CacheContext._currentValue, pool: JSCompiler_inline_result };
	  workInProgress.memoizedState = {
	    baseLanes: nextBaseLanes,
	    cachePool: JSCompiler_inline_result
	  };
	  null !== current && pushTransition(workInProgress, null);
	  reuseHiddenContextOnStack();
	  pushOffscreenSuspenseHandler(workInProgress);
	  null !== current &&
	    propagateParentContextChanges(current, workInProgress, renderLanes, true);
	  return null;
	}
	function markRef(current, workInProgress) {
	  var ref = workInProgress.ref;
	  if (null === ref)
	    null !== current &&
	      null !== current.ref &&
	      (workInProgress.flags |= 2097664);
	  else {
	    if ("function" !== typeof ref && "object" !== typeof ref)
	      throw Error(formatProdErrorMessage(284));
	    if (null === current || current.ref !== ref)
	      workInProgress.flags |= 2097664;
	  }
	}
	function updateFunctionComponent(
	  current,
	  workInProgress,
	  Component,
	  nextProps,
	  renderLanes
	) {
	  prepareToReadContext(workInProgress);
	  Component = renderWithHooks(
	    current,
	    workInProgress,
	    Component,
	    nextProps,
	    undefined,
	    renderLanes
	  );
	  nextProps = checkDidRenderIdHook();
	  if (null !== current && !didReceiveUpdate)
	    return (
	      bailoutHooks(current, workInProgress, renderLanes),
	      bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
	    );
	  isHydrating && nextProps && pushMaterializedTreeId(workInProgress);
	  workInProgress.flags |= 1;
	  reconcileChildren(current, workInProgress, Component, renderLanes);
	  return workInProgress.child;
	}
	function replayFunctionComponent(
	  current,
	  workInProgress,
	  nextProps,
	  Component,
	  secondArg,
	  renderLanes
	) {
	  prepareToReadContext(workInProgress);
	  workInProgress.updateQueue = null;
	  nextProps = renderWithHooksAgain(
	    workInProgress,
	    Component,
	    nextProps,
	    secondArg
	  );
	  finishRenderingHooks(current);
	  Component = checkDidRenderIdHook();
	  if (null !== current && !didReceiveUpdate)
	    return (
	      bailoutHooks(current, workInProgress, renderLanes),
	      bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
	    );
	  isHydrating && Component && pushMaterializedTreeId(workInProgress);
	  workInProgress.flags |= 1;
	  reconcileChildren(current, workInProgress, nextProps, renderLanes);
	  return workInProgress.child;
	}
	function updateClassComponent(
	  current,
	  workInProgress,
	  Component,
	  nextProps,
	  renderLanes
	) {
	  prepareToReadContext(workInProgress);
	  if (null === workInProgress.stateNode) {
	    var context = emptyContextObject,
	      contextType = Component.contextType;
	    "object" === typeof contextType &&
	      null !== contextType &&
	      (context = readContext(contextType));
	    context = new Component(nextProps, context);
	    workInProgress.memoizedState =
	      null !== context.state && undefined !== context.state ? context.state : null;
	    context.updater = classComponentUpdater;
	    workInProgress.stateNode = context;
	    context._reactInternals = workInProgress;
	    context = workInProgress.stateNode;
	    context.props = nextProps;
	    context.state = workInProgress.memoizedState;
	    context.refs = {};
	    initializeUpdateQueue(workInProgress);
	    contextType = Component.contextType;
	    context.context =
	      "object" === typeof contextType && null !== contextType
	        ? readContext(contextType)
	        : emptyContextObject;
	    context.state = workInProgress.memoizedState;
	    contextType = Component.getDerivedStateFromProps;
	    "function" === typeof contextType &&
	      (applyDerivedStateFromProps(
	        workInProgress,
	        Component,
	        contextType,
	        nextProps
	      ),
	      (context.state = workInProgress.memoizedState));
	    "function" === typeof Component.getDerivedStateFromProps ||
	      "function" === typeof context.getSnapshotBeforeUpdate ||
	      ("function" !== typeof context.UNSAFE_componentWillMount &&
	        "function" !== typeof context.componentWillMount) ||
	      ((contextType = context.state),
	      "function" === typeof context.componentWillMount &&
	        context.componentWillMount(),
	      "function" === typeof context.UNSAFE_componentWillMount &&
	        context.UNSAFE_componentWillMount(),
	      contextType !== context.state &&
	        classComponentUpdater.enqueueReplaceState(context, context.state, null),
	      processUpdateQueue(workInProgress, nextProps, context, renderLanes),
	      suspendIfUpdateReadFromEntangledAsyncAction(),
	      (context.state = workInProgress.memoizedState));
	    "function" === typeof context.componentDidMount &&
	      (workInProgress.flags |= 4194308);
	    nextProps = true;
	  } else if (null === current) {
	    context = workInProgress.stateNode;
	    var unresolvedOldProps = workInProgress.memoizedProps,
	      oldProps = resolveClassComponentProps(Component, unresolvedOldProps);
	    context.props = oldProps;
	    var oldContext = context.context,
	      contextType$jscomp$0 = Component.contextType;
	    contextType = emptyContextObject;
	    "object" === typeof contextType$jscomp$0 &&
	      null !== contextType$jscomp$0 &&
	      (contextType = readContext(contextType$jscomp$0));
	    var getDerivedStateFromProps = Component.getDerivedStateFromProps;
	    contextType$jscomp$0 =
	      "function" === typeof getDerivedStateFromProps ||
	      "function" === typeof context.getSnapshotBeforeUpdate;
	    unresolvedOldProps = workInProgress.pendingProps !== unresolvedOldProps;
	    contextType$jscomp$0 ||
	      ("function" !== typeof context.UNSAFE_componentWillReceiveProps &&
	        "function" !== typeof context.componentWillReceiveProps) ||
	      ((unresolvedOldProps || oldContext !== contextType) &&
	        callComponentWillReceiveProps(
	          workInProgress,
	          context,
	          nextProps,
	          contextType
	        ));
	    hasForceUpdate = false;
	    var oldState = workInProgress.memoizedState;
	    context.state = oldState;
	    processUpdateQueue(workInProgress, nextProps, context, renderLanes);
	    suspendIfUpdateReadFromEntangledAsyncAction();
	    oldContext = workInProgress.memoizedState;
	    unresolvedOldProps || oldState !== oldContext || hasForceUpdate
	      ? ("function" === typeof getDerivedStateFromProps &&
	          (applyDerivedStateFromProps(
	            workInProgress,
	            Component,
	            getDerivedStateFromProps,
	            nextProps
	          ),
	          (oldContext = workInProgress.memoizedState)),
	        (oldProps =
	          hasForceUpdate ||
	          checkShouldComponentUpdate(
	            workInProgress,
	            Component,
	            oldProps,
	            nextProps,
	            oldState,
	            oldContext,
	            contextType
	          ))
	          ? (contextType$jscomp$0 ||
	              ("function" !== typeof context.UNSAFE_componentWillMount &&
	                "function" !== typeof context.componentWillMount) ||
	              ("function" === typeof context.componentWillMount &&
	                context.componentWillMount(),
	              "function" === typeof context.UNSAFE_componentWillMount &&
	                context.UNSAFE_componentWillMount()),
	            "function" === typeof context.componentDidMount &&
	              (workInProgress.flags |= 4194308))
	          : ("function" === typeof context.componentDidMount &&
	              (workInProgress.flags |= 4194308),
	            (workInProgress.memoizedProps = nextProps),
	            (workInProgress.memoizedState = oldContext)),
	        (context.props = nextProps),
	        (context.state = oldContext),
	        (context.context = contextType),
	        (nextProps = oldProps))
	      : ("function" === typeof context.componentDidMount &&
	          (workInProgress.flags |= 4194308),
	        (nextProps = false));
	  } else {
	    context = workInProgress.stateNode;
	    cloneUpdateQueue(current, workInProgress);
	    contextType = workInProgress.memoizedProps;
	    contextType$jscomp$0 = resolveClassComponentProps(Component, contextType);
	    context.props = contextType$jscomp$0;
	    getDerivedStateFromProps = workInProgress.pendingProps;
	    oldState = context.context;
	    oldContext = Component.contextType;
	    oldProps = emptyContextObject;
	    "object" === typeof oldContext &&
	      null !== oldContext &&
	      (oldProps = readContext(oldContext));
	    unresolvedOldProps = Component.getDerivedStateFromProps;
	    (oldContext =
	      "function" === typeof unresolvedOldProps ||
	      "function" === typeof context.getSnapshotBeforeUpdate) ||
	      ("function" !== typeof context.UNSAFE_componentWillReceiveProps &&
	        "function" !== typeof context.componentWillReceiveProps) ||
	      ((contextType !== getDerivedStateFromProps || oldState !== oldProps) &&
	        callComponentWillReceiveProps(
	          workInProgress,
	          context,
	          nextProps,
	          oldProps
	        ));
	    hasForceUpdate = false;
	    oldState = workInProgress.memoizedState;
	    context.state = oldState;
	    processUpdateQueue(workInProgress, nextProps, context, renderLanes);
	    suspendIfUpdateReadFromEntangledAsyncAction();
	    var newState = workInProgress.memoizedState;
	    contextType !== getDerivedStateFromProps ||
	    oldState !== newState ||
	    hasForceUpdate ||
	    (null !== current &&
	      null !== current.dependencies &&
	      checkIfContextChanged(current.dependencies))
	      ? ("function" === typeof unresolvedOldProps &&
	          (applyDerivedStateFromProps(
	            workInProgress,
	            Component,
	            unresolvedOldProps,
	            nextProps
	          ),
	          (newState = workInProgress.memoizedState)),
	        (contextType$jscomp$0 =
	          hasForceUpdate ||
	          checkShouldComponentUpdate(
	            workInProgress,
	            Component,
	            contextType$jscomp$0,
	            nextProps,
	            oldState,
	            newState,
	            oldProps
	          ) ||
	          (null !== current &&
	            null !== current.dependencies &&
	            checkIfContextChanged(current.dependencies)))
	          ? (oldContext ||
	              ("function" !== typeof context.UNSAFE_componentWillUpdate &&
	                "function" !== typeof context.componentWillUpdate) ||
	              ("function" === typeof context.componentWillUpdate &&
	                context.componentWillUpdate(nextProps, newState, oldProps),
	              "function" === typeof context.UNSAFE_componentWillUpdate &&
	                context.UNSAFE_componentWillUpdate(
	                  nextProps,
	                  newState,
	                  oldProps
	                )),
	            "function" === typeof context.componentDidUpdate &&
	              (workInProgress.flags |= 4),
	            "function" === typeof context.getSnapshotBeforeUpdate &&
	              (workInProgress.flags |= 1024))
	          : ("function" !== typeof context.componentDidUpdate ||
	              (contextType === current.memoizedProps &&
	                oldState === current.memoizedState) ||
	              (workInProgress.flags |= 4),
	            "function" !== typeof context.getSnapshotBeforeUpdate ||
	              (contextType === current.memoizedProps &&
	                oldState === current.memoizedState) ||
	              (workInProgress.flags |= 1024),
	            (workInProgress.memoizedProps = nextProps),
	            (workInProgress.memoizedState = newState)),
	        (context.props = nextProps),
	        (context.state = newState),
	        (context.context = oldProps),
	        (nextProps = contextType$jscomp$0))
	      : ("function" !== typeof context.componentDidUpdate ||
	          (contextType === current.memoizedProps &&
	            oldState === current.memoizedState) ||
	          (workInProgress.flags |= 4),
	        "function" !== typeof context.getSnapshotBeforeUpdate ||
	          (contextType === current.memoizedProps &&
	            oldState === current.memoizedState) ||
	          (workInProgress.flags |= 1024),
	        (nextProps = false));
	  }
	  context = nextProps;
	  markRef(current, workInProgress);
	  nextProps = 0 !== (workInProgress.flags & 128);
	  context || nextProps
	    ? ((context = workInProgress.stateNode),
	      (Component =
	        nextProps && "function" !== typeof Component.getDerivedStateFromError
	          ? null
	          : context.render()),
	      (workInProgress.flags |= 1),
	      null !== current && nextProps
	        ? ((workInProgress.child = reconcileChildFibers(
	            workInProgress,
	            current.child,
	            null,
	            renderLanes
	          )),
	          (workInProgress.child = reconcileChildFibers(
	            workInProgress,
	            null,
	            Component,
	            renderLanes
	          )))
	        : reconcileChildren(current, workInProgress, Component, renderLanes),
	      (workInProgress.memoizedState = context.state),
	      (current = workInProgress.child))
	    : (current = bailoutOnAlreadyFinishedWork(
	        current,
	        workInProgress,
	        renderLanes
	      ));
	  return current;
	}
	function mountHostRootWithoutHydrating(
	  current,
	  workInProgress,
	  nextChildren,
	  renderLanes
	) {
	  resetHydrationState();
	  workInProgress.flags |= 256;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}
	var SUSPENDED_MARKER = { dehydrated: null, treeContext: null, retryLane: 0 };
	function mountSuspenseOffscreenState(renderLanes) {
	  return { baseLanes: renderLanes, cachePool: getSuspendedCache() };
	}
	function getRemainingWorkInPrimaryTree(
	  current,
	  primaryTreeDidDefer,
	  renderLanes
	) {
	  current = null !== current ? current.childLanes & ~renderLanes : 0;
	  primaryTreeDidDefer && (current |= workInProgressDeferredLane);
	  return current;
	}
	function updateSuspenseComponent(current, workInProgress, renderLanes) {
	  var nextProps = workInProgress.pendingProps,
	    showFallback = false,
	    didSuspend = 0 !== (workInProgress.flags & 128),
	    JSCompiler_temp;
	  (JSCompiler_temp = didSuspend) ||
	    (JSCompiler_temp =
	      null !== current && null === current.memoizedState
	        ? false
	        : 0 !== (suspenseStackCursor.current & 2));
	  JSCompiler_temp && ((showFallback = true), (workInProgress.flags &= -129));
	  JSCompiler_temp = 0 !== (workInProgress.flags & 32);
	  workInProgress.flags &= -33;
	  if (null === current) {
	    if (isHydrating) {
	      showFallback
	        ? pushPrimaryTreeSuspenseHandler(workInProgress)
	        : reuseSuspenseHandlerOnStack();
	      if (isHydrating) {
	        var nextInstance = nextHydratableInstance,
	          JSCompiler_temp$jscomp$0;
	        if ((JSCompiler_temp$jscomp$0 = nextInstance)) {
	          c: {
	            JSCompiler_temp$jscomp$0 = nextInstance;
	            for (
	              nextInstance = rootOrSingletonContext;
	              8 !== JSCompiler_temp$jscomp$0.nodeType;

	            ) {
	              if (!nextInstance) {
	                nextInstance = null;
	                break c;
	              }
	              JSCompiler_temp$jscomp$0 = getNextHydratable(
	                JSCompiler_temp$jscomp$0.nextSibling
	              );
	              if (null === JSCompiler_temp$jscomp$0) {
	                nextInstance = null;
	                break c;
	              }
	            }
	            nextInstance = JSCompiler_temp$jscomp$0;
	          }
	          null !== nextInstance
	            ? ((workInProgress.memoizedState = {
	                dehydrated: nextInstance,
	                treeContext:
	                  null !== treeContextProvider
	                    ? { id: treeContextId, overflow: treeContextOverflow }
	                    : null,
	                retryLane: 536870912
	              }),
	              (JSCompiler_temp$jscomp$0 = createFiberImplClass(
	                18,
	                null,
	                null,
	                0
	              )),
	              (JSCompiler_temp$jscomp$0.stateNode = nextInstance),
	              (JSCompiler_temp$jscomp$0.return = workInProgress),
	              (workInProgress.child = JSCompiler_temp$jscomp$0),
	              (hydrationParentFiber = workInProgress),
	              (nextHydratableInstance = null),
	              (JSCompiler_temp$jscomp$0 = true))
	            : (JSCompiler_temp$jscomp$0 = false);
	        }
	        JSCompiler_temp$jscomp$0 || throwOnHydrationMismatch(workInProgress);
	      }
	      nextInstance = workInProgress.memoizedState;
	      if (
	        null !== nextInstance &&
	        ((nextInstance = nextInstance.dehydrated), null !== nextInstance)
	      )
	        return (
	          "$!" === nextInstance.data
	            ? (workInProgress.lanes = 16)
	            : (workInProgress.lanes = 536870912),
	          null
	        );
	      popSuspenseHandler(workInProgress);
	    }
	    nextInstance = nextProps.children;
	    nextProps = nextProps.fallback;
	    if (showFallback)
	      return (
	        reuseSuspenseHandlerOnStack(),
	        (showFallback = workInProgress.mode),
	        (nextInstance = mountWorkInProgressOffscreenFiber(
	          { mode: "hidden", children: nextInstance },
	          showFallback
	        )),
	        (nextProps = createFiberFromFragment(
	          nextProps,
	          showFallback,
	          renderLanes,
	          null
	        )),
	        (nextInstance.return = workInProgress),
	        (nextProps.return = workInProgress),
	        (nextInstance.sibling = nextProps),
	        (workInProgress.child = nextInstance),
	        (showFallback = workInProgress.child),
	        (showFallback.memoizedState = mountSuspenseOffscreenState(renderLanes)),
	        (showFallback.childLanes = getRemainingWorkInPrimaryTree(
	          current,
	          JSCompiler_temp,
	          renderLanes
	        )),
	        (workInProgress.memoizedState = SUSPENDED_MARKER),
	        nextProps
	      );
	    pushPrimaryTreeSuspenseHandler(workInProgress);
	    return mountSuspensePrimaryChildren(workInProgress, nextInstance);
	  }
	  JSCompiler_temp$jscomp$0 = current.memoizedState;
	  if (
	    null !== JSCompiler_temp$jscomp$0 &&
	    ((nextInstance = JSCompiler_temp$jscomp$0.dehydrated),
	    null !== nextInstance)
	  ) {
	    if (didSuspend)
	      workInProgress.flags & 256
	        ? (pushPrimaryTreeSuspenseHandler(workInProgress),
	          (workInProgress.flags &= -257),
	          (workInProgress = retrySuspenseComponentWithoutHydrating(
	            current,
	            workInProgress,
	            renderLanes
	          )))
	        : null !== workInProgress.memoizedState
	          ? (reuseSuspenseHandlerOnStack(),
	            (workInProgress.child = current.child),
	            (workInProgress.flags |= 128),
	            (workInProgress = null))
	          : (reuseSuspenseHandlerOnStack(),
	            (showFallback = nextProps.fallback),
	            (nextInstance = workInProgress.mode),
	            (nextProps = mountWorkInProgressOffscreenFiber(
	              { mode: "visible", children: nextProps.children },
	              nextInstance
	            )),
	            (showFallback = createFiberFromFragment(
	              showFallback,
	              nextInstance,
	              renderLanes,
	              null
	            )),
	            (showFallback.flags |= 2),
	            (nextProps.return = workInProgress),
	            (showFallback.return = workInProgress),
	            (nextProps.sibling = showFallback),
	            (workInProgress.child = nextProps),
	            reconcileChildFibers(
	              workInProgress,
	              current.child,
	              null,
	              renderLanes
	            ),
	            (nextProps = workInProgress.child),
	            (nextProps.memoizedState =
	              mountSuspenseOffscreenState(renderLanes)),
	            (nextProps.childLanes = getRemainingWorkInPrimaryTree(
	              current,
	              JSCompiler_temp,
	              renderLanes
	            )),
	            (workInProgress.memoizedState = SUSPENDED_MARKER),
	            (workInProgress = showFallback));
	    else if (
	      (pushPrimaryTreeSuspenseHandler(workInProgress),
	      "$!" === nextInstance.data)
	    ) {
	      JSCompiler_temp =
	        nextInstance.nextSibling && nextInstance.nextSibling.dataset;
	      if (JSCompiler_temp) var digest = JSCompiler_temp.dgst;
	      JSCompiler_temp = digest;
	      nextProps = Error(formatProdErrorMessage(419));
	      nextProps.stack = "";
	      nextProps.digest = JSCompiler_temp;
	      queueHydrationError({ value: nextProps, source: null, stack: null });
	      workInProgress = retrySuspenseComponentWithoutHydrating(
	        current,
	        workInProgress,
	        renderLanes
	      );
	    } else if (
	      (didReceiveUpdate ||
	        propagateParentContextChanges(current, workInProgress, renderLanes, false),
	      (JSCompiler_temp = 0 !== (renderLanes & current.childLanes)),
	      didReceiveUpdate || JSCompiler_temp)
	    ) {
	      JSCompiler_temp = workInProgressRoot;
	      if (null !== JSCompiler_temp) {
	        nextProps = renderLanes & -renderLanes;
	        if (0 !== (nextProps & 42)) nextProps = 1;
	        else
	          switch (nextProps) {
	            case 2:
	              nextProps = 1;
	              break;
	            case 8:
	              nextProps = 4;
	              break;
	            case 32:
	              nextProps = 16;
	              break;
	            case 128:
	            case 256:
	            case 512:
	            case 1024:
	            case 2048:
	            case 4096:
	            case 8192:
	            case 16384:
	            case 32768:
	            case 65536:
	            case 131072:
	            case 262144:
	            case 524288:
	            case 1048576:
	            case 2097152:
	            case 4194304:
	            case 8388608:
	            case 16777216:
	            case 33554432:
	              nextProps = 64;
	              break;
	            case 268435456:
	              nextProps = 134217728;
	              break;
	            default:
	              nextProps = 0;
	          }
	        nextProps =
	          0 !== (nextProps & (JSCompiler_temp.suspendedLanes | renderLanes))
	            ? 0
	            : nextProps;
	        if (0 !== nextProps && nextProps !== JSCompiler_temp$jscomp$0.retryLane)
	          throw (
	            ((JSCompiler_temp$jscomp$0.retryLane = nextProps),
	            enqueueConcurrentRenderForLane(current, nextProps),
	            scheduleUpdateOnFiber(JSCompiler_temp, current, nextProps),
	            SelectiveHydrationException)
	          );
	      }
	      "$?" === nextInstance.data || renderDidSuspendDelayIfPossible();
	      workInProgress = retrySuspenseComponentWithoutHydrating(
	        current,
	        workInProgress,
	        renderLanes
	      );
	    } else
	      "$?" === nextInstance.data
	        ? ((workInProgress.flags |= 128),
	          (workInProgress.child = current.child),
	          (workInProgress = retryDehydratedSuspenseBoundary.bind(
	            null,
	            current
	          )),
	          (nextInstance._reactRetry = workInProgress),
	          (workInProgress = null))
	        : ((current = JSCompiler_temp$jscomp$0.treeContext),
	          (nextHydratableInstance = getNextHydratable(
	            nextInstance.nextSibling
	          )),
	          (hydrationParentFiber = workInProgress),
	          (isHydrating = true),
	          (hydrationErrors = null),
	          (rootOrSingletonContext = false),
	          null !== current &&
	            ((idStack[idStackIndex++] = treeContextId),
	            (idStack[idStackIndex++] = treeContextOverflow),
	            (idStack[idStackIndex++] = treeContextProvider),
	            (treeContextId = current.id),
	            (treeContextOverflow = current.overflow),
	            (treeContextProvider = workInProgress)),
	          (workInProgress = mountSuspensePrimaryChildren(
	            workInProgress,
	            nextProps.children
	          )),
	          (workInProgress.flags |= 4096));
	    return workInProgress;
	  }
	  if (showFallback)
	    return (
	      reuseSuspenseHandlerOnStack(),
	      (showFallback = nextProps.fallback),
	      (nextInstance = workInProgress.mode),
	      (JSCompiler_temp$jscomp$0 = current.child),
	      (digest = JSCompiler_temp$jscomp$0.sibling),
	      (nextProps = createWorkInProgress(JSCompiler_temp$jscomp$0, {
	        mode: "hidden",
	        children: nextProps.children
	      })),
	      (nextProps.subtreeFlags =
	        JSCompiler_temp$jscomp$0.subtreeFlags & 31457280),
	      null !== digest
	        ? (showFallback = createWorkInProgress(digest, showFallback))
	        : ((showFallback = createFiberFromFragment(
	            showFallback,
	            nextInstance,
	            renderLanes,
	            null
	          )),
	          (showFallback.flags |= 2)),
	      (showFallback.return = workInProgress),
	      (nextProps.return = workInProgress),
	      (nextProps.sibling = showFallback),
	      (workInProgress.child = nextProps),
	      (nextProps = showFallback),
	      (showFallback = workInProgress.child),
	      (nextInstance = current.child.memoizedState),
	      null === nextInstance
	        ? (nextInstance = mountSuspenseOffscreenState(renderLanes))
	        : ((JSCompiler_temp$jscomp$0 = nextInstance.cachePool),
	          null !== JSCompiler_temp$jscomp$0
	            ? ((digest = CacheContext._currentValue),
	              (JSCompiler_temp$jscomp$0 =
	                JSCompiler_temp$jscomp$0.parent !== digest
	                  ? { parent: digest, pool: digest }
	                  : JSCompiler_temp$jscomp$0))
	            : (JSCompiler_temp$jscomp$0 = getSuspendedCache()),
	          (nextInstance = {
	            baseLanes: nextInstance.baseLanes | renderLanes,
	            cachePool: JSCompiler_temp$jscomp$0
	          })),
	      (showFallback.memoizedState = nextInstance),
	      (showFallback.childLanes = getRemainingWorkInPrimaryTree(
	        current,
	        JSCompiler_temp,
	        renderLanes
	      )),
	      (workInProgress.memoizedState = SUSPENDED_MARKER),
	      nextProps
	    );
	  pushPrimaryTreeSuspenseHandler(workInProgress);
	  renderLanes = current.child;
	  current = renderLanes.sibling;
	  renderLanes = createWorkInProgress(renderLanes, {
	    mode: "visible",
	    children: nextProps.children
	  });
	  renderLanes.return = workInProgress;
	  renderLanes.sibling = null;
	  null !== current &&
	    ((JSCompiler_temp = workInProgress.deletions),
	    null === JSCompiler_temp
	      ? ((workInProgress.deletions = [current]), (workInProgress.flags |= 16))
	      : JSCompiler_temp.push(current));
	  workInProgress.child = renderLanes;
	  workInProgress.memoizedState = null;
	  return renderLanes;
	}
	function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
	  primaryChildren = mountWorkInProgressOffscreenFiber(
	    { mode: "visible", children: primaryChildren },
	    workInProgress.mode
	  );
	  primaryChildren.return = workInProgress;
	  return (workInProgress.child = primaryChildren);
	}
	function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
	  return createFiberFromOffscreen(offscreenProps, mode, 0, null);
	}
	function retrySuspenseComponentWithoutHydrating(
	  current,
	  workInProgress,
	  renderLanes
	) {
	  reconcileChildFibers(workInProgress, current.child, null, renderLanes);
	  current = mountSuspensePrimaryChildren(
	    workInProgress,
	    workInProgress.pendingProps.children
	  );
	  current.flags |= 2;
	  workInProgress.memoizedState = null;
	  return current;
	}
	function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
	  fiber.lanes |= renderLanes;
	  var alternate = fiber.alternate;
	  null !== alternate && (alternate.lanes |= renderLanes);
	  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
	}
	function initSuspenseListRenderState(
	  workInProgress,
	  isBackwards,
	  tail,
	  lastContentRow,
	  tailMode
	) {
	  var renderState = workInProgress.memoizedState;
	  null === renderState
	    ? (workInProgress.memoizedState = {
	        isBackwards: isBackwards,
	        rendering: null,
	        renderingStartTime: 0,
	        last: lastContentRow,
	        tail: tail,
	        tailMode: tailMode
	      })
	    : ((renderState.isBackwards = isBackwards),
	      (renderState.rendering = null),
	      (renderState.renderingStartTime = 0),
	      (renderState.last = lastContentRow),
	      (renderState.tail = tail),
	      (renderState.tailMode = tailMode));
	}
	function updateSuspenseListComponent(current, workInProgress, renderLanes) {
	  var nextProps = workInProgress.pendingProps,
	    revealOrder = nextProps.revealOrder,
	    tailMode = nextProps.tail;
	  reconcileChildren(current, workInProgress, nextProps.children, renderLanes);
	  nextProps = suspenseStackCursor.current;
	  if (0 !== (nextProps & 2))
	    (nextProps = (nextProps & 1) | 2), (workInProgress.flags |= 128);
	  else {
	    if (null !== current && 0 !== (current.flags & 128))
	      a: for (current = workInProgress.child; null !== current; ) {
	        if (13 === current.tag)
	          null !== current.memoizedState &&
	            scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
	        else if (19 === current.tag)
	          scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
	        else if (null !== current.child) {
	          current.child.return = current;
	          current = current.child;
	          continue;
	        }
	        if (current === workInProgress) break a;
	        for (; null === current.sibling; ) {
	          if (null === current.return || current.return === workInProgress)
	            break a;
	          current = current.return;
	        }
	        current.sibling.return = current.return;
	        current = current.sibling;
	      }
	    nextProps &= 1;
	  }
	  push(suspenseStackCursor, nextProps);
	  switch (revealOrder) {
	    case "forwards":
	      renderLanes = workInProgress.child;
	      for (revealOrder = null; null !== renderLanes; )
	        (current = renderLanes.alternate),
	          null !== current &&
	            null === findFirstSuspended(current) &&
	            (revealOrder = renderLanes),
	          (renderLanes = renderLanes.sibling);
	      renderLanes = revealOrder;
	      null === renderLanes
	        ? ((revealOrder = workInProgress.child), (workInProgress.child = null))
	        : ((revealOrder = renderLanes.sibling), (renderLanes.sibling = null));
	      initSuspenseListRenderState(
	        workInProgress,
	        false,
	        revealOrder,
	        renderLanes,
	        tailMode
	      );
	      break;
	    case "backwards":
	      renderLanes = null;
	      revealOrder = workInProgress.child;
	      for (workInProgress.child = null; null !== revealOrder; ) {
	        current = revealOrder.alternate;
	        if (null !== current && null === findFirstSuspended(current)) {
	          workInProgress.child = revealOrder;
	          break;
	        }
	        current = revealOrder.sibling;
	        revealOrder.sibling = renderLanes;
	        renderLanes = revealOrder;
	        revealOrder = current;
	      }
	      initSuspenseListRenderState(
	        workInProgress,
	        true,
	        renderLanes,
	        null,
	        tailMode
	      );
	      break;
	    case "together":
	      initSuspenseListRenderState(workInProgress, false, null, null, undefined);
	      break;
	    default:
	      workInProgress.memoizedState = null;
	  }
	  return workInProgress.child;
	}
	function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
	  null !== current && (workInProgress.dependencies = current.dependencies);
	  workInProgressRootSkippedLanes |= workInProgress.lanes;
	  if (0 === (renderLanes & workInProgress.childLanes))
	    if (null !== current) {
	      if (
	        (propagateParentContextChanges(
	          current,
	          workInProgress,
	          renderLanes,
	          false
	        ),
	        0 === (renderLanes & workInProgress.childLanes))
	      )
	        return null;
	    } else return null;
	  if (null !== current && workInProgress.child !== current.child)
	    throw Error(formatProdErrorMessage(153));
	  if (null !== workInProgress.child) {
	    current = workInProgress.child;
	    renderLanes = createWorkInProgress(current, current.pendingProps);
	    workInProgress.child = renderLanes;
	    for (renderLanes.return = workInProgress; null !== current.sibling; )
	      (current = current.sibling),
	        (renderLanes = renderLanes.sibling =
	          createWorkInProgress(current, current.pendingProps)),
	        (renderLanes.return = workInProgress);
	    renderLanes.sibling = null;
	  }
	  return workInProgress.child;
	}
	function checkScheduledUpdateOrContext(current, renderLanes) {
	  if (0 !== (current.lanes & renderLanes)) return true;
	  current = current.dependencies;
	  return null !== current && checkIfContextChanged(current) ? true : false;
	}
	function attemptEarlyBailoutIfNoScheduledUpdate(
	  current,
	  workInProgress,
	  renderLanes
	) {
	  switch (workInProgress.tag) {
	    case 3:
	      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	      pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
	      resetHydrationState();
	      break;
	    case 27:
	    case 5:
	      pushHostContext(workInProgress);
	      break;
	    case 4:
	      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	      break;
	    case 10:
	      pushProvider(
	        workInProgress,
	        workInProgress.type,
	        workInProgress.memoizedProps.value
	      );
	      break;
	    case 13:
	      var state = workInProgress.memoizedState;
	      if (null !== state) {
	        if (null !== state.dehydrated)
	          return (
	            pushPrimaryTreeSuspenseHandler(workInProgress),
	            (workInProgress.flags |= 128),
	            null
	          );
	        if (0 !== (renderLanes & workInProgress.child.childLanes))
	          return updateSuspenseComponent(current, workInProgress, renderLanes);
	        pushPrimaryTreeSuspenseHandler(workInProgress);
	        current = bailoutOnAlreadyFinishedWork(
	          current,
	          workInProgress,
	          renderLanes
	        );
	        return null !== current ? current.sibling : null;
	      }
	      pushPrimaryTreeSuspenseHandler(workInProgress);
	      break;
	    case 19:
	      var didSuspendBefore = 0 !== (current.flags & 128);
	      state = 0 !== (renderLanes & workInProgress.childLanes);
	      state ||
	        (propagateParentContextChanges(
	          current,
	          workInProgress,
	          renderLanes,
	          false
	        ),
	        (state = 0 !== (renderLanes & workInProgress.childLanes)));
	      if (didSuspendBefore) {
	        if (state)
	          return updateSuspenseListComponent(
	            current,
	            workInProgress,
	            renderLanes
	          );
	        workInProgress.flags |= 128;
	      }
	      didSuspendBefore = workInProgress.memoizedState;
	      null !== didSuspendBefore &&
	        ((didSuspendBefore.rendering = null),
	        (didSuspendBefore.tail = null),
	        (didSuspendBefore.lastEffect = null));
	      push(suspenseStackCursor, suspenseStackCursor.current);
	      if (state) break;
	      else return null;
	    case 22:
	    case 23:
	      return (
	        (workInProgress.lanes = 0),
	        updateOffscreenComponent(current, workInProgress, renderLanes)
	      );
	    case 24:
	      pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
	  }
	  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	}
	function beginWork(current, workInProgress, renderLanes) {
	  if (null !== current)
	    if (current.memoizedProps !== workInProgress.pendingProps)
	      didReceiveUpdate = true;
	    else {
	      if (
	        !checkScheduledUpdateOrContext(current, renderLanes) &&
	        0 === (workInProgress.flags & 128)
	      )
	        return (
	          (didReceiveUpdate = false),
	          attemptEarlyBailoutIfNoScheduledUpdate(
	            current,
	            workInProgress,
	            renderLanes
	          )
	        );
	      didReceiveUpdate = 0 !== (current.flags & 131072) ? true : false;
	    }
	  else
	    (didReceiveUpdate = false),
	      isHydrating &&
	        0 !== (workInProgress.flags & 1048576) &&
	        pushTreeId(workInProgress, treeForkCount, workInProgress.index);
	  workInProgress.lanes = 0;
	  switch (workInProgress.tag) {
	    case 16:
	      a: {
	        current = workInProgress.pendingProps;
	        var lazyComponent = workInProgress.elementType,
	          init = lazyComponent._init;
	        lazyComponent = init(lazyComponent._payload);
	        workInProgress.type = lazyComponent;
	        if ("function" === typeof lazyComponent)
	          shouldConstruct(lazyComponent)
	            ? ((current = resolveClassComponentProps(lazyComponent, current)),
	              (workInProgress.tag = 1),
	              (workInProgress = updateClassComponent(
	                null,
	                workInProgress,
	                lazyComponent,
	                current,
	                renderLanes
	              )))
	            : ((workInProgress.tag = 0),
	              (workInProgress = updateFunctionComponent(
	                null,
	                workInProgress,
	                lazyComponent,
	                current,
	                renderLanes
	              )));
	        else {
	          if (undefined !== lazyComponent && null !== lazyComponent)
	            if (
	              ((init = lazyComponent.$$typeof), init === REACT_FORWARD_REF_TYPE)
	            ) {
	              workInProgress.tag = 11;
	              workInProgress = updateForwardRef(
	                null,
	                workInProgress,
	                lazyComponent,
	                current,
	                renderLanes
	              );
	              break a;
	            } else if (init === REACT_MEMO_TYPE) {
	              workInProgress.tag = 14;
	              workInProgress = updateMemoComponent(
	                null,
	                workInProgress,
	                lazyComponent,
	                current,
	                renderLanes
	              );
	              break a;
	            }
	          workInProgress =
	            getComponentNameFromType(lazyComponent) || lazyComponent;
	          throw Error(formatProdErrorMessage(306, workInProgress, ""));
	        }
	      }
	      return workInProgress;
	    case 0:
	      return updateFunctionComponent(
	        current,
	        workInProgress,
	        workInProgress.type,
	        workInProgress.pendingProps,
	        renderLanes
	      );
	    case 1:
	      return (
	        (lazyComponent = workInProgress.type),
	        (init = resolveClassComponentProps(
	          lazyComponent,
	          workInProgress.pendingProps
	        )),
	        updateClassComponent(
	          current,
	          workInProgress,
	          lazyComponent,
	          init,
	          renderLanes
	        )
	      );
	    case 3:
	      a: {
	        pushHostContainer(
	          workInProgress,
	          workInProgress.stateNode.containerInfo
	        );
	        if (null === current) throw Error(formatProdErrorMessage(387));
	        var nextProps = workInProgress.pendingProps;
	        init = workInProgress.memoizedState;
	        lazyComponent = init.element;
	        cloneUpdateQueue(current, workInProgress);
	        processUpdateQueue(workInProgress, nextProps, null, renderLanes);
	        var nextState = workInProgress.memoizedState;
	        nextProps = nextState.cache;
	        pushProvider(workInProgress, CacheContext, nextProps);
	        nextProps !== init.cache &&
	          propagateContextChanges(
	            workInProgress,
	            [CacheContext],
	            renderLanes,
	            true
	          );
	        suspendIfUpdateReadFromEntangledAsyncAction();
	        nextProps = nextState.element;
	        if (init.isDehydrated)
	          if (
	            ((init = {
	              element: nextProps,
	              isDehydrated: false,
	              cache: nextState.cache
	            }),
	            (workInProgress.updateQueue.baseState = init),
	            (workInProgress.memoizedState = init),
	            workInProgress.flags & 256)
	          ) {
	            workInProgress = mountHostRootWithoutHydrating(
	              current,
	              workInProgress,
	              nextProps,
	              renderLanes
	            );
	            break a;
	          } else if (nextProps !== lazyComponent) {
	            lazyComponent = createCapturedValueAtFiber(
	              Error(formatProdErrorMessage(424)),
	              workInProgress
	            );
	            queueHydrationError(lazyComponent);
	            workInProgress = mountHostRootWithoutHydrating(
	              current,
	              workInProgress,
	              nextProps,
	              renderLanes
	            );
	            break a;
	          } else
	            for (
	              nextHydratableInstance = getNextHydratable(
	                workInProgress.stateNode.containerInfo.firstChild
	              ),
	                hydrationParentFiber = workInProgress,
	                isHydrating = true,
	                hydrationErrors = null,
	                rootOrSingletonContext = true,
	                renderLanes = mountChildFibers(
	                  workInProgress,
	                  null,
	                  nextProps,
	                  renderLanes
	                ),
	                workInProgress.child = renderLanes;
	              renderLanes;

	            )
	              (renderLanes.flags = (renderLanes.flags & -3) | 4096),
	                (renderLanes = renderLanes.sibling);
	        else {
	          resetHydrationState();
	          if (nextProps === lazyComponent) {
	            workInProgress = bailoutOnAlreadyFinishedWork(
	              current,
	              workInProgress,
	              renderLanes
	            );
	            break a;
	          }
	          reconcileChildren(current, workInProgress, nextProps, renderLanes);
	        }
	        workInProgress = workInProgress.child;
	      }
	      return workInProgress;
	    case 26:
	      return (
	        markRef(current, workInProgress),
	        null === current
	          ? (renderLanes = getResource(
	              workInProgress.type,
	              null,
	              workInProgress.pendingProps,
	              null
	            ))
	            ? (workInProgress.memoizedState = renderLanes)
	            : isHydrating ||
	              ((renderLanes = workInProgress.type),
	              (current = workInProgress.pendingProps),
	              (lazyComponent = getOwnerDocumentFromRootContainer(
	                rootInstanceStackCursor.current
	              ).createElement(renderLanes)),
	              (lazyComponent[internalInstanceKey] = workInProgress),
	              (lazyComponent[internalPropsKey] = current),
	              setInitialProperties(lazyComponent, renderLanes, current),
	              markNodeAsHoistable(lazyComponent),
	              (workInProgress.stateNode = lazyComponent))
	          : (workInProgress.memoizedState = getResource(
	              workInProgress.type,
	              current.memoizedProps,
	              workInProgress.pendingProps,
	              current.memoizedState
	            )),
	        null
	      );
	    case 27:
	      return (
	        pushHostContext(workInProgress),
	        null === current &&
	          isHydrating &&
	          ((lazyComponent = workInProgress.stateNode =
	            resolveSingletonInstance(
	              workInProgress.type,
	              workInProgress.pendingProps,
	              rootInstanceStackCursor.current
	            )),
	          (hydrationParentFiber = workInProgress),
	          (rootOrSingletonContext = true),
	          (nextHydratableInstance = getNextHydratable(
	            lazyComponent.firstChild
	          ))),
	        (lazyComponent = workInProgress.pendingProps.children),
	        null !== current || isHydrating
	          ? reconcileChildren(
	              current,
	              workInProgress,
	              lazyComponent,
	              renderLanes
	            )
	          : (workInProgress.child = reconcileChildFibers(
	              workInProgress,
	              null,
	              lazyComponent,
	              renderLanes
	            )),
	        markRef(current, workInProgress),
	        workInProgress.child
	      );
	    case 5:
	      if (null === current && isHydrating) {
	        if ((init = lazyComponent = nextHydratableInstance))
	          (lazyComponent = canHydrateInstance(
	            lazyComponent,
	            workInProgress.type,
	            workInProgress.pendingProps,
	            rootOrSingletonContext
	          )),
	            null !== lazyComponent
	              ? ((workInProgress.stateNode = lazyComponent),
	                (hydrationParentFiber = workInProgress),
	                (nextHydratableInstance = getNextHydratable(
	                  lazyComponent.firstChild
	                )),
	                (rootOrSingletonContext = false),
	                (init = true))
	              : (init = false);
	        init || throwOnHydrationMismatch(workInProgress);
	      }
	      pushHostContext(workInProgress);
	      init = workInProgress.type;
	      nextProps = workInProgress.pendingProps;
	      nextState = null !== current ? current.memoizedProps : null;
	      lazyComponent = nextProps.children;
	      shouldSetTextContent(init, nextProps)
	        ? (lazyComponent = null)
	        : null !== nextState &&
	          shouldSetTextContent(init, nextState) &&
	          (workInProgress.flags |= 32);
	      null !== workInProgress.memoizedState &&
	        ((init = renderWithHooks(
	          current,
	          workInProgress,
	          TransitionAwareHostComponent,
	          null,
	          null,
	          renderLanes
	        )),
	        (HostTransitionContext._currentValue = init));
	      markRef(current, workInProgress);
	      reconcileChildren(current, workInProgress, lazyComponent, renderLanes);
	      return workInProgress.child;
	    case 6:
	      if (null === current && isHydrating) {
	        if ((current = renderLanes = nextHydratableInstance))
	          (renderLanes = canHydrateTextInstance(
	            renderLanes,
	            workInProgress.pendingProps,
	            rootOrSingletonContext
	          )),
	            null !== renderLanes
	              ? ((workInProgress.stateNode = renderLanes),
	                (hydrationParentFiber = workInProgress),
	                (nextHydratableInstance = null),
	                (current = true))
	              : (current = false);
	        current || throwOnHydrationMismatch(workInProgress);
	      }
	      return null;
	    case 13:
	      return updateSuspenseComponent(current, workInProgress, renderLanes);
	    case 4:
	      return (
	        pushHostContainer(
	          workInProgress,
	          workInProgress.stateNode.containerInfo
	        ),
	        (lazyComponent = workInProgress.pendingProps),
	        null === current
	          ? (workInProgress.child = reconcileChildFibers(
	              workInProgress,
	              null,
	              lazyComponent,
	              renderLanes
	            ))
	          : reconcileChildren(
	              current,
	              workInProgress,
	              lazyComponent,
	              renderLanes
	            ),
	        workInProgress.child
	      );
	    case 11:
	      return updateForwardRef(
	        current,
	        workInProgress,
	        workInProgress.type,
	        workInProgress.pendingProps,
	        renderLanes
	      );
	    case 7:
	      return (
	        reconcileChildren(
	          current,
	          workInProgress,
	          workInProgress.pendingProps,
	          renderLanes
	        ),
	        workInProgress.child
	      );
	    case 8:
	      return (
	        reconcileChildren(
	          current,
	          workInProgress,
	          workInProgress.pendingProps.children,
	          renderLanes
	        ),
	        workInProgress.child
	      );
	    case 12:
	      return (
	        reconcileChildren(
	          current,
	          workInProgress,
	          workInProgress.pendingProps.children,
	          renderLanes
	        ),
	        workInProgress.child
	      );
	    case 10:
	      return (
	        (lazyComponent = workInProgress.pendingProps),
	        pushProvider(workInProgress, workInProgress.type, lazyComponent.value),
	        reconcileChildren(
	          current,
	          workInProgress,
	          lazyComponent.children,
	          renderLanes
	        ),
	        workInProgress.child
	      );
	    case 9:
	      return (
	        (init = workInProgress.type._context),
	        (lazyComponent = workInProgress.pendingProps.children),
	        prepareToReadContext(workInProgress),
	        (init = readContext(init)),
	        (lazyComponent = lazyComponent(init)),
	        (workInProgress.flags |= 1),
	        reconcileChildren(current, workInProgress, lazyComponent, renderLanes),
	        workInProgress.child
	      );
	    case 14:
	      return updateMemoComponent(
	        current,
	        workInProgress,
	        workInProgress.type,
	        workInProgress.pendingProps,
	        renderLanes
	      );
	    case 15:
	      return updateSimpleMemoComponent(
	        current,
	        workInProgress,
	        workInProgress.type,
	        workInProgress.pendingProps,
	        renderLanes
	      );
	    case 19:
	      return updateSuspenseListComponent(current, workInProgress, renderLanes);
	    case 22:
	      return updateOffscreenComponent(current, workInProgress, renderLanes);
	    case 24:
	      return (
	        prepareToReadContext(workInProgress),
	        (lazyComponent = readContext(CacheContext)),
	        null === current
	          ? ((init = peekCacheFromPool()),
	            null === init &&
	              ((init = workInProgressRoot),
	              (nextProps = createCache()),
	              (init.pooledCache = nextProps),
	              nextProps.refCount++,
	              null !== nextProps && (init.pooledCacheLanes |= renderLanes),
	              (init = nextProps)),
	            (workInProgress.memoizedState = {
	              parent: lazyComponent,
	              cache: init
	            }),
	            initializeUpdateQueue(workInProgress),
	            pushProvider(workInProgress, CacheContext, init))
	          : (0 !== (current.lanes & renderLanes) &&
	              (cloneUpdateQueue(current, workInProgress),
	              processUpdateQueue(workInProgress, null, null, renderLanes),
	              suspendIfUpdateReadFromEntangledAsyncAction()),
	            (init = current.memoizedState),
	            (nextProps = workInProgress.memoizedState),
	            init.parent !== lazyComponent
	              ? ((init = { parent: lazyComponent, cache: lazyComponent }),
	                (workInProgress.memoizedState = init),
	                0 === workInProgress.lanes &&
	                  (workInProgress.memoizedState =
	                    workInProgress.updateQueue.baseState =
	                      init),
	                pushProvider(workInProgress, CacheContext, lazyComponent))
	              : ((lazyComponent = nextProps.cache),
	                pushProvider(workInProgress, CacheContext, lazyComponent),
	                lazyComponent !== init.cache &&
	                  propagateContextChanges(
	                    workInProgress,
	                    [CacheContext],
	                    renderLanes,
	                    true
	                  ))),
	        reconcileChildren(
	          current,
	          workInProgress,
	          workInProgress.pendingProps.children,
	          renderLanes
	        ),
	        workInProgress.child
	      );
	    case 29:
	      throw workInProgress.pendingProps;
	  }
	  throw Error(formatProdErrorMessage(156, workInProgress.tag));
	}
	var valueCursor = createCursor(null),
	  currentlyRenderingFiber = null,
	  lastContextDependency = null;
	function pushProvider(providerFiber, context, nextValue) {
	  push(valueCursor, context._currentValue);
	  context._currentValue = nextValue;
	}
	function popProvider(context) {
	  context._currentValue = valueCursor.current;
	  pop(valueCursor);
	}
	function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
	  for (; null !== parent; ) {
	    var alternate = parent.alternate;
	    (parent.childLanes & renderLanes) !== renderLanes
	      ? ((parent.childLanes |= renderLanes),
	        null !== alternate && (alternate.childLanes |= renderLanes))
	      : null !== alternate &&
	        (alternate.childLanes & renderLanes) !== renderLanes &&
	        (alternate.childLanes |= renderLanes);
	    if (parent === propagationRoot) break;
	    parent = parent.return;
	  }
	}
	function propagateContextChanges(
	  workInProgress,
	  contexts,
	  renderLanes,
	  forcePropagateEntireTree
	) {
	  var fiber = workInProgress.child;
	  null !== fiber && (fiber.return = workInProgress);
	  for (; null !== fiber; ) {
	    var list = fiber.dependencies;
	    if (null !== list) {
	      var nextFiber = fiber.child;
	      list = list.firstContext;
	      a: for (; null !== list; ) {
	        var dependency = list;
	        list = fiber;
	        for (var i = 0; i < contexts.length; i++)
	          if (dependency.context === contexts[i]) {
	            list.lanes |= renderLanes;
	            dependency = list.alternate;
	            null !== dependency && (dependency.lanes |= renderLanes);
	            scheduleContextWorkOnParentPath(
	              list.return,
	              renderLanes,
	              workInProgress
	            );
	            forcePropagateEntireTree || (nextFiber = null);
	            break a;
	          }
	        list = dependency.next;
	      }
	    } else if (18 === fiber.tag) {
	      nextFiber = fiber.return;
	      if (null === nextFiber) throw Error(formatProdErrorMessage(341));
	      nextFiber.lanes |= renderLanes;
	      list = nextFiber.alternate;
	      null !== list && (list.lanes |= renderLanes);
	      scheduleContextWorkOnParentPath(nextFiber, renderLanes, workInProgress);
	      nextFiber = null;
	    } else nextFiber = fiber.child;
	    if (null !== nextFiber) nextFiber.return = fiber;
	    else
	      for (nextFiber = fiber; null !== nextFiber; ) {
	        if (nextFiber === workInProgress) {
	          nextFiber = null;
	          break;
	        }
	        fiber = nextFiber.sibling;
	        if (null !== fiber) {
	          fiber.return = nextFiber.return;
	          nextFiber = fiber;
	          break;
	        }
	        nextFiber = nextFiber.return;
	      }
	    fiber = nextFiber;
	  }
	}
	function propagateParentContextChanges(
	  current,
	  workInProgress,
	  renderLanes,
	  forcePropagateEntireTree
	) {
	  current = null;
	  for (
	    var parent = workInProgress, isInsidePropagationBailout = false;
	    null !== parent;

	  ) {
	    if (!isInsidePropagationBailout)
	      if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = true;
	      else if (0 !== (parent.flags & 262144)) break;
	    if (10 === parent.tag) {
	      var currentParent = parent.alternate;
	      if (null === currentParent) throw Error(formatProdErrorMessage(387));
	      currentParent = currentParent.memoizedProps;
	      if (null !== currentParent) {
	        var context = parent.type;
	        objectIs(parent.pendingProps.value, currentParent.value) ||
	          (null !== current ? current.push(context) : (current = [context]));
	      }
	    } else if (parent === hostTransitionProviderCursor.current) {
	      currentParent = parent.alternate;
	      if (null === currentParent) throw Error(formatProdErrorMessage(387));
	      currentParent.memoizedState.memoizedState !==
	        parent.memoizedState.memoizedState &&
	        (null !== current
	          ? current.push(HostTransitionContext)
	          : (current = [HostTransitionContext]));
	    }
	    parent = parent.return;
	  }
	  null !== current &&
	    propagateContextChanges(
	      workInProgress,
	      current,
	      renderLanes,
	      forcePropagateEntireTree
	    );
	  workInProgress.flags |= 262144;
	}
	function checkIfContextChanged(currentDependencies) {
	  for (
	    currentDependencies = currentDependencies.firstContext;
	    null !== currentDependencies;

	  ) {
	    if (
	      !objectIs(
	        currentDependencies.context._currentValue,
	        currentDependencies.memoizedValue
	      )
	    )
	      return true;
	    currentDependencies = currentDependencies.next;
	  }
	  return false;
	}
	function prepareToReadContext(workInProgress) {
	  currentlyRenderingFiber = workInProgress;
	  lastContextDependency = null;
	  workInProgress = workInProgress.dependencies;
	  null !== workInProgress && (workInProgress.firstContext = null);
	}
	function readContext(context) {
	  return readContextForConsumer(currentlyRenderingFiber, context);
	}
	function readContextDuringReconciliation(consumer, context) {
	  null === currentlyRenderingFiber && prepareToReadContext(consumer);
	  return readContextForConsumer(consumer, context);
	}
	function readContextForConsumer(consumer, context) {
	  var value = context._currentValue;
	  context = { context: context, memoizedValue: value, next: null };
	  if (null === lastContextDependency) {
	    if (null === consumer) throw Error(formatProdErrorMessage(308));
	    lastContextDependency = context;
	    consumer.dependencies = { lanes: 0, firstContext: context };
	    consumer.flags |= 524288;
	  } else lastContextDependency = lastContextDependency.next = context;
	  return value;
	}
	var hasForceUpdate = false;
	function initializeUpdateQueue(fiber) {
	  fiber.updateQueue = {
	    baseState: fiber.memoizedState,
	    firstBaseUpdate: null,
	    lastBaseUpdate: null,
	    shared: { pending: null, lanes: 0, hiddenCallbacks: null },
	    callbacks: null
	  };
	}
	function cloneUpdateQueue(current, workInProgress) {
	  current = current.updateQueue;
	  workInProgress.updateQueue === current &&
	    (workInProgress.updateQueue = {
	      baseState: current.baseState,
	      firstBaseUpdate: current.firstBaseUpdate,
	      lastBaseUpdate: current.lastBaseUpdate,
	      shared: current.shared,
	      callbacks: null
	    });
	}
	function createUpdate(lane) {
	  return { lane: lane, tag: 0, payload: null, callback: null, next: null };
	}
	function enqueueUpdate(fiber, update, lane) {
	  var updateQueue = fiber.updateQueue;
	  if (null === updateQueue) return null;
	  updateQueue = updateQueue.shared;
	  if (0 !== (executionContext & 2)) {
	    var pending = updateQueue.pending;
	    null === pending
	      ? (update.next = update)
	      : ((update.next = pending.next), (pending.next = update));
	    updateQueue.pending = update;
	    update = getRootForUpdatedFiber(fiber);
	    markUpdateLaneFromFiberToRoot(fiber, null, lane);
	    return update;
	  }
	  enqueueUpdate$1(fiber, updateQueue, update, lane);
	  return getRootForUpdatedFiber(fiber);
	}
	function entangleTransitions(root, fiber, lane) {
	  fiber = fiber.updateQueue;
	  if (null !== fiber && ((fiber = fiber.shared), 0 !== (lane & 4194176))) {
	    var queueLanes = fiber.lanes;
	    queueLanes &= root.pendingLanes;
	    lane |= queueLanes;
	    fiber.lanes = lane;
	    markRootEntangled(root, lane);
	  }
	}
	function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
	  var queue = workInProgress.updateQueue,
	    current = workInProgress.alternate;
	  if (
	    null !== current &&
	    ((current = current.updateQueue), queue === current)
	  ) {
	    var newFirst = null,
	      newLast = null;
	    queue = queue.firstBaseUpdate;
	    if (null !== queue) {
	      do {
	        var clone = {
	          lane: queue.lane,
	          tag: queue.tag,
	          payload: queue.payload,
	          callback: null,
	          next: null
	        };
	        null === newLast
	          ? (newFirst = newLast = clone)
	          : (newLast = newLast.next = clone);
	        queue = queue.next;
	      } while (null !== queue);
	      null === newLast
	        ? (newFirst = newLast = capturedUpdate)
	        : (newLast = newLast.next = capturedUpdate);
	    } else newFirst = newLast = capturedUpdate;
	    queue = {
	      baseState: current.baseState,
	      firstBaseUpdate: newFirst,
	      lastBaseUpdate: newLast,
	      shared: current.shared,
	      callbacks: current.callbacks
	    };
	    workInProgress.updateQueue = queue;
	    return;
	  }
	  workInProgress = queue.lastBaseUpdate;
	  null === workInProgress
	    ? (queue.firstBaseUpdate = capturedUpdate)
	    : (workInProgress.next = capturedUpdate);
	  queue.lastBaseUpdate = capturedUpdate;
	}
	var didReadFromEntangledAsyncAction = false;
	function suspendIfUpdateReadFromEntangledAsyncAction() {
	  if (didReadFromEntangledAsyncAction) {
	    var entangledActionThenable = currentEntangledActionThenable;
	    if (null !== entangledActionThenable) throw entangledActionThenable;
	  }
	}
	function processUpdateQueue(
	  workInProgress$jscomp$0,
	  props,
	  instance$jscomp$0,
	  renderLanes
	) {
	  didReadFromEntangledAsyncAction = false;
	  var queue = workInProgress$jscomp$0.updateQueue;
	  hasForceUpdate = false;
	  var firstBaseUpdate = queue.firstBaseUpdate,
	    lastBaseUpdate = queue.lastBaseUpdate,
	    pendingQueue = queue.shared.pending;
	  if (null !== pendingQueue) {
	    queue.shared.pending = null;
	    var lastPendingUpdate = pendingQueue,
	      firstPendingUpdate = lastPendingUpdate.next;
	    lastPendingUpdate.next = null;
	    null === lastBaseUpdate
	      ? (firstBaseUpdate = firstPendingUpdate)
	      : (lastBaseUpdate.next = firstPendingUpdate);
	    lastBaseUpdate = lastPendingUpdate;
	    var current = workInProgress$jscomp$0.alternate;
	    null !== current &&
	      ((current = current.updateQueue),
	      (pendingQueue = current.lastBaseUpdate),
	      pendingQueue !== lastBaseUpdate &&
	        (null === pendingQueue
	          ? (current.firstBaseUpdate = firstPendingUpdate)
	          : (pendingQueue.next = firstPendingUpdate),
	        (current.lastBaseUpdate = lastPendingUpdate)));
	  }
	  if (null !== firstBaseUpdate) {
	    var newState = queue.baseState;
	    lastBaseUpdate = 0;
	    current = firstPendingUpdate = lastPendingUpdate = null;
	    pendingQueue = firstBaseUpdate;
	    do {
	      var updateLane = pendingQueue.lane & -536870913,
	        isHiddenUpdate = updateLane !== pendingQueue.lane;
	      if (
	        isHiddenUpdate
	          ? (workInProgressRootRenderLanes & updateLane) === updateLane
	          : (renderLanes & updateLane) === updateLane
	      ) {
	        0 !== updateLane &&
	          updateLane === currentEntangledLane &&
	          (didReadFromEntangledAsyncAction = true);
	        null !== current &&
	          (current = current.next =
	            {
	              lane: 0,
	              tag: pendingQueue.tag,
	              payload: pendingQueue.payload,
	              callback: null,
	              next: null
	            });
	        a: {
	          var workInProgress = workInProgress$jscomp$0,
	            update = pendingQueue;
	          updateLane = props;
	          var instance = instance$jscomp$0;
	          switch (update.tag) {
	            case 1:
	              workInProgress = update.payload;
	              if ("function" === typeof workInProgress) {
	                newState = workInProgress.call(instance, newState, updateLane);
	                break a;
	              }
	              newState = workInProgress;
	              break a;
	            case 3:
	              workInProgress.flags = (workInProgress.flags & -65537) | 128;
	            case 0:
	              workInProgress = update.payload;
	              updateLane =
	                "function" === typeof workInProgress
	                  ? workInProgress.call(instance, newState, updateLane)
	                  : workInProgress;
	              if (null === updateLane || undefined === updateLane) break a;
	              newState = assign({}, newState, updateLane);
	              break a;
	            case 2:
	              hasForceUpdate = true;
	          }
	        }
	        updateLane = pendingQueue.callback;
	        null !== updateLane &&
	          ((workInProgress$jscomp$0.flags |= 64),
	          isHiddenUpdate && (workInProgress$jscomp$0.flags |= 8192),
	          (isHiddenUpdate = queue.callbacks),
	          null === isHiddenUpdate
	            ? (queue.callbacks = [updateLane])
	            : isHiddenUpdate.push(updateLane));
	      } else
	        (isHiddenUpdate = {
	          lane: updateLane,
	          tag: pendingQueue.tag,
	          payload: pendingQueue.payload,
	          callback: pendingQueue.callback,
	          next: null
	        }),
	          null === current
	            ? ((firstPendingUpdate = current = isHiddenUpdate),
	              (lastPendingUpdate = newState))
	            : (current = current.next = isHiddenUpdate),
	          (lastBaseUpdate |= updateLane);
	      pendingQueue = pendingQueue.next;
	      if (null === pendingQueue)
	        if (((pendingQueue = queue.shared.pending), null === pendingQueue))
	          break;
	        else
	          (isHiddenUpdate = pendingQueue),
	            (pendingQueue = isHiddenUpdate.next),
	            (isHiddenUpdate.next = null),
	            (queue.lastBaseUpdate = isHiddenUpdate),
	            (queue.shared.pending = null);
	    } while (1);
	    null === current && (lastPendingUpdate = newState);
	    queue.baseState = lastPendingUpdate;
	    queue.firstBaseUpdate = firstPendingUpdate;
	    queue.lastBaseUpdate = current;
	    null === firstBaseUpdate && (queue.shared.lanes = 0);
	    workInProgressRootSkippedLanes |= lastBaseUpdate;
	    workInProgress$jscomp$0.lanes = lastBaseUpdate;
	    workInProgress$jscomp$0.memoizedState = newState;
	  }
	}
	function callCallback(callback, context) {
	  if ("function" !== typeof callback)
	    throw Error(formatProdErrorMessage(191, callback));
	  callback.call(context);
	}
	function commitCallbacks(updateQueue, context) {
	  var callbacks = updateQueue.callbacks;
	  if (null !== callbacks)
	    for (
	      updateQueue.callbacks = null, updateQueue = 0;
	      updateQueue < callbacks.length;
	      updateQueue++
	    )
	      callCallback(callbacks[updateQueue], context);
	}
	function commitHookEffectListMount(flags, finishedWork) {
	  try {
	    var updateQueue = finishedWork.updateQueue,
	      lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
	    if (null !== lastEffect) {
	      var firstEffect = lastEffect.next;
	      updateQueue = firstEffect;
	      do {
	        if ((updateQueue.tag & flags) === flags) {
	          lastEffect = void 0;
	          var create = updateQueue.create,
	            inst = updateQueue.inst;
	          lastEffect = create();
	          inst.destroy = lastEffect;
	        }
	        updateQueue = updateQueue.next;
	      } while (updateQueue !== firstEffect);
	    }
	  } catch (error) {
	    captureCommitPhaseError(finishedWork, finishedWork.return, error);
	  }
	}
	function commitHookEffectListUnmount(
	  flags,
	  finishedWork,
	  nearestMountedAncestor$jscomp$0
	) {
	  try {
	    var updateQueue = finishedWork.updateQueue,
	      lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
	    if (null !== lastEffect) {
	      var firstEffect = lastEffect.next;
	      updateQueue = firstEffect;
	      do {
	        if ((updateQueue.tag & flags) === flags) {
	          var inst = updateQueue.inst,
	            destroy = inst.destroy;
	          if (void 0 !== destroy) {
	            inst.destroy = void 0;
	            lastEffect = finishedWork;
	            var nearestMountedAncestor = nearestMountedAncestor$jscomp$0;
	            try {
	              destroy();
	            } catch (error) {
	              captureCommitPhaseError(
	                lastEffect,
	                nearestMountedAncestor,
	                error
	              );
	            }
	          }
	        }
	        updateQueue = updateQueue.next;
	      } while (updateQueue !== firstEffect);
	    }
	  } catch (error) {
	    captureCommitPhaseError(finishedWork, finishedWork.return, error);
	  }
	}
	function commitClassCallbacks(finishedWork) {
	  var updateQueue = finishedWork.updateQueue;
	  if (null !== updateQueue) {
	    var instance = finishedWork.stateNode;
	    try {
	      commitCallbacks(updateQueue, instance);
	    } catch (error) {
	      captureCommitPhaseError(finishedWork, finishedWork.return, error);
	    }
	  }
	}
	function safelyCallComponentWillUnmount(
	  current,
	  nearestMountedAncestor,
	  instance
	) {
	  instance.props = resolveClassComponentProps(
	    current.type,
	    current.memoizedProps
	  );
	  instance.state = current.memoizedState;
	  try {
	    instance.componentWillUnmount();
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	}
	function safelyAttachRef(current, nearestMountedAncestor) {
	  try {
	    var ref = current.ref;
	    if (null !== ref) {
	      var instance = current.stateNode;
	      switch (current.tag) {
	        case 26:
	        case 27:
	        case 5:
	          var instanceToUse = instance;
	          break;
	        default:
	          instanceToUse = instance;
	      }
	      "function" === typeof ref
	        ? (current.refCleanup = ref(instanceToUse))
	        : (ref.current = instanceToUse);
	    }
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	}
	function safelyDetachRef(current, nearestMountedAncestor) {
	  var ref = current.ref,
	    refCleanup = current.refCleanup;
	  if (null !== ref)
	    if ("function" === typeof refCleanup)
	      try {
	        refCleanup();
	      } catch (error) {
	        captureCommitPhaseError(current, nearestMountedAncestor, error);
	      } finally {
	        (current.refCleanup = null),
	          (current = current.alternate),
	          null != current && (current.refCleanup = null);
	      }
	    else if ("function" === typeof ref)
	      try {
	        ref(null);
	      } catch (error$112) {
	        captureCommitPhaseError(current, nearestMountedAncestor, error$112);
	      }
	    else ref.current = null;
	}
	function commitHostMount(finishedWork) {
	  var type = finishedWork.type,
	    props = finishedWork.memoizedProps,
	    instance = finishedWork.stateNode;
	  try {
	    a: switch (type) {
	      case "button":
	      case "input":
	      case "select":
	      case "textarea":
	        props.autoFocus && instance.focus();
	        break a;
	      case "img":
	        props.src
	          ? (instance.src = props.src)
	          : props.srcSet && (instance.srcset = props.srcSet);
	    }
	  } catch (error) {
	    captureCommitPhaseError(finishedWork, finishedWork.return, error);
	  }
	}
	function commitHostUpdate(finishedWork, newProps, oldProps) {
	  try {
	    var domElement = finishedWork.stateNode;
	    updateProperties(domElement, finishedWork.type, oldProps, newProps);
	    domElement[internalPropsKey] = newProps;
	  } catch (error) {
	    captureCommitPhaseError(finishedWork, finishedWork.return, error);
	  }
	}
	function isHostParent(fiber) {
	  return (
	    5 === fiber.tag ||
	    3 === fiber.tag ||
	    26 === fiber.tag ||
	    27 === fiber.tag ||
	    4 === fiber.tag
	  );
	}
	function getHostSibling(fiber) {
	  a: for (;;) {
	    for (; null === fiber.sibling; ) {
	      if (null === fiber.return || isHostParent(fiber.return)) return null;
	      fiber = fiber.return;
	    }
	    fiber.sibling.return = fiber.return;
	    for (
	      fiber = fiber.sibling;
	      5 !== fiber.tag &&
	      6 !== fiber.tag &&
	      27 !== fiber.tag &&
	      18 !== fiber.tag;

	    ) {
	      if (fiber.flags & 2) continue a;
	      if (null === fiber.child || 4 === fiber.tag) continue a;
	      else (fiber.child.return = fiber), (fiber = fiber.child);
	    }
	    if (!(fiber.flags & 2)) return fiber.stateNode;
	  }
	}
	function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
	  var tag = node.tag;
	  if (5 === tag || 6 === tag)
	    (node = node.stateNode),
	      before
	        ? 8 === parent.nodeType
	          ? parent.parentNode.insertBefore(node, before)
	          : parent.insertBefore(node, before)
	        : (8 === parent.nodeType
	            ? ((before = parent.parentNode), before.insertBefore(node, parent))
	            : ((before = parent), before.appendChild(node)),
	          (parent = parent._reactRootContainer),
	          (null !== parent && undefined !== parent) ||
	            null !== before.onclick ||
	            (before.onclick = noop$1));
	  else if (4 !== tag && 27 !== tag && ((node = node.child), null !== node))
	    for (
	      insertOrAppendPlacementNodeIntoContainer(node, before, parent),
	        node = node.sibling;
	      null !== node;

	    )
	      insertOrAppendPlacementNodeIntoContainer(node, before, parent),
	        (node = node.sibling);
	}
	function insertOrAppendPlacementNode(node, before, parent) {
	  var tag = node.tag;
	  if (5 === tag || 6 === tag)
	    (node = node.stateNode),
	      before ? parent.insertBefore(node, before) : parent.appendChild(node);
	  else if (4 !== tag && 27 !== tag && ((node = node.child), null !== node))
	    for (
	      insertOrAppendPlacementNode(node, before, parent), node = node.sibling;
	      null !== node;

	    )
	      insertOrAppendPlacementNode(node, before, parent), (node = node.sibling);
	}
	var offscreenSubtreeIsHidden = false,
	  offscreenSubtreeWasHidden = false,
	  needsFormReset = false,
	  PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set,
	  nextEffect = null,
	  shouldFireAfterActiveInstanceBlur = false;
	function commitBeforeMutationEffects(root, firstChild) {
	  root = root.containerInfo;
	  eventsEnabled = _enabled;
	  root = getActiveElementDeep(root);
	  if (hasSelectionCapabilities(root)) {
	    if ("selectionStart" in root)
	      var JSCompiler_temp = {
	        start: root.selectionStart,
	        end: root.selectionEnd
	      };
	    else
	      a: {
	        JSCompiler_temp =
	          ((JSCompiler_temp = root.ownerDocument) &&
	            JSCompiler_temp.defaultView) ||
	          window;
	        var selection =
	          JSCompiler_temp.getSelection && JSCompiler_temp.getSelection();
	        if (selection && 0 !== selection.rangeCount) {
	          JSCompiler_temp = selection.anchorNode;
	          var anchorOffset = selection.anchorOffset,
	            focusNode = selection.focusNode;
	          selection = selection.focusOffset;
	          try {
	            JSCompiler_temp.nodeType, focusNode.nodeType;
	          } catch (e$20) {
	            JSCompiler_temp = null;
	            break a;
	          }
	          var length = 0,
	            start = -1,
	            end = -1,
	            indexWithinAnchor = 0,
	            indexWithinFocus = 0,
	            node = root,
	            parentNode = null;
	          b: for (;;) {
	            for (var next; ; ) {
	              node !== JSCompiler_temp ||
	                (0 !== anchorOffset && 3 !== node.nodeType) ||
	                (start = length + anchorOffset);
	              node !== focusNode ||
	                (0 !== selection && 3 !== node.nodeType) ||
	                (end = length + selection);
	              3 === node.nodeType && (length += node.nodeValue.length);
	              if (null === (next = node.firstChild)) break;
	              parentNode = node;
	              node = next;
	            }
	            for (;;) {
	              if (node === root) break b;
	              parentNode === JSCompiler_temp &&
	                ++indexWithinAnchor === anchorOffset &&
	                (start = length);
	              parentNode === focusNode &&
	                ++indexWithinFocus === selection &&
	                (end = length);
	              if (null !== (next = node.nextSibling)) break;
	              node = parentNode;
	              parentNode = node.parentNode;
	            }
	            node = next;
	          }
	          JSCompiler_temp =
	            -1 === start || -1 === end ? null : { start: start, end: end };
	        } else JSCompiler_temp = null;
	      }
	    JSCompiler_temp = JSCompiler_temp || { start: 0, end: 0 };
	  } else JSCompiler_temp = null;
	  selectionInformation = { focusedElem: root, selectionRange: JSCompiler_temp };
	  _enabled = false;
	  for (nextEffect = firstChild; null !== nextEffect; )
	    if (
	      ((firstChild = nextEffect),
	      (root = firstChild.child),
	      0 !== (firstChild.subtreeFlags & 1028) && null !== root)
	    )
	      (root.return = firstChild), (nextEffect = root);
	    else
	      for (; null !== nextEffect; ) {
	        firstChild = nextEffect;
	        focusNode = firstChild.alternate;
	        root = firstChild.flags;
	        switch (firstChild.tag) {
	          case 0:
	            break;
	          case 11:
	          case 15:
	            break;
	          case 1:
	            if (0 !== (root & 1024) && null !== focusNode) {
	              root = undefined;
	              JSCompiler_temp = firstChild;
	              anchorOffset = focusNode.memoizedProps;
	              focusNode = focusNode.memoizedState;
	              selection = JSCompiler_temp.stateNode;
	              try {
	                var resolvedPrevProps = resolveClassComponentProps(
	                  JSCompiler_temp.type,
	                  anchorOffset,
	                  JSCompiler_temp.elementType === JSCompiler_temp.type
	                );
	                root = selection.getSnapshotBeforeUpdate(
	                  resolvedPrevProps,
	                  focusNode
	                );
	                selection.__reactInternalSnapshotBeforeUpdate = root;
	              } catch (error) {
	                captureCommitPhaseError(
	                  JSCompiler_temp,
	                  JSCompiler_temp.return,
	                  error
	                );
	              }
	            }
	            break;
	          case 3:
	            if (0 !== (root & 1024))
	              if (
	                ((root = firstChild.stateNode.containerInfo),
	                (JSCompiler_temp = root.nodeType),
	                9 === JSCompiler_temp)
	              )
	                clearContainerSparingly(root);
	              else if (1 === JSCompiler_temp)
	                switch (root.nodeName) {
	                  case "HEAD":
	                  case "HTML":
	                  case "BODY":
	                    clearContainerSparingly(root);
	                    break;
	                  default:
	                    root.textContent = "";
	                }
	            break;
	          case 5:
	          case 26:
	          case 27:
	          case 6:
	          case 4:
	          case 17:
	            break;
	          default:
	            if (0 !== (root & 1024)) throw Error(formatProdErrorMessage(163));
	        }
	        root = firstChild.sibling;
	        if (null !== root) {
	          root.return = firstChild.return;
	          nextEffect = root;
	          break;
	        }
	        nextEffect = firstChild.return;
	      }
	  resolvedPrevProps = shouldFireAfterActiveInstanceBlur;
	  shouldFireAfterActiveInstanceBlur = false;
	  return resolvedPrevProps;
	}
	function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {
	  var flags = finishedWork.flags;
	  switch (finishedWork.tag) {
	    case 0:
	    case 11:
	    case 15:
	      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	      flags & 4 && commitHookEffectListMount(5, finishedWork);
	      break;
	    case 1:
	      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	      if (flags & 4)
	        if (((finishedRoot = finishedWork.stateNode), null === current))
	          try {
	            finishedRoot.componentDidMount();
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          }
	        else {
	          var prevProps = resolveClassComponentProps(
	            finishedWork.type,
	            current.memoizedProps
	          );
	          current = current.memoizedState;
	          try {
	            finishedRoot.componentDidUpdate(
	              prevProps,
	              current,
	              finishedRoot.__reactInternalSnapshotBeforeUpdate
	            );
	          } catch (error$111) {
	            captureCommitPhaseError(
	              finishedWork,
	              finishedWork.return,
	              error$111
	            );
	          }
	        }
	      flags & 64 && commitClassCallbacks(finishedWork);
	      flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
	      break;
	    case 3:
	      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	      if (flags & 64 && ((flags = finishedWork.updateQueue), null !== flags)) {
	        finishedRoot = null;
	        if (null !== finishedWork.child)
	          switch (finishedWork.child.tag) {
	            case 27:
	            case 5:
	              finishedRoot = finishedWork.child.stateNode;
	              break;
	            case 1:
	              finishedRoot = finishedWork.child.stateNode;
	          }
	        try {
	          commitCallbacks(flags, finishedRoot);
	        } catch (error) {
	          captureCommitPhaseError(finishedWork, finishedWork.return, error);
	        }
	      }
	      break;
	    case 26:
	      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	      flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
	      break;
	    case 27:
	    case 5:
	      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	      null === current && flags & 4 && commitHostMount(finishedWork);
	      flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
	      break;
	    case 12:
	      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	      break;
	    case 13:
	      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	      flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
	      break;
	    case 22:
	      prevProps =
	        null !== finishedWork.memoizedState || offscreenSubtreeIsHidden;
	      if (!prevProps) {
	        current =
	          (null !== current && null !== current.memoizedState) ||
	          offscreenSubtreeWasHidden;
	        var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden,
	          prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
	        offscreenSubtreeIsHidden = prevProps;
	        (offscreenSubtreeWasHidden = current) && !prevOffscreenSubtreeWasHidden
	          ? recursivelyTraverseReappearLayoutEffects(
	              finishedRoot,
	              finishedWork,
	              0 !== (finishedWork.subtreeFlags & 8772)
	            )
	          : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
	        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
	      }
	      flags & 512 &&
	        ("manual" === finishedWork.memoizedProps.mode
	          ? safelyAttachRef(finishedWork, finishedWork.return)
	          : safelyDetachRef(finishedWork, finishedWork.return));
	      break;
	    default:
	      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	  }
	}
	function detachFiberAfterEffects(fiber) {
	  var alternate = fiber.alternate;
	  null !== alternate &&
	    ((fiber.alternate = null), detachFiberAfterEffects(alternate));
	  fiber.child = null;
	  fiber.deletions = null;
	  fiber.sibling = null;
	  5 === fiber.tag &&
	    ((alternate = fiber.stateNode),
	    null !== alternate && detachDeletedInstance(alternate));
	  fiber.stateNode = null;
	  fiber.return = null;
	  fiber.dependencies = null;
	  fiber.memoizedProps = null;
	  fiber.memoizedState = null;
	  fiber.pendingProps = null;
	  fiber.stateNode = null;
	  fiber.updateQueue = null;
	}
	var hostParent = null,
	  hostParentIsContainer = false;
	function recursivelyTraverseDeletionEffects(
	  finishedRoot,
	  nearestMountedAncestor,
	  parent
	) {
	  for (parent = parent.child; null !== parent; )
	    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent),
	      (parent = parent.sibling);
	}
	function commitDeletionEffectsOnFiber(
	  finishedRoot,
	  nearestMountedAncestor,
	  deletedFiber
	) {
	  if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount)
	    try {
	      injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
	    } catch (err) {}
	  switch (deletedFiber.tag) {
	    case 26:
	      offscreenSubtreeWasHidden ||
	        safelyDetachRef(deletedFiber, nearestMountedAncestor);
	      recursivelyTraverseDeletionEffects(
	        finishedRoot,
	        nearestMountedAncestor,
	        deletedFiber
	      );
	      deletedFiber.memoizedState
	        ? deletedFiber.memoizedState.count--
	        : deletedFiber.stateNode &&
	          ((deletedFiber = deletedFiber.stateNode),
	          deletedFiber.parentNode.removeChild(deletedFiber));
	      break;
	    case 27:
	      offscreenSubtreeWasHidden ||
	        safelyDetachRef(deletedFiber, nearestMountedAncestor);
	      var prevHostParent = hostParent,
	        prevHostParentIsContainer = hostParentIsContainer;
	      hostParent = deletedFiber.stateNode;
	      recursivelyTraverseDeletionEffects(
	        finishedRoot,
	        nearestMountedAncestor,
	        deletedFiber
	      );
	      deletedFiber = deletedFiber.stateNode;
	      for (
	        nearestMountedAncestor = deletedFiber.attributes;
	        nearestMountedAncestor.length;

	      )
	        deletedFiber.removeAttributeNode(nearestMountedAncestor[0]);
	      detachDeletedInstance(deletedFiber);
	      hostParent = prevHostParent;
	      hostParentIsContainer = prevHostParentIsContainer;
	      break;
	    case 5:
	      offscreenSubtreeWasHidden ||
	        safelyDetachRef(deletedFiber, nearestMountedAncestor);
	    case 6:
	      prevHostParentIsContainer = hostParent;
	      var prevHostParentIsContainer$119 = hostParentIsContainer;
	      hostParent = null;
	      recursivelyTraverseDeletionEffects(
	        finishedRoot,
	        nearestMountedAncestor,
	        deletedFiber
	      );
	      hostParent = prevHostParentIsContainer;
	      hostParentIsContainer = prevHostParentIsContainer$119;
	      if (null !== hostParent)
	        if (hostParentIsContainer)
	          try {
	            (finishedRoot = hostParent),
	              (prevHostParent = deletedFiber.stateNode),
	              8 === finishedRoot.nodeType
	                ? finishedRoot.parentNode.removeChild(prevHostParent)
	                : finishedRoot.removeChild(prevHostParent);
	          } catch (error) {
	            captureCommitPhaseError(
	              deletedFiber,
	              nearestMountedAncestor,
	              error
	            );
	          }
	        else
	          try {
	            hostParent.removeChild(deletedFiber.stateNode);
	          } catch (error) {
	            captureCommitPhaseError(
	              deletedFiber,
	              nearestMountedAncestor,
	              error
	            );
	          }
	      break;
	    case 18:
	      null !== hostParent &&
	        (hostParentIsContainer
	          ? ((nearestMountedAncestor = hostParent),
	            (deletedFiber = deletedFiber.stateNode),
	            8 === nearestMountedAncestor.nodeType
	              ? clearSuspenseBoundary(
	                  nearestMountedAncestor.parentNode,
	                  deletedFiber
	                )
	              : 1 === nearestMountedAncestor.nodeType &&
	                clearSuspenseBoundary(nearestMountedAncestor, deletedFiber),
	            retryIfBlockedOn(nearestMountedAncestor))
	          : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
	      break;
	    case 4:
	      prevHostParent = hostParent;
	      prevHostParentIsContainer = hostParentIsContainer;
	      hostParent = deletedFiber.stateNode.containerInfo;
	      hostParentIsContainer = true;
	      recursivelyTraverseDeletionEffects(
	        finishedRoot,
	        nearestMountedAncestor,
	        deletedFiber
	      );
	      hostParent = prevHostParent;
	      hostParentIsContainer = prevHostParentIsContainer;
	      break;
	    case 0:
	    case 11:
	    case 14:
	    case 15:
	      offscreenSubtreeWasHidden ||
	        commitHookEffectListUnmount(2, deletedFiber, nearestMountedAncestor);
	      offscreenSubtreeWasHidden ||
	        commitHookEffectListUnmount(4, deletedFiber, nearestMountedAncestor);
	      recursivelyTraverseDeletionEffects(
	        finishedRoot,
	        nearestMountedAncestor,
	        deletedFiber
	      );
	      break;
	    case 1:
	      offscreenSubtreeWasHidden ||
	        (safelyDetachRef(deletedFiber, nearestMountedAncestor),
	        (prevHostParent = deletedFiber.stateNode),
	        "function" === typeof prevHostParent.componentWillUnmount &&
	          safelyCallComponentWillUnmount(
	            deletedFiber,
	            nearestMountedAncestor,
	            prevHostParent
	          ));
	      recursivelyTraverseDeletionEffects(
	        finishedRoot,
	        nearestMountedAncestor,
	        deletedFiber
	      );
	      break;
	    case 21:
	      recursivelyTraverseDeletionEffects(
	        finishedRoot,
	        nearestMountedAncestor,
	        deletedFiber
	      );
	      break;
	    case 22:
	      offscreenSubtreeWasHidden ||
	        safelyDetachRef(deletedFiber, nearestMountedAncestor);
	      offscreenSubtreeWasHidden =
	        (prevHostParent = offscreenSubtreeWasHidden) ||
	        null !== deletedFiber.memoizedState;
	      recursivelyTraverseDeletionEffects(
	        finishedRoot,
	        nearestMountedAncestor,
	        deletedFiber
	      );
	      offscreenSubtreeWasHidden = prevHostParent;
	      break;
	    default:
	      recursivelyTraverseDeletionEffects(
	        finishedRoot,
	        nearestMountedAncestor,
	        deletedFiber
	      );
	  }
	}
	function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
	  if (
	    null === finishedWork.memoizedState &&
	    ((finishedRoot = finishedWork.alternate),
	    null !== finishedRoot &&
	      ((finishedRoot = finishedRoot.memoizedState),
	      null !== finishedRoot &&
	        ((finishedRoot = finishedRoot.dehydrated), null !== finishedRoot)))
	  )
	    try {
	      retryIfBlockedOn(finishedRoot);
	    } catch (error) {
	      captureCommitPhaseError(finishedWork, finishedWork.return, error);
	    }
	}
	function getRetryCache(finishedWork) {
	  switch (finishedWork.tag) {
	    case 13:
	    case 19:
	      var retryCache = finishedWork.stateNode;
	      null === retryCache &&
	        (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
	      return retryCache;
	    case 22:
	      return (
	        (finishedWork = finishedWork.stateNode),
	        (retryCache = finishedWork._retryCache),
	        null === retryCache &&
	          (retryCache = finishedWork._retryCache = new PossiblyWeakSet()),
	        retryCache
	      );
	    default:
	      throw Error(formatProdErrorMessage(435, finishedWork.tag));
	  }
	}
	function attachSuspenseRetryListeners(finishedWork, wakeables) {
	  var retryCache = getRetryCache(finishedWork);
	  wakeables.forEach(function (wakeable) {
	    var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
	    retryCache.has(wakeable) ||
	      (retryCache.add(wakeable), wakeable.then(retry, retry));
	  });
	}
	function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
	  var deletions = parentFiber.deletions;
	  if (null !== deletions)
	    for (var i = 0; i < deletions.length; i++) {
	      var childToDelete = deletions[i],
	        root = root$jscomp$0,
	        returnFiber = parentFiber,
	        parent = returnFiber;
	      a: for (; null !== parent; ) {
	        switch (parent.tag) {
	          case 27:
	          case 5:
	            hostParent = parent.stateNode;
	            hostParentIsContainer = false;
	            break a;
	          case 3:
	            hostParent = parent.stateNode.containerInfo;
	            hostParentIsContainer = true;
	            break a;
	          case 4:
	            hostParent = parent.stateNode.containerInfo;
	            hostParentIsContainer = true;
	            break a;
	        }
	        parent = parent.return;
	      }
	      if (null === hostParent) throw Error(formatProdErrorMessage(160));
	      commitDeletionEffectsOnFiber(root, returnFiber, childToDelete);
	      hostParent = null;
	      hostParentIsContainer = false;
	      root = childToDelete.alternate;
	      null !== root && (root.return = null);
	      childToDelete.return = null;
	    }
	  if (parentFiber.subtreeFlags & 13878)
	    for (parentFiber = parentFiber.child; null !== parentFiber; )
	      commitMutationEffectsOnFiber(parentFiber, root$jscomp$0),
	        (parentFiber = parentFiber.sibling);
	}
	var currentHoistableRoot = null;
	function commitMutationEffectsOnFiber(finishedWork, root) {
	  var current = finishedWork.alternate,
	    flags = finishedWork.flags;
	  switch (finishedWork.tag) {
	    case 0:
	    case 11:
	    case 14:
	    case 15:
	      recursivelyTraverseMutationEffects(root, finishedWork);
	      commitReconciliationEffects(finishedWork);
	      flags & 4 &&
	        (commitHookEffectListUnmount(3, finishedWork, finishedWork.return),
	        commitHookEffectListMount(3, finishedWork),
	        commitHookEffectListUnmount(5, finishedWork, finishedWork.return));
	      break;
	    case 1:
	      recursivelyTraverseMutationEffects(root, finishedWork);
	      commitReconciliationEffects(finishedWork);
	      flags & 512 &&
	        (offscreenSubtreeWasHidden ||
	          null === current ||
	          safelyDetachRef(current, current.return));
	      flags & 64 &&
	        offscreenSubtreeIsHidden &&
	        ((finishedWork = finishedWork.updateQueue),
	        null !== finishedWork &&
	          ((flags = finishedWork.callbacks),
	          null !== flags &&
	            ((current = finishedWork.shared.hiddenCallbacks),
	            (finishedWork.shared.hiddenCallbacks =
	              null === current ? flags : current.concat(flags)))));
	      break;
	    case 26:
	      var hoistableRoot = currentHoistableRoot;
	      recursivelyTraverseMutationEffects(root, finishedWork);
	      commitReconciliationEffects(finishedWork);
	      flags & 512 &&
	        (offscreenSubtreeWasHidden ||
	          null === current ||
	          safelyDetachRef(current, current.return));
	      if (flags & 4) {
	        var currentResource = null !== current ? current.memoizedState : null;
	        flags = finishedWork.memoizedState;
	        if (null === current)
	          if (null === flags)
	            if (null === finishedWork.stateNode) {
	              a: {
	                flags = finishedWork.type;
	                current = finishedWork.memoizedProps;
	                hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
	                b: switch (flags) {
	                  case "title":
	                    currentResource =
	                      hoistableRoot.getElementsByTagName("title")[0];
	                    if (
	                      !currentResource ||
	                      currentResource[internalHoistableMarker] ||
	                      currentResource[internalInstanceKey] ||
	                      "http://www.w3.org/2000/svg" ===
	                        currentResource.namespaceURI ||
	                      currentResource.hasAttribute("itemprop")
	                    )
	                      (currentResource = hoistableRoot.createElement(flags)),
	                        hoistableRoot.head.insertBefore(
	                          currentResource,
	                          hoistableRoot.querySelector("head > title")
	                        );
	                    setInitialProperties(currentResource, flags, current);
	                    currentResource[internalInstanceKey] = finishedWork;
	                    markNodeAsHoistable(currentResource);
	                    flags = currentResource;
	                    break a;
	                  case "link":
	                    var maybeNodes = getHydratableHoistableCache(
	                      "link",
	                      "href",
	                      hoistableRoot
	                    ).get(flags + (current.href || ""));
	                    if (maybeNodes)
	                      for (var i = 0; i < maybeNodes.length; i++)
	                        if (
	                          ((currentResource = maybeNodes[i]),
	                          currentResource.getAttribute("href") ===
	                            (null == current.href ? null : current.href) &&
	                            currentResource.getAttribute("rel") ===
	                              (null == current.rel ? null : current.rel) &&
	                            currentResource.getAttribute("title") ===
	                              (null == current.title ? null : current.title) &&
	                            currentResource.getAttribute("crossorigin") ===
	                              (null == current.crossOrigin
	                                ? null
	                                : current.crossOrigin))
	                        ) {
	                          maybeNodes.splice(i, 1);
	                          break b;
	                        }
	                    currentResource = hoistableRoot.createElement(flags);
	                    setInitialProperties(currentResource, flags, current);
	                    hoistableRoot.head.appendChild(currentResource);
	                    break;
	                  case "meta":
	                    if (
	                      (maybeNodes = getHydratableHoistableCache(
	                        "meta",
	                        "content",
	                        hoistableRoot
	                      ).get(flags + (current.content || "")))
	                    )
	                      for (i = 0; i < maybeNodes.length; i++)
	                        if (
	                          ((currentResource = maybeNodes[i]),
	                          currentResource.getAttribute("content") ===
	                            (null == current.content
	                              ? null
	                              : "" + current.content) &&
	                            currentResource.getAttribute("name") ===
	                              (null == current.name ? null : current.name) &&
	                            currentResource.getAttribute("property") ===
	                              (null == current.property
	                                ? null
	                                : current.property) &&
	                            currentResource.getAttribute("http-equiv") ===
	                              (null == current.httpEquiv
	                                ? null
	                                : current.httpEquiv) &&
	                            currentResource.getAttribute("charset") ===
	                              (null == current.charSet
	                                ? null
	                                : current.charSet))
	                        ) {
	                          maybeNodes.splice(i, 1);
	                          break b;
	                        }
	                    currentResource = hoistableRoot.createElement(flags);
	                    setInitialProperties(currentResource, flags, current);
	                    hoistableRoot.head.appendChild(currentResource);
	                    break;
	                  default:
	                    throw Error(formatProdErrorMessage(468, flags));
	                }
	                currentResource[internalInstanceKey] = finishedWork;
	                markNodeAsHoistable(currentResource);
	                flags = currentResource;
	              }
	              finishedWork.stateNode = flags;
	            } else
	              mountHoistable(
	                hoistableRoot,
	                finishedWork.type,
	                finishedWork.stateNode
	              );
	          else
	            finishedWork.stateNode = acquireResource(
	              hoistableRoot,
	              flags,
	              finishedWork.memoizedProps
	            );
	        else
	          currentResource !== flags
	            ? (null === currentResource
	                ? null !== current.stateNode &&
	                  ((current = current.stateNode),
	                  current.parentNode.removeChild(current))
	                : currentResource.count--,
	              null === flags
	                ? mountHoistable(
	                    hoistableRoot,
	                    finishedWork.type,
	                    finishedWork.stateNode
	                  )
	                : acquireResource(
	                    hoistableRoot,
	                    flags,
	                    finishedWork.memoizedProps
	                  ))
	            : null === flags &&
	              null !== finishedWork.stateNode &&
	              commitHostUpdate(
	                finishedWork,
	                finishedWork.memoizedProps,
	                current.memoizedProps
	              );
	      }
	      break;
	    case 27:
	      if (flags & 4 && null === finishedWork.alternate) {
	        hoistableRoot = finishedWork.stateNode;
	        currentResource = finishedWork.memoizedProps;
	        try {
	          for (var node = hoistableRoot.firstChild; node; ) {
	            var nextNode = node.nextSibling,
	              nodeName = node.nodeName;
	            node[internalHoistableMarker] ||
	              "HEAD" === nodeName ||
	              "BODY" === nodeName ||
	              "SCRIPT" === nodeName ||
	              "STYLE" === nodeName ||
	              ("LINK" === nodeName &&
	                "stylesheet" === node.rel.toLowerCase()) ||
	              hoistableRoot.removeChild(node);
	            node = nextNode;
	          }
	          for (
	            var type = finishedWork.type, attributes = hoistableRoot.attributes;
	            attributes.length;

	          )
	            hoistableRoot.removeAttributeNode(attributes[0]);
	          setInitialProperties(hoistableRoot, type, currentResource);
	          hoistableRoot[internalInstanceKey] = finishedWork;
	          hoistableRoot[internalPropsKey] = currentResource;
	        } catch (error) {
	          captureCommitPhaseError(finishedWork, finishedWork.return, error);
	        }
	      }
	    case 5:
	      recursivelyTraverseMutationEffects(root, finishedWork);
	      commitReconciliationEffects(finishedWork);
	      flags & 512 &&
	        (offscreenSubtreeWasHidden ||
	          null === current ||
	          safelyDetachRef(current, current.return));
	      if (finishedWork.flags & 32) {
	        hoistableRoot = finishedWork.stateNode;
	        try {
	          setTextContent(hoistableRoot, "");
	        } catch (error) {
	          captureCommitPhaseError(finishedWork, finishedWork.return, error);
	        }
	      }
	      flags & 4 &&
	        null != finishedWork.stateNode &&
	        ((hoistableRoot = finishedWork.memoizedProps),
	        commitHostUpdate(
	          finishedWork,
	          hoistableRoot,
	          null !== current ? current.memoizedProps : hoistableRoot
	        ));
	      flags & 1024 && (needsFormReset = true);
	      break;
	    case 6:
	      recursivelyTraverseMutationEffects(root, finishedWork);
	      commitReconciliationEffects(finishedWork);
	      if (flags & 4) {
	        if (null === finishedWork.stateNode)
	          throw Error(formatProdErrorMessage(162));
	        flags = finishedWork.memoizedProps;
	        current = finishedWork.stateNode;
	        try {
	          current.nodeValue = flags;
	        } catch (error) {
	          captureCommitPhaseError(finishedWork, finishedWork.return, error);
	        }
	      }
	      break;
	    case 3:
	      tagCaches = null;
	      hoistableRoot = currentHoistableRoot;
	      currentHoistableRoot = getHoistableRoot(root.containerInfo);
	      recursivelyTraverseMutationEffects(root, finishedWork);
	      currentHoistableRoot = hoistableRoot;
	      commitReconciliationEffects(finishedWork);
	      if (flags & 4 && null !== current && current.memoizedState.isDehydrated)
	        try {
	          retryIfBlockedOn(root.containerInfo);
	        } catch (error) {
	          captureCommitPhaseError(finishedWork, finishedWork.return, error);
	        }
	      needsFormReset &&
	        ((needsFormReset = false), recursivelyResetForms(finishedWork));
	      break;
	    case 4:
	      flags = currentHoistableRoot;
	      currentHoistableRoot = getHoistableRoot(
	        finishedWork.stateNode.containerInfo
	      );
	      recursivelyTraverseMutationEffects(root, finishedWork);
	      commitReconciliationEffects(finishedWork);
	      currentHoistableRoot = flags;
	      break;
	    case 12:
	      recursivelyTraverseMutationEffects(root, finishedWork);
	      commitReconciliationEffects(finishedWork);
	      break;
	    case 13:
	      recursivelyTraverseMutationEffects(root, finishedWork);
	      commitReconciliationEffects(finishedWork);
	      finishedWork.child.flags & 8192 &&
	        (null !== finishedWork.memoizedState) !==
	          (null !== current && null !== current.memoizedState) &&
	        (globalMostRecentFallbackTime = now());
	      flags & 4 &&
	        ((flags = finishedWork.updateQueue),
	        null !== flags &&
	          ((finishedWork.updateQueue = null),
	          attachSuspenseRetryListeners(finishedWork, flags)));
	      break;
	    case 22:
	      flags & 512 &&
	        (offscreenSubtreeWasHidden ||
	          null === current ||
	          safelyDetachRef(current, current.return));
	      node = null !== finishedWork.memoizedState;
	      nextNode = null !== current && null !== current.memoizedState;
	      nodeName = offscreenSubtreeIsHidden;
	      type = offscreenSubtreeWasHidden;
	      offscreenSubtreeIsHidden = nodeName || node;
	      offscreenSubtreeWasHidden = type || nextNode;
	      recursivelyTraverseMutationEffects(root, finishedWork);
	      offscreenSubtreeWasHidden = type;
	      offscreenSubtreeIsHidden = nodeName;
	      commitReconciliationEffects(finishedWork);
	      root = finishedWork.stateNode;
	      root._current = finishedWork;
	      root._visibility &= -3;
	      root._visibility |= root._pendingVisibility & 2;
	      if (
	        flags & 8192 &&
	        ((root._visibility = node
	          ? root._visibility & -2
	          : root._visibility | 1),
	        node &&
	          ((root = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden),
	          null === current ||
	            nextNode ||
	            root ||
	            recursivelyTraverseDisappearLayoutEffects(finishedWork)),
	        null === finishedWork.memoizedProps ||
	          "manual" !== finishedWork.memoizedProps.mode)
	      )
	        a: for (current = null, root = finishedWork; ; ) {
	          if (5 === root.tag || 26 === root.tag || 27 === root.tag) {
	            if (null === current) {
	              nextNode = current = root;
	              try {
	                if (((hoistableRoot = nextNode.stateNode), node))
	                  (currentResource = hoistableRoot.style),
	                    "function" === typeof currentResource.setProperty
	                      ? currentResource.setProperty(
	                          "display",
	                          "none",
	                          "important"
	                        )
	                      : (currentResource.display = "none");
	                else {
	                  maybeNodes = nextNode.stateNode;
	                  i = nextNode.memoizedProps.style;
	                  var display =
	                    void 0 !== i && null !== i && i.hasOwnProperty("display")
	                      ? i.display
	                      : null;
	                  maybeNodes.style.display =
	                    null == display || "boolean" === typeof display
	                      ? ""
	                      : ("" + display).trim();
	                }
	              } catch (error) {
	                captureCommitPhaseError(nextNode, nextNode.return, error);
	              }
	            }
	          } else if (6 === root.tag) {
	            if (null === current) {
	              nextNode = root;
	              try {
	                nextNode.stateNode.nodeValue = node
	                  ? ""
	                  : nextNode.memoizedProps;
	              } catch (error) {
	                captureCommitPhaseError(nextNode, nextNode.return, error);
	              }
	            }
	          } else if (
	            ((22 !== root.tag && 23 !== root.tag) ||
	              null === root.memoizedState ||
	              root === finishedWork) &&
	            null !== root.child
	          ) {
	            root.child.return = root;
	            root = root.child;
	            continue;
	          }
	          if (root === finishedWork) break a;
	          for (; null === root.sibling; ) {
	            if (null === root.return || root.return === finishedWork) break a;
	            current === root && (current = null);
	            root = root.return;
	          }
	          current === root && (current = null);
	          root.sibling.return = root.return;
	          root = root.sibling;
	        }
	      flags & 4 &&
	        ((flags = finishedWork.updateQueue),
	        null !== flags &&
	          ((current = flags.retryQueue),
	          null !== current &&
	            ((flags.retryQueue = null),
	            attachSuspenseRetryListeners(finishedWork, current))));
	      break;
	    case 19:
	      recursivelyTraverseMutationEffects(root, finishedWork);
	      commitReconciliationEffects(finishedWork);
	      flags & 4 &&
	        ((flags = finishedWork.updateQueue),
	        null !== flags &&
	          ((finishedWork.updateQueue = null),
	          attachSuspenseRetryListeners(finishedWork, flags)));
	      break;
	    case 21:
	      break;
	    default:
	      recursivelyTraverseMutationEffects(root, finishedWork),
	        commitReconciliationEffects(finishedWork);
	  }
	}
	function commitReconciliationEffects(finishedWork) {
	  var flags = finishedWork.flags;
	  if (flags & 2) {
	    try {
	      if (27 !== finishedWork.tag) {
	        a: {
	          for (var parent = finishedWork.return; null !== parent; ) {
	            if (isHostParent(parent)) {
	              var JSCompiler_inline_result = parent;
	              break a;
	            }
	            parent = parent.return;
	          }
	          throw Error(formatProdErrorMessage(160));
	        }
	        switch (JSCompiler_inline_result.tag) {
	          case 27:
	            var parent$jscomp$0 = JSCompiler_inline_result.stateNode,
	              before = getHostSibling(finishedWork);
	            insertOrAppendPlacementNode(finishedWork, before, parent$jscomp$0);
	            break;
	          case 5:
	            var parent$113 = JSCompiler_inline_result.stateNode;
	            JSCompiler_inline_result.flags & 32 &&
	              (setTextContent(parent$113, ""),
	              (JSCompiler_inline_result.flags &= -33));
	            var before$114 = getHostSibling(finishedWork);
	            insertOrAppendPlacementNode(finishedWork, before$114, parent$113);
	            break;
	          case 3:
	          case 4:
	            var parent$115 = JSCompiler_inline_result.stateNode.containerInfo,
	              before$116 = getHostSibling(finishedWork);
	            insertOrAppendPlacementNodeIntoContainer(
	              finishedWork,
	              before$116,
	              parent$115
	            );
	            break;
	          default:
	            throw Error(formatProdErrorMessage(161));
	        }
	      }
	    } catch (error) {
	      captureCommitPhaseError(finishedWork, finishedWork.return, error);
	    }
	    finishedWork.flags &= -3;
	  }
	  flags & 4096 && (finishedWork.flags &= -4097);
	}
	function recursivelyResetForms(parentFiber) {
	  if (parentFiber.subtreeFlags & 1024)
	    for (parentFiber = parentFiber.child; null !== parentFiber; ) {
	      var fiber = parentFiber;
	      recursivelyResetForms(fiber);
	      5 === fiber.tag && fiber.flags & 1024 && fiber.stateNode.reset();
	      parentFiber = parentFiber.sibling;
	    }
	}
	function recursivelyTraverseLayoutEffects(root, parentFiber) {
	  if (parentFiber.subtreeFlags & 8772)
	    for (parentFiber = parentFiber.child; null !== parentFiber; )
	      commitLayoutEffectOnFiber(root, parentFiber.alternate, parentFiber),
	        (parentFiber = parentFiber.sibling);
	}
	function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
	  for (parentFiber = parentFiber.child; null !== parentFiber; ) {
	    var finishedWork = parentFiber;
	    switch (finishedWork.tag) {
	      case 0:
	      case 11:
	      case 14:
	      case 15:
	        commitHookEffectListUnmount(4, finishedWork, finishedWork.return);
	        recursivelyTraverseDisappearLayoutEffects(finishedWork);
	        break;
	      case 1:
	        safelyDetachRef(finishedWork, finishedWork.return);
	        var instance = finishedWork.stateNode;
	        "function" === typeof instance.componentWillUnmount &&
	          safelyCallComponentWillUnmount(
	            finishedWork,
	            finishedWork.return,
	            instance
	          );
	        recursivelyTraverseDisappearLayoutEffects(finishedWork);
	        break;
	      case 26:
	      case 27:
	      case 5:
	        safelyDetachRef(finishedWork, finishedWork.return);
	        recursivelyTraverseDisappearLayoutEffects(finishedWork);
	        break;
	      case 22:
	        safelyDetachRef(finishedWork, finishedWork.return);
	        null === finishedWork.memoizedState &&
	          recursivelyTraverseDisappearLayoutEffects(finishedWork);
	        break;
	      default:
	        recursivelyTraverseDisappearLayoutEffects(finishedWork);
	    }
	    parentFiber = parentFiber.sibling;
	  }
	}
	function recursivelyTraverseReappearLayoutEffects(
	  finishedRoot$jscomp$0,
	  parentFiber,
	  includeWorkInProgressEffects
	) {
	  includeWorkInProgressEffects =
	    includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
	  for (parentFiber = parentFiber.child; null !== parentFiber; ) {
	    var current = parentFiber.alternate,
	      finishedRoot = finishedRoot$jscomp$0,
	      finishedWork = parentFiber,
	      flags = finishedWork.flags;
	    switch (finishedWork.tag) {
	      case 0:
	      case 11:
	      case 15:
	        recursivelyTraverseReappearLayoutEffects(
	          finishedRoot,
	          finishedWork,
	          includeWorkInProgressEffects
	        );
	        commitHookEffectListMount(4, finishedWork);
	        break;
	      case 1:
	        recursivelyTraverseReappearLayoutEffects(
	          finishedRoot,
	          finishedWork,
	          includeWorkInProgressEffects
	        );
	        current = finishedWork;
	        finishedRoot = current.stateNode;
	        if ("function" === typeof finishedRoot.componentDidMount)
	          try {
	            finishedRoot.componentDidMount();
	          } catch (error) {
	            captureCommitPhaseError(current, current.return, error);
	          }
	        current = finishedWork;
	        finishedRoot = current.updateQueue;
	        if (null !== finishedRoot) {
	          var instance = current.stateNode;
	          try {
	            var hiddenCallbacks = finishedRoot.shared.hiddenCallbacks;
	            if (null !== hiddenCallbacks)
	              for (
	                finishedRoot.shared.hiddenCallbacks = null, finishedRoot = 0;
	                finishedRoot < hiddenCallbacks.length;
	                finishedRoot++
	              )
	                callCallback(hiddenCallbacks[finishedRoot], instance);
	          } catch (error) {
	            captureCommitPhaseError(current, current.return, error);
	          }
	        }
	        includeWorkInProgressEffects &&
	          flags & 64 &&
	          commitClassCallbacks(finishedWork);
	        safelyAttachRef(finishedWork, finishedWork.return);
	        break;
	      case 26:
	      case 27:
	      case 5:
	        recursivelyTraverseReappearLayoutEffects(
	          finishedRoot,
	          finishedWork,
	          includeWorkInProgressEffects
	        );
	        includeWorkInProgressEffects &&
	          null === current &&
	          flags & 4 &&
	          commitHostMount(finishedWork);
	        safelyAttachRef(finishedWork, finishedWork.return);
	        break;
	      case 12:
	        recursivelyTraverseReappearLayoutEffects(
	          finishedRoot,
	          finishedWork,
	          includeWorkInProgressEffects
	        );
	        break;
	      case 13:
	        recursivelyTraverseReappearLayoutEffects(
	          finishedRoot,
	          finishedWork,
	          includeWorkInProgressEffects
	        );
	        includeWorkInProgressEffects &&
	          flags & 4 &&
	          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
	        break;
	      case 22:
	        null === finishedWork.memoizedState &&
	          recursivelyTraverseReappearLayoutEffects(
	            finishedRoot,
	            finishedWork,
	            includeWorkInProgressEffects
	          );
	        safelyAttachRef(finishedWork, finishedWork.return);
	        break;
	      default:
	        recursivelyTraverseReappearLayoutEffects(
	          finishedRoot,
	          finishedWork,
	          includeWorkInProgressEffects
	        );
	    }
	    parentFiber = parentFiber.sibling;
	  }
	}
	function commitOffscreenPassiveMountEffects(current, finishedWork) {
	  var previousCache = null;
	  null !== current &&
	    null !== current.memoizedState &&
	    null !== current.memoizedState.cachePool &&
	    (previousCache = current.memoizedState.cachePool.pool);
	  current = null;
	  null !== finishedWork.memoizedState &&
	    null !== finishedWork.memoizedState.cachePool &&
	    (current = finishedWork.memoizedState.cachePool.pool);
	  current !== previousCache &&
	    (null != current && current.refCount++,
	    null != previousCache && releaseCache(previousCache));
	}
	function commitCachePassiveMountEffect(current, finishedWork) {
	  current = null;
	  null !== finishedWork.alternate &&
	    (current = finishedWork.alternate.memoizedState.cache);
	  finishedWork = finishedWork.memoizedState.cache;
	  finishedWork !== current &&
	    (finishedWork.refCount++, null != current && releaseCache(current));
	}
	function recursivelyTraversePassiveMountEffects(
	  root,
	  parentFiber,
	  committedLanes,
	  committedTransitions
	) {
	  if (parentFiber.subtreeFlags & 10256)
	    for (parentFiber = parentFiber.child; null !== parentFiber; )
	      commitPassiveMountOnFiber(
	        root,
	        parentFiber,
	        committedLanes,
	        committedTransitions
	      ),
	        (parentFiber = parentFiber.sibling);
	}
	function commitPassiveMountOnFiber(
	  finishedRoot,
	  finishedWork,
	  committedLanes,
	  committedTransitions
	) {
	  var flags = finishedWork.flags;
	  switch (finishedWork.tag) {
	    case 0:
	    case 11:
	    case 15:
	      recursivelyTraversePassiveMountEffects(
	        finishedRoot,
	        finishedWork,
	        committedLanes,
	        committedTransitions
	      );
	      flags & 2048 && commitHookEffectListMount(9, finishedWork);
	      break;
	    case 3:
	      recursivelyTraversePassiveMountEffects(
	        finishedRoot,
	        finishedWork,
	        committedLanes,
	        committedTransitions
	      );
	      flags & 2048 &&
	        ((finishedRoot = null),
	        null !== finishedWork.alternate &&
	          (finishedRoot = finishedWork.alternate.memoizedState.cache),
	        (finishedWork = finishedWork.memoizedState.cache),
	        finishedWork !== finishedRoot &&
	          (finishedWork.refCount++,
	          null != finishedRoot && releaseCache(finishedRoot)));
	      break;
	    case 12:
	      if (flags & 2048) {
	        recursivelyTraversePassiveMountEffects(
	          finishedRoot,
	          finishedWork,
	          committedLanes,
	          committedTransitions
	        );
	        finishedRoot = finishedWork.stateNode;
	        try {
	          var _finishedWork$memoize2 = finishedWork.memoizedProps,
	            id = _finishedWork$memoize2.id,
	            onPostCommit = _finishedWork$memoize2.onPostCommit;
	          "function" === typeof onPostCommit &&
	            onPostCommit(
	              id,
	              null === finishedWork.alternate ? "mount" : "update",
	              finishedRoot.passiveEffectDuration,
	              -0
	            );
	        } catch (error) {
	          captureCommitPhaseError(finishedWork, finishedWork.return, error);
	        }
	      } else
	        recursivelyTraversePassiveMountEffects(
	          finishedRoot,
	          finishedWork,
	          committedLanes,
	          committedTransitions
	        );
	      break;
	    case 23:
	      break;
	    case 22:
	      _finishedWork$memoize2 = finishedWork.stateNode;
	      null !== finishedWork.memoizedState
	        ? _finishedWork$memoize2._visibility & 4
	          ? recursivelyTraversePassiveMountEffects(
	              finishedRoot,
	              finishedWork,
	              committedLanes,
	              committedTransitions
	            )
	          : recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork)
	        : _finishedWork$memoize2._visibility & 4
	          ? recursivelyTraversePassiveMountEffects(
	              finishedRoot,
	              finishedWork,
	              committedLanes,
	              committedTransitions
	            )
	          : ((_finishedWork$memoize2._visibility |= 4),
	            recursivelyTraverseReconnectPassiveEffects(
	              finishedRoot,
	              finishedWork,
	              committedLanes,
	              committedTransitions,
	              0 !== (finishedWork.subtreeFlags & 10256)
	            ));
	      flags & 2048 &&
	        commitOffscreenPassiveMountEffects(
	          finishedWork.alternate,
	          finishedWork
	        );
	      break;
	    case 24:
	      recursivelyTraversePassiveMountEffects(
	        finishedRoot,
	        finishedWork,
	        committedLanes,
	        committedTransitions
	      );
	      flags & 2048 &&
	        commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
	      break;
	    default:
	      recursivelyTraversePassiveMountEffects(
	        finishedRoot,
	        finishedWork,
	        committedLanes,
	        committedTransitions
	      );
	  }
	}
	function recursivelyTraverseReconnectPassiveEffects(
	  finishedRoot$jscomp$0,
	  parentFiber,
	  committedLanes$jscomp$0,
	  committedTransitions$jscomp$0,
	  includeWorkInProgressEffects
	) {
	  includeWorkInProgressEffects =
	    includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 10256);
	  for (parentFiber = parentFiber.child; null !== parentFiber; ) {
	    var finishedRoot = finishedRoot$jscomp$0,
	      finishedWork = parentFiber,
	      committedLanes = committedLanes$jscomp$0,
	      committedTransitions = committedTransitions$jscomp$0,
	      flags = finishedWork.flags;
	    switch (finishedWork.tag) {
	      case 0:
	      case 11:
	      case 15:
	        recursivelyTraverseReconnectPassiveEffects(
	          finishedRoot,
	          finishedWork,
	          committedLanes,
	          committedTransitions,
	          includeWorkInProgressEffects
	        );
	        commitHookEffectListMount(8, finishedWork);
	        break;
	      case 23:
	        break;
	      case 22:
	        var instance = finishedWork.stateNode;
	        null !== finishedWork.memoizedState
	          ? instance._visibility & 4
	            ? recursivelyTraverseReconnectPassiveEffects(
	                finishedRoot,
	                finishedWork,
	                committedLanes,
	                committedTransitions,
	                includeWorkInProgressEffects
	              )
	            : recursivelyTraverseAtomicPassiveEffects(
	                finishedRoot,
	                finishedWork
	              )
	          : ((instance._visibility |= 4),
	            recursivelyTraverseReconnectPassiveEffects(
	              finishedRoot,
	              finishedWork,
	              committedLanes,
	              committedTransitions,
	              includeWorkInProgressEffects
	            ));
	        includeWorkInProgressEffects &&
	          flags & 2048 &&
	          commitOffscreenPassiveMountEffects(
	            finishedWork.alternate,
	            finishedWork
	          );
	        break;
	      case 24:
	        recursivelyTraverseReconnectPassiveEffects(
	          finishedRoot,
	          finishedWork,
	          committedLanes,
	          committedTransitions,
	          includeWorkInProgressEffects
	        );
	        includeWorkInProgressEffects &&
	          flags & 2048 &&
	          commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
	        break;
	      default:
	        recursivelyTraverseReconnectPassiveEffects(
	          finishedRoot,
	          finishedWork,
	          committedLanes,
	          committedTransitions,
	          includeWorkInProgressEffects
	        );
	    }
	    parentFiber = parentFiber.sibling;
	  }
	}
	function recursivelyTraverseAtomicPassiveEffects(
	  finishedRoot$jscomp$0,
	  parentFiber
	) {
	  if (parentFiber.subtreeFlags & 10256)
	    for (parentFiber = parentFiber.child; null !== parentFiber; ) {
	      var finishedRoot = finishedRoot$jscomp$0,
	        finishedWork = parentFiber,
	        flags = finishedWork.flags;
	      switch (finishedWork.tag) {
	        case 22:
	          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
	          flags & 2048 &&
	            commitOffscreenPassiveMountEffects(
	              finishedWork.alternate,
	              finishedWork
	            );
	          break;
	        case 24:
	          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
	          flags & 2048 &&
	            commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
	          break;
	        default:
	          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
	      }
	      parentFiber = parentFiber.sibling;
	    }
	}
	var suspenseyCommitFlag = 8192;
	function recursivelyAccumulateSuspenseyCommit(parentFiber) {
	  if (parentFiber.subtreeFlags & suspenseyCommitFlag)
	    for (parentFiber = parentFiber.child; null !== parentFiber; )
	      accumulateSuspenseyCommitOnFiber(parentFiber),
	        (parentFiber = parentFiber.sibling);
	}
	function accumulateSuspenseyCommitOnFiber(fiber) {
	  switch (fiber.tag) {
	    case 26:
	      recursivelyAccumulateSuspenseyCommit(fiber);
	      fiber.flags & suspenseyCommitFlag &&
	        null !== fiber.memoizedState &&
	        suspendResource(
	          currentHoistableRoot,
	          fiber.memoizedState,
	          fiber.memoizedProps
	        );
	      break;
	    case 5:
	      recursivelyAccumulateSuspenseyCommit(fiber);
	      break;
	    case 3:
	    case 4:
	      var previousHoistableRoot = currentHoistableRoot;
	      currentHoistableRoot = getHoistableRoot(fiber.stateNode.containerInfo);
	      recursivelyAccumulateSuspenseyCommit(fiber);
	      currentHoistableRoot = previousHoistableRoot;
	      break;
	    case 22:
	      null === fiber.memoizedState &&
	        ((previousHoistableRoot = fiber.alternate),
	        null !== previousHoistableRoot &&
	        null !== previousHoistableRoot.memoizedState
	          ? ((previousHoistableRoot = suspenseyCommitFlag),
	            (suspenseyCommitFlag = 16777216),
	            recursivelyAccumulateSuspenseyCommit(fiber),
	            (suspenseyCommitFlag = previousHoistableRoot))
	          : recursivelyAccumulateSuspenseyCommit(fiber));
	      break;
	    default:
	      recursivelyAccumulateSuspenseyCommit(fiber);
	  }
	}
	function detachAlternateSiblings(parentFiber) {
	  var previousFiber = parentFiber.alternate;
	  if (
	    null !== previousFiber &&
	    ((parentFiber = previousFiber.child), null !== parentFiber)
	  ) {
	    previousFiber.child = null;
	    do
	      (previousFiber = parentFiber.sibling),
	        (parentFiber.sibling = null),
	        (parentFiber = previousFiber);
	    while (null !== parentFiber);
	  }
	}
	function recursivelyTraversePassiveUnmountEffects(parentFiber) {
	  var deletions = parentFiber.deletions;
	  if (0 !== (parentFiber.flags & 16)) {
	    if (null !== deletions)
	      for (var i = 0; i < deletions.length; i++) {
	        var childToDelete = deletions[i];
	        nextEffect = childToDelete;
	        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
	          childToDelete,
	          parentFiber
	        );
	      }
	    detachAlternateSiblings(parentFiber);
	  }
	  if (parentFiber.subtreeFlags & 10256)
	    for (parentFiber = parentFiber.child; null !== parentFiber; )
	      commitPassiveUnmountOnFiber(parentFiber),
	        (parentFiber = parentFiber.sibling);
	}
	function commitPassiveUnmountOnFiber(finishedWork) {
	  switch (finishedWork.tag) {
	    case 0:
	    case 11:
	    case 15:
	      recursivelyTraversePassiveUnmountEffects(finishedWork);
	      finishedWork.flags & 2048 &&
	        commitHookEffectListUnmount(9, finishedWork, finishedWork.return);
	      break;
	    case 3:
	      recursivelyTraversePassiveUnmountEffects(finishedWork);
	      break;
	    case 12:
	      recursivelyTraversePassiveUnmountEffects(finishedWork);
	      break;
	    case 22:
	      var instance = finishedWork.stateNode;
	      null !== finishedWork.memoizedState &&
	      instance._visibility & 4 &&
	      (null === finishedWork.return || 13 !== finishedWork.return.tag)
	        ? ((instance._visibility &= -5),
	          recursivelyTraverseDisconnectPassiveEffects(finishedWork))
	        : recursivelyTraversePassiveUnmountEffects(finishedWork);
	      break;
	    default:
	      recursivelyTraversePassiveUnmountEffects(finishedWork);
	  }
	}
	function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
	  var deletions = parentFiber.deletions;
	  if (0 !== (parentFiber.flags & 16)) {
	    if (null !== deletions)
	      for (var i = 0; i < deletions.length; i++) {
	        var childToDelete = deletions[i];
	        nextEffect = childToDelete;
	        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
	          childToDelete,
	          parentFiber
	        );
	      }
	    detachAlternateSiblings(parentFiber);
	  }
	  for (parentFiber = parentFiber.child; null !== parentFiber; ) {
	    deletions = parentFiber;
	    switch (deletions.tag) {
	      case 0:
	      case 11:
	      case 15:
	        commitHookEffectListUnmount(8, deletions, deletions.return);
	        recursivelyTraverseDisconnectPassiveEffects(deletions);
	        break;
	      case 22:
	        i = deletions.stateNode;
	        i._visibility & 4 &&
	          ((i._visibility &= -5),
	          recursivelyTraverseDisconnectPassiveEffects(deletions));
	        break;
	      default:
	        recursivelyTraverseDisconnectPassiveEffects(deletions);
	    }
	    parentFiber = parentFiber.sibling;
	  }
	}
	function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
	  deletedSubtreeRoot,
	  nearestMountedAncestor
	) {
	  for (; null !== nextEffect; ) {
	    var fiber = nextEffect;
	    switch (fiber.tag) {
	      case 0:
	      case 11:
	      case 15:
	        commitHookEffectListUnmount(8, fiber, nearestMountedAncestor);
	        break;
	      case 23:
	      case 22:
	        if (
	          null !== fiber.memoizedState &&
	          null !== fiber.memoizedState.cachePool
	        ) {
	          var cache = fiber.memoizedState.cachePool.pool;
	          null != cache && cache.refCount++;
	        }
	        break;
	      case 24:
	        releaseCache(fiber.memoizedState.cache);
	    }
	    cache = fiber.child;
	    if (null !== cache) (cache.return = fiber), (nextEffect = cache);
	    else
	      a: for (fiber = deletedSubtreeRoot; null !== nextEffect; ) {
	        cache = nextEffect;
	        var sibling = cache.sibling,
	          returnFiber = cache.return;
	        detachFiberAfterEffects(cache);
	        if (cache === fiber) {
	          nextEffect = null;
	          break a;
	        }
	        if (null !== sibling) {
	          sibling.return = returnFiber;
	          nextEffect = sibling;
	          break a;
	        }
	        nextEffect = returnFiber;
	      }
	  }
	}
	function FiberNode(tag, pendingProps, key, mode) {
	  this.tag = tag;
	  this.key = key;
	  this.sibling =
	    this.child =
	    this.return =
	    this.stateNode =
	    this.type =
	    this.elementType =
	      null;
	  this.index = 0;
	  this.refCleanup = this.ref = null;
	  this.pendingProps = pendingProps;
	  this.dependencies =
	    this.memoizedState =
	    this.updateQueue =
	    this.memoizedProps =
	      null;
	  this.mode = mode;
	  this.subtreeFlags = this.flags = 0;
	  this.deletions = null;
	  this.childLanes = this.lanes = 0;
	  this.alternate = null;
	}
	function createFiberImplClass(tag, pendingProps, key, mode) {
	  return new FiberNode(tag, pendingProps, key, mode);
	}
	function shouldConstruct(Component) {
	  Component = Component.prototype;
	  return !(!Component || !Component.isReactComponent);
	}
	function createWorkInProgress(current, pendingProps) {
	  var workInProgress = current.alternate;
	  null === workInProgress
	    ? ((workInProgress = createFiberImplClass(
	        current.tag,
	        pendingProps,
	        current.key,
	        current.mode
	      )),
	      (workInProgress.elementType = current.elementType),
	      (workInProgress.type = current.type),
	      (workInProgress.stateNode = current.stateNode),
	      (workInProgress.alternate = current),
	      (current.alternate = workInProgress))
	    : ((workInProgress.pendingProps = pendingProps),
	      (workInProgress.type = current.type),
	      (workInProgress.flags = 0),
	      (workInProgress.subtreeFlags = 0),
	      (workInProgress.deletions = null));
	  workInProgress.flags = current.flags & 31457280;
	  workInProgress.childLanes = current.childLanes;
	  workInProgress.lanes = current.lanes;
	  workInProgress.child = current.child;
	  workInProgress.memoizedProps = current.memoizedProps;
	  workInProgress.memoizedState = current.memoizedState;
	  workInProgress.updateQueue = current.updateQueue;
	  pendingProps = current.dependencies;
	  workInProgress.dependencies =
	    null === pendingProps
	      ? null
	      : { lanes: pendingProps.lanes, firstContext: pendingProps.firstContext };
	  workInProgress.sibling = current.sibling;
	  workInProgress.index = current.index;
	  workInProgress.ref = current.ref;
	  workInProgress.refCleanup = current.refCleanup;
	  return workInProgress;
	}
	function resetWorkInProgress(workInProgress, renderLanes) {
	  workInProgress.flags &= 31457282;
	  var current = workInProgress.alternate;
	  null === current
	    ? ((workInProgress.childLanes = 0),
	      (workInProgress.lanes = renderLanes),
	      (workInProgress.child = null),
	      (workInProgress.subtreeFlags = 0),
	      (workInProgress.memoizedProps = null),
	      (workInProgress.memoizedState = null),
	      (workInProgress.updateQueue = null),
	      (workInProgress.dependencies = null),
	      (workInProgress.stateNode = null))
	    : ((workInProgress.childLanes = current.childLanes),
	      (workInProgress.lanes = current.lanes),
	      (workInProgress.child = current.child),
	      (workInProgress.subtreeFlags = 0),
	      (workInProgress.deletions = null),
	      (workInProgress.memoizedProps = current.memoizedProps),
	      (workInProgress.memoizedState = current.memoizedState),
	      (workInProgress.updateQueue = current.updateQueue),
	      (workInProgress.type = current.type),
	      (renderLanes = current.dependencies),
	      (workInProgress.dependencies =
	        null === renderLanes
	          ? null
	          : {
	              lanes: renderLanes.lanes,
	              firstContext: renderLanes.firstContext
	            }));
	  return workInProgress;
	}
	function createFiberFromTypeAndProps(
	  type,
	  key,
	  pendingProps,
	  owner,
	  mode,
	  lanes
	) {
	  var fiberTag = 0;
	  owner = type;
	  if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);
	  else if ("string" === typeof type)
	    fiberTag = isHostHoistableType(
	      type,
	      pendingProps,
	      contextStackCursor.current
	    )
	      ? 26
	      : "html" === type || "head" === type || "body" === type
	        ? 27
	        : 5;
	  else
	    a: switch (type) {
	      case REACT_FRAGMENT_TYPE:
	        return createFiberFromFragment(pendingProps.children, mode, lanes, key);
	      case REACT_STRICT_MODE_TYPE:
	        fiberTag = 8;
	        mode |= 24;
	        break;
	      case REACT_PROFILER_TYPE:
	        return (
	          (type = createFiberImplClass(12, pendingProps, key, mode | 2)),
	          (type.elementType = REACT_PROFILER_TYPE),
	          (type.lanes = lanes),
	          type
	        );
	      case REACT_SUSPENSE_TYPE:
	        return (
	          (type = createFiberImplClass(13, pendingProps, key, mode)),
	          (type.elementType = REACT_SUSPENSE_TYPE),
	          (type.lanes = lanes),
	          type
	        );
	      case REACT_SUSPENSE_LIST_TYPE:
	        return (
	          (type = createFiberImplClass(19, pendingProps, key, mode)),
	          (type.elementType = REACT_SUSPENSE_LIST_TYPE),
	          (type.lanes = lanes),
	          type
	        );
	      case REACT_OFFSCREEN_TYPE:
	        return createFiberFromOffscreen(pendingProps, mode, lanes, key);
	      default:
	        if ("object" === typeof type && null !== type)
	          switch (type.$$typeof) {
	            case REACT_PROVIDER_TYPE:
	            case REACT_CONTEXT_TYPE:
	              fiberTag = 10;
	              break a;
	            case REACT_CONSUMER_TYPE:
	              fiberTag = 9;
	              break a;
	            case REACT_FORWARD_REF_TYPE:
	              fiberTag = 11;
	              break a;
	            case REACT_MEMO_TYPE:
	              fiberTag = 14;
	              break a;
	            case REACT_LAZY_TYPE:
	              fiberTag = 16;
	              owner = null;
	              break a;
	          }
	        fiberTag = 29;
	        pendingProps = Error(
	          formatProdErrorMessage(130, null === type ? "null" : typeof type, "")
	        );
	        owner = null;
	    }
	  key = createFiberImplClass(fiberTag, pendingProps, key, mode);
	  key.elementType = type;
	  key.type = owner;
	  key.lanes = lanes;
	  return key;
	}
	function createFiberFromFragment(elements, mode, lanes, key) {
	  elements = createFiberImplClass(7, elements, key, mode);
	  elements.lanes = lanes;
	  return elements;
	}
	function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
	  pendingProps = createFiberImplClass(22, pendingProps, key, mode);
	  pendingProps.elementType = REACT_OFFSCREEN_TYPE;
	  pendingProps.lanes = lanes;
	  var primaryChildInstance = {
	    _visibility: 1,
	    _pendingVisibility: 1,
	    _pendingMarkers: null,
	    _retryCache: null,
	    _transitions: null,
	    _current: null,
	    detach: function () {
	      var fiber = primaryChildInstance._current;
	      if (null === fiber) throw Error(formatProdErrorMessage(456));
	      if (0 === (primaryChildInstance._pendingVisibility & 2)) {
	        var root = enqueueConcurrentRenderForLane(fiber, 2);
	        null !== root &&
	          ((primaryChildInstance._pendingVisibility |= 2),
	          scheduleUpdateOnFiber(root, fiber, 2));
	      }
	    },
	    attach: function () {
	      var fiber = primaryChildInstance._current;
	      if (null === fiber) throw Error(formatProdErrorMessage(456));
	      if (0 !== (primaryChildInstance._pendingVisibility & 2)) {
	        var root = enqueueConcurrentRenderForLane(fiber, 2);
	        null !== root &&
	          ((primaryChildInstance._pendingVisibility &= -3),
	          scheduleUpdateOnFiber(root, fiber, 2));
	      }
	    }
	  };
	  pendingProps.stateNode = primaryChildInstance;
	  return pendingProps;
	}
	function createFiberFromText(content, mode, lanes) {
	  content = createFiberImplClass(6, content, null, mode);
	  content.lanes = lanes;
	  return content;
	}
	function createFiberFromPortal(portal, mode, lanes) {
	  mode = createFiberImplClass(
	    4,
	    null !== portal.children ? portal.children : [],
	    portal.key,
	    mode
	  );
	  mode.lanes = lanes;
	  mode.stateNode = {
	    containerInfo: portal.containerInfo,
	    pendingChildren: null,
	    implementation: portal.implementation
	  };
	  return mode;
	}
	function markUpdate(workInProgress) {
	  workInProgress.flags |= 4;
	}
	function preloadResourceAndSuspendIfNeeded(workInProgress, resource) {
	  if ("stylesheet" !== resource.type || 0 !== (resource.state.loading & 4))
	    workInProgress.flags &= -16777217;
	  else if (((workInProgress.flags |= 16777216), !preloadResource(resource))) {
	    resource = suspenseHandlerStackCursor.current;
	    if (
	      null !== resource &&
	      ((workInProgressRootRenderLanes & 4194176) ===
	      workInProgressRootRenderLanes
	        ? null !== shellBoundary
	        : ((workInProgressRootRenderLanes & 62914560) !==
	            workInProgressRootRenderLanes &&
	            0 === (workInProgressRootRenderLanes & 536870912)) ||
	          resource !== shellBoundary)
	    )
	      throw (
	        ((suspendedThenable = noopSuspenseyCommitThenable),
	        SuspenseyCommitException)
	      );
	    workInProgress.flags |= 8192;
	  }
	}
	function scheduleRetryEffect(workInProgress, retryQueue) {
	  null !== retryQueue && (workInProgress.flags |= 4);
	  workInProgress.flags & 16384 &&
	    ((retryQueue =
	      22 !== workInProgress.tag ? claimNextRetryLane() : 536870912),
	    (workInProgress.lanes |= retryQueue),
	    (workInProgressSuspendedRetryLanes |= retryQueue));
	}
	function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
	  if (!isHydrating)
	    switch (renderState.tailMode) {
	      case "hidden":
	        hasRenderedATailFallback = renderState.tail;
	        for (var lastTailNode = null; null !== hasRenderedATailFallback; )
	          null !== hasRenderedATailFallback.alternate &&
	            (lastTailNode = hasRenderedATailFallback),
	            (hasRenderedATailFallback = hasRenderedATailFallback.sibling);
	        null === lastTailNode
	          ? (renderState.tail = null)
	          : (lastTailNode.sibling = null);
	        break;
	      case "collapsed":
	        lastTailNode = renderState.tail;
	        for (var lastTailNode$131 = null; null !== lastTailNode; )
	          null !== lastTailNode.alternate && (lastTailNode$131 = lastTailNode),
	            (lastTailNode = lastTailNode.sibling);
	        null === lastTailNode$131
	          ? hasRenderedATailFallback || null === renderState.tail
	            ? (renderState.tail = null)
	            : (renderState.tail.sibling = null)
	          : (lastTailNode$131.sibling = null);
	    }
	}
	function bubbleProperties(completedWork) {
	  var didBailout =
	      null !== completedWork.alternate &&
	      completedWork.alternate.child === completedWork.child,
	    newChildLanes = 0,
	    subtreeFlags = 0;
	  if (didBailout)
	    for (var child$132 = completedWork.child; null !== child$132; )
	      (newChildLanes |= child$132.lanes | child$132.childLanes),
	        (subtreeFlags |= child$132.subtreeFlags & 31457280),
	        (subtreeFlags |= child$132.flags & 31457280),
	        (child$132.return = completedWork),
	        (child$132 = child$132.sibling);
	  else
	    for (child$132 = completedWork.child; null !== child$132; )
	      (newChildLanes |= child$132.lanes | child$132.childLanes),
	        (subtreeFlags |= child$132.subtreeFlags),
	        (subtreeFlags |= child$132.flags),
	        (child$132.return = completedWork),
	        (child$132 = child$132.sibling);
	  completedWork.subtreeFlags |= subtreeFlags;
	  completedWork.childLanes = newChildLanes;
	  return didBailout;
	}
	function completeWork(current, workInProgress, renderLanes) {
	  var newProps = workInProgress.pendingProps;
	  popTreeContext(workInProgress);
	  switch (workInProgress.tag) {
	    case 16:
	    case 15:
	    case 0:
	    case 11:
	    case 7:
	    case 8:
	    case 12:
	    case 9:
	    case 14:
	      return bubbleProperties(workInProgress), null;
	    case 1:
	      return bubbleProperties(workInProgress), null;
	    case 3:
	      renderLanes = workInProgress.stateNode;
	      newProps = null;
	      null !== current && (newProps = current.memoizedState.cache);
	      workInProgress.memoizedState.cache !== newProps &&
	        (workInProgress.flags |= 2048);
	      popProvider(CacheContext);
	      popHostContainer();
	      renderLanes.pendingContext &&
	        ((renderLanes.context = renderLanes.pendingContext),
	        (renderLanes.pendingContext = null));
	      if (null === current || null === current.child)
	        popHydrationState(workInProgress)
	          ? markUpdate(workInProgress)
	          : null === current ||
	            (current.memoizedState.isDehydrated &&
	              0 === (workInProgress.flags & 256)) ||
	            ((workInProgress.flags |= 1024),
	            null !== hydrationErrors &&
	              (queueRecoverableErrors(hydrationErrors),
	              (hydrationErrors = null)));
	      bubbleProperties(workInProgress);
	      return null;
	    case 26:
	      return (
	        (renderLanes = workInProgress.memoizedState),
	        null === current
	          ? (markUpdate(workInProgress),
	            null !== renderLanes
	              ? (bubbleProperties(workInProgress),
	                preloadResourceAndSuspendIfNeeded(workInProgress, renderLanes))
	              : (bubbleProperties(workInProgress),
	                (workInProgress.flags &= -16777217)))
	          : renderLanes
	            ? renderLanes !== current.memoizedState
	              ? (markUpdate(workInProgress),
	                bubbleProperties(workInProgress),
	                preloadResourceAndSuspendIfNeeded(workInProgress, renderLanes))
	              : (bubbleProperties(workInProgress),
	                (workInProgress.flags &= -16777217))
	            : (current.memoizedProps !== newProps && markUpdate(workInProgress),
	              bubbleProperties(workInProgress),
	              (workInProgress.flags &= -16777217)),
	        null
	      );
	    case 27:
	      popHostContext(workInProgress);
	      renderLanes = rootInstanceStackCursor.current;
	      var type = workInProgress.type;
	      if (null !== current && null != workInProgress.stateNode)
	        current.memoizedProps !== newProps && markUpdate(workInProgress);
	      else {
	        if (!newProps) {
	          if (null === workInProgress.stateNode)
	            throw Error(formatProdErrorMessage(166));
	          bubbleProperties(workInProgress);
	          return null;
	        }
	        current = contextStackCursor.current;
	        popHydrationState(workInProgress)
	          ? prepareToHydrateHostInstance(workInProgress)
	          : ((current = resolveSingletonInstance(type, newProps, renderLanes)),
	            (workInProgress.stateNode = current),
	            markUpdate(workInProgress));
	      }
	      bubbleProperties(workInProgress);
	      return null;
	    case 5:
	      popHostContext(workInProgress);
	      renderLanes = workInProgress.type;
	      if (null !== current && null != workInProgress.stateNode)
	        current.memoizedProps !== newProps && markUpdate(workInProgress);
	      else {
	        if (!newProps) {
	          if (null === workInProgress.stateNode)
	            throw Error(formatProdErrorMessage(166));
	          bubbleProperties(workInProgress);
	          return null;
	        }
	        current = contextStackCursor.current;
	        if (popHydrationState(workInProgress))
	          prepareToHydrateHostInstance(workInProgress);
	        else {
	          type = getOwnerDocumentFromRootContainer(
	            rootInstanceStackCursor.current
	          );
	          switch (current) {
	            case 1:
	              current = type.createElementNS(
	                "http://www.w3.org/2000/svg",
	                renderLanes
	              );
	              break;
	            case 2:
	              current = type.createElementNS(
	                "http://www.w3.org/1998/Math/MathML",
	                renderLanes
	              );
	              break;
	            default:
	              switch (renderLanes) {
	                case "svg":
	                  current = type.createElementNS(
	                    "http://www.w3.org/2000/svg",
	                    renderLanes
	                  );
	                  break;
	                case "math":
	                  current = type.createElementNS(
	                    "http://www.w3.org/1998/Math/MathML",
	                    renderLanes
	                  );
	                  break;
	                case "script":
	                  current = type.createElement("div");
	                  current.innerHTML = "<script>\x3c/script>";
	                  current = current.removeChild(current.firstChild);
	                  break;
	                case "select":
	                  current =
	                    "string" === typeof newProps.is
	                      ? type.createElement("select", { is: newProps.is })
	                      : type.createElement("select");
	                  newProps.multiple
	                    ? (current.multiple = true)
	                    : newProps.size && (current.size = newProps.size);
	                  break;
	                default:
	                  current =
	                    "string" === typeof newProps.is
	                      ? type.createElement(renderLanes, { is: newProps.is })
	                      : type.createElement(renderLanes);
	              }
	          }
	          current[internalInstanceKey] = workInProgress;
	          current[internalPropsKey] = newProps;
	          a: for (type = workInProgress.child; null !== type; ) {
	            if (5 === type.tag || 6 === type.tag)
	              current.appendChild(type.stateNode);
	            else if (4 !== type.tag && 27 !== type.tag && null !== type.child) {
	              type.child.return = type;
	              type = type.child;
	              continue;
	            }
	            if (type === workInProgress) break a;
	            for (; null === type.sibling; ) {
	              if (null === type.return || type.return === workInProgress)
	                break a;
	              type = type.return;
	            }
	            type.sibling.return = type.return;
	            type = type.sibling;
	          }
	          workInProgress.stateNode = current;
	          a: switch (
	            (setInitialProperties(current, renderLanes, newProps), renderLanes)
	          ) {
	            case "button":
	            case "input":
	            case "select":
	            case "textarea":
	              current = !!newProps.autoFocus;
	              break a;
	            case "img":
	              current = true;
	              break a;
	            default:
	              current = false;
	          }
	          current && markUpdate(workInProgress);
	        }
	      }
	      bubbleProperties(workInProgress);
	      workInProgress.flags &= -16777217;
	      return null;
	    case 6:
	      if (current && null != workInProgress.stateNode)
	        current.memoizedProps !== newProps && markUpdate(workInProgress);
	      else {
	        if ("string" !== typeof newProps && null === workInProgress.stateNode)
	          throw Error(formatProdErrorMessage(166));
	        current = rootInstanceStackCursor.current;
	        if (popHydrationState(workInProgress)) {
	          current = workInProgress.stateNode;
	          renderLanes = workInProgress.memoizedProps;
	          newProps = null;
	          type = hydrationParentFiber;
	          if (null !== type)
	            switch (type.tag) {
	              case 27:
	              case 5:
	                newProps = type.memoizedProps;
	            }
	          current[internalInstanceKey] = workInProgress;
	          current =
	            current.nodeValue === renderLanes ||
	            (null !== newProps && true === newProps.suppressHydrationWarning) ||
	            checkForUnmatchedText(current.nodeValue, renderLanes)
	              ? true
	              : false;
	          current || throwOnHydrationMismatch(workInProgress);
	        } else
	          (current =
	            getOwnerDocumentFromRootContainer(current).createTextNode(
	              newProps
	            )),
	            (current[internalInstanceKey] = workInProgress),
	            (workInProgress.stateNode = current);
	      }
	      bubbleProperties(workInProgress);
	      return null;
	    case 13:
	      newProps = workInProgress.memoizedState;
	      if (
	        null === current ||
	        (null !== current.memoizedState &&
	          null !== current.memoizedState.dehydrated)
	      ) {
	        type = popHydrationState(workInProgress);
	        if (null !== newProps && null !== newProps.dehydrated) {
	          if (null === current) {
	            if (!type) throw Error(formatProdErrorMessage(318));
	            type = workInProgress.memoizedState;
	            type = null !== type ? type.dehydrated : null;
	            if (!type) throw Error(formatProdErrorMessage(317));
	            type[internalInstanceKey] = workInProgress;
	          } else
	            resetHydrationState(),
	              0 === (workInProgress.flags & 128) &&
	                (workInProgress.memoizedState = null),
	              (workInProgress.flags |= 4);
	          bubbleProperties(workInProgress);
	          type = false;
	        } else
	          null !== hydrationErrors &&
	            (queueRecoverableErrors(hydrationErrors), (hydrationErrors = null)),
	            (type = true);
	        if (!type) {
	          if (workInProgress.flags & 256)
	            return popSuspenseHandler(workInProgress), workInProgress;
	          popSuspenseHandler(workInProgress);
	          return null;
	        }
	      }
	      popSuspenseHandler(workInProgress);
	      if (0 !== (workInProgress.flags & 128))
	        return (workInProgress.lanes = renderLanes), workInProgress;
	      renderLanes = null !== newProps;
	      current = null !== current && null !== current.memoizedState;
	      if (renderLanes) {
	        newProps = workInProgress.child;
	        type = null;
	        null !== newProps.alternate &&
	          null !== newProps.alternate.memoizedState &&
	          null !== newProps.alternate.memoizedState.cachePool &&
	          (type = newProps.alternate.memoizedState.cachePool.pool);
	        var cache$144 = null;
	        null !== newProps.memoizedState &&
	          null !== newProps.memoizedState.cachePool &&
	          (cache$144 = newProps.memoizedState.cachePool.pool);
	        cache$144 !== type && (newProps.flags |= 2048);
	      }
	      renderLanes !== current &&
	        renderLanes &&
	        (workInProgress.child.flags |= 8192);
	      scheduleRetryEffect(workInProgress, workInProgress.updateQueue);
	      bubbleProperties(workInProgress);
	      return null;
	    case 4:
	      return (
	        popHostContainer(),
	        null === current &&
	          listenToAllSupportedEvents(workInProgress.stateNode.containerInfo),
	        bubbleProperties(workInProgress),
	        null
	      );
	    case 10:
	      return (
	        popProvider(workInProgress.type), bubbleProperties(workInProgress), null
	      );
	    case 19:
	      pop(suspenseStackCursor);
	      type = workInProgress.memoizedState;
	      if (null === type) return bubbleProperties(workInProgress), null;
	      newProps = 0 !== (workInProgress.flags & 128);
	      cache$144 = type.rendering;
	      if (null === cache$144)
	        if (newProps) cutOffTailIfNeeded(type, false);
	        else {
	          if (
	            0 !== workInProgressRootExitStatus ||
	            (null !== current && 0 !== (current.flags & 128))
	          )
	            for (current = workInProgress.child; null !== current; ) {
	              cache$144 = findFirstSuspended(current);
	              if (null !== cache$144) {
	                workInProgress.flags |= 128;
	                cutOffTailIfNeeded(type, false);
	                current = cache$144.updateQueue;
	                workInProgress.updateQueue = current;
	                scheduleRetryEffect(workInProgress, current);
	                workInProgress.subtreeFlags = 0;
	                current = renderLanes;
	                for (renderLanes = workInProgress.child; null !== renderLanes; )
	                  resetWorkInProgress(renderLanes, current),
	                    (renderLanes = renderLanes.sibling);
	                push(
	                  suspenseStackCursor,
	                  (suspenseStackCursor.current & 1) | 2
	                );
	                return workInProgress.child;
	              }
	              current = current.sibling;
	            }
	          null !== type.tail &&
	            now() > workInProgressRootRenderTargetTime &&
	            ((workInProgress.flags |= 128),
	            (newProps = true),
	            cutOffTailIfNeeded(type, false),
	            (workInProgress.lanes = 4194304));
	        }
	      else {
	        if (!newProps)
	          if (((current = findFirstSuspended(cache$144)), null !== current)) {
	            if (
	              ((workInProgress.flags |= 128),
	              (newProps = true),
	              (current = current.updateQueue),
	              (workInProgress.updateQueue = current),
	              scheduleRetryEffect(workInProgress, current),
	              cutOffTailIfNeeded(type, true),
	              null === type.tail &&
	                "hidden" === type.tailMode &&
	                !cache$144.alternate &&
	                !isHydrating)
	            )
	              return bubbleProperties(workInProgress), null;
	          } else
	            2 * now() - type.renderingStartTime >
	              workInProgressRootRenderTargetTime &&
	              536870912 !== renderLanes &&
	              ((workInProgress.flags |= 128),
	              (newProps = true),
	              cutOffTailIfNeeded(type, false),
	              (workInProgress.lanes = 4194304));
	        type.isBackwards
	          ? ((cache$144.sibling = workInProgress.child),
	            (workInProgress.child = cache$144))
	          : ((current = type.last),
	            null !== current
	              ? (current.sibling = cache$144)
	              : (workInProgress.child = cache$144),
	            (type.last = cache$144));
	      }
	      if (null !== type.tail)
	        return (
	          (workInProgress = type.tail),
	          (type.rendering = workInProgress),
	          (type.tail = workInProgress.sibling),
	          (type.renderingStartTime = now()),
	          (workInProgress.sibling = null),
	          (current = suspenseStackCursor.current),
	          push(suspenseStackCursor, newProps ? (current & 1) | 2 : current & 1),
	          workInProgress
	        );
	      bubbleProperties(workInProgress);
	      return null;
	    case 22:
	    case 23:
	      return (
	        popSuspenseHandler(workInProgress),
	        popHiddenContext(),
	        (newProps = null !== workInProgress.memoizedState),
	        null !== current
	          ? (null !== current.memoizedState) !== newProps &&
	            (workInProgress.flags |= 8192)
	          : newProps && (workInProgress.flags |= 8192),
	        newProps
	          ? 0 !== (renderLanes & 536870912) &&
	            0 === (workInProgress.flags & 128) &&
	            (bubbleProperties(workInProgress),
	            workInProgress.subtreeFlags & 6 && (workInProgress.flags |= 8192))
	          : bubbleProperties(workInProgress),
	        (renderLanes = workInProgress.updateQueue),
	        null !== renderLanes &&
	          scheduleRetryEffect(workInProgress, renderLanes.retryQueue),
	        (renderLanes = null),
	        null !== current &&
	          null !== current.memoizedState &&
	          null !== current.memoizedState.cachePool &&
	          (renderLanes = current.memoizedState.cachePool.pool),
	        (newProps = null),
	        null !== workInProgress.memoizedState &&
	          null !== workInProgress.memoizedState.cachePool &&
	          (newProps = workInProgress.memoizedState.cachePool.pool),
	        newProps !== renderLanes && (workInProgress.flags |= 2048),
	        null !== current && pop(resumedCache),
	        null
	      );
	    case 24:
	      return (
	        (renderLanes = null),
	        null !== current && (renderLanes = current.memoizedState.cache),
	        workInProgress.memoizedState.cache !== renderLanes &&
	          (workInProgress.flags |= 2048),
	        popProvider(CacheContext),
	        bubbleProperties(workInProgress),
	        null
	      );
	    case 25:
	      return null;
	  }
	  throw Error(formatProdErrorMessage(156, workInProgress.tag));
	}
	function unwindWork(current, workInProgress) {
	  popTreeContext(workInProgress);
	  switch (workInProgress.tag) {
	    case 1:
	      return (
	        (current = workInProgress.flags),
	        current & 65536
	          ? ((workInProgress.flags = (current & -65537) | 128), workInProgress)
	          : null
	      );
	    case 3:
	      return (
	        popProvider(CacheContext),
	        popHostContainer(),
	        (current = workInProgress.flags),
	        0 !== (current & 65536) && 0 === (current & 128)
	          ? ((workInProgress.flags = (current & -65537) | 128), workInProgress)
	          : null
	      );
	    case 26:
	    case 27:
	    case 5:
	      return popHostContext(workInProgress), null;
	    case 13:
	      popSuspenseHandler(workInProgress);
	      current = workInProgress.memoizedState;
	      if (null !== current && null !== current.dehydrated) {
	        if (null === workInProgress.alternate)
	          throw Error(formatProdErrorMessage(340));
	        resetHydrationState();
	      }
	      current = workInProgress.flags;
	      return current & 65536
	        ? ((workInProgress.flags = (current & -65537) | 128), workInProgress)
	        : null;
	    case 19:
	      return pop(suspenseStackCursor), null;
	    case 4:
	      return popHostContainer(), null;
	    case 10:
	      return popProvider(workInProgress.type), null;
	    case 22:
	    case 23:
	      return (
	        popSuspenseHandler(workInProgress),
	        popHiddenContext(),
	        null !== current && pop(resumedCache),
	        (current = workInProgress.flags),
	        current & 65536
	          ? ((workInProgress.flags = (current & -65537) | 128), workInProgress)
	          : null
	      );
	    case 24:
	      return popProvider(CacheContext), null;
	    case 25:
	      return null;
	    default:
	      return null;
	  }
	}
	function unwindInterruptedWork(current, interruptedWork) {
	  popTreeContext(interruptedWork);
	  switch (interruptedWork.tag) {
	    case 3:
	      popProvider(CacheContext);
	      popHostContainer();
	      break;
	    case 26:
	    case 27:
	    case 5:
	      popHostContext(interruptedWork);
	      break;
	    case 4:
	      popHostContainer();
	      break;
	    case 13:
	      popSuspenseHandler(interruptedWork);
	      break;
	    case 19:
	      pop(suspenseStackCursor);
	      break;
	    case 10:
	      popProvider(interruptedWork.type);
	      break;
	    case 22:
	    case 23:
	      popSuspenseHandler(interruptedWork);
	      popHiddenContext();
	      null !== current && pop(resumedCache);
	      break;
	    case 24:
	      popProvider(CacheContext);
	  }
	}
	var DefaultAsyncDispatcher = {
	    getCacheForType: function (resourceType) {
	      var cache = readContext(CacheContext),
	        cacheForType = cache.data.get(resourceType);
	      undefined === cacheForType &&
	        ((cacheForType = resourceType()),
	        cache.data.set(resourceType, cacheForType));
	      return cacheForType;
	    }
	  },
	  PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map,
	  executionContext = 0,
	  workInProgressRoot = null,
	  workInProgress = null,
	  workInProgressRootRenderLanes = 0,
	  workInProgressSuspendedReason = 0,
	  workInProgressThrownValue = null,
	  workInProgressRootDidSkipSuspendedSiblings = false,
	  workInProgressRootIsPrerendering = false,
	  workInProgressRootDidAttachPingListener = false,
	  entangledRenderLanes = 0,
	  workInProgressRootExitStatus = 0,
	  workInProgressRootSkippedLanes = 0,
	  workInProgressRootInterleavedUpdatedLanes = 0,
	  workInProgressRootPingedLanes = 0,
	  workInProgressDeferredLane = 0,
	  workInProgressSuspendedRetryLanes = 0,
	  workInProgressRootConcurrentErrors = null,
	  workInProgressRootRecoverableErrors = null,
	  workInProgressRootDidIncludeRecursiveRenderUpdate = false,
	  globalMostRecentFallbackTime = 0,
	  workInProgressRootRenderTargetTime = Infinity,
	  workInProgressTransitions = null,
	  legacyErrorBoundariesThatAlreadyFailed = null,
	  rootDoesHavePassiveEffects = false,
	  rootWithPendingPassiveEffects = null,
	  pendingPassiveEffectsLanes = 0,
	  pendingPassiveEffectsRemainingLanes = 0,
	  pendingPassiveTransitions = null,
	  nestedUpdateCount = 0,
	  rootWithNestedUpdates = null;
	function requestUpdateLane() {
	  if (0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes)
	    return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
	  if (null !== ReactSharedInternals.T) {
	    var actionScopeLane = currentEntangledLane;
	    return 0 !== actionScopeLane ? actionScopeLane : requestTransitionLane();
	  }
	  return resolveUpdatePriority();
	}
	function requestDeferredLane() {
	  0 === workInProgressDeferredLane &&
	    (workInProgressDeferredLane =
	      0 === (workInProgressRootRenderLanes & 536870912) || isHydrating
	        ? claimNextTransitionLane()
	        : 536870912);
	  var suspenseHandler = suspenseHandlerStackCursor.current;
	  null !== suspenseHandler && (suspenseHandler.flags |= 32);
	  return workInProgressDeferredLane;
	}
	function scheduleUpdateOnFiber(root, fiber, lane) {
	  if (
	    (root === workInProgressRoot && 2 === workInProgressSuspendedReason) ||
	    null !== root.cancelPendingCommit
	  )
	    prepareFreshStack(root, 0),
	      markRootSuspended(
	        root,
	        workInProgressRootRenderLanes,
	        workInProgressDeferredLane,
	        false
	      );
	  markRootUpdated$1(root, lane);
	  if (0 === (executionContext & 2) || root !== workInProgressRoot)
	    root === workInProgressRoot &&
	      (0 === (executionContext & 2) &&
	        (workInProgressRootInterleavedUpdatedLanes |= lane),
	      4 === workInProgressRootExitStatus &&
	        markRootSuspended(
	          root,
	          workInProgressRootRenderLanes,
	          workInProgressDeferredLane,
	          false
	        )),
	      ensureRootIsScheduled(root);
	}
	function performWorkOnRoot(root$jscomp$0, lanes, forceSync) {
	  if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(327));
	  var shouldTimeSlice =
	      (!forceSync &&
	        0 === (lanes & 60) &&
	        0 === (lanes & root$jscomp$0.expiredLanes)) ||
	      checkIfRootIsPrerendering(root$jscomp$0, lanes),
	    exitStatus = shouldTimeSlice
	      ? renderRootConcurrent(root$jscomp$0, lanes)
	      : renderRootSync(root$jscomp$0, lanes, true),
	    renderWasConcurrent = shouldTimeSlice;
	  do {
	    if (0 === exitStatus) {
	      workInProgressRootIsPrerendering &&
	        !shouldTimeSlice &&
	        markRootSuspended(root$jscomp$0, lanes, 0, false);
	      break;
	    } else if (6 === exitStatus)
	      markRootSuspended(
	        root$jscomp$0,
	        lanes,
	        0,
	        !workInProgressRootDidSkipSuspendedSiblings
	      );
	    else {
	      forceSync = root$jscomp$0.current.alternate;
	      if (
	        renderWasConcurrent &&
	        !isRenderConsistentWithExternalStores(forceSync)
	      ) {
	        exitStatus = renderRootSync(root$jscomp$0, lanes, false);
	        renderWasConcurrent = false;
	        continue;
	      }
	      if (2 === exitStatus) {
	        renderWasConcurrent = lanes;
	        if (root$jscomp$0.errorRecoveryDisabledLanes & renderWasConcurrent)
	          var JSCompiler_inline_result = 0;
	        else
	          (JSCompiler_inline_result = root$jscomp$0.pendingLanes & -536870913),
	            (JSCompiler_inline_result =
	              0 !== JSCompiler_inline_result
	                ? JSCompiler_inline_result
	                : JSCompiler_inline_result & 536870912
	                  ? 536870912
	                  : 0);
	        if (0 !== JSCompiler_inline_result) {
	          lanes = JSCompiler_inline_result;
	          a: {
	            var root = root$jscomp$0;
	            exitStatus = workInProgressRootConcurrentErrors;
	            var wasRootDehydrated = root.current.memoizedState.isDehydrated;
	            wasRootDehydrated &&
	              (prepareFreshStack(root, JSCompiler_inline_result).flags |= 256);
	            JSCompiler_inline_result = renderRootSync(
	              root,
	              JSCompiler_inline_result,
	              false
	            );
	            if (2 !== JSCompiler_inline_result) {
	              if (
	                workInProgressRootDidAttachPingListener &&
	                !wasRootDehydrated
	              ) {
	                root.errorRecoveryDisabledLanes |= renderWasConcurrent;
	                workInProgressRootInterleavedUpdatedLanes |=
	                  renderWasConcurrent;
	                exitStatus = 4;
	                break a;
	              }
	              renderWasConcurrent = workInProgressRootRecoverableErrors;
	              workInProgressRootRecoverableErrors = exitStatus;
	              null !== renderWasConcurrent &&
	                queueRecoverableErrors(renderWasConcurrent);
	            }
	            exitStatus = JSCompiler_inline_result;
	          }
	          renderWasConcurrent = false;
	          if (2 !== exitStatus) continue;
	        }
	      }
	      if (1 === exitStatus) {
	        prepareFreshStack(root$jscomp$0, 0);
	        markRootSuspended(root$jscomp$0, lanes, 0, true);
	        break;
	      }
	      a: {
	        shouldTimeSlice = root$jscomp$0;
	        switch (exitStatus) {
	          case 0:
	          case 1:
	            throw Error(formatProdErrorMessage(345));
	          case 4:
	            if ((lanes & 4194176) === lanes) {
	              markRootSuspended(
	                shouldTimeSlice,
	                lanes,
	                workInProgressDeferredLane,
	                !workInProgressRootDidSkipSuspendedSiblings
	              );
	              break a;
	            }
	            break;
	          case 2:
	            workInProgressRootRecoverableErrors = null;
	            break;
	          case 3:
	          case 5:
	            break;
	          default:
	            throw Error(formatProdErrorMessage(329));
	        }
	        shouldTimeSlice.finishedWork = forceSync;
	        shouldTimeSlice.finishedLanes = lanes;
	        if (
	          (lanes & 62914560) === lanes &&
	          ((renderWasConcurrent = globalMostRecentFallbackTime + 300 - now()),
	          10 < renderWasConcurrent)
	        ) {
	          markRootSuspended(
	            shouldTimeSlice,
	            lanes,
	            workInProgressDeferredLane,
	            !workInProgressRootDidSkipSuspendedSiblings
	          );
	          if (0 !== getNextLanes(shouldTimeSlice, 0)) break a;
	          shouldTimeSlice.timeoutHandle = scheduleTimeout(
	            commitRootWhenReady.bind(
	              null,
	              shouldTimeSlice,
	              forceSync,
	              workInProgressRootRecoverableErrors,
	              workInProgressTransitions,
	              workInProgressRootDidIncludeRecursiveRenderUpdate,
	              lanes,
	              workInProgressDeferredLane,
	              workInProgressRootInterleavedUpdatedLanes,
	              workInProgressSuspendedRetryLanes,
	              workInProgressRootDidSkipSuspendedSiblings,
	              2,
	              -0,
	              0
	            ),
	            renderWasConcurrent
	          );
	          break a;
	        }
	        commitRootWhenReady(
	          shouldTimeSlice,
	          forceSync,
	          workInProgressRootRecoverableErrors,
	          workInProgressTransitions,
	          workInProgressRootDidIncludeRecursiveRenderUpdate,
	          lanes,
	          workInProgressDeferredLane,
	          workInProgressRootInterleavedUpdatedLanes,
	          workInProgressSuspendedRetryLanes,
	          workInProgressRootDidSkipSuspendedSiblings,
	          0,
	          -0,
	          0
	        );
	      }
	    }
	    break;
	  } while (1);
	  ensureRootIsScheduled(root$jscomp$0);
	}
	function queueRecoverableErrors(errors) {
	  null === workInProgressRootRecoverableErrors
	    ? (workInProgressRootRecoverableErrors = errors)
	    : workInProgressRootRecoverableErrors.push.apply(
	        workInProgressRootRecoverableErrors,
	        errors
	      );
	}
	function commitRootWhenReady(
	  root,
	  finishedWork,
	  recoverableErrors,
	  transitions,
	  didIncludeRenderPhaseUpdate,
	  lanes,
	  spawnedLane,
	  updatedLanes,
	  suspendedRetryLanes,
	  didSkipSuspendedSiblings,
	  suspendedCommitReason,
	  completedRenderStartTime,
	  completedRenderEndTime
	) {
	  var subtreeFlags = finishedWork.subtreeFlags;
	  if (subtreeFlags & 8192 || 16785408 === (subtreeFlags & 16785408))
	    if (
	      ((suspendedState = { stylesheets: null, count: 0, unsuspend: noop }),
	      accumulateSuspenseyCommitOnFiber(finishedWork),
	      (finishedWork = waitForCommitToBeReady()),
	      null !== finishedWork)
	    ) {
	      root.cancelPendingCommit = finishedWork(
	        commitRoot.bind(
	          null,
	          root,
	          recoverableErrors,
	          transitions,
	          didIncludeRenderPhaseUpdate,
	          spawnedLane,
	          updatedLanes,
	          suspendedRetryLanes,
	          1,
	          completedRenderStartTime,
	          completedRenderEndTime
	        )
	      );
	      markRootSuspended(root, lanes, spawnedLane, !didSkipSuspendedSiblings);
	      return;
	    }
	  commitRoot(
	    root,
	    recoverableErrors,
	    transitions,
	    didIncludeRenderPhaseUpdate,
	    spawnedLane,
	    updatedLanes,
	    suspendedRetryLanes,
	    suspendedCommitReason,
	    completedRenderStartTime,
	    completedRenderEndTime
	  );
	}
	function isRenderConsistentWithExternalStores(finishedWork) {
	  for (var node = finishedWork; ; ) {
	    var tag = node.tag;
	    if (
	      (0 === tag || 11 === tag || 15 === tag) &&
	      node.flags & 16384 &&
	      ((tag = node.updateQueue),
	      null !== tag && ((tag = tag.stores), null !== tag))
	    )
	      for (var i = 0; i < tag.length; i++) {
	        var check = tag[i],
	          getSnapshot = check.getSnapshot;
	        check = check.value;
	        try {
	          if (!objectIs(getSnapshot(), check)) return !1;
	        } catch (error) {
	          return false;
	        }
	      }
	    tag = node.child;
	    if (node.subtreeFlags & 16384 && null !== tag)
	      (tag.return = node), (node = tag);
	    else {
	      if (node === finishedWork) break;
	      for (; null === node.sibling; ) {
	        if (null === node.return || node.return === finishedWork) return true;
	        node = node.return;
	      }
	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }
	  return true;
	}
	function markRootSuspended(
	  root,
	  suspendedLanes,
	  spawnedLane,
	  didAttemptEntireTree
	) {
	  suspendedLanes &= ~workInProgressRootPingedLanes;
	  suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
	  root.suspendedLanes |= suspendedLanes;
	  root.pingedLanes &= ~suspendedLanes;
	  didAttemptEntireTree && (root.warmLanes |= suspendedLanes);
	  didAttemptEntireTree = root.expirationTimes;
	  for (var lanes = suspendedLanes; 0 < lanes; ) {
	    var index$6 = 31 - clz32(lanes),
	      lane = 1 << index$6;
	    didAttemptEntireTree[index$6] = -1;
	    lanes &= ~lane;
	  }
	  0 !== spawnedLane &&
	    markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);
	}
	function flushSyncWork$1() {
	  return 0 === (executionContext & 6)
	    ? (flushSyncWorkAcrossRoots_impl(0), false)
	    : true;
	}
	function resetWorkInProgressStack() {
	  if (null !== workInProgress) {
	    if (0 === workInProgressSuspendedReason)
	      var interruptedWork = workInProgress.return;
	    else
	      (interruptedWork = workInProgress),
	        (lastContextDependency = currentlyRenderingFiber = null),
	        resetHooksOnUnwind(interruptedWork),
	        (thenableState$1 = null),
	        (thenableIndexCounter$1 = 0),
	        (interruptedWork = workInProgress);
	    for (; null !== interruptedWork; )
	      unwindInterruptedWork(interruptedWork.alternate, interruptedWork),
	        (interruptedWork = interruptedWork.return);
	    workInProgress = null;
	  }
	}
	function prepareFreshStack(root, lanes) {
	  root.finishedWork = null;
	  root.finishedLanes = 0;
	  var timeoutHandle = root.timeoutHandle;
	  -1 !== timeoutHandle &&
	    ((root.timeoutHandle = -1), cancelTimeout(timeoutHandle));
	  timeoutHandle = root.cancelPendingCommit;
	  null !== timeoutHandle &&
	    ((root.cancelPendingCommit = null), timeoutHandle());
	  resetWorkInProgressStack();
	  workInProgressRoot = root;
	  workInProgress = timeoutHandle = createWorkInProgress(root.current, null);
	  workInProgressRootRenderLanes = lanes;
	  workInProgressSuspendedReason = 0;
	  workInProgressThrownValue = null;
	  workInProgressRootDidSkipSuspendedSiblings = false;
	  workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
	  workInProgressRootDidAttachPingListener = false;
	  workInProgressSuspendedRetryLanes =
	    workInProgressDeferredLane =
	    workInProgressRootPingedLanes =
	    workInProgressRootInterleavedUpdatedLanes =
	    workInProgressRootSkippedLanes =
	    workInProgressRootExitStatus =
	      0;
	  workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors =
	    null;
	  workInProgressRootDidIncludeRecursiveRenderUpdate = false;
	  0 !== (lanes & 8) && (lanes |= lanes & 32);
	  var allEntangledLanes = root.entangledLanes;
	  if (0 !== allEntangledLanes)
	    for (
	      root = root.entanglements, allEntangledLanes &= lanes;
	      0 < allEntangledLanes;

	    ) {
	      var index$4 = 31 - clz32(allEntangledLanes),
	        lane = 1 << index$4;
	      lanes |= root[index$4];
	      allEntangledLanes &= ~lane;
	    }
	  entangledRenderLanes = lanes;
	  finishQueueingConcurrentUpdates();
	  return timeoutHandle;
	}
	function handleThrow(root, thrownValue) {
	  currentlyRenderingFiber$1 = null;
	  ReactSharedInternals.H = ContextOnlyDispatcher;
	  thrownValue === SuspenseException
	    ? ((thrownValue = getSuspendedThenable()),
	      (workInProgressSuspendedReason = 3))
	    : thrownValue === SuspenseyCommitException
	      ? ((thrownValue = getSuspendedThenable()),
	        (workInProgressSuspendedReason = 4))
	      : (workInProgressSuspendedReason =
	          thrownValue === SelectiveHydrationException
	            ? 8
	            : null !== thrownValue &&
	                "object" === typeof thrownValue &&
	                "function" === typeof thrownValue.then
	              ? 6
	              : 1);
	  workInProgressThrownValue = thrownValue;
	  null === workInProgress &&
	    ((workInProgressRootExitStatus = 1),
	    logUncaughtError(
	      root,
	      createCapturedValueAtFiber(thrownValue, root.current)
	    ));
	}
	function pushDispatcher() {
	  var prevDispatcher = ReactSharedInternals.H;
	  ReactSharedInternals.H = ContextOnlyDispatcher;
	  return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
	}
	function pushAsyncDispatcher() {
	  var prevAsyncDispatcher = ReactSharedInternals.A;
	  ReactSharedInternals.A = DefaultAsyncDispatcher;
	  return prevAsyncDispatcher;
	}
	function renderDidSuspendDelayIfPossible() {
	  workInProgressRootExitStatus = 4;
	  workInProgressRootDidSkipSuspendedSiblings ||
	    ((workInProgressRootRenderLanes & 4194176) !==
	      workInProgressRootRenderLanes &&
	      null !== suspenseHandlerStackCursor.current) ||
	    (workInProgressRootIsPrerendering = true);
	  (0 === (workInProgressRootSkippedLanes & 134217727) &&
	    0 === (workInProgressRootInterleavedUpdatedLanes & 134217727)) ||
	    null === workInProgressRoot ||
	    markRootSuspended(
	      workInProgressRoot,
	      workInProgressRootRenderLanes,
	      workInProgressDeferredLane,
	      false
	    );
	}
	function renderRootSync(root, lanes, shouldYieldForPrerendering) {
	  var prevExecutionContext = executionContext;
	  executionContext |= 2;
	  var prevDispatcher = pushDispatcher(),
	    prevAsyncDispatcher = pushAsyncDispatcher();
	  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes)
	    (workInProgressTransitions = null), prepareFreshStack(root, lanes);
	  lanes = false;
	  var exitStatus = workInProgressRootExitStatus;
	  a: do
	    try {
	      if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
	        var unitOfWork = workInProgress,
	          thrownValue = workInProgressThrownValue;
	        switch (workInProgressSuspendedReason) {
	          case 8:
	            resetWorkInProgressStack();
	            exitStatus = 6;
	            break a;
	          case 3:
	          case 2:
	          case 6:
	            null === suspenseHandlerStackCursor.current && (lanes = !0);
	            var reason = workInProgressSuspendedReason;
	            workInProgressSuspendedReason = 0;
	            workInProgressThrownValue = null;
	            throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
	            if (
	              shouldYieldForPrerendering &&
	              workInProgressRootIsPrerendering
	            ) {
	              exitStatus = 0;
	              break a;
	            }
	            break;
	          default:
	            (reason = workInProgressSuspendedReason),
	              (workInProgressSuspendedReason = 0),
	              (workInProgressThrownValue = null),
	              throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
	        }
	      }
	      workLoopSync();
	      exitStatus = workInProgressRootExitStatus;
	      break;
	    } catch (thrownValue$164) {
	      handleThrow(root, thrownValue$164);
	    }
	  while (1);
	  lanes && root.shellSuspendCounter++;
	  lastContextDependency = currentlyRenderingFiber = null;
	  executionContext = prevExecutionContext;
	  ReactSharedInternals.H = prevDispatcher;
	  ReactSharedInternals.A = prevAsyncDispatcher;
	  null === workInProgress &&
	    ((workInProgressRoot = null),
	    (workInProgressRootRenderLanes = 0),
	    finishQueueingConcurrentUpdates());
	  return exitStatus;
	}
	function workLoopSync() {
	  for (; null !== workInProgress; ) performUnitOfWork(workInProgress);
	}
	function renderRootConcurrent(root, lanes) {
	  var prevExecutionContext = executionContext;
	  executionContext |= 2;
	  var prevDispatcher = pushDispatcher(),
	    prevAsyncDispatcher = pushAsyncDispatcher();
	  workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes
	    ? ((workInProgressTransitions = null),
	      (workInProgressRootRenderTargetTime = now() + 500),
	      prepareFreshStack(root, lanes))
	    : (workInProgressRootIsPrerendering = checkIfRootIsPrerendering(
	        root,
	        lanes
	      ));
	  a: do
	    try {
	      if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
	        lanes = workInProgress;
	        var thrownValue = workInProgressThrownValue;
	        b: switch (workInProgressSuspendedReason) {
	          case 1:
	            workInProgressSuspendedReason = 0;
	            workInProgressThrownValue = null;
	            throwAndUnwindWorkLoop(root, lanes, thrownValue, 1);
	            break;
	          case 2:
	            if (isThenableResolved(thrownValue)) {
	              workInProgressSuspendedReason = 0;
	              workInProgressThrownValue = null;
	              replaySuspendedUnitOfWork(lanes);
	              break;
	            }
	            lanes = function () {
	              2 === workInProgressSuspendedReason &&
	                workInProgressRoot === root &&
	                (workInProgressSuspendedReason = 7);
	              ensureRootIsScheduled(root);
	            };
	            thrownValue.then(lanes, lanes);
	            break a;
	          case 3:
	            workInProgressSuspendedReason = 7;
	            break a;
	          case 4:
	            workInProgressSuspendedReason = 5;
	            break a;
	          case 7:
	            isThenableResolved(thrownValue)
	              ? ((workInProgressSuspendedReason = 0),
	                (workInProgressThrownValue = null),
	                replaySuspendedUnitOfWork(lanes))
	              : ((workInProgressSuspendedReason = 0),
	                (workInProgressThrownValue = null),
	                throwAndUnwindWorkLoop(root, lanes, thrownValue, 7));
	            break;
	          case 5:
	            var resource = null;
	            switch (workInProgress.tag) {
	              case 26:
	                resource = workInProgress.memoizedState;
	              case 5:
	              case 27:
	                var hostFiber = workInProgress;
	                if (resource ? preloadResource(resource) : 1) {
	                  workInProgressSuspendedReason = 0;
	                  workInProgressThrownValue = null;
	                  var sibling = hostFiber.sibling;
	                  if (null !== sibling) workInProgress = sibling;
	                  else {
	                    var returnFiber = hostFiber.return;
	                    null !== returnFiber
	                      ? ((workInProgress = returnFiber),
	                        completeUnitOfWork(returnFiber))
	                      : (workInProgress = null);
	                  }
	                  break b;
	                }
	            }
	            workInProgressSuspendedReason = 0;
	            workInProgressThrownValue = null;
	            throwAndUnwindWorkLoop(root, lanes, thrownValue, 5);
	            break;
	          case 6:
	            workInProgressSuspendedReason = 0;
	            workInProgressThrownValue = null;
	            throwAndUnwindWorkLoop(root, lanes, thrownValue, 6);
	            break;
	          case 8:
	            resetWorkInProgressStack();
	            workInProgressRootExitStatus = 6;
	            break a;
	          default:
	            throw Error(formatProdErrorMessage(462));
	        }
	      }
	      workLoopConcurrent();
	      break;
	    } catch (thrownValue$166) {
	      handleThrow(root, thrownValue$166);
	    }
	  while (1);
	  lastContextDependency = currentlyRenderingFiber = null;
	  ReactSharedInternals.H = prevDispatcher;
	  ReactSharedInternals.A = prevAsyncDispatcher;
	  executionContext = prevExecutionContext;
	  if (null !== workInProgress) return 0;
	  workInProgressRoot = null;
	  workInProgressRootRenderLanes = 0;
	  finishQueueingConcurrentUpdates();
	  return workInProgressRootExitStatus;
	}
	function workLoopConcurrent() {
	  for (; null !== workInProgress && !shouldYield(); )
	    performUnitOfWork(workInProgress);
	}
	function performUnitOfWork(unitOfWork) {
	  var next = beginWork(unitOfWork.alternate, unitOfWork, entangledRenderLanes);
	  unitOfWork.memoizedProps = unitOfWork.pendingProps;
	  null === next ? completeUnitOfWork(unitOfWork) : (workInProgress = next);
	}
	function replaySuspendedUnitOfWork(unitOfWork) {
	  var next = unitOfWork;
	  var current = next.alternate;
	  switch (next.tag) {
	    case 15:
	    case 0:
	      next = replayFunctionComponent(
	        current,
	        next,
	        next.pendingProps,
	        next.type,
	        undefined,
	        workInProgressRootRenderLanes
	      );
	      break;
	    case 11:
	      next = replayFunctionComponent(
	        current,
	        next,
	        next.pendingProps,
	        next.type.render,
	        next.ref,
	        workInProgressRootRenderLanes
	      );
	      break;
	    case 5:
	      resetHooksOnUnwind(next);
	    default:
	      unwindInterruptedWork(current, next),
	        (next = workInProgress =
	          resetWorkInProgress(next, entangledRenderLanes)),
	        (next = beginWork(current, next, entangledRenderLanes));
	  }
	  unitOfWork.memoizedProps = unitOfWork.pendingProps;
	  null === next ? completeUnitOfWork(unitOfWork) : (workInProgress = next);
	}
	function throwAndUnwindWorkLoop(
	  root,
	  unitOfWork,
	  thrownValue,
	  suspendedReason
	) {
	  lastContextDependency = currentlyRenderingFiber = null;
	  resetHooksOnUnwind(unitOfWork);
	  thenableState$1 = null;
	  thenableIndexCounter$1 = 0;
	  var returnFiber = unitOfWork.return;
	  try {
	    if (
	      throwException(
	        root,
	        returnFiber,
	        unitOfWork,
	        thrownValue,
	        workInProgressRootRenderLanes
	      )
	    ) {
	      workInProgressRootExitStatus = 1;
	      logUncaughtError(
	        root,
	        createCapturedValueAtFiber(thrownValue, root.current)
	      );
	      workInProgress = null;
	      return;
	    }
	  } catch (error) {
	    if (null !== returnFiber) throw ((workInProgress = returnFiber), error);
	    workInProgressRootExitStatus = 1;
	    logUncaughtError(
	      root,
	      createCapturedValueAtFiber(thrownValue, root.current)
	    );
	    workInProgress = null;
	    return;
	  }
	  if (unitOfWork.flags & 32768) {
	    if (isHydrating || 1 === suspendedReason) root = true;
	    else if (
	      workInProgressRootIsPrerendering ||
	      0 !== (workInProgressRootRenderLanes & 536870912)
	    )
	      root = false;
	    else if (
	      ((workInProgressRootDidSkipSuspendedSiblings = root = true),
	      2 === suspendedReason || 3 === suspendedReason || 6 === suspendedReason)
	    )
	      (suspendedReason = suspenseHandlerStackCursor.current),
	        null !== suspendedReason &&
	          13 === suspendedReason.tag &&
	          (suspendedReason.flags |= 16384);
	    unwindUnitOfWork(unitOfWork, root);
	  } else completeUnitOfWork(unitOfWork);
	}
	function completeUnitOfWork(unitOfWork) {
	  var completedWork = unitOfWork;
	  do {
	    if (0 !== (completedWork.flags & 32768)) {
	      unwindUnitOfWork(
	        completedWork,
	        workInProgressRootDidSkipSuspendedSiblings
	      );
	      return;
	    }
	    unitOfWork = completedWork.return;
	    var next = completeWork(
	      completedWork.alternate,
	      completedWork,
	      entangledRenderLanes
	    );
	    if (null !== next) {
	      workInProgress = next;
	      return;
	    }
	    completedWork = completedWork.sibling;
	    if (null !== completedWork) {
	      workInProgress = completedWork;
	      return;
	    }
	    workInProgress = completedWork = unitOfWork;
	  } while (null !== completedWork);
	  0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);
	}
	function unwindUnitOfWork(unitOfWork, skipSiblings) {
	  do {
	    var next = unwindWork(unitOfWork.alternate, unitOfWork);
	    if (null !== next) {
	      next.flags &= 32767;
	      workInProgress = next;
	      return;
	    }
	    next = unitOfWork.return;
	    null !== next &&
	      ((next.flags |= 32768), (next.subtreeFlags = 0), (next.deletions = null));
	    if (
	      !skipSiblings &&
	      ((unitOfWork = unitOfWork.sibling), null !== unitOfWork)
	    ) {
	      workInProgress = unitOfWork;
	      return;
	    }
	    workInProgress = unitOfWork = next;
	  } while (null !== unitOfWork);
	  workInProgressRootExitStatus = 6;
	  workInProgress = null;
	}
	function commitRoot(
	  root,
	  recoverableErrors,
	  transitions,
	  didIncludeRenderPhaseUpdate,
	  spawnedLane,
	  updatedLanes,
	  suspendedRetryLanes,
	  suspendedCommitReason,
	  completedRenderStartTime,
	  completedRenderEndTime
	) {
	  var prevTransition = ReactSharedInternals.T,
	    previousUpdateLanePriority = ReactDOMSharedInternals.p;
	  try {
	    (ReactDOMSharedInternals.p = 2),
	      (ReactSharedInternals.T = null),
	      commitRootImpl(
	        root,
	        recoverableErrors,
	        transitions,
	        didIncludeRenderPhaseUpdate,
	        previousUpdateLanePriority,
	        spawnedLane,
	        updatedLanes,
	        suspendedRetryLanes,
	        suspendedCommitReason,
	        completedRenderStartTime,
	        completedRenderEndTime
	      );
	  } finally {
	    (ReactSharedInternals.T = prevTransition),
	      (ReactDOMSharedInternals.p = previousUpdateLanePriority);
	  }
	}
	function commitRootImpl(
	  root,
	  recoverableErrors,
	  transitions,
	  didIncludeRenderPhaseUpdate,
	  renderPriorityLevel,
	  spawnedLane,
	  updatedLanes,
	  suspendedRetryLanes
	) {
	  do flushPassiveEffects();
	  while (null !== rootWithPendingPassiveEffects);
	  if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(327));
	  var finishedWork = root.finishedWork;
	  didIncludeRenderPhaseUpdate = root.finishedLanes;
	  if (null === finishedWork) return null;
	  root.finishedWork = null;
	  root.finishedLanes = 0;
	  if (finishedWork === root.current) throw Error(formatProdErrorMessage(177));
	  root.callbackNode = null;
	  root.callbackPriority = 0;
	  root.cancelPendingCommit = null;
	  var remainingLanes = finishedWork.lanes | finishedWork.childLanes;
	  remainingLanes |= concurrentlyUpdatedLanes;
	  markRootFinished(
	    root,
	    didIncludeRenderPhaseUpdate,
	    remainingLanes,
	    spawnedLane,
	    updatedLanes,
	    suspendedRetryLanes
	  );
	  root === workInProgressRoot &&
	    ((workInProgress = workInProgressRoot = null),
	    (workInProgressRootRenderLanes = 0));
	  (0 === (finishedWork.subtreeFlags & 10256) &&
	    0 === (finishedWork.flags & 10256)) ||
	    rootDoesHavePassiveEffects ||
	    ((rootDoesHavePassiveEffects = true),
	    (pendingPassiveEffectsRemainingLanes = remainingLanes),
	    (pendingPassiveTransitions = transitions),
	    scheduleCallback$1(NormalPriority$1, function () {
	      flushPassiveEffects();
	      return null;
	    }));
	  transitions = 0 !== (finishedWork.flags & 15990);
	  0 !== (finishedWork.subtreeFlags & 15990) || transitions
	    ? ((transitions = ReactSharedInternals.T),
	      (ReactSharedInternals.T = null),
	      (spawnedLane = ReactDOMSharedInternals.p),
	      (ReactDOMSharedInternals.p = 2),
	      (updatedLanes = executionContext),
	      (executionContext |= 4),
	      commitBeforeMutationEffects(root, finishedWork),
	      commitMutationEffectsOnFiber(finishedWork, root),
	      restoreSelection(selectionInformation, root.containerInfo),
	      (_enabled = !!eventsEnabled),
	      (selectionInformation = eventsEnabled = null),
	      (root.current = finishedWork),
	      commitLayoutEffectOnFiber(root, finishedWork.alternate, finishedWork),
	      requestPaint(),
	      (executionContext = updatedLanes),
	      (ReactDOMSharedInternals.p = spawnedLane),
	      (ReactSharedInternals.T = transitions))
	    : (root.current = finishedWork);
	  rootDoesHavePassiveEffects
	    ? ((rootDoesHavePassiveEffects = false),
	      (rootWithPendingPassiveEffects = root),
	      (pendingPassiveEffectsLanes = didIncludeRenderPhaseUpdate))
	    : releaseRootPooledCache(root, remainingLanes);
	  remainingLanes = root.pendingLanes;
	  0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
	  onCommitRoot(finishedWork.stateNode);
	  ensureRootIsScheduled(root);
	  if (null !== recoverableErrors)
	    for (
	      renderPriorityLevel = root.onRecoverableError, finishedWork = 0;
	      finishedWork < recoverableErrors.length;
	      finishedWork++
	    )
	      (remainingLanes = recoverableErrors[finishedWork]),
	        renderPriorityLevel(remainingLanes.value, {
	          componentStack: remainingLanes.stack
	        });
	  0 !== (pendingPassiveEffectsLanes & 3) && flushPassiveEffects();
	  remainingLanes = root.pendingLanes;
	  0 !== (didIncludeRenderPhaseUpdate & 4194218) && 0 !== (remainingLanes & 42)
	    ? root === rootWithNestedUpdates
	      ? nestedUpdateCount++
	      : ((nestedUpdateCount = 0), (rootWithNestedUpdates = root))
	    : (nestedUpdateCount = 0);
	  flushSyncWorkAcrossRoots_impl(0);
	  return null;
	}
	function releaseRootPooledCache(root, remainingLanes) {
	  0 === (root.pooledCacheLanes &= remainingLanes) &&
	    ((remainingLanes = root.pooledCache),
	    null != remainingLanes &&
	      ((root.pooledCache = null), releaseCache(remainingLanes)));
	}
	function flushPassiveEffects() {
	  if (null !== rootWithPendingPassiveEffects) {
	    var root$170 = rootWithPendingPassiveEffects,
	      remainingLanes = pendingPassiveEffectsRemainingLanes;
	    pendingPassiveEffectsRemainingLanes = 0;
	    var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes),
	      prevTransition = ReactSharedInternals.T,
	      previousPriority = ReactDOMSharedInternals.p;
	    try {
	      ReactDOMSharedInternals.p = 32 > renderPriority ? 32 : renderPriority;
	      ReactSharedInternals.T = null;
	      if (null === rootWithPendingPassiveEffects)
	        var JSCompiler_inline_result = !1;
	      else {
	        renderPriority = pendingPassiveTransitions;
	        pendingPassiveTransitions = null;
	        var root = rootWithPendingPassiveEffects,
	          lanes = pendingPassiveEffectsLanes;
	        rootWithPendingPassiveEffects = null;
	        pendingPassiveEffectsLanes = 0;
	        if (0 !== (executionContext & 6))
	          throw Error(formatProdErrorMessage(331));
	        var prevExecutionContext = executionContext;
	        executionContext |= 4;
	        commitPassiveUnmountOnFiber(root.current);
	        commitPassiveMountOnFiber(root, root.current, lanes, renderPriority);
	        executionContext = prevExecutionContext;
	        flushSyncWorkAcrossRoots_impl(0, !1);
	        if (
	          injectedHook &&
	          "function" === typeof injectedHook.onPostCommitFiberRoot
	        )
	          try {
	            injectedHook.onPostCommitFiberRoot(rendererID, root);
	          } catch (err) {}
	        JSCompiler_inline_result = !0;
	      }
	      return JSCompiler_inline_result;
	    } finally {
	      (ReactDOMSharedInternals.p = previousPriority),
	        (ReactSharedInternals.T = prevTransition),
	        releaseRootPooledCache(root$170, remainingLanes);
	    }
	  }
	  return false;
	}
	function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
	  sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
	  sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
	  rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
	  null !== rootFiber &&
	    (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
	}
	function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
	  if (3 === sourceFiber.tag)
	    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
	  else
	    for (; null !== nearestMountedAncestor; ) {
	      if (3 === nearestMountedAncestor.tag) {
	        captureCommitPhaseErrorOnRoot(
	          nearestMountedAncestor,
	          sourceFiber,
	          error
	        );
	        break;
	      } else if (1 === nearestMountedAncestor.tag) {
	        var instance = nearestMountedAncestor.stateNode;
	        if (
	          "function" ===
	            typeof nearestMountedAncestor.type.getDerivedStateFromError ||
	          ("function" === typeof instance.componentDidCatch &&
	            (null === legacyErrorBoundariesThatAlreadyFailed ||
	              !legacyErrorBoundariesThatAlreadyFailed.has(instance)))
	        ) {
	          sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
	          error = createClassErrorUpdate(2);
	          instance = enqueueUpdate(nearestMountedAncestor, error, 2);
	          null !== instance &&
	            (initializeClassErrorUpdate(
	              error,
	              instance,
	              nearestMountedAncestor,
	              sourceFiber
	            ),
	            markRootUpdated$1(instance, 2),
	            ensureRootIsScheduled(instance));
	          break;
	        }
	      }
	      nearestMountedAncestor = nearestMountedAncestor.return;
	    }
	}
	function attachPingListener(root, wakeable, lanes) {
	  var pingCache = root.pingCache;
	  if (null === pingCache) {
	    pingCache = root.pingCache = new PossiblyWeakMap();
	    var threadIDs = new Set();
	    pingCache.set(wakeable, threadIDs);
	  } else
	    (threadIDs = pingCache.get(wakeable)),
	      undefined === threadIDs &&
	        ((threadIDs = new Set()), pingCache.set(wakeable, threadIDs));
	  threadIDs.has(lanes) ||
	    ((workInProgressRootDidAttachPingListener = true),
	    threadIDs.add(lanes),
	    (root = pingSuspendedRoot.bind(null, root, wakeable, lanes)),
	    wakeable.then(root, root));
	}
	function pingSuspendedRoot(root, wakeable, pingedLanes) {
	  var pingCache = root.pingCache;
	  null !== pingCache && pingCache.delete(wakeable);
	  root.pingedLanes |= root.suspendedLanes & pingedLanes;
	  root.warmLanes &= ~pingedLanes;
	  workInProgressRoot === root &&
	    (workInProgressRootRenderLanes & pingedLanes) === pingedLanes &&
	    (4 === workInProgressRootExitStatus ||
	    (3 === workInProgressRootExitStatus &&
	      (workInProgressRootRenderLanes & 62914560) ===
	        workInProgressRootRenderLanes &&
	      300 > now() - globalMostRecentFallbackTime)
	      ? 0 === (executionContext & 2) && prepareFreshStack(root, 0)
	      : (workInProgressRootPingedLanes |= pingedLanes),
	    workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes &&
	      (workInProgressSuspendedRetryLanes = 0));
	  ensureRootIsScheduled(root);
	}
	function retryTimedOutBoundary(boundaryFiber, retryLane) {
	  0 === retryLane && (retryLane = claimNextRetryLane());
	  boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
	  null !== boundaryFiber &&
	    (markRootUpdated$1(boundaryFiber, retryLane),
	    ensureRootIsScheduled(boundaryFiber));
	}
	function retryDehydratedSuspenseBoundary(boundaryFiber) {
	  var suspenseState = boundaryFiber.memoizedState,
	    retryLane = 0;
	  null !== suspenseState && (retryLane = suspenseState.retryLane);
	  retryTimedOutBoundary(boundaryFiber, retryLane);
	}
	function resolveRetryWakeable(boundaryFiber, wakeable) {
	  var retryLane = 0;
	  switch (boundaryFiber.tag) {
	    case 13:
	      var retryCache = boundaryFiber.stateNode;
	      var suspenseState = boundaryFiber.memoizedState;
	      null !== suspenseState && (retryLane = suspenseState.retryLane);
	      break;
	    case 19:
	      retryCache = boundaryFiber.stateNode;
	      break;
	    case 22:
	      retryCache = boundaryFiber.stateNode._retryCache;
	      break;
	    default:
	      throw Error(formatProdErrorMessage(314));
	  }
	  null !== retryCache && retryCache.delete(wakeable);
	  retryTimedOutBoundary(boundaryFiber, retryLane);
	}
	function scheduleCallback$1(priorityLevel, callback) {
	  return scheduleCallback$3(priorityLevel, callback);
	}
	var firstScheduledRoot = null,
	  lastScheduledRoot = null,
	  didScheduleMicrotask = false,
	  mightHavePendingSyncWork = false,
	  isFlushingWork = false,
	  currentEventTransitionLane = 0;
	function ensureRootIsScheduled(root) {
	  root !== lastScheduledRoot &&
	    null === root.next &&
	    (null === lastScheduledRoot
	      ? (firstScheduledRoot = lastScheduledRoot = root)
	      : (lastScheduledRoot = lastScheduledRoot.next = root));
	  mightHavePendingSyncWork = true;
	  didScheduleMicrotask ||
	    ((didScheduleMicrotask = true),
	    scheduleImmediateTask(processRootScheduleInMicrotask));
	}
	function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
	  if (!isFlushingWork && mightHavePendingSyncWork) {
	    isFlushingWork = true;
	    do {
	      var didPerformSomeWork = false;
	      for (var root$172 = firstScheduledRoot; null !== root$172; ) {
	        if (0 !== syncTransitionLanes) {
	            var pendingLanes = root$172.pendingLanes;
	            if (0 === pendingLanes) var JSCompiler_inline_result = 0;
	            else {
	              var suspendedLanes = root$172.suspendedLanes,
	                pingedLanes = root$172.pingedLanes;
	              JSCompiler_inline_result =
	                (1 << (31 - clz32(42 | syncTransitionLanes) + 1)) - 1;
	              JSCompiler_inline_result &=
	                pendingLanes & ~(suspendedLanes & ~pingedLanes);
	              JSCompiler_inline_result =
	                JSCompiler_inline_result & 201326677
	                  ? (JSCompiler_inline_result & 201326677) | 1
	                  : JSCompiler_inline_result
	                    ? JSCompiler_inline_result | 2
	                    : 0;
	            }
	            0 !== JSCompiler_inline_result &&
	              ((didPerformSomeWork = true),
	              performSyncWorkOnRoot(root$172, JSCompiler_inline_result));
	          } else
	            (JSCompiler_inline_result = workInProgressRootRenderLanes),
	              (JSCompiler_inline_result = getNextLanes(
	                root$172,
	                root$172 === workInProgressRoot ? JSCompiler_inline_result : 0
	              )),
	              0 === (JSCompiler_inline_result & 3) ||
	                checkIfRootIsPrerendering(root$172, JSCompiler_inline_result) ||
	                ((didPerformSomeWork = true),
	                performSyncWorkOnRoot(root$172, JSCompiler_inline_result));
	        root$172 = root$172.next;
	      }
	    } while (didPerformSomeWork);
	    isFlushingWork = false;
	  }
	}
	function processRootScheduleInMicrotask() {
	  mightHavePendingSyncWork = didScheduleMicrotask = false;
	  var syncTransitionLanes = 0;
	  0 !== currentEventTransitionLane &&
	    (shouldAttemptEagerTransition() &&
	      (syncTransitionLanes = currentEventTransitionLane),
	    (currentEventTransitionLane = 0));
	  for (
	    var currentTime = now(), prev = null, root = firstScheduledRoot;
	    null !== root;

	  ) {
	    var next = root.next,
	      nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);
	    if (0 === nextLanes)
	      (root.next = null),
	        null === prev ? (firstScheduledRoot = next) : (prev.next = next),
	        null === next && (lastScheduledRoot = prev);
	    else if (
	      ((prev = root), 0 !== syncTransitionLanes || 0 !== (nextLanes & 3))
	    )
	      mightHavePendingSyncWork = true;
	    root = next;
	  }
	  flushSyncWorkAcrossRoots_impl(syncTransitionLanes);
	}
	function scheduleTaskForRootDuringMicrotask(root, currentTime) {
	  for (
	    var suspendedLanes = root.suspendedLanes,
	      pingedLanes = root.pingedLanes,
	      expirationTimes = root.expirationTimes,
	      lanes = root.pendingLanes & -62914561;
	    0 < lanes;

	  ) {
	    var index$5 = 31 - clz32(lanes),
	      lane = 1 << index$5,
	      expirationTime = expirationTimes[index$5];
	    if (-1 === expirationTime) {
	      if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))
	        expirationTimes[index$5] = computeExpirationTime(lane, currentTime);
	    } else expirationTime <= currentTime && (root.expiredLanes |= lane);
	    lanes &= ~lane;
	  }
	  currentTime = workInProgressRoot;
	  suspendedLanes = workInProgressRootRenderLanes;
	  suspendedLanes = getNextLanes(
	    root,
	    root === currentTime ? suspendedLanes : 0
	  );
	  pingedLanes = root.callbackNode;
	  if (
	    0 === suspendedLanes ||
	    (root === currentTime && 2 === workInProgressSuspendedReason) ||
	    null !== root.cancelPendingCommit
	  )
	    return (
	      null !== pingedLanes &&
	        null !== pingedLanes &&
	        cancelCallback$1(pingedLanes),
	      (root.callbackNode = null),
	      (root.callbackPriority = 0)
	    );
	  if (
	    0 === (suspendedLanes & 3) ||
	    checkIfRootIsPrerendering(root, suspendedLanes)
	  ) {
	    currentTime = suspendedLanes & -suspendedLanes;
	    if (currentTime === root.callbackPriority) return currentTime;
	    null !== pingedLanes && cancelCallback$1(pingedLanes);
	    switch (lanesToEventPriority(suspendedLanes)) {
	      case 2:
	      case 8:
	        suspendedLanes = UserBlockingPriority;
	        break;
	      case 32:
	        suspendedLanes = NormalPriority$1;
	        break;
	      case 268435456:
	        suspendedLanes = IdlePriority;
	        break;
	      default:
	        suspendedLanes = NormalPriority$1;
	    }
	    pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root);
	    suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
	    root.callbackPriority = currentTime;
	    root.callbackNode = suspendedLanes;
	    return currentTime;
	  }
	  null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes);
	  root.callbackPriority = 2;
	  root.callbackNode = null;
	  return 2;
	}
	function performWorkOnRootViaSchedulerTask(root, didTimeout) {
	  var originalCallbackNode = root.callbackNode;
	  if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode)
	    return null;
	  var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
	  workInProgressRootRenderLanes$jscomp$0 = getNextLanes(
	    root,
	    root === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0
	  );
	  if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
	  performWorkOnRoot(root, workInProgressRootRenderLanes$jscomp$0, didTimeout);
	  scheduleTaskForRootDuringMicrotask(root, now());
	  return null != root.callbackNode && root.callbackNode === originalCallbackNode
	    ? performWorkOnRootViaSchedulerTask.bind(null, root)
	    : null;
	}
	function performSyncWorkOnRoot(root, lanes) {
	  if (flushPassiveEffects()) return null;
	  performWorkOnRoot(root, lanes, true);
	}
	function scheduleImmediateTask(cb) {
	  scheduleMicrotask(function () {
	    0 !== (executionContext & 6)
	      ? scheduleCallback$3(ImmediatePriority, cb)
	      : cb();
	  });
	}
	function requestTransitionLane() {
	  0 === currentEventTransitionLane &&
	    (currentEventTransitionLane = claimNextTransitionLane());
	  return currentEventTransitionLane;
	}
	function coerceFormActionProp(actionProp) {
	  return null == actionProp ||
	    "symbol" === typeof actionProp ||
	    "boolean" === typeof actionProp
	    ? null
	    : "function" === typeof actionProp
	      ? actionProp
	      : sanitizeURL("" + actionProp);
	}
	function createFormDataWithSubmitter(form, submitter) {
	  var temp = submitter.ownerDocument.createElement("input");
	  temp.name = submitter.name;
	  temp.value = submitter.value;
	  form.id && temp.setAttribute("form", form.id);
	  submitter.parentNode.insertBefore(temp, submitter);
	  form = new FormData(form);
	  temp.parentNode.removeChild(temp);
	  return form;
	}
	function extractEvents$1(
	  dispatchQueue,
	  domEventName,
	  maybeTargetInst,
	  nativeEvent,
	  nativeEventTarget
	) {
	  if (
	    "submit" === domEventName &&
	    maybeTargetInst &&
	    maybeTargetInst.stateNode === nativeEventTarget
	  ) {
	    var action = coerceFormActionProp(
	        (nativeEventTarget[internalPropsKey] || null).action
	      ),
	      submitter = nativeEvent.submitter;
	    submitter &&
	      ((domEventName = (domEventName = submitter[internalPropsKey] || null)
	        ? coerceFormActionProp(domEventName.formAction)
	        : submitter.getAttribute("formAction")),
	      null !== domEventName && ((action = domEventName), (submitter = null)));
	    var event = new SyntheticEvent(
	      "action",
	      "action",
	      null,
	      nativeEvent,
	      nativeEventTarget
	    );
	    dispatchQueue.push({
	      event: event,
	      listeners: [
	        {
	          instance: null,
	          listener: function () {
	            if (nativeEvent.defaultPrevented) {
	              if (0 !== currentEventTransitionLane) {
	                var formData = submitter
	                  ? createFormDataWithSubmitter(nativeEventTarget, submitter)
	                  : new FormData(nativeEventTarget);
	                startHostTransition(
	                  maybeTargetInst,
	                  {
	                    pending: true,
	                    data: formData,
	                    method: nativeEventTarget.method,
	                    action: action
	                  },
	                  null,
	                  formData
	                );
	              }
	            } else
	              "function" === typeof action &&
	                (event.preventDefault(),
	                (formData = submitter
	                  ? createFormDataWithSubmitter(nativeEventTarget, submitter)
	                  : new FormData(nativeEventTarget)),
	                startHostTransition(
	                  maybeTargetInst,
	                  {
	                    pending: true,
	                    data: formData,
	                    method: nativeEventTarget.method,
	                    action: action
	                  },
	                  action,
	                  formData
	                ));
	          },
	          currentTarget: nativeEventTarget
	        }
	      ]
	    });
	  }
	}
	for (
	  var i$jscomp$inline_1439 = 0;
	  i$jscomp$inline_1439 < simpleEventPluginEvents.length;
	  i$jscomp$inline_1439++
	) {
	  var eventName$jscomp$inline_1440 =
	      simpleEventPluginEvents[i$jscomp$inline_1439],
	    domEventName$jscomp$inline_1441 =
	      eventName$jscomp$inline_1440.toLowerCase(),
	    capitalizedEvent$jscomp$inline_1442 =
	      eventName$jscomp$inline_1440[0].toUpperCase() +
	      eventName$jscomp$inline_1440.slice(1);
	  registerSimpleEvent(
	    domEventName$jscomp$inline_1441,
	    "on" + capitalizedEvent$jscomp$inline_1442
	  );
	}
	registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
	registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
	registerSimpleEvent(ANIMATION_START, "onAnimationStart");
	registerSimpleEvent("dblclick", "onDoubleClick");
	registerSimpleEvent("focusin", "onFocus");
	registerSimpleEvent("focusout", "onBlur");
	registerSimpleEvent(TRANSITION_RUN, "onTransitionRun");
	registerSimpleEvent(TRANSITION_START, "onTransitionStart");
	registerSimpleEvent(TRANSITION_CANCEL, "onTransitionCancel");
	registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
	registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
	registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
	registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
	registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
	registerTwoPhaseEvent(
	  "onChange",
	  "change click focusin focusout input keydown keyup selectionchange".split(" ")
	);
	registerTwoPhaseEvent(
	  "onSelect",
	  "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
	    " "
	  )
	);
	registerTwoPhaseEvent("onBeforeInput", [
	  "compositionend",
	  "keypress",
	  "textInput",
	  "paste"
	]);
	registerTwoPhaseEvent(
	  "onCompositionEnd",
	  "compositionend focusout keydown keypress keyup mousedown".split(" ")
	);
	registerTwoPhaseEvent(
	  "onCompositionStart",
	  "compositionstart focusout keydown keypress keyup mousedown".split(" ")
	);
	registerTwoPhaseEvent(
	  "onCompositionUpdate",
	  "compositionupdate focusout keydown keypress keyup mousedown".split(" ")
	);
	var mediaEventTypes =
	    "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
	      " "
	    ),
	  nonDelegatedEvents = new Set(
	    "beforetoggle cancel close invalid load scroll scrollend toggle"
	      .split(" ")
	      .concat(mediaEventTypes)
	  );
	function processDispatchQueue(dispatchQueue, eventSystemFlags) {
	  eventSystemFlags = 0 !== (eventSystemFlags & 4);
	  for (var i = 0; i < dispatchQueue.length; i++) {
	    var _dispatchQueue$i = dispatchQueue[i],
	      event = _dispatchQueue$i.event;
	    _dispatchQueue$i = _dispatchQueue$i.listeners;
	    a: {
	      var previousInstance = undefined;
	      if (eventSystemFlags)
	        for (
	          var i$jscomp$0 = _dispatchQueue$i.length - 1;
	          0 <= i$jscomp$0;
	          i$jscomp$0--
	        ) {
	          var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0],
	            instance = _dispatchListeners$i.instance,
	            currentTarget = _dispatchListeners$i.currentTarget;
	          _dispatchListeners$i = _dispatchListeners$i.listener;
	          if (instance !== previousInstance && event.isPropagationStopped())
	            break a;
	          previousInstance = _dispatchListeners$i;
	          event.currentTarget = currentTarget;
	          try {
	            previousInstance(event);
	          } catch (error) {
	            reportGlobalError(error);
	          }
	          event.currentTarget = null;
	          previousInstance = instance;
	        }
	      else
	        for (
	          i$jscomp$0 = 0;
	          i$jscomp$0 < _dispatchQueue$i.length;
	          i$jscomp$0++
	        ) {
	          _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0];
	          instance = _dispatchListeners$i.instance;
	          currentTarget = _dispatchListeners$i.currentTarget;
	          _dispatchListeners$i = _dispatchListeners$i.listener;
	          if (instance !== previousInstance && event.isPropagationStopped())
	            break a;
	          previousInstance = _dispatchListeners$i;
	          event.currentTarget = currentTarget;
	          try {
	            previousInstance(event);
	          } catch (error) {
	            reportGlobalError(error);
	          }
	          event.currentTarget = null;
	          previousInstance = instance;
	        }
	    }
	  }
	}
	function listenToNonDelegatedEvent(domEventName, targetElement) {
	  var JSCompiler_inline_result = targetElement[internalEventHandlersKey];
	  undefined === JSCompiler_inline_result &&
	    (JSCompiler_inline_result = targetElement[internalEventHandlersKey] =
	      new Set());
	  var listenerSetKey = domEventName + "__bubble";
	  JSCompiler_inline_result.has(listenerSetKey) ||
	    (addTrappedEventListener(targetElement, domEventName, 2, false),
	    JSCompiler_inline_result.add(listenerSetKey));
	}
	function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
	  var eventSystemFlags = 0;
	  isCapturePhaseListener && (eventSystemFlags |= 4);
	  addTrappedEventListener(
	    target,
	    domEventName,
	    eventSystemFlags,
	    isCapturePhaseListener
	  );
	}
	var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
	function listenToAllSupportedEvents(rootContainerElement) {
	  if (!rootContainerElement[listeningMarker]) {
	    rootContainerElement[listeningMarker] = true;
	    allNativeEvents.forEach(function (domEventName) {
	      "selectionchange" !== domEventName &&
	        (nonDelegatedEvents.has(domEventName) ||
	          listenToNativeEvent(domEventName, false, rootContainerElement),
	        listenToNativeEvent(domEventName, true, rootContainerElement));
	    });
	    var ownerDocument =
	      9 === rootContainerElement.nodeType
	        ? rootContainerElement
	        : rootContainerElement.ownerDocument;
	    null === ownerDocument ||
	      ownerDocument[listeningMarker] ||
	      ((ownerDocument[listeningMarker] = true),
	      listenToNativeEvent("selectionchange", false, ownerDocument));
	  }
	}
	function addTrappedEventListener(
	  targetContainer,
	  domEventName,
	  eventSystemFlags,
	  isCapturePhaseListener
	) {
	  switch (getEventPriority(domEventName)) {
	    case 2:
	      var listenerWrapper = dispatchDiscreteEvent;
	      break;
	    case 8:
	      listenerWrapper = dispatchContinuousEvent;
	      break;
	    default:
	      listenerWrapper = dispatchEvent;
	  }
	  eventSystemFlags = listenerWrapper.bind(
	    null,
	    domEventName,
	    eventSystemFlags,
	    targetContainer
	  );
	  listenerWrapper = undefined;
	  !passiveBrowserEventsSupported ||
	    ("touchstart" !== domEventName &&
	      "touchmove" !== domEventName &&
	      "wheel" !== domEventName) ||
	    (listenerWrapper = true);
	  isCapturePhaseListener
	    ? undefined !== listenerWrapper
	      ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
	          capture: true,
	          passive: listenerWrapper
	        })
	      : targetContainer.addEventListener(domEventName, eventSystemFlags, true)
	    : undefined !== listenerWrapper
	      ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
	          passive: listenerWrapper
	        })
	      : targetContainer.addEventListener(domEventName, eventSystemFlags, false);
	}
	function dispatchEventForPluginEventSystem(
	  domEventName,
	  eventSystemFlags,
	  nativeEvent,
	  targetInst$jscomp$0,
	  targetContainer
	) {
	  var ancestorInst = targetInst$jscomp$0;
	  if (
	    0 === (eventSystemFlags & 1) &&
	    0 === (eventSystemFlags & 2) &&
	    null !== targetInst$jscomp$0
	  )
	    a: for (;;) {
	      if (null === targetInst$jscomp$0) return;
	      var nodeTag = targetInst$jscomp$0.tag;
	      if (3 === nodeTag || 4 === nodeTag) {
	        var container = targetInst$jscomp$0.stateNode.containerInfo;
	        if (
	          container === targetContainer ||
	          (8 === container.nodeType && container.parentNode === targetContainer)
	        )
	          break;
	        if (4 === nodeTag)
	          for (nodeTag = targetInst$jscomp$0.return; null !== nodeTag; ) {
	            var grandTag = nodeTag.tag;
	            if (3 === grandTag || 4 === grandTag)
	              if (
	                ((grandTag = nodeTag.stateNode.containerInfo),
	                grandTag === targetContainer ||
	                  (8 === grandTag.nodeType &&
	                    grandTag.parentNode === targetContainer))
	              )
	                return;
	            nodeTag = nodeTag.return;
	          }
	        for (; null !== container; ) {
	          nodeTag = getClosestInstanceFromNode(container);
	          if (null === nodeTag) return;
	          grandTag = nodeTag.tag;
	          if (
	            5 === grandTag ||
	            6 === grandTag ||
	            26 === grandTag ||
	            27 === grandTag
	          ) {
	            targetInst$jscomp$0 = ancestorInst = nodeTag;
	            continue a;
	          }
	          container = container.parentNode;
	        }
	      }
	      targetInst$jscomp$0 = targetInst$jscomp$0.return;
	    }
	  batchedUpdates$1(function () {
	    var targetInst = ancestorInst,
	      nativeEventTarget = getEventTarget(nativeEvent),
	      dispatchQueue = [];
	    a: {
	      var reactName = topLevelEventsToReactNames.get(domEventName);
	      if (void 0 !== reactName) {
	        var SyntheticEventCtor = SyntheticEvent,
	          reactEventType = domEventName;
	        switch (domEventName) {
	          case "keypress":
	            if (0 === getEventCharCode(nativeEvent)) break a;
	          case "keydown":
	          case "keyup":
	            SyntheticEventCtor = SyntheticKeyboardEvent;
	            break;
	          case "focusin":
	            reactEventType = "focus";
	            SyntheticEventCtor = SyntheticFocusEvent;
	            break;
	          case "focusout":
	            reactEventType = "blur";
	            SyntheticEventCtor = SyntheticFocusEvent;
	            break;
	          case "beforeblur":
	          case "afterblur":
	            SyntheticEventCtor = SyntheticFocusEvent;
	            break;
	          case "click":
	            if (2 === nativeEvent.button) break a;
	          case "auxclick":
	          case "dblclick":
	          case "mousedown":
	          case "mousemove":
	          case "mouseup":
	          case "mouseout":
	          case "mouseover":
	          case "contextmenu":
	            SyntheticEventCtor = SyntheticMouseEvent;
	            break;
	          case "drag":
	          case "dragend":
	          case "dragenter":
	          case "dragexit":
	          case "dragleave":
	          case "dragover":
	          case "dragstart":
	          case "drop":
	            SyntheticEventCtor = SyntheticDragEvent;
	            break;
	          case "touchcancel":
	          case "touchend":
	          case "touchmove":
	          case "touchstart":
	            SyntheticEventCtor = SyntheticTouchEvent;
	            break;
	          case ANIMATION_END:
	          case ANIMATION_ITERATION:
	          case ANIMATION_START:
	            SyntheticEventCtor = SyntheticAnimationEvent;
	            break;
	          case TRANSITION_END:
	            SyntheticEventCtor = SyntheticTransitionEvent;
	            break;
	          case "scroll":
	          case "scrollend":
	            SyntheticEventCtor = SyntheticUIEvent;
	            break;
	          case "wheel":
	            SyntheticEventCtor = SyntheticWheelEvent;
	            break;
	          case "copy":
	          case "cut":
	          case "paste":
	            SyntheticEventCtor = SyntheticClipboardEvent;
	            break;
	          case "gotpointercapture":
	          case "lostpointercapture":
	          case "pointercancel":
	          case "pointerdown":
	          case "pointermove":
	          case "pointerout":
	          case "pointerover":
	          case "pointerup":
	            SyntheticEventCtor = SyntheticPointerEvent;
	            break;
	          case "toggle":
	          case "beforetoggle":
	            SyntheticEventCtor = SyntheticToggleEvent;
	        }
	        var inCapturePhase = 0 !== (eventSystemFlags & 4),
	          accumulateTargetOnly =
	            !inCapturePhase &&
	            ("scroll" === domEventName || "scrollend" === domEventName),
	          reactEventName = inCapturePhase
	            ? null !== reactName
	              ? reactName + "Capture"
	              : null
	            : reactName;
	        inCapturePhase = [];
	        for (
	          var instance = targetInst, lastHostComponent;
	          null !== instance;

	        ) {
	          var _instance = instance;
	          lastHostComponent = _instance.stateNode;
	          _instance = _instance.tag;
	          (5 !== _instance && 26 !== _instance && 27 !== _instance) ||
	            null === lastHostComponent ||
	            null === reactEventName ||
	            ((_instance = getListener(instance, reactEventName)),
	            null != _instance &&
	              inCapturePhase.push(
	                createDispatchListener(instance, _instance, lastHostComponent)
	              ));
	          if (accumulateTargetOnly) break;
	          instance = instance.return;
	        }
	        0 < inCapturePhase.length &&
	          ((reactName = new SyntheticEventCtor(
	            reactName,
	            reactEventType,
	            null,
	            nativeEvent,
	            nativeEventTarget
	          )),
	          dispatchQueue.push({ event: reactName, listeners: inCapturePhase }));
	      }
	    }
	    if (0 === (eventSystemFlags & 7)) {
	      a: {
	        reactName =
	          "mouseover" === domEventName || "pointerover" === domEventName;
	        SyntheticEventCtor =
	          "mouseout" === domEventName || "pointerout" === domEventName;
	        if (
	          reactName &&
	          nativeEvent !== currentReplayingEvent &&
	          (reactEventType =
	            nativeEvent.relatedTarget || nativeEvent.fromElement) &&
	          (getClosestInstanceFromNode(reactEventType) ||
	            reactEventType[internalContainerInstanceKey])
	        )
	          break a;
	        if (SyntheticEventCtor || reactName) {
	          reactName =
	            nativeEventTarget.window === nativeEventTarget
	              ? nativeEventTarget
	              : (reactName = nativeEventTarget.ownerDocument)
	                ? reactName.defaultView || reactName.parentWindow
	                : window;
	          if (SyntheticEventCtor) {
	            if (
	              ((reactEventType =
	                nativeEvent.relatedTarget || nativeEvent.toElement),
	              (SyntheticEventCtor = targetInst),
	              (reactEventType = reactEventType
	                ? getClosestInstanceFromNode(reactEventType)
	                : null),
	              null !== reactEventType &&
	                ((accumulateTargetOnly =
	                  getNearestMountedFiber(reactEventType)),
	                (inCapturePhase = reactEventType.tag),
	                reactEventType !== accumulateTargetOnly ||
	                  (5 !== inCapturePhase &&
	                    27 !== inCapturePhase &&
	                    6 !== inCapturePhase)))
	            )
	              reactEventType = null;
	          } else (SyntheticEventCtor = null), (reactEventType = targetInst);
	          if (SyntheticEventCtor !== reactEventType) {
	            inCapturePhase = SyntheticMouseEvent;
	            _instance = "onMouseLeave";
	            reactEventName = "onMouseEnter";
	            instance = "mouse";
	            if ("pointerout" === domEventName || "pointerover" === domEventName)
	              (inCapturePhase = SyntheticPointerEvent),
	                (_instance = "onPointerLeave"),
	                (reactEventName = "onPointerEnter"),
	                (instance = "pointer");
	            accumulateTargetOnly =
	              null == SyntheticEventCtor
	                ? reactName
	                : getNodeFromInstance(SyntheticEventCtor);
	            lastHostComponent =
	              null == reactEventType
	                ? reactName
	                : getNodeFromInstance(reactEventType);
	            reactName = new inCapturePhase(
	              _instance,
	              instance + "leave",
	              SyntheticEventCtor,
	              nativeEvent,
	              nativeEventTarget
	            );
	            reactName.target = accumulateTargetOnly;
	            reactName.relatedTarget = lastHostComponent;
	            _instance = null;
	            getClosestInstanceFromNode(nativeEventTarget) === targetInst &&
	              ((inCapturePhase = new inCapturePhase(
	                reactEventName,
	                instance + "enter",
	                reactEventType,
	                nativeEvent,
	                nativeEventTarget
	              )),
	              (inCapturePhase.target = lastHostComponent),
	              (inCapturePhase.relatedTarget = accumulateTargetOnly),
	              (_instance = inCapturePhase));
	            accumulateTargetOnly = _instance;
	            if (SyntheticEventCtor && reactEventType)
	              b: {
	                inCapturePhase = SyntheticEventCtor;
	                reactEventName = reactEventType;
	                instance = 0;
	                for (
	                  lastHostComponent = inCapturePhase;
	                  lastHostComponent;
	                  lastHostComponent = getParent(lastHostComponent)
	                )
	                  instance++;
	                lastHostComponent = 0;
	                for (
	                  _instance = reactEventName;
	                  _instance;
	                  _instance = getParent(_instance)
	                )
	                  lastHostComponent++;
	                for (; 0 < instance - lastHostComponent; )
	                  (inCapturePhase = getParent(inCapturePhase)), instance--;
	                for (; 0 < lastHostComponent - instance; )
	                  (reactEventName = getParent(reactEventName)),
	                    lastHostComponent--;
	                for (; instance--; ) {
	                  if (
	                    inCapturePhase === reactEventName ||
	                    (null !== reactEventName &&
	                      inCapturePhase === reactEventName.alternate)
	                  )
	                    break b;
	                  inCapturePhase = getParent(inCapturePhase);
	                  reactEventName = getParent(reactEventName);
	                }
	                inCapturePhase = null;
	              }
	            else inCapturePhase = null;
	            null !== SyntheticEventCtor &&
	              accumulateEnterLeaveListenersForEvent(
	                dispatchQueue,
	                reactName,
	                SyntheticEventCtor,
	                inCapturePhase,
	                !1
	              );
	            null !== reactEventType &&
	              null !== accumulateTargetOnly &&
	              accumulateEnterLeaveListenersForEvent(
	                dispatchQueue,
	                accumulateTargetOnly,
	                reactEventType,
	                inCapturePhase,
	                !0
	              );
	          }
	        }
	      }
	      a: {
	        reactName = targetInst ? getNodeFromInstance(targetInst) : window;
	        SyntheticEventCtor =
	          reactName.nodeName && reactName.nodeName.toLowerCase();
	        if (
	          "select" === SyntheticEventCtor ||
	          ("input" === SyntheticEventCtor && "file" === reactName.type)
	        )
	          var getTargetInstFunc = getTargetInstForChangeEvent;
	        else if (isTextInputElement(reactName))
	          if (isInputEventSupported)
	            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
	          else {
	            getTargetInstFunc = getTargetInstForInputEventPolyfill;
	            var handleEventFunc = handleEventsForInputEventPolyfill;
	          }
	        else
	          (SyntheticEventCtor = reactName.nodeName),
	            !SyntheticEventCtor ||
	            "input" !== SyntheticEventCtor.toLowerCase() ||
	            ("checkbox" !== reactName.type && "radio" !== reactName.type)
	              ? targetInst &&
	                isCustomElement(targetInst.elementType) &&
	                (getTargetInstFunc = getTargetInstForChangeEvent)
	              : (getTargetInstFunc = getTargetInstForClickEvent);
	        if (
	          getTargetInstFunc &&
	          (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))
	        ) {
	          createAndAccumulateChangeEvent(
	            dispatchQueue,
	            getTargetInstFunc,
	            nativeEvent,
	            nativeEventTarget
	          );
	          break a;
	        }
	        handleEventFunc && handleEventFunc(domEventName, reactName, targetInst);
	        "focusout" === domEventName &&
	          targetInst &&
	          "number" === reactName.type &&
	          null != targetInst.memoizedProps.value &&
	          setDefaultValue(reactName, "number", reactName.value);
	      }
	      handleEventFunc = targetInst ? getNodeFromInstance(targetInst) : window;
	      switch (domEventName) {
	        case "focusin":
	          if (
	            isTextInputElement(handleEventFunc) ||
	            "true" === handleEventFunc.contentEditable
	          )
	            (activeElement = handleEventFunc),
	              (activeElementInst = targetInst),
	              (lastSelection = null);
	          break;
	        case "focusout":
	          lastSelection = activeElementInst = activeElement = null;
	          break;
	        case "mousedown":
	          mouseDown = !0;
	          break;
	        case "contextmenu":
	        case "mouseup":
	        case "dragend":
	          mouseDown = !1;
	          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
	          break;
	        case "selectionchange":
	          if (skipSelectionChangeEvent) break;
	        case "keydown":
	        case "keyup":
	          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
	      }
	      var fallbackData;
	      if (canUseCompositionEvent)
	        b: {
	          switch (domEventName) {
	            case "compositionstart":
	              var eventType = "onCompositionStart";
	              break b;
	            case "compositionend":
	              eventType = "onCompositionEnd";
	              break b;
	            case "compositionupdate":
	              eventType = "onCompositionUpdate";
	              break b;
	          }
	          eventType = void 0;
	        }
	      else
	        isComposing
	          ? isFallbackCompositionEnd(domEventName, nativeEvent) &&
	            (eventType = "onCompositionEnd")
	          : "keydown" === domEventName &&
	            229 === nativeEvent.keyCode &&
	            (eventType = "onCompositionStart");
	      eventType &&
	        (useFallbackCompositionData &&
	          "ko" !== nativeEvent.locale &&
	          (isComposing || "onCompositionStart" !== eventType
	            ? "onCompositionEnd" === eventType &&
	              isComposing &&
	              (fallbackData = getData())
	            : ((root = nativeEventTarget),
	              (startText = "value" in root ? root.value : root.textContent),
	              (isComposing = !0))),
	        (handleEventFunc = accumulateTwoPhaseListeners(targetInst, eventType)),
	        0 < handleEventFunc.length &&
	          ((eventType = new SyntheticCompositionEvent(
	            eventType,
	            domEventName,
	            null,
	            nativeEvent,
	            nativeEventTarget
	          )),
	          dispatchQueue.push({ event: eventType, listeners: handleEventFunc }),
	          fallbackData
	            ? (eventType.data = fallbackData)
	            : ((fallbackData = getDataFromCustomEvent(nativeEvent)),
	              null !== fallbackData && (eventType.data = fallbackData))));
	      if (
	        (fallbackData = canUseTextInputEvent
	          ? getNativeBeforeInputChars(domEventName, nativeEvent)
	          : getFallbackBeforeInputChars(domEventName, nativeEvent))
	      )
	        (eventType = accumulateTwoPhaseListeners(targetInst, "onBeforeInput")),
	          0 < eventType.length &&
	            ((handleEventFunc = new SyntheticCompositionEvent(
	              "onBeforeInput",
	              "beforeinput",
	              null,
	              nativeEvent,
	              nativeEventTarget
	            )),
	            dispatchQueue.push({
	              event: handleEventFunc,
	              listeners: eventType
	            }),
	            (handleEventFunc.data = fallbackData));
	      extractEvents$1(
	        dispatchQueue,
	        domEventName,
	        targetInst,
	        nativeEvent,
	        nativeEventTarget
	      );
	    }
	    processDispatchQueue(dispatchQueue, eventSystemFlags);
	  });
	}
	function createDispatchListener(instance, listener, currentTarget) {
	  return {
	    instance: instance,
	    listener: listener,
	    currentTarget: currentTarget
	  };
	}
	function accumulateTwoPhaseListeners(targetFiber, reactName) {
	  for (
	    var captureName = reactName + "Capture", listeners = [];
	    null !== targetFiber;

	  ) {
	    var _instance2 = targetFiber,
	      stateNode = _instance2.stateNode;
	    _instance2 = _instance2.tag;
	    (5 !== _instance2 && 26 !== _instance2 && 27 !== _instance2) ||
	      null === stateNode ||
	      ((_instance2 = getListener(targetFiber, captureName)),
	      null != _instance2 &&
	        listeners.unshift(
	          createDispatchListener(targetFiber, _instance2, stateNode)
	        ),
	      (_instance2 = getListener(targetFiber, reactName)),
	      null != _instance2 &&
	        listeners.push(
	          createDispatchListener(targetFiber, _instance2, stateNode)
	        ));
	    targetFiber = targetFiber.return;
	  }
	  return listeners;
	}
	function getParent(inst) {
	  if (null === inst) return null;
	  do inst = inst.return;
	  while (inst && 5 !== inst.tag && 27 !== inst.tag);
	  return inst ? inst : null;
	}
	function accumulateEnterLeaveListenersForEvent(
	  dispatchQueue,
	  event,
	  target,
	  common,
	  inCapturePhase
	) {
	  for (
	    var registrationName = event._reactName, listeners = [];
	    null !== target && target !== common;

	  ) {
	    var _instance3 = target,
	      alternate = _instance3.alternate,
	      stateNode = _instance3.stateNode;
	    _instance3 = _instance3.tag;
	    if (null !== alternate && alternate === common) break;
	    (5 !== _instance3 && 26 !== _instance3 && 27 !== _instance3) ||
	      null === stateNode ||
	      ((alternate = stateNode),
	      inCapturePhase
	        ? ((stateNode = getListener(target, registrationName)),
	          null != stateNode &&
	            listeners.unshift(
	              createDispatchListener(target, stateNode, alternate)
	            ))
	        : inCapturePhase ||
	          ((stateNode = getListener(target, registrationName)),
	          null != stateNode &&
	            listeners.push(
	              createDispatchListener(target, stateNode, alternate)
	            )));
	    target = target.return;
	  }
	  0 !== listeners.length &&
	    dispatchQueue.push({ event: event, listeners: listeners });
	}
	var NORMALIZE_NEWLINES_REGEX = /\r\n?/g,
	  NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
	function normalizeMarkupForTextOrAttribute(markup) {
	  return ("string" === typeof markup ? markup : "" + markup)
	    .replace(NORMALIZE_NEWLINES_REGEX, "\n")
	    .replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
	}
	function checkForUnmatchedText(serverText, clientText) {
	  clientText = normalizeMarkupForTextOrAttribute(clientText);
	  return normalizeMarkupForTextOrAttribute(serverText) === clientText ? true : false;
	}
	function noop$1() {}
	function setProp(domElement, tag, key, value, props, prevValue) {
	  switch (key) {
	    case "children":
	      "string" === typeof value
	        ? "body" === tag ||
	          ("textarea" === tag && "" === value) ||
	          setTextContent(domElement, value)
	        : ("number" === typeof value || "bigint" === typeof value) &&
	          "body" !== tag &&
	          setTextContent(domElement, "" + value);
	      break;
	    case "className":
	      setValueForKnownAttribute(domElement, "class", value);
	      break;
	    case "tabIndex":
	      setValueForKnownAttribute(domElement, "tabindex", value);
	      break;
	    case "dir":
	    case "role":
	    case "viewBox":
	    case "width":
	    case "height":
	      setValueForKnownAttribute(domElement, key, value);
	      break;
	    case "style":
	      setValueForStyles(domElement, value, prevValue);
	      break;
	    case "data":
	      if ("object" !== tag) {
	        setValueForKnownAttribute(domElement, "data", value);
	        break;
	      }
	    case "src":
	    case "href":
	      if ("" === value && ("a" !== tag || "href" !== key)) {
	        domElement.removeAttribute(key);
	        break;
	      }
	      if (
	        null == value ||
	        "function" === typeof value ||
	        "symbol" === typeof value ||
	        "boolean" === typeof value
	      ) {
	        domElement.removeAttribute(key);
	        break;
	      }
	      value = sanitizeURL("" + value);
	      domElement.setAttribute(key, value);
	      break;
	    case "action":
	    case "formAction":
	      if ("function" === typeof value) {
	        domElement.setAttribute(
	          key,
	          "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"
	        );
	        break;
	      } else
	        "function" === typeof prevValue &&
	          ("formAction" === key
	            ? ("input" !== tag &&
	                setProp(domElement, tag, "name", props.name, props, null),
	              setProp(
	                domElement,
	                tag,
	                "formEncType",
	                props.formEncType,
	                props,
	                null
	              ),
	              setProp(
	                domElement,
	                tag,
	                "formMethod",
	                props.formMethod,
	                props,
	                null
	              ),
	              setProp(
	                domElement,
	                tag,
	                "formTarget",
	                props.formTarget,
	                props,
	                null
	              ))
	            : (setProp(domElement, tag, "encType", props.encType, props, null),
	              setProp(domElement, tag, "method", props.method, props, null),
	              setProp(domElement, tag, "target", props.target, props, null)));
	      if (
	        null == value ||
	        "symbol" === typeof value ||
	        "boolean" === typeof value
	      ) {
	        domElement.removeAttribute(key);
	        break;
	      }
	      value = sanitizeURL("" + value);
	      domElement.setAttribute(key, value);
	      break;
	    case "onClick":
	      null != value && (domElement.onclick = noop$1);
	      break;
	    case "onScroll":
	      null != value && listenToNonDelegatedEvent("scroll", domElement);
	      break;
	    case "onScrollEnd":
	      null != value && listenToNonDelegatedEvent("scrollend", domElement);
	      break;
	    case "dangerouslySetInnerHTML":
	      if (null != value) {
	        if ("object" !== typeof value || !("__html" in value))
	          throw Error(formatProdErrorMessage(61));
	        key = value.__html;
	        if (null != key) {
	          if (null != props.children) throw Error(formatProdErrorMessage(60));
	          domElement.innerHTML = key;
	        }
	      }
	      break;
	    case "multiple":
	      domElement.multiple =
	        value && "function" !== typeof value && "symbol" !== typeof value;
	      break;
	    case "muted":
	      domElement.muted =
	        value && "function" !== typeof value && "symbol" !== typeof value;
	      break;
	    case "suppressContentEditableWarning":
	    case "suppressHydrationWarning":
	    case "defaultValue":
	    case "defaultChecked":
	    case "innerHTML":
	    case "ref":
	      break;
	    case "autoFocus":
	      break;
	    case "xlinkHref":
	      if (
	        null == value ||
	        "function" === typeof value ||
	        "boolean" === typeof value ||
	        "symbol" === typeof value
	      ) {
	        domElement.removeAttribute("xlink:href");
	        break;
	      }
	      key = sanitizeURL("" + value);
	      domElement.setAttributeNS(
	        "http://www.w3.org/1999/xlink",
	        "xlink:href",
	        key
	      );
	      break;
	    case "contentEditable":
	    case "spellCheck":
	    case "draggable":
	    case "value":
	    case "autoReverse":
	    case "externalResourcesRequired":
	    case "focusable":
	    case "preserveAlpha":
	      null != value && "function" !== typeof value && "symbol" !== typeof value
	        ? domElement.setAttribute(key, "" + value)
	        : domElement.removeAttribute(key);
	      break;
	    case "inert":
	    case "allowFullScreen":
	    case "async":
	    case "autoPlay":
	    case "controls":
	    case "default":
	    case "defer":
	    case "disabled":
	    case "disablePictureInPicture":
	    case "disableRemotePlayback":
	    case "formNoValidate":
	    case "hidden":
	    case "loop":
	    case "noModule":
	    case "noValidate":
	    case "open":
	    case "playsInline":
	    case "readOnly":
	    case "required":
	    case "reversed":
	    case "scoped":
	    case "seamless":
	    case "itemScope":
	      value && "function" !== typeof value && "symbol" !== typeof value
	        ? domElement.setAttribute(key, "")
	        : domElement.removeAttribute(key);
	      break;
	    case "capture":
	    case "download":
	      true === value
	        ? domElement.setAttribute(key, "")
	        : false !== value &&
	            null != value &&
	            "function" !== typeof value &&
	            "symbol" !== typeof value
	          ? domElement.setAttribute(key, value)
	          : domElement.removeAttribute(key);
	      break;
	    case "cols":
	    case "rows":
	    case "size":
	    case "span":
	      null != value &&
	      "function" !== typeof value &&
	      "symbol" !== typeof value &&
	      !isNaN(value) &&
	      1 <= value
	        ? domElement.setAttribute(key, value)
	        : domElement.removeAttribute(key);
	      break;
	    case "rowSpan":
	    case "start":
	      null == value ||
	      "function" === typeof value ||
	      "symbol" === typeof value ||
	      isNaN(value)
	        ? domElement.removeAttribute(key)
	        : domElement.setAttribute(key, value);
	      break;
	    case "popover":
	      listenToNonDelegatedEvent("beforetoggle", domElement);
	      listenToNonDelegatedEvent("toggle", domElement);
	      setValueForAttribute(domElement, "popover", value);
	      break;
	    case "xlinkActuate":
	      setValueForNamespacedAttribute(
	        domElement,
	        "http://www.w3.org/1999/xlink",
	        "xlink:actuate",
	        value
	      );
	      break;
	    case "xlinkArcrole":
	      setValueForNamespacedAttribute(
	        domElement,
	        "http://www.w3.org/1999/xlink",
	        "xlink:arcrole",
	        value
	      );
	      break;
	    case "xlinkRole":
	      setValueForNamespacedAttribute(
	        domElement,
	        "http://www.w3.org/1999/xlink",
	        "xlink:role",
	        value
	      );
	      break;
	    case "xlinkShow":
	      setValueForNamespacedAttribute(
	        domElement,
	        "http://www.w3.org/1999/xlink",
	        "xlink:show",
	        value
	      );
	      break;
	    case "xlinkTitle":
	      setValueForNamespacedAttribute(
	        domElement,
	        "http://www.w3.org/1999/xlink",
	        "xlink:title",
	        value
	      );
	      break;
	    case "xlinkType":
	      setValueForNamespacedAttribute(
	        domElement,
	        "http://www.w3.org/1999/xlink",
	        "xlink:type",
	        value
	      );
	      break;
	    case "xmlBase":
	      setValueForNamespacedAttribute(
	        domElement,
	        "http://www.w3.org/XML/1998/namespace",
	        "xml:base",
	        value
	      );
	      break;
	    case "xmlLang":
	      setValueForNamespacedAttribute(
	        domElement,
	        "http://www.w3.org/XML/1998/namespace",
	        "xml:lang",
	        value
	      );
	      break;
	    case "xmlSpace":
	      setValueForNamespacedAttribute(
	        domElement,
	        "http://www.w3.org/XML/1998/namespace",
	        "xml:space",
	        value
	      );
	      break;
	    case "is":
	      setValueForAttribute(domElement, "is", value);
	      break;
	    case "innerText":
	    case "textContent":
	      break;
	    default:
	      if (
	        !(2 < key.length) ||
	        ("o" !== key[0] && "O" !== key[0]) ||
	        ("n" !== key[1] && "N" !== key[1])
	      )
	        (key = aliases.get(key) || key),
	          setValueForAttribute(domElement, key, value);
	  }
	}
	function setPropOnCustomElement(domElement, tag, key, value, props, prevValue) {
	  switch (key) {
	    case "style":
	      setValueForStyles(domElement, value, prevValue);
	      break;
	    case "dangerouslySetInnerHTML":
	      if (null != value) {
	        if ("object" !== typeof value || !("__html" in value))
	          throw Error(formatProdErrorMessage(61));
	        key = value.__html;
	        if (null != key) {
	          if (null != props.children) throw Error(formatProdErrorMessage(60));
	          domElement.innerHTML = key;
	        }
	      }
	      break;
	    case "children":
	      "string" === typeof value
	        ? setTextContent(domElement, value)
	        : ("number" === typeof value || "bigint" === typeof value) &&
	          setTextContent(domElement, "" + value);
	      break;
	    case "onScroll":
	      null != value && listenToNonDelegatedEvent("scroll", domElement);
	      break;
	    case "onScrollEnd":
	      null != value && listenToNonDelegatedEvent("scrollend", domElement);
	      break;
	    case "onClick":
	      null != value && (domElement.onclick = noop$1);
	      break;
	    case "suppressContentEditableWarning":
	    case "suppressHydrationWarning":
	    case "innerHTML":
	    case "ref":
	      break;
	    case "innerText":
	    case "textContent":
	      break;
	    default:
	      if (!registrationNameDependencies.hasOwnProperty(key))
	        a: {
	          if (
	            "o" === key[0] &&
	            "n" === key[1] &&
	            ((props = key.endsWith("Capture")),
	            (tag = key.slice(2, props ? key.length - 7 : undefined)),
	            (prevValue = domElement[internalPropsKey] || null),
	            (prevValue = null != prevValue ? prevValue[key] : null),
	            "function" === typeof prevValue &&
	              domElement.removeEventListener(tag, prevValue, props),
	            "function" === typeof value)
	          ) {
	            "function" !== typeof prevValue &&
	              null !== prevValue &&
	              (key in domElement
	                ? (domElement[key] = null)
	                : domElement.hasAttribute(key) &&
	                  domElement.removeAttribute(key));
	            domElement.addEventListener(tag, value, props);
	            break a;
	          }
	          key in domElement
	            ? (domElement[key] = value)
	            : true === value
	              ? domElement.setAttribute(key, "")
	              : setValueForAttribute(domElement, key, value);
	        }
	  }
	}
	function setInitialProperties(domElement, tag, props) {
	  switch (tag) {
	    case "div":
	    case "span":
	    case "svg":
	    case "path":
	    case "a":
	    case "g":
	    case "p":
	    case "li":
	      break;
	    case "img":
	      listenToNonDelegatedEvent("error", domElement);
	      listenToNonDelegatedEvent("load", domElement);
	      var hasSrc = false,
	        hasSrcSet = false,
	        propKey;
	      for (propKey in props)
	        if (props.hasOwnProperty(propKey)) {
	          var propValue = props[propKey];
	          if (null != propValue)
	            switch (propKey) {
	              case "src":
	                hasSrc = true;
	                break;
	              case "srcSet":
	                hasSrcSet = true;
	                break;
	              case "children":
	              case "dangerouslySetInnerHTML":
	                throw Error(formatProdErrorMessage(137, tag));
	              default:
	                setProp(domElement, tag, propKey, propValue, props, null);
	            }
	        }
	      hasSrcSet &&
	        setProp(domElement, tag, "srcSet", props.srcSet, props, null);
	      hasSrc && setProp(domElement, tag, "src", props.src, props, null);
	      return;
	    case "input":
	      listenToNonDelegatedEvent("invalid", domElement);
	      var defaultValue = (propKey = propValue = hasSrcSet = null),
	        checked = null,
	        defaultChecked = null;
	      for (hasSrc in props)
	        if (props.hasOwnProperty(hasSrc)) {
	          var propValue$186 = props[hasSrc];
	          if (null != propValue$186)
	            switch (hasSrc) {
	              case "name":
	                hasSrcSet = propValue$186;
	                break;
	              case "type":
	                propValue = propValue$186;
	                break;
	              case "checked":
	                checked = propValue$186;
	                break;
	              case "defaultChecked":
	                defaultChecked = propValue$186;
	                break;
	              case "value":
	                propKey = propValue$186;
	                break;
	              case "defaultValue":
	                defaultValue = propValue$186;
	                break;
	              case "children":
	              case "dangerouslySetInnerHTML":
	                if (null != propValue$186)
	                  throw Error(formatProdErrorMessage(137, tag));
	                break;
	              default:
	                setProp(domElement, tag, hasSrc, propValue$186, props, null);
	            }
	        }
	      initInput(
	        domElement,
	        propKey,
	        defaultValue,
	        checked,
	        defaultChecked,
	        propValue,
	        hasSrcSet,
	        false
	      );
	      track(domElement);
	      return;
	    case "select":
	      listenToNonDelegatedEvent("invalid", domElement);
	      hasSrc = propValue = propKey = null;
	      for (hasSrcSet in props)
	        if (
	          props.hasOwnProperty(hasSrcSet) &&
	          ((defaultValue = props[hasSrcSet]), null != defaultValue)
	        )
	          switch (hasSrcSet) {
	            case "value":
	              propKey = defaultValue;
	              break;
	            case "defaultValue":
	              propValue = defaultValue;
	              break;
	            case "multiple":
	              hasSrc = defaultValue;
	            default:
	              setProp(domElement, tag, hasSrcSet, defaultValue, props, null);
	          }
	      tag = propKey;
	      props = propValue;
	      domElement.multiple = !!hasSrc;
	      null != tag
	        ? updateOptions(domElement, !!hasSrc, tag, false)
	        : null != props && updateOptions(domElement, !!hasSrc, props, true);
	      return;
	    case "textarea":
	      listenToNonDelegatedEvent("invalid", domElement);
	      propKey = hasSrcSet = hasSrc = null;
	      for (propValue in props)
	        if (
	          props.hasOwnProperty(propValue) &&
	          ((defaultValue = props[propValue]), null != defaultValue)
	        )
	          switch (propValue) {
	            case "value":
	              hasSrc = defaultValue;
	              break;
	            case "defaultValue":
	              hasSrcSet = defaultValue;
	              break;
	            case "children":
	              propKey = defaultValue;
	              break;
	            case "dangerouslySetInnerHTML":
	              if (null != defaultValue) throw Error(formatProdErrorMessage(91));
	              break;
	            default:
	              setProp(domElement, tag, propValue, defaultValue, props, null);
	          }
	      initTextarea(domElement, hasSrc, hasSrcSet, propKey);
	      track(domElement);
	      return;
	    case "option":
	      for (checked in props)
	        if (
	          props.hasOwnProperty(checked) &&
	          ((hasSrc = props[checked]), null != hasSrc)
	        )
	          switch (checked) {
	            case "selected":
	              domElement.selected =
	                hasSrc &&
	                "function" !== typeof hasSrc &&
	                "symbol" !== typeof hasSrc;
	              break;
	            default:
	              setProp(domElement, tag, checked, hasSrc, props, null);
	          }
	      return;
	    case "dialog":
	      listenToNonDelegatedEvent("cancel", domElement);
	      listenToNonDelegatedEvent("close", domElement);
	      break;
	    case "iframe":
	    case "object":
	      listenToNonDelegatedEvent("load", domElement);
	      break;
	    case "video":
	    case "audio":
	      for (hasSrc = 0; hasSrc < mediaEventTypes.length; hasSrc++)
	        listenToNonDelegatedEvent(mediaEventTypes[hasSrc], domElement);
	      break;
	    case "image":
	      listenToNonDelegatedEvent("error", domElement);
	      listenToNonDelegatedEvent("load", domElement);
	      break;
	    case "details":
	      listenToNonDelegatedEvent("toggle", domElement);
	      break;
	    case "embed":
	    case "source":
	    case "link":
	      listenToNonDelegatedEvent("error", domElement),
	        listenToNonDelegatedEvent("load", domElement);
	    case "area":
	    case "base":
	    case "br":
	    case "col":
	    case "hr":
	    case "keygen":
	    case "meta":
	    case "param":
	    case "track":
	    case "wbr":
	    case "menuitem":
	      for (defaultChecked in props)
	        if (
	          props.hasOwnProperty(defaultChecked) &&
	          ((hasSrc = props[defaultChecked]), null != hasSrc)
	        )
	          switch (defaultChecked) {
	            case "children":
	            case "dangerouslySetInnerHTML":
	              throw Error(formatProdErrorMessage(137, tag));
	            default:
	              setProp(domElement, tag, defaultChecked, hasSrc, props, null);
	          }
	      return;
	    default:
	      if (isCustomElement(tag)) {
	        for (propValue$186 in props)
	          props.hasOwnProperty(propValue$186) &&
	            ((hasSrc = props[propValue$186]),
	            undefined !== hasSrc &&
	              setPropOnCustomElement(
	                domElement,
	                tag,
	                propValue$186,
	                hasSrc,
	                props,
	                undefined
	              ));
	        return;
	      }
	  }
	  for (defaultValue in props)
	    props.hasOwnProperty(defaultValue) &&
	      ((hasSrc = props[defaultValue]),
	      null != hasSrc &&
	        setProp(domElement, tag, defaultValue, hasSrc, props, null));
	}
	function updateProperties(domElement, tag, lastProps, nextProps) {
	  switch (tag) {
	    case "div":
	    case "span":
	    case "svg":
	    case "path":
	    case "a":
	    case "g":
	    case "p":
	    case "li":
	      break;
	    case "input":
	      var name = null,
	        type = null,
	        value = null,
	        defaultValue = null,
	        lastDefaultValue = null,
	        checked = null,
	        defaultChecked = null;
	      for (propKey in lastProps) {
	        var lastProp = lastProps[propKey];
	        if (lastProps.hasOwnProperty(propKey) && null != lastProp)
	          switch (propKey) {
	            case "checked":
	              break;
	            case "value":
	              break;
	            case "defaultValue":
	              lastDefaultValue = lastProp;
	            default:
	              nextProps.hasOwnProperty(propKey) ||
	                setProp(domElement, tag, propKey, null, nextProps, lastProp);
	          }
	      }
	      for (var propKey$203 in nextProps) {
	        var propKey = nextProps[propKey$203];
	        lastProp = lastProps[propKey$203];
	        if (
	          nextProps.hasOwnProperty(propKey$203) &&
	          (null != propKey || null != lastProp)
	        )
	          switch (propKey$203) {
	            case "type":
	              type = propKey;
	              break;
	            case "name":
	              name = propKey;
	              break;
	            case "checked":
	              checked = propKey;
	              break;
	            case "defaultChecked":
	              defaultChecked = propKey;
	              break;
	            case "value":
	              value = propKey;
	              break;
	            case "defaultValue":
	              defaultValue = propKey;
	              break;
	            case "children":
	            case "dangerouslySetInnerHTML":
	              if (null != propKey)
	                throw Error(formatProdErrorMessage(137, tag));
	              break;
	            default:
	              propKey !== lastProp &&
	                setProp(
	                  domElement,
	                  tag,
	                  propKey$203,
	                  propKey,
	                  nextProps,
	                  lastProp
	                );
	          }
	      }
	      updateInput(
	        domElement,
	        value,
	        defaultValue,
	        lastDefaultValue,
	        checked,
	        defaultChecked,
	        type,
	        name
	      );
	      return;
	    case "select":
	      propKey = value = defaultValue = propKey$203 = null;
	      for (type in lastProps)
	        if (
	          ((lastDefaultValue = lastProps[type]),
	          lastProps.hasOwnProperty(type) && null != lastDefaultValue)
	        )
	          switch (type) {
	            case "value":
	              break;
	            case "multiple":
	              propKey = lastDefaultValue;
	            default:
	              nextProps.hasOwnProperty(type) ||
	                setProp(
	                  domElement,
	                  tag,
	                  type,
	                  null,
	                  nextProps,
	                  lastDefaultValue
	                );
	          }
	      for (name in nextProps)
	        if (
	          ((type = nextProps[name]),
	          (lastDefaultValue = lastProps[name]),
	          nextProps.hasOwnProperty(name) &&
	            (null != type || null != lastDefaultValue))
	        )
	          switch (name) {
	            case "value":
	              propKey$203 = type;
	              break;
	            case "defaultValue":
	              defaultValue = type;
	              break;
	            case "multiple":
	              value = type;
	            default:
	              type !== lastDefaultValue &&
	                setProp(
	                  domElement,
	                  tag,
	                  name,
	                  type,
	                  nextProps,
	                  lastDefaultValue
	                );
	          }
	      tag = defaultValue;
	      lastProps = value;
	      nextProps = propKey;
	      null != propKey$203
	        ? updateOptions(domElement, !!lastProps, propKey$203, false)
	        : !!nextProps !== !!lastProps &&
	          (null != tag
	            ? updateOptions(domElement, !!lastProps, tag, true)
	            : updateOptions(domElement, !!lastProps, lastProps ? [] : "", false));
	      return;
	    case "textarea":
	      propKey = propKey$203 = null;
	      for (defaultValue in lastProps)
	        if (
	          ((name = lastProps[defaultValue]),
	          lastProps.hasOwnProperty(defaultValue) &&
	            null != name &&
	            !nextProps.hasOwnProperty(defaultValue))
	        )
	          switch (defaultValue) {
	            case "value":
	              break;
	            case "children":
	              break;
	            default:
	              setProp(domElement, tag, defaultValue, null, nextProps, name);
	          }
	      for (value in nextProps)
	        if (
	          ((name = nextProps[value]),
	          (type = lastProps[value]),
	          nextProps.hasOwnProperty(value) && (null != name || null != type))
	        )
	          switch (value) {
	            case "value":
	              propKey$203 = name;
	              break;
	            case "defaultValue":
	              propKey = name;
	              break;
	            case "children":
	              break;
	            case "dangerouslySetInnerHTML":
	              if (null != name) throw Error(formatProdErrorMessage(91));
	              break;
	            default:
	              name !== type &&
	                setProp(domElement, tag, value, name, nextProps, type);
	          }
	      updateTextarea(domElement, propKey$203, propKey);
	      return;
	    case "option":
	      for (var propKey$219 in lastProps)
	        if (
	          ((propKey$203 = lastProps[propKey$219]),
	          lastProps.hasOwnProperty(propKey$219) &&
	            null != propKey$203 &&
	            !nextProps.hasOwnProperty(propKey$219))
	        )
	          switch (propKey$219) {
	            case "selected":
	              domElement.selected = false;
	              break;
	            default:
	              setProp(
	                domElement,
	                tag,
	                propKey$219,
	                null,
	                nextProps,
	                propKey$203
	              );
	          }
	      for (lastDefaultValue in nextProps)
	        if (
	          ((propKey$203 = nextProps[lastDefaultValue]),
	          (propKey = lastProps[lastDefaultValue]),
	          nextProps.hasOwnProperty(lastDefaultValue) &&
	            propKey$203 !== propKey &&
	            (null != propKey$203 || null != propKey))
	        )
	          switch (lastDefaultValue) {
	            case "selected":
	              domElement.selected =
	                propKey$203 &&
	                "function" !== typeof propKey$203 &&
	                "symbol" !== typeof propKey$203;
	              break;
	            default:
	              setProp(
	                domElement,
	                tag,
	                lastDefaultValue,
	                propKey$203,
	                nextProps,
	                propKey
	              );
	          }
	      return;
	    case "img":
	    case "link":
	    case "area":
	    case "base":
	    case "br":
	    case "col":
	    case "embed":
	    case "hr":
	    case "keygen":
	    case "meta":
	    case "param":
	    case "source":
	    case "track":
	    case "wbr":
	    case "menuitem":
	      for (var propKey$224 in lastProps)
	        (propKey$203 = lastProps[propKey$224]),
	          lastProps.hasOwnProperty(propKey$224) &&
	            null != propKey$203 &&
	            !nextProps.hasOwnProperty(propKey$224) &&
	            setProp(domElement, tag, propKey$224, null, nextProps, propKey$203);
	      for (checked in nextProps)
	        if (
	          ((propKey$203 = nextProps[checked]),
	          (propKey = lastProps[checked]),
	          nextProps.hasOwnProperty(checked) &&
	            propKey$203 !== propKey &&
	            (null != propKey$203 || null != propKey))
	        )
	          switch (checked) {
	            case "children":
	            case "dangerouslySetInnerHTML":
	              if (null != propKey$203)
	                throw Error(formatProdErrorMessage(137, tag));
	              break;
	            default:
	              setProp(
	                domElement,
	                tag,
	                checked,
	                propKey$203,
	                nextProps,
	                propKey
	              );
	          }
	      return;
	    default:
	      if (isCustomElement(tag)) {
	        for (var propKey$229 in lastProps)
	          (propKey$203 = lastProps[propKey$229]),
	            lastProps.hasOwnProperty(propKey$229) &&
	              undefined !== propKey$203 &&
	              !nextProps.hasOwnProperty(propKey$229) &&
	              setPropOnCustomElement(
	                domElement,
	                tag,
	                propKey$229,
	                undefined,
	                nextProps,
	                propKey$203
	              );
	        for (defaultChecked in nextProps)
	          (propKey$203 = nextProps[defaultChecked]),
	            (propKey = lastProps[defaultChecked]),
	            !nextProps.hasOwnProperty(defaultChecked) ||
	              propKey$203 === propKey ||
	              (undefined === propKey$203 && undefined === propKey) ||
	              setPropOnCustomElement(
	                domElement,
	                tag,
	                defaultChecked,
	                propKey$203,
	                nextProps,
	                propKey
	              );
	        return;
	      }
	  }
	  for (var propKey$234 in lastProps)
	    (propKey$203 = lastProps[propKey$234]),
	      lastProps.hasOwnProperty(propKey$234) &&
	        null != propKey$203 &&
	        !nextProps.hasOwnProperty(propKey$234) &&
	        setProp(domElement, tag, propKey$234, null, nextProps, propKey$203);
	  for (lastProp in nextProps)
	    (propKey$203 = nextProps[lastProp]),
	      (propKey = lastProps[lastProp]),
	      !nextProps.hasOwnProperty(lastProp) ||
	        propKey$203 === propKey ||
	        (null == propKey$203 && null == propKey) ||
	        setProp(domElement, tag, lastProp, propKey$203, nextProps, propKey);
	}
	var eventsEnabled = null,
	  selectionInformation = null;
	function getOwnerDocumentFromRootContainer(rootContainerElement) {
	  return 9 === rootContainerElement.nodeType
	    ? rootContainerElement
	    : rootContainerElement.ownerDocument;
	}
	function getOwnHostContext(namespaceURI) {
	  switch (namespaceURI) {
	    case "http://www.w3.org/2000/svg":
	      return 1;
	    case "http://www.w3.org/1998/Math/MathML":
	      return 2;
	    default:
	      return 0;
	  }
	}
	function getChildHostContextProd(parentNamespace, type) {
	  if (0 === parentNamespace)
	    switch (type) {
	      case "svg":
	        return 1;
	      case "math":
	        return 2;
	      default:
	        return 0;
	    }
	  return 1 === parentNamespace && "foreignObject" === type
	    ? 0
	    : parentNamespace;
	}
	function shouldSetTextContent(type, props) {
	  return (
	    "textarea" === type ||
	    "noscript" === type ||
	    "string" === typeof props.children ||
	    "number" === typeof props.children ||
	    "bigint" === typeof props.children ||
	    ("object" === typeof props.dangerouslySetInnerHTML &&
	      null !== props.dangerouslySetInnerHTML &&
	      null != props.dangerouslySetInnerHTML.__html)
	  );
	}
	var currentPopstateTransitionEvent = null;
	function shouldAttemptEagerTransition() {
	  var event = window.event;
	  if (event && "popstate" === event.type) {
	    if (event === currentPopstateTransitionEvent) return false;
	    currentPopstateTransitionEvent = event;
	    return true;
	  }
	  currentPopstateTransitionEvent = null;
	  return false;
	}
	var scheduleTimeout = "function" === typeof setTimeout ? setTimeout : undefined,
	  cancelTimeout = "function" === typeof clearTimeout ? clearTimeout : undefined,
	  localPromise = "function" === typeof Promise ? Promise : undefined,
	  scheduleMicrotask =
	    "function" === typeof queueMicrotask
	      ? queueMicrotask
	      : "undefined" !== typeof localPromise
	        ? function (callback) {
	            return localPromise
	              .resolve(null)
	              .then(callback)
	              .catch(handleErrorInNextTick);
	          }
	        : scheduleTimeout;
	function handleErrorInNextTick(error) {
	  setTimeout(function () {
	    throw error;
	  });
	}
	function clearSuspenseBoundary(parentInstance, suspenseInstance) {
	  var node = suspenseInstance,
	    depth = 0;
	  do {
	    var nextNode = node.nextSibling;
	    parentInstance.removeChild(node);
	    if (nextNode && 8 === nextNode.nodeType)
	      if (((node = nextNode.data), "/$" === node)) {
	        if (0 === depth) {
	          parentInstance.removeChild(nextNode);
	          retryIfBlockedOn(suspenseInstance);
	          return;
	        }
	        depth--;
	      } else ("$" !== node && "$?" !== node && "$!" !== node) || depth++;
	    node = nextNode;
	  } while (node);
	  retryIfBlockedOn(suspenseInstance);
	}
	function clearContainerSparingly(container) {
	  var nextNode = container.firstChild;
	  nextNode && 10 === nextNode.nodeType && (nextNode = nextNode.nextSibling);
	  for (; nextNode; ) {
	    var node = nextNode;
	    nextNode = nextNode.nextSibling;
	    switch (node.nodeName) {
	      case "HTML":
	      case "HEAD":
	      case "BODY":
	        clearContainerSparingly(node);
	        detachDeletedInstance(node);
	        continue;
	      case "SCRIPT":
	      case "STYLE":
	        continue;
	      case "LINK":
	        if ("stylesheet" === node.rel.toLowerCase()) continue;
	    }
	    container.removeChild(node);
	  }
	}
	function canHydrateInstance(instance, type, props, inRootOrSingleton) {
	  for (; 1 === instance.nodeType; ) {
	    var anyProps = props;
	    if (instance.nodeName.toLowerCase() !== type.toLowerCase()) {
	      if (
	        !inRootOrSingleton &&
	        ("INPUT" !== instance.nodeName || "hidden" !== instance.type)
	      )
	        break;
	    } else if (!inRootOrSingleton)
	      if ("input" === type && "hidden" === instance.type) {
	        var name = null == anyProps.name ? null : "" + anyProps.name;
	        if (
	          "hidden" === anyProps.type &&
	          instance.getAttribute("name") === name
	        )
	          return instance;
	      } else return instance;
	    else if (!instance[internalHoistableMarker])
	      switch (type) {
	        case "meta":
	          if (!instance.hasAttribute("itemprop")) break;
	          return instance;
	        case "link":
	          name = instance.getAttribute("rel");
	          if ("stylesheet" === name && instance.hasAttribute("data-precedence"))
	            break;
	          else if (
	            name !== anyProps.rel ||
	            instance.getAttribute("href") !==
	              (null == anyProps.href ? null : anyProps.href) ||
	            instance.getAttribute("crossorigin") !==
	              (null == anyProps.crossOrigin ? null : anyProps.crossOrigin) ||
	            instance.getAttribute("title") !==
	              (null == anyProps.title ? null : anyProps.title)
	          )
	            break;
	          return instance;
	        case "style":
	          if (instance.hasAttribute("data-precedence")) break;
	          return instance;
	        case "script":
	          name = instance.getAttribute("src");
	          if (
	            (name !== (null == anyProps.src ? null : anyProps.src) ||
	              instance.getAttribute("type") !==
	                (null == anyProps.type ? null : anyProps.type) ||
	              instance.getAttribute("crossorigin") !==
	                (null == anyProps.crossOrigin ? null : anyProps.crossOrigin)) &&
	            name &&
	            instance.hasAttribute("async") &&
	            !instance.hasAttribute("itemprop")
	          )
	            break;
	          return instance;
	        default:
	          return instance;
	      }
	    instance = getNextHydratable(instance.nextSibling);
	    if (null === instance) break;
	  }
	  return null;
	}
	function canHydrateTextInstance(instance, text, inRootOrSingleton) {
	  if ("" === text) return null;
	  for (; 3 !== instance.nodeType; ) {
	    if (
	      (1 !== instance.nodeType ||
	        "INPUT" !== instance.nodeName ||
	        "hidden" !== instance.type) &&
	      !inRootOrSingleton
	    )
	      return null;
	    instance = getNextHydratable(instance.nextSibling);
	    if (null === instance) return null;
	  }
	  return instance;
	}
	function getNextHydratable(node) {
	  for (; null != node; node = node.nextSibling) {
	    var nodeType = node.nodeType;
	    if (1 === nodeType || 3 === nodeType) break;
	    if (8 === nodeType) {
	      nodeType = node.data;
	      if (
	        "$" === nodeType ||
	        "$!" === nodeType ||
	        "$?" === nodeType ||
	        "F!" === nodeType ||
	        "F" === nodeType
	      )
	        break;
	      if ("/$" === nodeType) return null;
	    }
	  }
	  return node;
	}
	function getParentSuspenseInstance(targetInstance) {
	  targetInstance = targetInstance.previousSibling;
	  for (var depth = 0; targetInstance; ) {
	    if (8 === targetInstance.nodeType) {
	      var data = targetInstance.data;
	      if ("$" === data || "$!" === data || "$?" === data) {
	        if (0 === depth) return targetInstance;
	        depth--;
	      } else "/$" === data && depth++;
	    }
	    targetInstance = targetInstance.previousSibling;
	  }
	  return null;
	}
	function resolveSingletonInstance(type, props, rootContainerInstance) {
	  props = getOwnerDocumentFromRootContainer(rootContainerInstance);
	  switch (type) {
	    case "html":
	      type = props.documentElement;
	      if (!type) throw Error(formatProdErrorMessage(452));
	      return type;
	    case "head":
	      type = props.head;
	      if (!type) throw Error(formatProdErrorMessage(453));
	      return type;
	    case "body":
	      type = props.body;
	      if (!type) throw Error(formatProdErrorMessage(454));
	      return type;
	    default:
	      throw Error(formatProdErrorMessage(451));
	  }
	}
	var preloadPropsMap = new Map(),
	  preconnectsSet = new Set();
	function getHoistableRoot(container) {
	  return "function" === typeof container.getRootNode
	    ? container.getRootNode()
	    : container.ownerDocument;
	}
	var previousDispatcher = ReactDOMSharedInternals.d;
	ReactDOMSharedInternals.d = {
	  f: flushSyncWork,
	  r: requestFormReset,
	  D: prefetchDNS,
	  C: preconnect,
	  L: preload,
	  m: preloadModule,
	  X: preinitScript,
	  S: preinitStyle,
	  M: preinitModuleScript
	};
	function flushSyncWork() {
	  var previousWasRendering = previousDispatcher.f(),
	    wasRendering = flushSyncWork$1();
	  return previousWasRendering || wasRendering;
	}
	function requestFormReset(form) {
	  var formInst = getInstanceFromNode(form);
	  null !== formInst && 5 === formInst.tag && "form" === formInst.type
	    ? requestFormReset$1(formInst)
	    : previousDispatcher.r(form);
	}
	var globalDocument = "undefined" === typeof document ? null : document;
	function preconnectAs(rel, href, crossOrigin) {
	  var ownerDocument = globalDocument;
	  if (ownerDocument && "string" === typeof href && href) {
	    var limitedEscapedHref =
	      escapeSelectorAttributeValueInsideDoubleQuotes(href);
	    limitedEscapedHref =
	      'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]';
	    "string" === typeof crossOrigin &&
	      (limitedEscapedHref += '[crossorigin="' + crossOrigin + '"]');
	    preconnectsSet.has(limitedEscapedHref) ||
	      (preconnectsSet.add(limitedEscapedHref),
	      (rel = { rel: rel, crossOrigin: crossOrigin, href: href }),
	      null === ownerDocument.querySelector(limitedEscapedHref) &&
	        ((href = ownerDocument.createElement("link")),
	        setInitialProperties(href, "link", rel),
	        markNodeAsHoistable(href),
	        ownerDocument.head.appendChild(href)));
	  }
	}
	function prefetchDNS(href) {
	  previousDispatcher.D(href);
	  preconnectAs("dns-prefetch", href, null);
	}
	function preconnect(href, crossOrigin) {
	  previousDispatcher.C(href, crossOrigin);
	  preconnectAs("preconnect", href, crossOrigin);
	}
	function preload(href, as, options) {
	  previousDispatcher.L(href, as, options);
	  var ownerDocument = globalDocument;
	  if (ownerDocument && href && as) {
	    var preloadSelector =
	      'link[rel="preload"][as="' +
	      escapeSelectorAttributeValueInsideDoubleQuotes(as) +
	      '"]';
	    "image" === as
	      ? options && options.imageSrcSet
	        ? ((preloadSelector +=
	            '[imagesrcset="' +
	            escapeSelectorAttributeValueInsideDoubleQuotes(
	              options.imageSrcSet
	            ) +
	            '"]'),
	          "string" === typeof options.imageSizes &&
	            (preloadSelector +=
	              '[imagesizes="' +
	              escapeSelectorAttributeValueInsideDoubleQuotes(
	                options.imageSizes
	              ) +
	              '"]'))
	        : (preloadSelector +=
	            '[href="' +
	            escapeSelectorAttributeValueInsideDoubleQuotes(href) +
	            '"]')
	      : (preloadSelector +=
	          '[href="' +
	          escapeSelectorAttributeValueInsideDoubleQuotes(href) +
	          '"]');
	    var key = preloadSelector;
	    switch (as) {
	      case "style":
	        key = getStyleKey(href);
	        break;
	      case "script":
	        key = getScriptKey(href);
	    }
	    preloadPropsMap.has(key) ||
	      ((href = assign(
	        {
	          rel: "preload",
	          href:
	            "image" === as && options && options.imageSrcSet ? undefined : href,
	          as: as
	        },
	        options
	      )),
	      preloadPropsMap.set(key, href),
	      null !== ownerDocument.querySelector(preloadSelector) ||
	        ("style" === as &&
	          ownerDocument.querySelector(getStylesheetSelectorFromKey(key))) ||
	        ("script" === as &&
	          ownerDocument.querySelector(getScriptSelectorFromKey(key))) ||
	        ((as = ownerDocument.createElement("link")),
	        setInitialProperties(as, "link", href),
	        markNodeAsHoistable(as),
	        ownerDocument.head.appendChild(as)));
	  }
	}
	function preloadModule(href, options) {
	  previousDispatcher.m(href, options);
	  var ownerDocument = globalDocument;
	  if (ownerDocument && href) {
	    var as = options && "string" === typeof options.as ? options.as : "script",
	      preloadSelector =
	        'link[rel="modulepreload"][as="' +
	        escapeSelectorAttributeValueInsideDoubleQuotes(as) +
	        '"][href="' +
	        escapeSelectorAttributeValueInsideDoubleQuotes(href) +
	        '"]',
	      key = preloadSelector;
	    switch (as) {
	      case "audioworklet":
	      case "paintworklet":
	      case "serviceworker":
	      case "sharedworker":
	      case "worker":
	      case "script":
	        key = getScriptKey(href);
	    }
	    if (
	      !preloadPropsMap.has(key) &&
	      ((href = assign({ rel: "modulepreload", href: href }, options)),
	      preloadPropsMap.set(key, href),
	      null === ownerDocument.querySelector(preloadSelector))
	    ) {
	      switch (as) {
	        case "audioworklet":
	        case "paintworklet":
	        case "serviceworker":
	        case "sharedworker":
	        case "worker":
	        case "script":
	          if (ownerDocument.querySelector(getScriptSelectorFromKey(key)))
	            return;
	      }
	      as = ownerDocument.createElement("link");
	      setInitialProperties(as, "link", href);
	      markNodeAsHoistable(as);
	      ownerDocument.head.appendChild(as);
	    }
	  }
	}
	function preinitStyle(href, precedence, options) {
	  previousDispatcher.S(href, precedence, options);
	  var ownerDocument = globalDocument;
	  if (ownerDocument && href) {
	    var styles = getResourcesFromRoot(ownerDocument).hoistableStyles,
	      key = getStyleKey(href);
	    precedence = precedence || "default";
	    var resource = styles.get(key);
	    if (!resource) {
	      var state = { loading: 0, preload: null };
	      if (
	        (resource = ownerDocument.querySelector(
	          getStylesheetSelectorFromKey(key)
	        ))
	      )
	        state.loading = 5;
	      else {
	        href = assign(
	          { rel: "stylesheet", href: href, "data-precedence": precedence },
	          options
	        );
	        (options = preloadPropsMap.get(key)) &&
	          adoptPreloadPropsForStylesheet(href, options);
	        var link = (resource = ownerDocument.createElement("link"));
	        markNodeAsHoistable(link);
	        setInitialProperties(link, "link", href);
	        link._p = new Promise(function (resolve, reject) {
	          link.onload = resolve;
	          link.onerror = reject;
	        });
	        link.addEventListener("load", function () {
	          state.loading |= 1;
	        });
	        link.addEventListener("error", function () {
	          state.loading |= 2;
	        });
	        state.loading |= 4;
	        insertStylesheet(resource, precedence, ownerDocument);
	      }
	      resource = {
	        type: "stylesheet",
	        instance: resource,
	        count: 1,
	        state: state
	      };
	      styles.set(key, resource);
	    }
	  }
	}
	function preinitScript(src, options) {
	  previousDispatcher.X(src, options);
	  var ownerDocument = globalDocument;
	  if (ownerDocument && src) {
	    var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts,
	      key = getScriptKey(src),
	      resource = scripts.get(key);
	    resource ||
	      ((resource = ownerDocument.querySelector(getScriptSelectorFromKey(key))),
	      resource ||
	        ((src = assign({ src: src, async: true }, options)),
	        (options = preloadPropsMap.get(key)) &&
	          adoptPreloadPropsForScript(src, options),
	        (resource = ownerDocument.createElement("script")),
	        markNodeAsHoistable(resource),
	        setInitialProperties(resource, "link", src),
	        ownerDocument.head.appendChild(resource)),
	      (resource = {
	        type: "script",
	        instance: resource,
	        count: 1,
	        state: null
	      }),
	      scripts.set(key, resource));
	  }
	}
	function preinitModuleScript(src, options) {
	  previousDispatcher.M(src, options);
	  var ownerDocument = globalDocument;
	  if (ownerDocument && src) {
	    var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts,
	      key = getScriptKey(src),
	      resource = scripts.get(key);
	    resource ||
	      ((resource = ownerDocument.querySelector(getScriptSelectorFromKey(key))),
	      resource ||
	        ((src = assign({ src: src, async: true, type: "module" }, options)),
	        (options = preloadPropsMap.get(key)) &&
	          adoptPreloadPropsForScript(src, options),
	        (resource = ownerDocument.createElement("script")),
	        markNodeAsHoistable(resource),
	        setInitialProperties(resource, "link", src),
	        ownerDocument.head.appendChild(resource)),
	      (resource = {
	        type: "script",
	        instance: resource,
	        count: 1,
	        state: null
	      }),
	      scripts.set(key, resource));
	  }
	}
	function getResource(type, currentProps, pendingProps, currentResource) {
	  var JSCompiler_inline_result = (JSCompiler_inline_result =
	    rootInstanceStackCursor.current)
	    ? getHoistableRoot(JSCompiler_inline_result)
	    : null;
	  if (!JSCompiler_inline_result) throw Error(formatProdErrorMessage(446));
	  switch (type) {
	    case "meta":
	    case "title":
	      return null;
	    case "style":
	      return "string" === typeof pendingProps.precedence &&
	        "string" === typeof pendingProps.href
	        ? ((currentProps = getStyleKey(pendingProps.href)),
	          (pendingProps = getResourcesFromRoot(
	            JSCompiler_inline_result
	          ).hoistableStyles),
	          (currentResource = pendingProps.get(currentProps)),
	          currentResource ||
	            ((currentResource = {
	              type: "style",
	              instance: null,
	              count: 0,
	              state: null
	            }),
	            pendingProps.set(currentProps, currentResource)),
	          currentResource)
	        : { type: "void", instance: null, count: 0, state: null };
	    case "link":
	      if (
	        "stylesheet" === pendingProps.rel &&
	        "string" === typeof pendingProps.href &&
	        "string" === typeof pendingProps.precedence
	      ) {
	        type = getStyleKey(pendingProps.href);
	        var styles$242 = getResourcesFromRoot(
	            JSCompiler_inline_result
	          ).hoistableStyles,
	          resource$243 = styles$242.get(type);
	        resource$243 ||
	          ((JSCompiler_inline_result =
	            JSCompiler_inline_result.ownerDocument || JSCompiler_inline_result),
	          (resource$243 = {
	            type: "stylesheet",
	            instance: null,
	            count: 0,
	            state: { loading: 0, preload: null }
	          }),
	          styles$242.set(type, resource$243),
	          (styles$242 = JSCompiler_inline_result.querySelector(
	            getStylesheetSelectorFromKey(type)
	          )) &&
	            !styles$242._p &&
	            ((resource$243.instance = styles$242),
	            (resource$243.state.loading = 5)),
	          preloadPropsMap.has(type) ||
	            ((pendingProps = {
	              rel: "preload",
	              as: "style",
	              href: pendingProps.href,
	              crossOrigin: pendingProps.crossOrigin,
	              integrity: pendingProps.integrity,
	              media: pendingProps.media,
	              hrefLang: pendingProps.hrefLang,
	              referrerPolicy: pendingProps.referrerPolicy
	            }),
	            preloadPropsMap.set(type, pendingProps),
	            styles$242 ||
	              preloadStylesheet(
	                JSCompiler_inline_result,
	                type,
	                pendingProps,
	                resource$243.state
	              )));
	        if (currentProps && null === currentResource)
	          throw Error(formatProdErrorMessage(528, ""));
	        return resource$243;
	      }
	      if (currentProps && null !== currentResource)
	        throw Error(formatProdErrorMessage(529, ""));
	      return null;
	    case "script":
	      return (
	        (currentProps = pendingProps.async),
	        (pendingProps = pendingProps.src),
	        "string" === typeof pendingProps &&
	        currentProps &&
	        "function" !== typeof currentProps &&
	        "symbol" !== typeof currentProps
	          ? ((currentProps = getScriptKey(pendingProps)),
	            (pendingProps = getResourcesFromRoot(
	              JSCompiler_inline_result
	            ).hoistableScripts),
	            (currentResource = pendingProps.get(currentProps)),
	            currentResource ||
	              ((currentResource = {
	                type: "script",
	                instance: null,
	                count: 0,
	                state: null
	              }),
	              pendingProps.set(currentProps, currentResource)),
	            currentResource)
	          : { type: "void", instance: null, count: 0, state: null }
	      );
	    default:
	      throw Error(formatProdErrorMessage(444, type));
	  }
	}
	function getStyleKey(href) {
	  return 'href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"';
	}
	function getStylesheetSelectorFromKey(key) {
	  return 'link[rel="stylesheet"][' + key + "]";
	}
	function stylesheetPropsFromRawProps(rawProps) {
	  return assign({}, rawProps, {
	    "data-precedence": rawProps.precedence,
	    precedence: null
	  });
	}
	function preloadStylesheet(ownerDocument, key, preloadProps, state) {
	  ownerDocument.querySelector('link[rel="preload"][as="style"][' + key + "]")
	    ? (state.loading = 1)
	    : ((key = ownerDocument.createElement("link")),
	      (state.preload = key),
	      key.addEventListener("load", function () {
	        return (state.loading |= 1);
	      }),
	      key.addEventListener("error", function () {
	        return (state.loading |= 2);
	      }),
	      setInitialProperties(key, "link", preloadProps),
	      markNodeAsHoistable(key),
	      ownerDocument.head.appendChild(key));
	}
	function getScriptKey(src) {
	  return '[src="' + escapeSelectorAttributeValueInsideDoubleQuotes(src) + '"]';
	}
	function getScriptSelectorFromKey(key) {
	  return "script[async]" + key;
	}
	function acquireResource(hoistableRoot, resource, props) {
	  resource.count++;
	  if (null === resource.instance)
	    switch (resource.type) {
	      case "style":
	        var instance = hoistableRoot.querySelector(
	          'style[data-href~="' +
	            escapeSelectorAttributeValueInsideDoubleQuotes(props.href) +
	            '"]'
	        );
	        if (instance)
	          return (
	            (resource.instance = instance),
	            markNodeAsHoistable(instance),
	            instance
	          );
	        var styleProps = assign({}, props, {
	          "data-href": props.href,
	          "data-precedence": props.precedence,
	          href: null,
	          precedence: null
	        });
	        instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement(
	          "style"
	        );
	        markNodeAsHoistable(instance);
	        setInitialProperties(instance, "style", styleProps);
	        insertStylesheet(instance, props.precedence, hoistableRoot);
	        return (resource.instance = instance);
	      case "stylesheet":
	        styleProps = getStyleKey(props.href);
	        var instance$248 = hoistableRoot.querySelector(
	          getStylesheetSelectorFromKey(styleProps)
	        );
	        if (instance$248)
	          return (
	            (resource.state.loading |= 4),
	            (resource.instance = instance$248),
	            markNodeAsHoistable(instance$248),
	            instance$248
	          );
	        instance = stylesheetPropsFromRawProps(props);
	        (styleProps = preloadPropsMap.get(styleProps)) &&
	          adoptPreloadPropsForStylesheet(instance, styleProps);
	        instance$248 = (
	          hoistableRoot.ownerDocument || hoistableRoot
	        ).createElement("link");
	        markNodeAsHoistable(instance$248);
	        var linkInstance = instance$248;
	        linkInstance._p = new Promise(function (resolve, reject) {
	          linkInstance.onload = resolve;
	          linkInstance.onerror = reject;
	        });
	        setInitialProperties(instance$248, "link", instance);
	        resource.state.loading |= 4;
	        insertStylesheet(instance$248, props.precedence, hoistableRoot);
	        return (resource.instance = instance$248);
	      case "script":
	        instance$248 = getScriptKey(props.src);
	        if (
	          (styleProps = hoistableRoot.querySelector(
	            getScriptSelectorFromKey(instance$248)
	          ))
	        )
	          return (
	            (resource.instance = styleProps),
	            markNodeAsHoistable(styleProps),
	            styleProps
	          );
	        instance = props;
	        if ((styleProps = preloadPropsMap.get(instance$248)))
	          (instance = assign({}, props)),
	            adoptPreloadPropsForScript(instance, styleProps);
	        hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
	        styleProps = hoistableRoot.createElement("script");
	        markNodeAsHoistable(styleProps);
	        setInitialProperties(styleProps, "link", instance);
	        hoistableRoot.head.appendChild(styleProps);
	        return (resource.instance = styleProps);
	      case "void":
	        return null;
	      default:
	        throw Error(formatProdErrorMessage(443, resource.type));
	    }
	  else
	    "stylesheet" === resource.type &&
	      0 === (resource.state.loading & 4) &&
	      ((instance = resource.instance),
	      (resource.state.loading |= 4),
	      insertStylesheet(instance, props.precedence, hoistableRoot));
	  return resource.instance;
	}
	function insertStylesheet(instance, precedence, root) {
	  for (
	    var nodes = root.querySelectorAll(
	        'link[rel="stylesheet"][data-precedence],style[data-precedence]'
	      ),
	      last = nodes.length ? nodes[nodes.length - 1] : null,
	      prior = last,
	      i = 0;
	    i < nodes.length;
	    i++
	  ) {
	    var node = nodes[i];
	    if (node.dataset.precedence === precedence) prior = node;
	    else if (prior !== last) break;
	  }
	  prior
	    ? prior.parentNode.insertBefore(instance, prior.nextSibling)
	    : ((precedence = 9 === root.nodeType ? root.head : root),
	      precedence.insertBefore(instance, precedence.firstChild));
	}
	function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
	  null == stylesheetProps.crossOrigin &&
	    (stylesheetProps.crossOrigin = preloadProps.crossOrigin);
	  null == stylesheetProps.referrerPolicy &&
	    (stylesheetProps.referrerPolicy = preloadProps.referrerPolicy);
	  null == stylesheetProps.title && (stylesheetProps.title = preloadProps.title);
	}
	function adoptPreloadPropsForScript(scriptProps, preloadProps) {
	  null == scriptProps.crossOrigin &&
	    (scriptProps.crossOrigin = preloadProps.crossOrigin);
	  null == scriptProps.referrerPolicy &&
	    (scriptProps.referrerPolicy = preloadProps.referrerPolicy);
	  null == scriptProps.integrity &&
	    (scriptProps.integrity = preloadProps.integrity);
	}
	var tagCaches = null;
	function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
	  if (null === tagCaches) {
	    var cache = new Map();
	    var caches = (tagCaches = new Map());
	    caches.set(ownerDocument, cache);
	  } else
	    (caches = tagCaches),
	      (cache = caches.get(ownerDocument)),
	      cache || ((cache = new Map()), caches.set(ownerDocument, cache));
	  if (cache.has(type)) return cache;
	  cache.set(type, null);
	  ownerDocument = ownerDocument.getElementsByTagName(type);
	  for (caches = 0; caches < ownerDocument.length; caches++) {
	    var node = ownerDocument[caches];
	    if (
	      !(
	        node[internalHoistableMarker] ||
	        node[internalInstanceKey] ||
	        ("link" === type && "stylesheet" === node.getAttribute("rel"))
	      ) &&
	      "http://www.w3.org/2000/svg" !== node.namespaceURI
	    ) {
	      var nodeKey = node.getAttribute(keyAttribute) || "";
	      nodeKey = type + nodeKey;
	      var existing = cache.get(nodeKey);
	      existing ? existing.push(node) : cache.set(nodeKey, [node]);
	    }
	  }
	  return cache;
	}
	function mountHoistable(hoistableRoot, type, instance) {
	  hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
	  hoistableRoot.head.insertBefore(
	    instance,
	    "title" === type ? hoistableRoot.querySelector("head > title") : null
	  );
	}
	function isHostHoistableType(type, props, hostContext) {
	  if (1 === hostContext || null != props.itemProp) return false;
	  switch (type) {
	    case "meta":
	    case "title":
	      return true;
	    case "style":
	      if (
	        "string" !== typeof props.precedence ||
	        "string" !== typeof props.href ||
	        "" === props.href
	      )
	        break;
	      return true;
	    case "link":
	      if (
	        "string" !== typeof props.rel ||
	        "string" !== typeof props.href ||
	        "" === props.href ||
	        props.onLoad ||
	        props.onError
	      )
	        break;
	      switch (props.rel) {
	        case "stylesheet":
	          return (
	            (type = props.disabled),
	            "string" === typeof props.precedence && null == type
	          );
	        default:
	          return true;
	      }
	    case "script":
	      if (
	        props.async &&
	        "function" !== typeof props.async &&
	        "symbol" !== typeof props.async &&
	        !props.onLoad &&
	        !props.onError &&
	        props.src &&
	        "string" === typeof props.src
	      )
	        return true;
	  }
	  return false;
	}
	function preloadResource(resource) {
	  return "stylesheet" === resource.type && 0 === (resource.state.loading & 3)
	    ? false
	    : true;
	}
	var suspendedState = null;
	function noop() {}
	function suspendResource(hoistableRoot, resource, props) {
	  if (null === suspendedState) throw Error(formatProdErrorMessage(475));
	  var state = suspendedState;
	  if (
	    "stylesheet" === resource.type &&
	    ("string" !== typeof props.media ||
	      false !== matchMedia(props.media).matches) &&
	    0 === (resource.state.loading & 4)
	  ) {
	    if (null === resource.instance) {
	      var key = getStyleKey(props.href),
	        instance = hoistableRoot.querySelector(
	          getStylesheetSelectorFromKey(key)
	        );
	      if (instance) {
	        hoistableRoot = instance._p;
	        null !== hoistableRoot &&
	          "object" === typeof hoistableRoot &&
	          "function" === typeof hoistableRoot.then &&
	          (state.count++,
	          (state = onUnsuspend.bind(state)),
	          hoistableRoot.then(state, state));
	        resource.state.loading |= 4;
	        resource.instance = instance;
	        markNodeAsHoistable(instance);
	        return;
	      }
	      instance = hoistableRoot.ownerDocument || hoistableRoot;
	      props = stylesheetPropsFromRawProps(props);
	      (key = preloadPropsMap.get(key)) &&
	        adoptPreloadPropsForStylesheet(props, key);
	      instance = instance.createElement("link");
	      markNodeAsHoistable(instance);
	      var linkInstance = instance;
	      linkInstance._p = new Promise(function (resolve, reject) {
	        linkInstance.onload = resolve;
	        linkInstance.onerror = reject;
	      });
	      setInitialProperties(instance, "link", props);
	      resource.instance = instance;
	    }
	    null === state.stylesheets && (state.stylesheets = new Map());
	    state.stylesheets.set(resource, hoistableRoot);
	    (hoistableRoot = resource.state.preload) &&
	      0 === (resource.state.loading & 3) &&
	      (state.count++,
	      (resource = onUnsuspend.bind(state)),
	      hoistableRoot.addEventListener("load", resource),
	      hoistableRoot.addEventListener("error", resource));
	  }
	}
	function waitForCommitToBeReady() {
	  if (null === suspendedState) throw Error(formatProdErrorMessage(475));
	  var state = suspendedState;
	  state.stylesheets &&
	    0 === state.count &&
	    insertSuspendedStylesheets(state, state.stylesheets);
	  return 0 < state.count
	    ? function (commit) {
	        var stylesheetTimer = setTimeout(function () {
	          state.stylesheets &&
	            insertSuspendedStylesheets(state, state.stylesheets);
	          if (state.unsuspend) {
	            var unsuspend = state.unsuspend;
	            state.unsuspend = null;
	            unsuspend();
	          }
	        }, 6e4);
	        state.unsuspend = commit;
	        return function () {
	          state.unsuspend = null;
	          clearTimeout(stylesheetTimer);
	        };
	      }
	    : null;
	}
	function onUnsuspend() {
	  this.count--;
	  if (0 === this.count)
	    if (this.stylesheets) insertSuspendedStylesheets(this, this.stylesheets);
	    else if (this.unsuspend) {
	      var unsuspend = this.unsuspend;
	      this.unsuspend = null;
	      unsuspend();
	    }
	}
	var precedencesByRoot = null;
	function insertSuspendedStylesheets(state, resources) {
	  state.stylesheets = null;
	  null !== state.unsuspend &&
	    (state.count++,
	    (precedencesByRoot = new Map()),
	    resources.forEach(insertStylesheetIntoRoot, state),
	    (precedencesByRoot = null),
	    onUnsuspend.call(state));
	}
	function insertStylesheetIntoRoot(root, resource) {
	  if (!(resource.state.loading & 4)) {
	    var precedences = precedencesByRoot.get(root);
	    if (precedences) var last = precedences.get(null);
	    else {
	      precedences = new Map();
	      precedencesByRoot.set(root, precedences);
	      for (
	        var nodes = root.querySelectorAll(
	            "link[data-precedence],style[data-precedence]"
	          ),
	          i = 0;
	        i < nodes.length;
	        i++
	      ) {
	        var node = nodes[i];
	        if (
	          "LINK" === node.nodeName ||
	          "not all" !== node.getAttribute("media")
	        )
	          precedences.set(node.dataset.precedence, node), (last = node);
	      }
	      last && precedences.set(null, last);
	    }
	    nodes = resource.instance;
	    node = nodes.getAttribute("data-precedence");
	    i = precedences.get(node) || last;
	    i === last && precedences.set(null, nodes);
	    precedences.set(node, nodes);
	    this.count++;
	    last = onUnsuspend.bind(this);
	    nodes.addEventListener("load", last);
	    nodes.addEventListener("error", last);
	    i
	      ? i.parentNode.insertBefore(nodes, i.nextSibling)
	      : ((root = 9 === root.nodeType ? root.head : root),
	        root.insertBefore(nodes, root.firstChild));
	    resource.state.loading |= 4;
	  }
	}
	var HostTransitionContext = {
	  $$typeof: REACT_CONTEXT_TYPE,
	  Provider: null,
	  Consumer: null,
	  _currentValue: sharedNotPendingObject,
	  _currentValue2: sharedNotPendingObject,
	  _threadCount: 0
	};
	function FiberRootNode(
	  containerInfo,
	  tag,
	  hydrate,
	  identifierPrefix,
	  onUncaughtError,
	  onCaughtError,
	  onRecoverableError,
	  formState
	) {
	  this.tag = 1;
	  this.containerInfo = containerInfo;
	  this.finishedWork =
	    this.pingCache =
	    this.current =
	    this.pendingChildren =
	      null;
	  this.timeoutHandle = -1;
	  this.callbackNode =
	    this.next =
	    this.pendingContext =
	    this.context =
	    this.cancelPendingCommit =
	      null;
	  this.callbackPriority = 0;
	  this.expirationTimes = createLaneMap(-1);
	  this.entangledLanes =
	    this.shellSuspendCounter =
	    this.errorRecoveryDisabledLanes =
	    this.finishedLanes =
	    this.expiredLanes =
	    this.warmLanes =
	    this.pingedLanes =
	    this.suspendedLanes =
	    this.pendingLanes =
	      0;
	  this.entanglements = createLaneMap(0);
	  this.hiddenUpdates = createLaneMap(null);
	  this.identifierPrefix = identifierPrefix;
	  this.onUncaughtError = onUncaughtError;
	  this.onCaughtError = onCaughtError;
	  this.onRecoverableError = onRecoverableError;
	  this.pooledCache = null;
	  this.pooledCacheLanes = 0;
	  this.formState = formState;
	  this.incompleteTransitions = new Map();
	}
	function createFiberRoot(
	  containerInfo,
	  tag,
	  hydrate,
	  initialChildren,
	  hydrationCallbacks,
	  isStrictMode,
	  identifierPrefix,
	  onUncaughtError,
	  onCaughtError,
	  onRecoverableError,
	  transitionCallbacks,
	  formState
	) {
	  containerInfo = new FiberRootNode(
	    containerInfo,
	    tag,
	    hydrate,
	    identifierPrefix,
	    onUncaughtError,
	    onCaughtError,
	    onRecoverableError,
	    formState
	  );
	  tag = 1;
	  true === isStrictMode && (tag |= 24);
	  isStrictMode = createFiberImplClass(3, null, null, tag);
	  containerInfo.current = isStrictMode;
	  isStrictMode.stateNode = containerInfo;
	  tag = createCache();
	  tag.refCount++;
	  containerInfo.pooledCache = tag;
	  tag.refCount++;
	  isStrictMode.memoizedState = {
	    element: initialChildren,
	    isDehydrated: hydrate,
	    cache: tag
	  };
	  initializeUpdateQueue(isStrictMode);
	  return containerInfo;
	}
	function getContextForSubtree(parentComponent) {
	  if (!parentComponent) return emptyContextObject;
	  parentComponent = emptyContextObject;
	  return parentComponent;
	}
	function updateContainerImpl(
	  rootFiber,
	  lane,
	  element,
	  container,
	  parentComponent,
	  callback
	) {
	  parentComponent = getContextForSubtree(parentComponent);
	  null === container.context
	    ? (container.context = parentComponent)
	    : (container.pendingContext = parentComponent);
	  container = createUpdate(lane);
	  container.payload = { element: element };
	  callback = undefined === callback ? null : callback;
	  null !== callback && (container.callback = callback);
	  element = enqueueUpdate(rootFiber, container, lane);
	  null !== element &&
	    (scheduleUpdateOnFiber(element, rootFiber, lane),
	    entangleTransitions(element, rootFiber, lane));
	}
	function markRetryLaneImpl(fiber, retryLane) {
	  fiber = fiber.memoizedState;
	  if (null !== fiber && null !== fiber.dehydrated) {
	    var a = fiber.retryLane;
	    fiber.retryLane = 0 !== a && a < retryLane ? a : retryLane;
	  }
	}
	function markRetryLaneIfNotHydrated(fiber, retryLane) {
	  markRetryLaneImpl(fiber, retryLane);
	  (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
	}
	function attemptContinuousHydration(fiber) {
	  if (13 === fiber.tag) {
	    var root = enqueueConcurrentRenderForLane(fiber, 67108864);
	    null !== root && scheduleUpdateOnFiber(root, fiber, 67108864);
	    markRetryLaneIfNotHydrated(fiber, 67108864);
	  }
	}
	var _enabled = true;
	function dispatchDiscreteEvent(
	  domEventName,
	  eventSystemFlags,
	  container,
	  nativeEvent
	) {
	  var prevTransition = ReactSharedInternals.T;
	  ReactSharedInternals.T = null;
	  var previousPriority = ReactDOMSharedInternals.p;
	  try {
	    (ReactDOMSharedInternals.p = 2),
	      dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
	  } finally {
	    (ReactDOMSharedInternals.p = previousPriority),
	      (ReactSharedInternals.T = prevTransition);
	  }
	}
	function dispatchContinuousEvent(
	  domEventName,
	  eventSystemFlags,
	  container,
	  nativeEvent
	) {
	  var prevTransition = ReactSharedInternals.T;
	  ReactSharedInternals.T = null;
	  var previousPriority = ReactDOMSharedInternals.p;
	  try {
	    (ReactDOMSharedInternals.p = 8),
	      dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
	  } finally {
	    (ReactDOMSharedInternals.p = previousPriority),
	      (ReactSharedInternals.T = prevTransition);
	  }
	}
	function dispatchEvent(
	  domEventName,
	  eventSystemFlags,
	  targetContainer,
	  nativeEvent
	) {
	  if (_enabled) {
	    var blockedOn = findInstanceBlockingEvent(nativeEvent);
	    if (null === blockedOn)
	      dispatchEventForPluginEventSystem(
	        domEventName,
	        eventSystemFlags,
	        nativeEvent,
	        return_targetInst,
	        targetContainer
	      ),
	        clearIfContinuousEvent(domEventName, nativeEvent);
	    else if (
	      queueIfContinuousEvent(
	        blockedOn,
	        domEventName,
	        eventSystemFlags,
	        targetContainer,
	        nativeEvent
	      )
	    )
	      nativeEvent.stopPropagation();
	    else if (
	      (clearIfContinuousEvent(domEventName, nativeEvent),
	      eventSystemFlags & 4 &&
	        -1 < discreteReplayableEvents.indexOf(domEventName))
	    ) {
	      for (; null !== blockedOn; ) {
	        var fiber = getInstanceFromNode(blockedOn);
	        if (null !== fiber)
	          switch (fiber.tag) {
	            case 3:
	              fiber = fiber.stateNode;
	              if (fiber.current.memoizedState.isDehydrated) {
	                var lanes = getHighestPriorityLanes(fiber.pendingLanes);
	                if (0 !== lanes) {
	                  var root = fiber;
	                  root.pendingLanes |= 2;
	                  for (root.entangledLanes |= 2; lanes; ) {
	                    var lane = 1 << (31 - clz32(lanes));
	                    root.entanglements[1] |= lane;
	                    lanes &= ~lane;
	                  }
	                  ensureRootIsScheduled(fiber);
	                  0 === (executionContext & 6) &&
	                    ((workInProgressRootRenderTargetTime = now() + 500),
	                    flushSyncWorkAcrossRoots_impl(0));
	                }
	              }
	              break;
	            case 13:
	              (root = enqueueConcurrentRenderForLane(fiber, 2)),
	                null !== root && scheduleUpdateOnFiber(root, fiber, 2),
	                flushSyncWork$1(),
	                markRetryLaneIfNotHydrated(fiber, 2);
	          }
	        fiber = findInstanceBlockingEvent(nativeEvent);
	        null === fiber &&
	          dispatchEventForPluginEventSystem(
	            domEventName,
	            eventSystemFlags,
	            nativeEvent,
	            return_targetInst,
	            targetContainer
	          );
	        if (fiber === blockedOn) break;
	        blockedOn = fiber;
	      }
	      null !== blockedOn && nativeEvent.stopPropagation();
	    } else
	      dispatchEventForPluginEventSystem(
	        domEventName,
	        eventSystemFlags,
	        nativeEvent,
	        null,
	        targetContainer
	      );
	  }
	}
	function findInstanceBlockingEvent(nativeEvent) {
	  nativeEvent = getEventTarget(nativeEvent);
	  return findInstanceBlockingTarget(nativeEvent);
	}
	var return_targetInst = null;
	function findInstanceBlockingTarget(targetNode) {
	  return_targetInst = null;
	  targetNode = getClosestInstanceFromNode(targetNode);
	  if (null !== targetNode) {
	    var nearestMounted = getNearestMountedFiber(targetNode);
	    if (null === nearestMounted) targetNode = null;
	    else {
	      var tag = nearestMounted.tag;
	      if (13 === tag) {
	        targetNode = getSuspenseInstanceFromFiber(nearestMounted);
	        if (null !== targetNode) return targetNode;
	        targetNode = null;
	      } else if (3 === tag) {
	        if (nearestMounted.stateNode.current.memoizedState.isDehydrated)
	          return 3 === nearestMounted.tag
	            ? nearestMounted.stateNode.containerInfo
	            : null;
	        targetNode = null;
	      } else nearestMounted !== targetNode && (targetNode = null);
	    }
	  }
	  return_targetInst = targetNode;
	  return null;
	}
	function getEventPriority(domEventName) {
	  switch (domEventName) {
	    case "beforetoggle":
	    case "cancel":
	    case "click":
	    case "close":
	    case "contextmenu":
	    case "copy":
	    case "cut":
	    case "auxclick":
	    case "dblclick":
	    case "dragend":
	    case "dragstart":
	    case "drop":
	    case "focusin":
	    case "focusout":
	    case "input":
	    case "invalid":
	    case "keydown":
	    case "keypress":
	    case "keyup":
	    case "mousedown":
	    case "mouseup":
	    case "paste":
	    case "pause":
	    case "play":
	    case "pointercancel":
	    case "pointerdown":
	    case "pointerup":
	    case "ratechange":
	    case "reset":
	    case "resize":
	    case "seeked":
	    case "submit":
	    case "toggle":
	    case "touchcancel":
	    case "touchend":
	    case "touchstart":
	    case "volumechange":
	    case "change":
	    case "selectionchange":
	    case "textInput":
	    case "compositionstart":
	    case "compositionend":
	    case "compositionupdate":
	    case "beforeblur":
	    case "afterblur":
	    case "beforeinput":
	    case "blur":
	    case "fullscreenchange":
	    case "focus":
	    case "hashchange":
	    case "popstate":
	    case "select":
	    case "selectstart":
	      return 2;
	    case "drag":
	    case "dragenter":
	    case "dragexit":
	    case "dragleave":
	    case "dragover":
	    case "mousemove":
	    case "mouseout":
	    case "mouseover":
	    case "pointermove":
	    case "pointerout":
	    case "pointerover":
	    case "scroll":
	    case "touchmove":
	    case "wheel":
	    case "mouseenter":
	    case "mouseleave":
	    case "pointerenter":
	    case "pointerleave":
	      return 8;
	    case "message":
	      switch (getCurrentPriorityLevel()) {
	        case ImmediatePriority:
	          return 2;
	        case UserBlockingPriority:
	          return 8;
	        case NormalPriority$1:
	        case LowPriority:
	          return 32;
	        case IdlePriority:
	          return 268435456;
	        default:
	          return 32;
	      }
	    default:
	      return 32;
	  }
	}
	var hasScheduledReplayAttempt = false,
	  queuedFocus = null,
	  queuedDrag = null,
	  queuedMouse = null,
	  queuedPointers = new Map(),
	  queuedPointerCaptures = new Map(),
	  queuedExplicitHydrationTargets = [],
	  discreteReplayableEvents =
	    "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(
	      " "
	    );
	function clearIfContinuousEvent(domEventName, nativeEvent) {
	  switch (domEventName) {
	    case "focusin":
	    case "focusout":
	      queuedFocus = null;
	      break;
	    case "dragenter":
	    case "dragleave":
	      queuedDrag = null;
	      break;
	    case "mouseover":
	    case "mouseout":
	      queuedMouse = null;
	      break;
	    case "pointerover":
	    case "pointerout":
	      queuedPointers.delete(nativeEvent.pointerId);
	      break;
	    case "gotpointercapture":
	    case "lostpointercapture":
	      queuedPointerCaptures.delete(nativeEvent.pointerId);
	  }
	}
	function accumulateOrCreateContinuousQueuedReplayableEvent(
	  existingQueuedEvent,
	  blockedOn,
	  domEventName,
	  eventSystemFlags,
	  targetContainer,
	  nativeEvent
	) {
	  if (
	    null === existingQueuedEvent ||
	    existingQueuedEvent.nativeEvent !== nativeEvent
	  )
	    return (
	      (existingQueuedEvent = {
	        blockedOn: blockedOn,
	        domEventName: domEventName,
	        eventSystemFlags: eventSystemFlags,
	        nativeEvent: nativeEvent,
	        targetContainers: [targetContainer]
	      }),
	      null !== blockedOn &&
	        ((blockedOn = getInstanceFromNode(blockedOn)),
	        null !== blockedOn && attemptContinuousHydration(blockedOn)),
	      existingQueuedEvent
	    );
	  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
	  blockedOn = existingQueuedEvent.targetContainers;
	  null !== targetContainer &&
	    -1 === blockedOn.indexOf(targetContainer) &&
	    blockedOn.push(targetContainer);
	  return existingQueuedEvent;
	}
	function queueIfContinuousEvent(
	  blockedOn,
	  domEventName,
	  eventSystemFlags,
	  targetContainer,
	  nativeEvent
	) {
	  switch (domEventName) {
	    case "focusin":
	      return (
	        (queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
	          queuedFocus,
	          blockedOn,
	          domEventName,
	          eventSystemFlags,
	          targetContainer,
	          nativeEvent
	        )),
	        true
	      );
	    case "dragenter":
	      return (
	        (queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
	          queuedDrag,
	          blockedOn,
	          domEventName,
	          eventSystemFlags,
	          targetContainer,
	          nativeEvent
	        )),
	        true
	      );
	    case "mouseover":
	      return (
	        (queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
	          queuedMouse,
	          blockedOn,
	          domEventName,
	          eventSystemFlags,
	          targetContainer,
	          nativeEvent
	        )),
	        true
	      );
	    case "pointerover":
	      var pointerId = nativeEvent.pointerId;
	      queuedPointers.set(
	        pointerId,
	        accumulateOrCreateContinuousQueuedReplayableEvent(
	          queuedPointers.get(pointerId) || null,
	          blockedOn,
	          domEventName,
	          eventSystemFlags,
	          targetContainer,
	          nativeEvent
	        )
	      );
	      return true;
	    case "gotpointercapture":
	      return (
	        (pointerId = nativeEvent.pointerId),
	        queuedPointerCaptures.set(
	          pointerId,
	          accumulateOrCreateContinuousQueuedReplayableEvent(
	            queuedPointerCaptures.get(pointerId) || null,
	            blockedOn,
	            domEventName,
	            eventSystemFlags,
	            targetContainer,
	            nativeEvent
	          )
	        ),
	        true
	      );
	  }
	  return false;
	}
	function attemptExplicitHydrationTarget(queuedTarget) {
	  var targetInst = getClosestInstanceFromNode(queuedTarget.target);
	  if (null !== targetInst) {
	    var nearestMounted = getNearestMountedFiber(targetInst);
	    if (null !== nearestMounted)
	      if (((targetInst = nearestMounted.tag), 13 === targetInst)) {
	        if (
	          ((targetInst = getSuspenseInstanceFromFiber(nearestMounted)),
	          null !== targetInst)
	        ) {
	          queuedTarget.blockedOn = targetInst;
	          runWithPriority(queuedTarget.priority, function () {
	            if (13 === nearestMounted.tag) {
	              var lane = requestUpdateLane(),
	                root = enqueueConcurrentRenderForLane(nearestMounted, lane);
	              null !== root &&
	                scheduleUpdateOnFiber(root, nearestMounted, lane);
	              markRetryLaneIfNotHydrated(nearestMounted, lane);
	            }
	          });
	          return;
	        }
	      } else if (
	        3 === targetInst &&
	        nearestMounted.stateNode.current.memoizedState.isDehydrated
	      ) {
	        queuedTarget.blockedOn =
	          3 === nearestMounted.tag
	            ? nearestMounted.stateNode.containerInfo
	            : null;
	        return;
	      }
	  }
	  queuedTarget.blockedOn = null;
	}
	function attemptReplayContinuousQueuedEvent(queuedEvent) {
	  if (null !== queuedEvent.blockedOn) return false;
	  for (
	    var targetContainers = queuedEvent.targetContainers;
	    0 < targetContainers.length;

	  ) {
	    var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);
	    if (null === nextBlockedOn) {
	      nextBlockedOn = queuedEvent.nativeEvent;
	      var nativeEventClone = new nextBlockedOn.constructor(
	        nextBlockedOn.type,
	        nextBlockedOn
	      );
	      currentReplayingEvent = nativeEventClone;
	      nextBlockedOn.target.dispatchEvent(nativeEventClone);
	      currentReplayingEvent = null;
	    } else
	      return (
	        (targetContainers = getInstanceFromNode(nextBlockedOn)),
	        null !== targetContainers &&
	          attemptContinuousHydration(targetContainers),
	        (queuedEvent.blockedOn = nextBlockedOn),
	        false
	      );
	    targetContainers.shift();
	  }
	  return true;
	}
	function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
	  attemptReplayContinuousQueuedEvent(queuedEvent) && map.delete(key);
	}
	function replayUnblockedEvents() {
	  hasScheduledReplayAttempt = false;
	  null !== queuedFocus &&
	    attemptReplayContinuousQueuedEvent(queuedFocus) &&
	    (queuedFocus = null);
	  null !== queuedDrag &&
	    attemptReplayContinuousQueuedEvent(queuedDrag) &&
	    (queuedDrag = null);
	  null !== queuedMouse &&
	    attemptReplayContinuousQueuedEvent(queuedMouse) &&
	    (queuedMouse = null);
	  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
	  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
	}
	function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
	  queuedEvent.blockedOn === unblocked &&
	    ((queuedEvent.blockedOn = null),
	    hasScheduledReplayAttempt ||
	      ((hasScheduledReplayAttempt = true),
	      Scheduler.unstable_scheduleCallback(
	        Scheduler.unstable_NormalPriority,
	        replayUnblockedEvents
	      )));
	}
	var lastScheduledReplayQueue = null;
	function scheduleReplayQueueIfNeeded(formReplayingQueue) {
	  lastScheduledReplayQueue !== formReplayingQueue &&
	    ((lastScheduledReplayQueue = formReplayingQueue),
	    Scheduler.unstable_scheduleCallback(
	      Scheduler.unstable_NormalPriority,
	      function () {
	        lastScheduledReplayQueue === formReplayingQueue &&
	          (lastScheduledReplayQueue = null);
	        for (var i = 0; i < formReplayingQueue.length; i += 3) {
	          var form = formReplayingQueue[i],
	            submitterOrAction = formReplayingQueue[i + 1],
	            formData = formReplayingQueue[i + 2];
	          if ("function" !== typeof submitterOrAction)
	            if (null === findInstanceBlockingTarget(submitterOrAction || form))
	              continue;
	            else break;
	          var formInst = getInstanceFromNode(form);
	          null !== formInst &&
	            (formReplayingQueue.splice(i, 3),
	            (i -= 3),
	            startHostTransition(
	              formInst,
	              {
	                pending: true,
	                data: formData,
	                method: form.method,
	                action: submitterOrAction
	              },
	              submitterOrAction,
	              formData
	            ));
	        }
	      }
	    ));
	}
	function retryIfBlockedOn(unblocked) {
	  function unblock(queuedEvent) {
	    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
	  }
	  null !== queuedFocus && scheduleCallbackIfUnblocked(queuedFocus, unblocked);
	  null !== queuedDrag && scheduleCallbackIfUnblocked(queuedDrag, unblocked);
	  null !== queuedMouse && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
	  queuedPointers.forEach(unblock);
	  queuedPointerCaptures.forEach(unblock);
	  for (var i = 0; i < queuedExplicitHydrationTargets.length; i++) {
	    var queuedTarget = queuedExplicitHydrationTargets[i];
	    queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
	  }
	  for (
	    ;
	    0 < queuedExplicitHydrationTargets.length &&
	    ((i = queuedExplicitHydrationTargets[0]), null === i.blockedOn);

	  )
	    attemptExplicitHydrationTarget(i),
	      null === i.blockedOn && queuedExplicitHydrationTargets.shift();
	  i = (unblocked.ownerDocument || unblocked).$$reactFormReplay;
	  if (null != i)
	    for (queuedTarget = 0; queuedTarget < i.length; queuedTarget += 3) {
	      var form = i[queuedTarget],
	        submitterOrAction = i[queuedTarget + 1],
	        formProps = form[internalPropsKey] || null;
	      if ("function" === typeof submitterOrAction)
	        formProps || scheduleReplayQueueIfNeeded(i);
	      else if (formProps) {
	        var action = null;
	        if (submitterOrAction && submitterOrAction.hasAttribute("formAction"))
	          if (
	            ((form = submitterOrAction),
	            (formProps = submitterOrAction[internalPropsKey] || null))
	          )
	            action = formProps.formAction;
	          else {
	            if (null !== findInstanceBlockingTarget(form)) continue;
	          }
	        else action = formProps.action;
	        "function" === typeof action
	          ? (i[queuedTarget + 1] = action)
	          : (i.splice(queuedTarget, 3), (queuedTarget -= 3));
	        scheduleReplayQueueIfNeeded(i);
	      }
	    }
	}
	function ReactDOMRoot(internalRoot) {
	  this._internalRoot = internalRoot;
	}
	ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render =
	  function (children) {
	    var root = this._internalRoot;
	    if (null === root) throw Error(formatProdErrorMessage(409));
	    var current = root.current,
	      lane = requestUpdateLane();
	    updateContainerImpl(current, lane, children, root, null, null);
	  };
	ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount =
	  function () {
	    var root = this._internalRoot;
	    if (null !== root) {
	      this._internalRoot = null;
	      var container = root.containerInfo;
	      0 === root.tag && flushPassiveEffects();
	      updateContainerImpl(root.current, 2, null, root, null, null);
	      flushSyncWork$1();
	      container[internalContainerInstanceKey] = null;
	    }
	  };
	function ReactDOMHydrationRoot(internalRoot) {
	  this._internalRoot = internalRoot;
	}
	ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (target) {
	  if (target) {
	    var updatePriority = resolveUpdatePriority();
	    target = { blockedOn: null, target: target, priority: updatePriority };
	    for (
	      var i = 0;
	      i < queuedExplicitHydrationTargets.length &&
	      0 !== updatePriority &&
	      updatePriority < queuedExplicitHydrationTargets[i].priority;
	      i++
	    );
	    queuedExplicitHydrationTargets.splice(i, 0, target);
	    0 === i && attemptExplicitHydrationTarget(target);
	  }
	};
	var isomorphicReactPackageVersion$jscomp$inline_1686 = React.version;
	if (
	  "19.0.0" !==
	  isomorphicReactPackageVersion$jscomp$inline_1686
	)
	  throw Error(
	    formatProdErrorMessage(
	      527,
	      isomorphicReactPackageVersion$jscomp$inline_1686,
	      "19.0.0"
	    )
	  );
	ReactDOMSharedInternals.findDOMNode = function (componentOrElement) {
	  var fiber = componentOrElement._reactInternals;
	  if (undefined === fiber) {
	    if ("function" === typeof componentOrElement.render)
	      throw Error(formatProdErrorMessage(188));
	    componentOrElement = Object.keys(componentOrElement).join(",");
	    throw Error(formatProdErrorMessage(268, componentOrElement));
	  }
	  componentOrElement = findCurrentFiberUsingSlowPath(fiber);
	  componentOrElement =
	    null !== componentOrElement
	      ? findCurrentHostFiberImpl(componentOrElement)
	      : null;
	  componentOrElement =
	    null === componentOrElement ? null : componentOrElement.stateNode;
	  return componentOrElement;
	};
	var internals$jscomp$inline_2165 = {
	  bundleType: 0,
	  version: "19.0.0",
	  rendererPackageName: "react-dom",
	  currentDispatcherRef: ReactSharedInternals,
	  findFiberByHostInstance: getClosestInstanceFromNode,
	  reconcilerVersion: "19.0.0"
	};
	if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
	  var hook$jscomp$inline_2166 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
	  if (
	    !hook$jscomp$inline_2166.isDisabled &&
	    hook$jscomp$inline_2166.supportsFiber
	  )
	    try {
	      (rendererID = hook$jscomp$inline_2166.inject(
	        internals$jscomp$inline_2165
	      )),
	        (injectedHook = hook$jscomp$inline_2166);
	    } catch (err) {}
	}
	reactDomClient_production.createRoot = function (container, options) {
	  if (!isValidContainer(container)) throw Error(formatProdErrorMessage(299));
	  var isStrictMode = false,
	    identifierPrefix = "",
	    onUncaughtError = defaultOnUncaughtError,
	    onCaughtError = defaultOnCaughtError,
	    onRecoverableError = defaultOnRecoverableError,
	    transitionCallbacks = null;
	  null !== options &&
	    undefined !== options &&
	    (true === options.unstable_strictMode && (isStrictMode = true),
	    undefined !== options.identifierPrefix &&
	      (identifierPrefix = options.identifierPrefix),
	    undefined !== options.onUncaughtError &&
	      (onUncaughtError = options.onUncaughtError),
	    undefined !== options.onCaughtError && (onCaughtError = options.onCaughtError),
	    undefined !== options.onRecoverableError &&
	      (onRecoverableError = options.onRecoverableError),
	    undefined !== options.unstable_transitionCallbacks &&
	      (transitionCallbacks = options.unstable_transitionCallbacks));
	  options = createFiberRoot(
	    container,
	    1,
	    false,
	    null,
	    null,
	    isStrictMode,
	    identifierPrefix,
	    onUncaughtError,
	    onCaughtError,
	    onRecoverableError,
	    transitionCallbacks,
	    null
	  );
	  container[internalContainerInstanceKey] = options.current;
	  listenToAllSupportedEvents(
	    8 === container.nodeType ? container.parentNode : container
	  );
	  return new ReactDOMRoot(options);
	};
	reactDomClient_production.hydrateRoot = function (container, initialChildren, options) {
	  if (!isValidContainer(container)) throw Error(formatProdErrorMessage(299));
	  var isStrictMode = false,
	    identifierPrefix = "",
	    onUncaughtError = defaultOnUncaughtError,
	    onCaughtError = defaultOnCaughtError,
	    onRecoverableError = defaultOnRecoverableError,
	    transitionCallbacks = null,
	    formState = null;
	  null !== options &&
	    undefined !== options &&
	    (true === options.unstable_strictMode && (isStrictMode = true),
	    undefined !== options.identifierPrefix &&
	      (identifierPrefix = options.identifierPrefix),
	    undefined !== options.onUncaughtError &&
	      (onUncaughtError = options.onUncaughtError),
	    undefined !== options.onCaughtError && (onCaughtError = options.onCaughtError),
	    undefined !== options.onRecoverableError &&
	      (onRecoverableError = options.onRecoverableError),
	    undefined !== options.unstable_transitionCallbacks &&
	      (transitionCallbacks = options.unstable_transitionCallbacks),
	    undefined !== options.formState && (formState = options.formState));
	  initialChildren = createFiberRoot(
	    container,
	    1,
	    true,
	    initialChildren,
	    null != options ? options : null,
	    isStrictMode,
	    identifierPrefix,
	    onUncaughtError,
	    onCaughtError,
	    onRecoverableError,
	    transitionCallbacks,
	    formState
	  );
	  initialChildren.context = getContextForSubtree(null);
	  options = initialChildren.current;
	  isStrictMode = requestUpdateLane();
	  identifierPrefix = createUpdate(isStrictMode);
	  identifierPrefix.callback = null;
	  enqueueUpdate(options, identifierPrefix, isStrictMode);
	  initialChildren.current.lanes = isStrictMode;
	  markRootUpdated$1(initialChildren, isStrictMode);
	  ensureRootIsScheduled(initialChildren);
	  container[internalContainerInstanceKey] = initialChildren.current;
	  listenToAllSupportedEvents(container);
	  return new ReactDOMHydrationRoot(initialChildren);
	};
	reactDomClient_production.version = "19.0.0";
	return reactDomClient_production;
}

var reactDomClient_development = {};

/**
 * @license React
 * react-dom-client.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactDomClient_development;

function requireReactDomClient_development () {
	if (hasRequiredReactDomClient_development) return reactDomClient_development;
	hasRequiredReactDomClient_development = 1;
	"production" !== process.env.NODE_ENV &&
	  (function () {
	    function findHook(fiber, id) {
	      for (fiber = fiber.memoizedState; null !== fiber && 0 < id; )
	        (fiber = fiber.next), id--;
	      return fiber;
	    }
	    function copyWithSetImpl(obj, path, index, value) {
	      if (index >= path.length) return value;
	      var key = path[index],
	        updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
	      updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
	      return updated;
	    }
	    function copyWithRename(obj, oldPath, newPath) {
	      if (oldPath.length !== newPath.length)
	        console.warn("copyWithRename() expects paths of the same length");
	      else {
	        for (var i = 0; i < newPath.length - 1; i++)
	          if (oldPath[i] !== newPath[i]) {
	            console.warn(
	              "copyWithRename() expects paths to be the same except for the deepest key"
	            );
	            return;
	          }
	        return copyWithRenameImpl(obj, oldPath, newPath, 0);
	      }
	    }
	    function copyWithRenameImpl(obj, oldPath, newPath, index) {
	      var oldKey = oldPath[index],
	        updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
	      index + 1 === oldPath.length
	        ? ((updated[newPath[index]] = updated[oldKey]),
	          isArrayImpl(updated)
	            ? updated.splice(oldKey, 1)
	            : delete updated[oldKey])
	        : (updated[oldKey] = copyWithRenameImpl(
	            obj[oldKey],
	            oldPath,
	            newPath,
	            index + 1
	          ));
	      return updated;
	    }
	    function copyWithDeleteImpl(obj, path, index) {
	      var key = path[index],
	        updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
	      if (index + 1 === path.length)
	        return (
	          isArrayImpl(updated) ? updated.splice(key, 1) : delete updated[key],
	          updated
	        );
	      updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
	      return updated;
	    }
	    function shouldSuspendImpl() {
	      return false;
	    }
	    function shouldErrorImpl() {
	      return null;
	    }
	    function createFiber(tag, pendingProps, key, mode) {
	      return new FiberNode(tag, pendingProps, key, mode);
	    }
	    function warnInvalidHookAccess() {
	      console.error(
	        "Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://react.dev/link/rules-of-hooks"
	      );
	    }
	    function warnInvalidContextAccess() {
	      console.error(
	        "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
	      );
	    }
	    function noop$2() {}
	    function warnForMissingKey() {}
	    function setToSortedString(set) {
	      var array = [];
	      set.forEach(function (value) {
	        array.push(value);
	      });
	      return array.sort().join(", ");
	    }
	    function scheduleRoot(root, element) {
	      root.context === emptyContextObject &&
	        (updateContainerSync(element, root, null, null), flushSyncWork$1());
	    }
	    function scheduleRefresh(root, update) {
	      if (null !== resolveFamily) {
	        var staleFamilies = update.staleFamilies;
	        update = update.updatedFamilies;
	        flushPassiveEffects();
	        scheduleFibersWithFamiliesRecursively(
	          root.current,
	          update,
	          staleFamilies
	        );
	        flushSyncWork$1();
	      }
	    }
	    function setRefreshHandler(handler) {
	      resolveFamily = handler;
	    }
	    function isValidContainer(node) {
	      return !(
	        !node ||
	        (1 !== node.nodeType && 9 !== node.nodeType && 11 !== node.nodeType)
	      );
	    }
	    function getIteratorFn(maybeIterable) {
	      if (null === maybeIterable || "object" !== typeof maybeIterable)
	        return null;
	      maybeIterable =
	        (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
	        maybeIterable["@@iterator"];
	      return "function" === typeof maybeIterable ? maybeIterable : null;
	    }
	    function getComponentNameFromType(type) {
	      if (null == type) return null;
	      if ("function" === typeof type)
	        return type.$$typeof === REACT_CLIENT_REFERENCE
	          ? null
	          : type.displayName || type.name || null;
	      if ("string" === typeof type) return type;
	      switch (type) {
	        case REACT_FRAGMENT_TYPE:
	          return "Fragment";
	        case REACT_PORTAL_TYPE:
	          return "Portal";
	        case REACT_PROFILER_TYPE:
	          return "Profiler";
	        case REACT_STRICT_MODE_TYPE:
	          return "StrictMode";
	        case REACT_SUSPENSE_TYPE:
	          return "Suspense";
	        case REACT_SUSPENSE_LIST_TYPE:
	          return "SuspenseList";
	      }
	      if ("object" === typeof type)
	        switch (
	          ("number" === typeof type.tag &&
	            console.error(
	              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
	            ),
	          type.$$typeof)
	        ) {
	          case REACT_CONTEXT_TYPE:
	            return (type.displayName || "Context") + ".Provider";
	          case REACT_CONSUMER_TYPE:
	            return (type._context.displayName || "Context") + ".Consumer";
	          case REACT_FORWARD_REF_TYPE:
	            var innerType = type.render;
	            type = type.displayName;
	            type ||
	              ((type = innerType.displayName || innerType.name || ""),
	              (type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef"));
	            return type;
	          case REACT_MEMO_TYPE:
	            return (
	              (innerType = type.displayName || null),
	              null !== innerType
	                ? innerType
	                : getComponentNameFromType(type.type) || "Memo"
	            );
	          case REACT_LAZY_TYPE:
	            innerType = type._payload;
	            type = type._init;
	            try {
	              return getComponentNameFromType(type(innerType));
	            } catch (x) {}
	        }
	      return null;
	    }
	    function getComponentNameFromOwner(owner) {
	      return "number" === typeof owner.tag
	        ? getComponentNameFromFiber(owner)
	        : "string" === typeof owner.name
	          ? owner.name
	          : null;
	    }
	    function getComponentNameFromFiber(fiber) {
	      var type = fiber.type;
	      switch (fiber.tag) {
	        case 24:
	          return "Cache";
	        case 9:
	          return (type._context.displayName || "Context") + ".Consumer";
	        case 10:
	          return (type.displayName || "Context") + ".Provider";
	        case 18:
	          return "DehydratedFragment";
	        case 11:
	          return (
	            (fiber = type.render),
	            (fiber = fiber.displayName || fiber.name || ""),
	            type.displayName ||
	              ("" !== fiber ? "ForwardRef(" + fiber + ")" : "ForwardRef")
	          );
	        case 7:
	          return "Fragment";
	        case 26:
	        case 27:
	        case 5:
	          return type;
	        case 4:
	          return "Portal";
	        case 3:
	          return "Root";
	        case 6:
	          return "Text";
	        case 16:
	          return getComponentNameFromType(type);
	        case 8:
	          return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";
	        case 22:
	          return "Offscreen";
	        case 12:
	          return "Profiler";
	        case 21:
	          return "Scope";
	        case 13:
	          return "Suspense";
	        case 19:
	          return "SuspenseList";
	        case 25:
	          return "TracingMarker";
	        case 1:
	        case 0:
	        case 14:
	        case 15:
	          if ("function" === typeof type)
	            return type.displayName || type.name || null;
	          if ("string" === typeof type) return type;
	          break;
	        case 29:
	          type = fiber._debugInfo;
	          if (null != type)
	            for (var i = type.length - 1; 0 <= i; i--)
	              if ("string" === typeof type[i].name) return type[i].name;
	          if (null !== fiber.return)
	            return getComponentNameFromFiber(fiber.return);
	      }
	      return null;
	    }
	    function disabledLog() {}
	    function disableLogs() {
	      if (0 === disabledDepth) {
	        prevLog = console.log;
	        prevInfo = console.info;
	        prevWarn = console.warn;
	        prevError = console.error;
	        prevGroup = console.group;
	        prevGroupCollapsed = console.groupCollapsed;
	        prevGroupEnd = console.groupEnd;
	        var props = {
	          configurable: true,
	          enumerable: true,
	          value: disabledLog,
	          writable: true
	        };
	        Object.defineProperties(console, {
	          info: props,
	          log: props,
	          warn: props,
	          error: props,
	          group: props,
	          groupCollapsed: props,
	          groupEnd: props
	        });
	      }
	      disabledDepth++;
	    }
	    function reenableLogs() {
	      disabledDepth--;
	      if (0 === disabledDepth) {
	        var props = { configurable: true, enumerable: true, writable: true };
	        Object.defineProperties(console, {
	          log: assign({}, props, { value: prevLog }),
	          info: assign({}, props, { value: prevInfo }),
	          warn: assign({}, props, { value: prevWarn }),
	          error: assign({}, props, { value: prevError }),
	          group: assign({}, props, { value: prevGroup }),
	          groupCollapsed: assign({}, props, { value: prevGroupCollapsed }),
	          groupEnd: assign({}, props, { value: prevGroupEnd })
	        });
	      }
	      0 > disabledDepth &&
	        console.error(
	          "disabledDepth fell below zero. This is a bug in React. Please file an issue."
	        );
	    }
	    function describeBuiltInComponentFrame(name) {
	      if (undefined === prefix)
	        try {
	          throw Error();
	        } catch (x) {
	          var match = x.stack.trim().match(/\n( *(at )?)/);
	          prefix = (match && match[1]) || "";
	          suffix =
	            -1 < x.stack.indexOf("\n    at")
	              ? " (<anonymous>)"
	              : -1 < x.stack.indexOf("@")
	                ? "@unknown:0:0"
	                : "";
	        }
	      return "\n" + prefix + name + suffix;
	    }
	    function describeNativeComponentFrame(fn, construct) {
	      if (!fn || reentry) return "";
	      var frame = componentFrameCache.get(fn);
	      if (undefined !== frame) return frame;
	      reentry = true;
	      frame = Error.prepareStackTrace;
	      Error.prepareStackTrace = undefined;
	      var previousDispatcher = null;
	      previousDispatcher = ReactSharedInternals.H;
	      ReactSharedInternals.H = null;
	      disableLogs();
	      try {
	        var RunInRootFrame = {
	          DetermineComponentFrameRoot: function () {
	            try {
	              if (construct) {
	                var Fake = function () {
	                  throw Error();
	                };
	                Object.defineProperty(Fake.prototype, "props", {
	                  set: function () {
	                    throw Error();
	                  }
	                });
	                if ("object" === typeof Reflect && Reflect.construct) {
	                  try {
	                    Reflect.construct(Fake, []);
	                  } catch (x) {
	                    var control = x;
	                  }
	                  Reflect.construct(fn, [], Fake);
	                } else {
	                  try {
	                    Fake.call();
	                  } catch (x$0) {
	                    control = x$0;
	                  }
	                  fn.call(Fake.prototype);
	                }
	              } else {
	                try {
	                  throw Error();
	                } catch (x$1) {
	                  control = x$1;
	                }
	                (Fake = fn()) &&
	                  "function" === typeof Fake.catch &&
	                  Fake.catch(function () {});
	              }
	            } catch (sample) {
	              if (sample && control && "string" === typeof sample.stack)
	                return [sample.stack, control.stack];
	            }
	            return [null, null];
	          }
	        };
	        RunInRootFrame.DetermineComponentFrameRoot.displayName =
	          "DetermineComponentFrameRoot";
	        var namePropDescriptor = Object.getOwnPropertyDescriptor(
	          RunInRootFrame.DetermineComponentFrameRoot,
	          "name"
	        );
	        namePropDescriptor &&
	          namePropDescriptor.configurable &&
	          Object.defineProperty(
	            RunInRootFrame.DetermineComponentFrameRoot,
	            "name",
	            { value: "DetermineComponentFrameRoot" }
	          );
	        var _RunInRootFrame$Deter =
	            RunInRootFrame.DetermineComponentFrameRoot(),
	          sampleStack = _RunInRootFrame$Deter[0],
	          controlStack = _RunInRootFrame$Deter[1];
	        if (sampleStack && controlStack) {
	          var sampleLines = sampleStack.split("\n"),
	            controlLines = controlStack.split("\n");
	          for (
	            _RunInRootFrame$Deter = namePropDescriptor = 0;
	            namePropDescriptor < sampleLines.length &&
	            !sampleLines[namePropDescriptor].includes(
	              "DetermineComponentFrameRoot"
	            );

	          )
	            namePropDescriptor++;
	          for (
	            ;
	            _RunInRootFrame$Deter < controlLines.length &&
	            !controlLines[_RunInRootFrame$Deter].includes(
	              "DetermineComponentFrameRoot"
	            );

	          )
	            _RunInRootFrame$Deter++;
	          if (
	            namePropDescriptor === sampleLines.length ||
	            _RunInRootFrame$Deter === controlLines.length
	          )
	            for (
	              namePropDescriptor = sampleLines.length - 1,
	                _RunInRootFrame$Deter = controlLines.length - 1;
	              1 <= namePropDescriptor &&
	              0 <= _RunInRootFrame$Deter &&
	              sampleLines[namePropDescriptor] !==
	                controlLines[_RunInRootFrame$Deter];

	            )
	              _RunInRootFrame$Deter--;
	          for (
	            ;
	            1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter;
	            namePropDescriptor--, _RunInRootFrame$Deter--
	          )
	            if (
	              sampleLines[namePropDescriptor] !==
	              controlLines[_RunInRootFrame$Deter]
	            ) {
	              if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {
	                do
	                  if (
	                    (namePropDescriptor--,
	                    _RunInRootFrame$Deter--,
	                    0 > _RunInRootFrame$Deter ||
	                      sampleLines[namePropDescriptor] !==
	                        controlLines[_RunInRootFrame$Deter])
	                  ) {
	                    var _frame =
	                      "\n" +
	                      sampleLines[namePropDescriptor].replace(
	                        " at new ",
	                        " at "
	                      );
	                    fn.displayName &&
	                      _frame.includes("<anonymous>") &&
	                      (_frame = _frame.replace("<anonymous>", fn.displayName));
	                    "function" === typeof fn &&
	                      componentFrameCache.set(fn, _frame);
	                    return _frame;
	                  }
	                while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);
	              }
	              break;
	            }
	        }
	      } finally {
	        (reentry = false),
	          (ReactSharedInternals.H = previousDispatcher),
	          reenableLogs(),
	          (Error.prepareStackTrace = frame);
	      }
	      sampleLines = (sampleLines = fn ? fn.displayName || fn.name : "")
	        ? describeBuiltInComponentFrame(sampleLines)
	        : "";
	      "function" === typeof fn && componentFrameCache.set(fn, sampleLines);
	      return sampleLines;
	    }
	    function describeFiber(fiber) {
	      switch (fiber.tag) {
	        case 26:
	        case 27:
	        case 5:
	          return describeBuiltInComponentFrame(fiber.type);
	        case 16:
	          return describeBuiltInComponentFrame("Lazy");
	        case 13:
	          return describeBuiltInComponentFrame("Suspense");
	        case 19:
	          return describeBuiltInComponentFrame("SuspenseList");
	        case 0:
	        case 15:
	          return (fiber = describeNativeComponentFrame(fiber.type, false)), fiber;
	        case 11:
	          return (
	            (fiber = describeNativeComponentFrame(fiber.type.render, false)), fiber
	          );
	        case 1:
	          return (fiber = describeNativeComponentFrame(fiber.type, true)), fiber;
	        default:
	          return "";
	      }
	    }
	    function getStackByFiberInDevAndProd(workInProgress) {
	      try {
	        var info = "";
	        do {
	          info += describeFiber(workInProgress);
	          var debugInfo = workInProgress._debugInfo;
	          if (debugInfo)
	            for (var i = debugInfo.length - 1; 0 <= i; i--) {
	              var entry = debugInfo[i];
	              if ("string" === typeof entry.name) {
	                var JSCompiler_temp_const = info,
	                  env = entry.env;
	                var JSCompiler_inline_result = describeBuiltInComponentFrame(
	                  entry.name + (env ? " [" + env + "]" : "")
	                );
	                info = JSCompiler_temp_const + JSCompiler_inline_result;
	              }
	            }
	          workInProgress = workInProgress.return;
	        } while (workInProgress);
	        return info;
	      } catch (x) {
	        return "\nError generating stack: " + x.message + "\n" + x.stack;
	      }
	    }
	    function getCurrentFiberOwnerNameInDevOrNull() {
	      if (null === current) return null;
	      var owner = current._debugOwner;
	      return null != owner ? getComponentNameFromOwner(owner) : null;
	    }
	    function getCurrentFiberStackInDev() {
	      return null === current ? "" : getStackByFiberInDevAndProd(current);
	    }
	    function runWithFiberInDEV(fiber, callback, arg0, arg1, arg2, arg3, arg4) {
	      var previousFiber = current;
	      ReactSharedInternals.getCurrentStack =
	        null === fiber ? null : getCurrentFiberStackInDev;
	      isRendering = false;
	      current = fiber;
	      try {
	        return callback(arg0, arg1, arg2, arg3, arg4);
	      } finally {
	        current = previousFiber;
	      }
	      throw Error(
	        "runWithFiberInDEV should never be called in production. This is a bug in React."
	      );
	    }
	    function getNearestMountedFiber(fiber) {
	      var node = fiber,
	        nearestMounted = fiber;
	      if (fiber.alternate) for (; node.return; ) node = node.return;
	      else {
	        fiber = node;
	        do
	          (node = fiber),
	            0 !== (node.flags & 4098) && (nearestMounted = node.return),
	            (fiber = node.return);
	        while (fiber);
	      }
	      return 3 === node.tag ? nearestMounted : null;
	    }
	    function getSuspenseInstanceFromFiber(fiber) {
	      if (13 === fiber.tag) {
	        var suspenseState = fiber.memoizedState;
	        null === suspenseState &&
	          ((fiber = fiber.alternate),
	          null !== fiber && (suspenseState = fiber.memoizedState));
	        if (null !== suspenseState) return suspenseState.dehydrated;
	      }
	      return null;
	    }
	    function assertIsMounted(fiber) {
	      if (getNearestMountedFiber(fiber) !== fiber)
	        throw Error("Unable to find node on an unmounted component.");
	    }
	    function findCurrentFiberUsingSlowPath(fiber) {
	      var alternate = fiber.alternate;
	      if (!alternate) {
	        alternate = getNearestMountedFiber(fiber);
	        if (null === alternate)
	          throw Error("Unable to find node on an unmounted component.");
	        return alternate !== fiber ? null : fiber;
	      }
	      for (var a = fiber, b = alternate; ; ) {
	        var parentA = a.return;
	        if (null === parentA) break;
	        var parentB = parentA.alternate;
	        if (null === parentB) {
	          b = parentA.return;
	          if (null !== b) {
	            a = b;
	            continue;
	          }
	          break;
	        }
	        if (parentA.child === parentB.child) {
	          for (parentB = parentA.child; parentB; ) {
	            if (parentB === a) return assertIsMounted(parentA), fiber;
	            if (parentB === b) return assertIsMounted(parentA), alternate;
	            parentB = parentB.sibling;
	          }
	          throw Error("Unable to find node on an unmounted component.");
	        }
	        if (a.return !== b.return) (a = parentA), (b = parentB);
	        else {
	          for (var didFindChild = false, _child = parentA.child; _child; ) {
	            if (_child === a) {
	              didFindChild = true;
	              a = parentA;
	              b = parentB;
	              break;
	            }
	            if (_child === b) {
	              didFindChild = true;
	              b = parentA;
	              a = parentB;
	              break;
	            }
	            _child = _child.sibling;
	          }
	          if (!didFindChild) {
	            for (_child = parentB.child; _child; ) {
	              if (_child === a) {
	                didFindChild = true;
	                a = parentB;
	                b = parentA;
	                break;
	              }
	              if (_child === b) {
	                didFindChild = true;
	                b = parentB;
	                a = parentA;
	                break;
	              }
	              _child = _child.sibling;
	            }
	            if (!didFindChild)
	              throw Error(
	                "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."
	              );
	          }
	        }
	        if (a.alternate !== b)
	          throw Error(
	            "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."
	          );
	      }
	      if (3 !== a.tag)
	        throw Error("Unable to find node on an unmounted component.");
	      return a.stateNode.current === a ? fiber : alternate;
	    }
	    function findCurrentHostFiberImpl(node) {
	      var tag = node.tag;
	      if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
	      for (node = node.child; null !== node; ) {
	        tag = findCurrentHostFiberImpl(node);
	        if (null !== tag) return tag;
	        node = node.sibling;
	      }
	      return null;
	    }
	    function createCursor(defaultValue) {
	      return { current: defaultValue };
	    }
	    function pop(cursor, fiber) {
	      0 > index$jscomp$0
	        ? console.error("Unexpected pop.")
	        : (fiber !== fiberStack[index$jscomp$0] &&
	            console.error("Unexpected Fiber popped."),
	          (cursor.current = valueStack[index$jscomp$0]),
	          (valueStack[index$jscomp$0] = null),
	          (fiberStack[index$jscomp$0] = null),
	          index$jscomp$0--);
	    }
	    function push(cursor, value, fiber) {
	      index$jscomp$0++;
	      valueStack[index$jscomp$0] = cursor.current;
	      fiberStack[index$jscomp$0] = fiber;
	      cursor.current = value;
	    }
	    function requiredContext(c) {
	      null === c &&
	        console.error(
	          "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."
	        );
	      return c;
	    }
	    function pushHostContainer(fiber, nextRootInstance) {
	      push(rootInstanceStackCursor, nextRootInstance, fiber);
	      push(contextFiberStackCursor, fiber, fiber);
	      push(contextStackCursor, null, fiber);
	      var nextRootContext = nextRootInstance.nodeType;
	      switch (nextRootContext) {
	        case 9:
	        case 11:
	          nextRootContext = 9 === nextRootContext ? "#document" : "#fragment";
	          nextRootInstance = (nextRootInstance =
	            nextRootInstance.documentElement)
	            ? (nextRootInstance = nextRootInstance.namespaceURI)
	              ? getOwnHostContext(nextRootInstance)
	              : HostContextNamespaceNone
	            : HostContextNamespaceNone;
	          break;
	        default:
	          if (
	            ((nextRootInstance =
	              8 === nextRootContext
	                ? nextRootInstance.parentNode
	                : nextRootInstance),
	            (nextRootContext = nextRootInstance.tagName),
	            (nextRootInstance = nextRootInstance.namespaceURI))
	          )
	            (nextRootInstance = getOwnHostContext(nextRootInstance)),
	              (nextRootInstance = getChildHostContextProd(
	                nextRootInstance,
	                nextRootContext
	              ));
	          else
	            switch (nextRootContext) {
	              case "svg":
	                nextRootInstance = HostContextNamespaceSvg;
	                break;
	              case "math":
	                nextRootInstance = HostContextNamespaceMath;
	                break;
	              default:
	                nextRootInstance = HostContextNamespaceNone;
	            }
	      }
	      nextRootContext = nextRootContext.toLowerCase();
	      nextRootContext = updatedAncestorInfoDev(null, nextRootContext);
	      nextRootContext = {
	        context: nextRootInstance,
	        ancestorInfo: nextRootContext
	      };
	      pop(contextStackCursor, fiber);
	      push(contextStackCursor, nextRootContext, fiber);
	    }
	    function popHostContainer(fiber) {
	      pop(contextStackCursor, fiber);
	      pop(contextFiberStackCursor, fiber);
	      pop(rootInstanceStackCursor, fiber);
	    }
	    function getHostContext() {
	      return requiredContext(contextStackCursor.current);
	    }
	    function pushHostContext(fiber) {
	      null !== fiber.memoizedState &&
	        push(hostTransitionProviderCursor, fiber, fiber);
	      var context = requiredContext(contextStackCursor.current);
	      var type = fiber.type;
	      var nextContext = getChildHostContextProd(context.context, type);
	      type = updatedAncestorInfoDev(context.ancestorInfo, type);
	      nextContext = { context: nextContext, ancestorInfo: type };
	      context !== nextContext &&
	        (push(contextFiberStackCursor, fiber, fiber),
	        push(contextStackCursor, nextContext, fiber));
	    }
	    function popHostContext(fiber) {
	      contextFiberStackCursor.current === fiber &&
	        (pop(contextStackCursor, fiber), pop(contextFiberStackCursor, fiber));
	      hostTransitionProviderCursor.current === fiber &&
	        (pop(hostTransitionProviderCursor, fiber),
	        (HostTransitionContext._currentValue = NotPendingTransition));
	    }
	    function typeName(value) {
	      return (
	        ("function" === typeof Symbol &&
	          Symbol.toStringTag &&
	          value[Symbol.toStringTag]) ||
	        value.constructor.name ||
	        "Object"
	      );
	    }
	    function willCoercionThrow(value) {
	      try {
	        return testStringCoercion(value), !1;
	      } catch (e) {
	        return true;
	      }
	    }
	    function testStringCoercion(value) {
	      return "" + value;
	    }
	    function checkAttributeStringCoercion(value, attributeName) {
	      if (willCoercionThrow(value))
	        return (
	          console.error(
	            "The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before using it here.",
	            attributeName,
	            typeName(value)
	          ),
	          testStringCoercion(value)
	        );
	    }
	    function checkCSSPropertyStringCoercion(value, propName) {
	      if (willCoercionThrow(value))
	        return (
	          console.error(
	            "The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before using it here.",
	            propName,
	            typeName(value)
	          ),
	          testStringCoercion(value)
	        );
	    }
	    function checkFormFieldValueStringCoercion(value) {
	      if (willCoercionThrow(value))
	        return (
	          console.error(
	            "Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before using it here.",
	            typeName(value)
	          ),
	          testStringCoercion(value)
	        );
	    }
	    function injectInternals(internals) {
	      if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return false;
	      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
	      if (hook.isDisabled) return true;
	      if (!hook.supportsFiber)
	        return (
	          console.error(
	            "The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://react.dev/link/react-devtools"
	          ),
	          true
	        );
	      try {
	        (rendererID = hook.inject(internals)), (injectedHook = hook);
	      } catch (err) {
	        console.error("React instrumentation encountered an error: %s.", err);
	      }
	      return hook.checkDCE ? true : false;
	    }
	    function onCommitRoot$1(root, eventPriority) {
	      if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot)
	        try {
	          var didError = 128 === (root.current.flags & 128);
	          switch (eventPriority) {
	            case DiscreteEventPriority:
	              var schedulerPriority = ImmediatePriority;
	              break;
	            case ContinuousEventPriority:
	              schedulerPriority = UserBlockingPriority;
	              break;
	            case DefaultEventPriority:
	              schedulerPriority = NormalPriority$1;
	              break;
	            case IdleEventPriority:
	              schedulerPriority = IdlePriority;
	              break;
	            default:
	              schedulerPriority = NormalPriority$1;
	          }
	          injectedHook.onCommitFiberRoot(
	            rendererID,
	            root,
	            schedulerPriority,
	            didError
	          );
	        } catch (err) {
	          hasLoggedError ||
	            ((hasLoggedError = true),
	            console.error(
	              "React instrumentation encountered an error: %s",
	              err
	            ));
	        }
	    }
	    function setIsStrictModeForDevtools(newIsStrictMode) {
	      "function" === typeof log$1 &&
	        unstable_setDisableYieldValue(newIsStrictMode);
	      if (injectedHook && "function" === typeof injectedHook.setStrictMode)
	        try {
	          injectedHook.setStrictMode(rendererID, newIsStrictMode);
	        } catch (err) {
	          hasLoggedError ||
	            ((hasLoggedError = true),
	            console.error(
	              "React instrumentation encountered an error: %s",
	              err
	            ));
	        }
	    }
	    function injectProfilingHooks(profilingHooks) {
	      injectedProfilingHooks = profilingHooks;
	    }
	    function markCommitStopped() {
	      null !== injectedProfilingHooks &&
	        "function" === typeof injectedProfilingHooks.markCommitStopped &&
	        injectedProfilingHooks.markCommitStopped();
	    }
	    function markComponentRenderStarted(fiber) {
	      null !== injectedProfilingHooks &&
	        "function" ===
	          typeof injectedProfilingHooks.markComponentRenderStarted &&
	        injectedProfilingHooks.markComponentRenderStarted(fiber);
	    }
	    function markComponentRenderStopped() {
	      null !== injectedProfilingHooks &&
	        "function" ===
	          typeof injectedProfilingHooks.markComponentRenderStopped &&
	        injectedProfilingHooks.markComponentRenderStopped();
	    }
	    function markRenderStarted(lanes) {
	      null !== injectedProfilingHooks &&
	        "function" === typeof injectedProfilingHooks.markRenderStarted &&
	        injectedProfilingHooks.markRenderStarted(lanes);
	    }
	    function markRenderStopped() {
	      null !== injectedProfilingHooks &&
	        "function" === typeof injectedProfilingHooks.markRenderStopped &&
	        injectedProfilingHooks.markRenderStopped();
	    }
	    function markStateUpdateScheduled(fiber, lane) {
	      null !== injectedProfilingHooks &&
	        "function" === typeof injectedProfilingHooks.markStateUpdateScheduled &&
	        injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
	    }
	    function clz32Fallback(x) {
	      x >>>= 0;
	      return 0 === x ? 32 : (31 - ((log(x) / LN2) | 0)) | 0;
	    }
	    function getLabelForLane(lane) {
	      if (lane & 1) return "SyncHydrationLane";
	      if (lane & 2) return "Sync";
	      if (lane & 4) return "InputContinuousHydration";
	      if (lane & 8) return "InputContinuous";
	      if (lane & 16) return "DefaultHydration";
	      if (lane & 32) return "Default";
	      if (lane & 64) return "TransitionHydration";
	      if (lane & 4194176) return "Transition";
	      if (lane & 62914560) return "Retry";
	      if (lane & 67108864) return "SelectiveHydration";
	      if (lane & 134217728) return "IdleHydration";
	      if (lane & 268435456) return "Idle";
	      if (lane & 536870912) return "Offscreen";
	      if (lane & 1073741824) return "Deferred";
	    }
	    function getHighestPriorityLanes(lanes) {
	      var pendingSyncLanes = lanes & 42;
	      if (0 !== pendingSyncLanes) return pendingSyncLanes;
	      switch (lanes & -lanes) {
	        case 1:
	          return 1;
	        case 2:
	          return 2;
	        case 4:
	          return 4;
	        case 8:
	          return 8;
	        case 16:
	          return 16;
	        case 32:
	          return 32;
	        case 64:
	          return 64;
	        case 128:
	        case 256:
	        case 512:
	        case 1024:
	        case 2048:
	        case 4096:
	        case 8192:
	        case 16384:
	        case 32768:
	        case 65536:
	        case 131072:
	        case 262144:
	        case 524288:
	        case 1048576:
	        case 2097152:
	          return lanes & 4194176;
	        case 4194304:
	        case 8388608:
	        case 16777216:
	        case 33554432:
	          return lanes & 62914560;
	        case 67108864:
	          return 67108864;
	        case 134217728:
	          return 134217728;
	        case 268435456:
	          return 268435456;
	        case 536870912:
	          return 536870912;
	        case 1073741824:
	          return 0;
	        default:
	          return (
	            console.error(
	              "Should have found matching lanes. This is a bug in React."
	            ),
	            lanes
	          );
	      }
	    }
	    function getNextLanes(root, wipLanes) {
	      var pendingLanes = root.pendingLanes;
	      if (0 === pendingLanes) return 0;
	      var nextLanes = 0,
	        suspendedLanes = root.suspendedLanes,
	        pingedLanes = root.pingedLanes,
	        warmLanes = root.warmLanes;
	      root = 0 !== root.finishedLanes;
	      var nonIdlePendingLanes = pendingLanes & 134217727;
	      0 !== nonIdlePendingLanes
	        ? ((pendingLanes = nonIdlePendingLanes & ~suspendedLanes),
	          0 !== pendingLanes
	            ? (nextLanes = getHighestPriorityLanes(pendingLanes))
	            : ((pingedLanes &= nonIdlePendingLanes),
	              0 !== pingedLanes
	                ? (nextLanes = getHighestPriorityLanes(pingedLanes))
	                : root ||
	                  ((warmLanes = nonIdlePendingLanes & ~warmLanes),
	                  0 !== warmLanes &&
	                    (nextLanes = getHighestPriorityLanes(warmLanes)))))
	        : ((nonIdlePendingLanes = pendingLanes & ~suspendedLanes),
	          0 !== nonIdlePendingLanes
	            ? (nextLanes = getHighestPriorityLanes(nonIdlePendingLanes))
	            : 0 !== pingedLanes
	              ? (nextLanes = getHighestPriorityLanes(pingedLanes))
	              : root ||
	                ((warmLanes = pendingLanes & ~warmLanes),
	                0 !== warmLanes &&
	                  (nextLanes = getHighestPriorityLanes(warmLanes))));
	      return 0 === nextLanes
	        ? 0
	        : 0 !== wipLanes &&
	            wipLanes !== nextLanes &&
	            0 === (wipLanes & suspendedLanes) &&
	            ((suspendedLanes = nextLanes & -nextLanes),
	            (warmLanes = wipLanes & -wipLanes),
	            suspendedLanes >= warmLanes ||
	              (32 === suspendedLanes && 0 !== (warmLanes & 4194176)))
	          ? wipLanes
	          : nextLanes;
	    }
	    function checkIfRootIsPrerendering(root, renderLanes) {
	      return (
	        0 ===
	        (root.pendingLanes &
	          ~(root.suspendedLanes & ~root.pingedLanes) &
	          renderLanes)
	      );
	    }
	    function computeExpirationTime(lane, currentTime) {
	      switch (lane) {
	        case 1:
	        case 2:
	        case 4:
	        case 8:
	          return currentTime + 250;
	        case 16:
	        case 32:
	        case 64:
	        case 128:
	        case 256:
	        case 512:
	        case 1024:
	        case 2048:
	        case 4096:
	        case 8192:
	        case 16384:
	        case 32768:
	        case 65536:
	        case 131072:
	        case 262144:
	        case 524288:
	        case 1048576:
	        case 2097152:
	          return currentTime + 5e3;
	        case 4194304:
	        case 8388608:
	        case 16777216:
	        case 33554432:
	          return -1;
	        case 67108864:
	        case 134217728:
	        case 268435456:
	        case 536870912:
	        case 1073741824:
	          return -1;
	        default:
	          return (
	            console.error(
	              "Should have found matching lanes. This is a bug in React."
	            ),
	            -1
	          );
	      }
	    }
	    function claimNextTransitionLane() {
	      var lane = nextTransitionLane;
	      nextTransitionLane <<= 1;
	      0 === (nextTransitionLane & 4194176) && (nextTransitionLane = 128);
	      return lane;
	    }
	    function claimNextRetryLane() {
	      var lane = nextRetryLane;
	      nextRetryLane <<= 1;
	      0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
	      return lane;
	    }
	    function createLaneMap(initial) {
	      for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);
	      return laneMap;
	    }
	    function markRootUpdated$1(root, updateLane) {
	      root.pendingLanes |= updateLane;
	      268435456 !== updateLane &&
	        ((root.suspendedLanes = 0),
	        (root.pingedLanes = 0),
	        (root.warmLanes = 0));
	    }
	    function markRootFinished(
	      root,
	      finishedLanes,
	      remainingLanes,
	      spawnedLane,
	      updatedLanes,
	      suspendedRetryLanes
	    ) {
	      var previouslyPendingLanes = root.pendingLanes;
	      root.pendingLanes = remainingLanes;
	      root.suspendedLanes = 0;
	      root.pingedLanes = 0;
	      root.warmLanes = 0;
	      root.expiredLanes &= remainingLanes;
	      root.entangledLanes &= remainingLanes;
	      root.errorRecoveryDisabledLanes &= remainingLanes;
	      root.shellSuspendCounter = 0;
	      var entanglements = root.entanglements,
	        expirationTimes = root.expirationTimes,
	        hiddenUpdates = root.hiddenUpdates;
	      for (
	        remainingLanes = previouslyPendingLanes & ~remainingLanes;
	        0 < remainingLanes;

	      ) {
	        var index = 31 - clz32(remainingLanes),
	          lane = 1 << index;
	        entanglements[index] = 0;
	        expirationTimes[index] = -1;
	        var hiddenUpdatesForLane = hiddenUpdates[index];
	        if (null !== hiddenUpdatesForLane)
	          for (
	            hiddenUpdates[index] = null, index = 0;
	            index < hiddenUpdatesForLane.length;
	            index++
	          ) {
	            var update = hiddenUpdatesForLane[index];
	            null !== update && (update.lane &= -536870913);
	          }
	        remainingLanes &= ~lane;
	      }
	      0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, 0);
	      0 !== suspendedRetryLanes &&
	        0 === updatedLanes &&
	        0 !== root.tag &&
	        (root.suspendedLanes |=
	          suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
	    }
	    function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {
	      root.pendingLanes |= spawnedLane;
	      root.suspendedLanes &= ~spawnedLane;
	      var spawnedLaneIndex = 31 - clz32(spawnedLane);
	      root.entangledLanes |= spawnedLane;
	      root.entanglements[spawnedLaneIndex] =
	        root.entanglements[spawnedLaneIndex] |
	        1073741824 |
	        (entangledLanes & 4194218);
	    }
	    function markRootEntangled(root, entangledLanes) {
	      var rootEntangledLanes = (root.entangledLanes |= entangledLanes);
	      for (root = root.entanglements; rootEntangledLanes; ) {
	        var index = 31 - clz32(rootEntangledLanes),
	          lane = 1 << index;
	        (lane & entangledLanes) | (root[index] & entangledLanes) &&
	          (root[index] |= entangledLanes);
	        rootEntangledLanes &= ~lane;
	      }
	    }
	    function addFiberToLanesMap(root, fiber, lanes) {
	      if (isDevToolsPresent)
	        for (root = root.pendingUpdatersLaneMap; 0 < lanes; ) {
	          var index = 31 - clz32(lanes),
	            lane = 1 << index;
	          root[index].add(fiber);
	          lanes &= ~lane;
	        }
	    }
	    function movePendingFibersToMemoized(root, lanes) {
	      if (isDevToolsPresent)
	        for (
	          var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap,
	            memoizedUpdaters = root.memoizedUpdaters;
	          0 < lanes;

	        ) {
	          var index = 31 - clz32(lanes);
	          root = 1 << index;
	          index = pendingUpdatersLaneMap[index];
	          0 < index.size &&
	            (index.forEach(function (fiber) {
	              var alternate = fiber.alternate;
	              (null !== alternate && memoizedUpdaters.has(alternate)) ||
	                memoizedUpdaters.add(fiber);
	            }),
	            index.clear());
	          lanes &= ~root;
	        }
	    }
	    function lanesToEventPriority(lanes) {
	      lanes &= -lanes;
	      return DiscreteEventPriority < lanes
	        ? ContinuousEventPriority < lanes
	          ? 0 !== (lanes & 134217727)
	            ? DefaultEventPriority
	            : IdleEventPriority
	          : ContinuousEventPriority
	        : DiscreteEventPriority;
	    }
	    function resolveUpdatePriority() {
	      var updatePriority = ReactDOMSharedInternals.p;
	      if (0 !== updatePriority) return updatePriority;
	      updatePriority = window.event;
	      return undefined === updatePriority
	        ? DefaultEventPriority
	        : getEventPriority(updatePriority.type);
	    }
	    function runWithPriority(priority, fn) {
	      var previousPriority = ReactDOMSharedInternals.p;
	      try {
	        return (ReactDOMSharedInternals.p = priority), fn();
	      } finally {
	        ReactDOMSharedInternals.p = previousPriority;
	      }
	    }
	    function detachDeletedInstance(node) {
	      delete node[internalInstanceKey];
	      delete node[internalPropsKey];
	      delete node[internalEventHandlersKey];
	      delete node[internalEventHandlerListenersKey];
	      delete node[internalEventHandlesSetKey];
	    }
	    function getClosestInstanceFromNode(targetNode) {
	      var targetInst = targetNode[internalInstanceKey];
	      if (targetInst) return targetInst;
	      for (var parentNode = targetNode.parentNode; parentNode; ) {
	        if (
	          (targetInst =
	            parentNode[internalContainerInstanceKey] ||
	            parentNode[internalInstanceKey])
	        ) {
	          parentNode = targetInst.alternate;
	          if (
	            null !== targetInst.child ||
	            (null !== parentNode && null !== parentNode.child)
	          )
	            for (
	              targetNode = getParentSuspenseInstance(targetNode);
	              null !== targetNode;

	            ) {
	              if ((parentNode = targetNode[internalInstanceKey]))
	                return parentNode;
	              targetNode = getParentSuspenseInstance(targetNode);
	            }
	          return targetInst;
	        }
	        targetNode = parentNode;
	        parentNode = targetNode.parentNode;
	      }
	      return null;
	    }
	    function getInstanceFromNode(node) {
	      if (
	        (node = node[internalInstanceKey] || node[internalContainerInstanceKey])
	      ) {
	        var tag = node.tag;
	        if (
	          5 === tag ||
	          6 === tag ||
	          13 === tag ||
	          26 === tag ||
	          27 === tag ||
	          3 === tag
	        )
	          return node;
	      }
	      return null;
	    }
	    function getNodeFromInstance(inst) {
	      var tag = inst.tag;
	      if (5 === tag || 26 === tag || 27 === tag || 6 === tag)
	        return inst.stateNode;
	      throw Error("getNodeFromInstance: Invalid argument.");
	    }
	    function getResourcesFromRoot(root) {
	      var resources = root[internalRootNodeResourcesKey];
	      resources ||
	        (resources = root[internalRootNodeResourcesKey] =
	          { hoistableStyles: new Map(), hoistableScripts: new Map() });
	      return resources;
	    }
	    function markNodeAsHoistable(node) {
	      node[internalHoistableMarker] = true;
	    }
	    function registerTwoPhaseEvent(registrationName, dependencies) {
	      registerDirectEvent(registrationName, dependencies);
	      registerDirectEvent(registrationName + "Capture", dependencies);
	    }
	    function registerDirectEvent(registrationName, dependencies) {
	      registrationNameDependencies[registrationName] &&
	        console.error(
	          "EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.",
	          registrationName
	        );
	      registrationNameDependencies[registrationName] = dependencies;
	      var lowerCasedName = registrationName.toLowerCase();
	      possibleRegistrationNames[lowerCasedName] = registrationName;
	      "onDoubleClick" === registrationName &&
	        (possibleRegistrationNames.ondblclick = registrationName);
	      for (
	        registrationName = 0;
	        registrationName < dependencies.length;
	        registrationName++
	      )
	        allNativeEvents.add(dependencies[registrationName]);
	    }
	    function checkControlledValueProps(tagName, props) {
	      hasReadOnlyValue[props.type] ||
	        props.onChange ||
	        props.onInput ||
	        props.readOnly ||
	        props.disabled ||
	        null == props.value ||
	        ("select" === tagName
	          ? console.error(
	              "You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set `onChange`."
	            )
	          : console.error(
	              "You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."
	            ));
	      props.onChange ||
	        props.readOnly ||
	        props.disabled ||
	        null == props.checked ||
	        console.error(
	          "You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`."
	        );
	    }
	    function isAttributeNameSafe(attributeName) {
	      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName))
	        return true;
	      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName))
	        return false;
	      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
	        return (validatedAttributeNameCache[attributeName] = true);
	      illegalAttributeNameCache[attributeName] = true;
	      console.error("Invalid attribute name: `%s`", attributeName);
	      return false;
	    }
	    function getValueForAttributeOnCustomComponent(node, name, expected) {
	      if (isAttributeNameSafe(name)) {
	        if (!node.hasAttribute(name)) {
	          switch (typeof expected) {
	            case "symbol":
	            case "object":
	              return expected;
	            case "function":
	              return expected;
	            case "boolean":
	              if (false === expected) return expected;
	          }
	          return undefined === expected ? undefined : null;
	        }
	        node = node.getAttribute(name);
	        if ("" === node && true === expected) return true;
	        checkAttributeStringCoercion(expected, name);
	        return node === "" + expected ? expected : node;
	      }
	    }
	    function setValueForAttribute(node, name, value) {
	      if (isAttributeNameSafe(name))
	        if (null === value) node.removeAttribute(name);
	        else {
	          switch (typeof value) {
	            case "undefined":
	            case "function":
	            case "symbol":
	              node.removeAttribute(name);
	              return;
	            case "boolean":
	              var prefix = name.toLowerCase().slice(0, 5);
	              if ("data-" !== prefix && "aria-" !== prefix) {
	                node.removeAttribute(name);
	                return;
	              }
	          }
	          checkAttributeStringCoercion(value, name);
	          node.setAttribute(name, "" + value);
	        }
	    }
	    function setValueForKnownAttribute(node, name, value) {
	      if (null === value) node.removeAttribute(name);
	      else {
	        switch (typeof value) {
	          case "undefined":
	          case "function":
	          case "symbol":
	          case "boolean":
	            node.removeAttribute(name);
	            return;
	        }
	        checkAttributeStringCoercion(value, name);
	        node.setAttribute(name, "" + value);
	      }
	    }
	    function setValueForNamespacedAttribute(node, namespace, name, value) {
	      if (null === value) node.removeAttribute(name);
	      else {
	        switch (typeof value) {
	          case "undefined":
	          case "function":
	          case "symbol":
	          case "boolean":
	            node.removeAttribute(name);
	            return;
	        }
	        checkAttributeStringCoercion(value, name);
	        node.setAttributeNS(namespace, name, "" + value);
	      }
	    }
	    function getToStringValue(value) {
	      switch (typeof value) {
	        case "bigint":
	        case "boolean":
	        case "number":
	        case "string":
	        case "undefined":
	          return value;
	        case "object":
	          return checkFormFieldValueStringCoercion(value), value;
	        default:
	          return "";
	      }
	    }
	    function isCheckable(elem) {
	      var type = elem.type;
	      return (
	        (elem = elem.nodeName) &&
	        "input" === elem.toLowerCase() &&
	        ("checkbox" === type || "radio" === type)
	      );
	    }
	    function trackValueOnNode(node) {
	      var valueField = isCheckable(node) ? "checked" : "value",
	        descriptor = Object.getOwnPropertyDescriptor(
	          node.constructor.prototype,
	          valueField
	        );
	      checkFormFieldValueStringCoercion(node[valueField]);
	      var currentValue = "" + node[valueField];
	      if (
	        !node.hasOwnProperty(valueField) &&
	        "undefined" !== typeof descriptor &&
	        "function" === typeof descriptor.get &&
	        "function" === typeof descriptor.set
	      ) {
	        var get = descriptor.get,
	          set = descriptor.set;
	        Object.defineProperty(node, valueField, {
	          configurable: true,
	          get: function () {
	            return get.call(this);
	          },
	          set: function (value) {
	            checkFormFieldValueStringCoercion(value);
	            currentValue = "" + value;
	            set.call(this, value);
	          }
	        });
	        Object.defineProperty(node, valueField, {
	          enumerable: descriptor.enumerable
	        });
	        return {
	          getValue: function () {
	            return currentValue;
	          },
	          setValue: function (value) {
	            checkFormFieldValueStringCoercion(value);
	            currentValue = "" + value;
	          },
	          stopTracking: function () {
	            node._valueTracker = null;
	            delete node[valueField];
	          }
	        };
	      }
	    }
	    function track(node) {
	      node._valueTracker || (node._valueTracker = trackValueOnNode(node));
	    }
	    function updateValueIfChanged(node) {
	      if (!node) return false;
	      var tracker = node._valueTracker;
	      if (!tracker) return true;
	      var lastValue = tracker.getValue();
	      var value = "";
	      node &&
	        (value = isCheckable(node)
	          ? node.checked
	            ? "true"
	            : "false"
	          : node.value);
	      node = value;
	      return node !== lastValue ? (tracker.setValue(node), true) : false;
	    }
	    function getActiveElement(doc) {
	      doc = doc || ("undefined" !== typeof document ? document : undefined);
	      if ("undefined" === typeof doc) return null;
	      try {
	        return doc.activeElement || doc.body;
	      } catch (e) {
	        return doc.body;
	      }
	    }
	    function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
	      return value.replace(
	        escapeSelectorAttributeValueInsideDoubleQuotesRegex,
	        function (ch) {
	          return "\\" + ch.charCodeAt(0).toString(16) + " ";
	        }
	      );
	    }
	    function validateInputProps(element, props) {
	      undefined === props.checked ||
	        undefined === props.defaultChecked ||
	        didWarnCheckedDefaultChecked ||
	        (console.error(
	          "%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",
	          getCurrentFiberOwnerNameInDevOrNull() || "A component",
	          props.type
	        ),
	        (didWarnCheckedDefaultChecked = true));
	      undefined === props.value ||
	        undefined === props.defaultValue ||
	        didWarnValueDefaultValue$1 ||
	        (console.error(
	          "%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",
	          getCurrentFiberOwnerNameInDevOrNull() || "A component",
	          props.type
	        ),
	        (didWarnValueDefaultValue$1 = true));
	    }
	    function updateInput(
	      element,
	      value,
	      defaultValue,
	      lastDefaultValue,
	      checked,
	      defaultChecked,
	      type,
	      name
	    ) {
	      element.name = "";
	      null != type &&
	      "function" !== typeof type &&
	      "symbol" !== typeof type &&
	      "boolean" !== typeof type
	        ? (checkAttributeStringCoercion(type, "type"), (element.type = type))
	        : element.removeAttribute("type");
	      if (null != value)
	        if ("number" === type) {
	          if ((0 === value && "" === element.value) || element.value != value)
	            element.value = "" + getToStringValue(value);
	        } else
	          element.value !== "" + getToStringValue(value) &&
	            (element.value = "" + getToStringValue(value));
	      else
	        ("submit" !== type && "reset" !== type) ||
	          element.removeAttribute("value");
	      null != value
	        ? setDefaultValue(element, type, getToStringValue(value))
	        : null != defaultValue
	          ? setDefaultValue(element, type, getToStringValue(defaultValue))
	          : null != lastDefaultValue && element.removeAttribute("value");
	      null == checked &&
	        null != defaultChecked &&
	        (element.defaultChecked = !!defaultChecked);
	      null != checked &&
	        (element.checked =
	          checked &&
	          "function" !== typeof checked &&
	          "symbol" !== typeof checked);
	      null != name &&
	      "function" !== typeof name &&
	      "symbol" !== typeof name &&
	      "boolean" !== typeof name
	        ? (checkAttributeStringCoercion(name, "name"),
	          (element.name = "" + getToStringValue(name)))
	        : element.removeAttribute("name");
	    }
	    function initInput(
	      element,
	      value,
	      defaultValue,
	      checked,
	      defaultChecked,
	      type,
	      name,
	      isHydrating
	    ) {
	      null != type &&
	        "function" !== typeof type &&
	        "symbol" !== typeof type &&
	        "boolean" !== typeof type &&
	        (checkAttributeStringCoercion(type, "type"), (element.type = type));
	      if (null != value || null != defaultValue) {
	        if (
	          !(
	            ("submit" !== type && "reset" !== type) ||
	            (undefined !== value && null !== value)
	          )
	        )
	          return;
	        defaultValue =
	          null != defaultValue ? "" + getToStringValue(defaultValue) : "";
	        value = null != value ? "" + getToStringValue(value) : defaultValue;
	        isHydrating || value === element.value || (element.value = value);
	        element.defaultValue = value;
	      }
	      checked = null != checked ? checked : defaultChecked;
	      checked =
	        "function" !== typeof checked &&
	        "symbol" !== typeof checked &&
	        !!checked;
	      element.checked = isHydrating ? element.checked : !!checked;
	      element.defaultChecked = !!checked;
	      null != name &&
	        "function" !== typeof name &&
	        "symbol" !== typeof name &&
	        "boolean" !== typeof name &&
	        (checkAttributeStringCoercion(name, "name"), (element.name = name));
	    }
	    function setDefaultValue(node, type, value) {
	      ("number" === type && getActiveElement(node.ownerDocument) === node) ||
	        node.defaultValue === "" + value ||
	        (node.defaultValue = "" + value);
	    }
	    function validateOptionProps(element, props) {
	      null == props.value &&
	        ("object" === typeof props.children && null !== props.children
	          ? React.Children.forEach(props.children, function (child) {
	              null == child ||
	                "string" === typeof child ||
	                "number" === typeof child ||
	                "bigint" === typeof child ||
	                didWarnInvalidChild ||
	                ((didWarnInvalidChild = true),
	                console.error(
	                  "Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>."
	                ));
	            })
	          : null == props.dangerouslySetInnerHTML ||
	            didWarnInvalidInnerHTML ||
	            ((didWarnInvalidInnerHTML = true),
	            console.error(
	              "Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."
	            )));
	      null == props.selected ||
	        didWarnSelectedSetOnOption ||
	        (console.error(
	          "Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."
	        ),
	        (didWarnSelectedSetOnOption = true));
	    }
	    function getDeclarationErrorAddendum() {
	      var ownerName = getCurrentFiberOwnerNameInDevOrNull();
	      return ownerName
	        ? "\n\nCheck the render method of `" + ownerName + "`."
	        : "";
	    }
	    function updateOptions(node, multiple, propValue, setDefaultSelected) {
	      node = node.options;
	      if (multiple) {
	        multiple = {};
	        for (var i = 0; i < propValue.length; i++)
	          multiple["$" + propValue[i]] = true;
	        for (propValue = 0; propValue < node.length; propValue++)
	          (i = multiple.hasOwnProperty("$" + node[propValue].value)),
	            node[propValue].selected !== i && (node[propValue].selected = i),
	            i && setDefaultSelected && (node[propValue].defaultSelected = true);
	      } else {
	        propValue = "" + getToStringValue(propValue);
	        multiple = null;
	        for (i = 0; i < node.length; i++) {
	          if (node[i].value === propValue) {
	            node[i].selected = true;
	            setDefaultSelected && (node[i].defaultSelected = true);
	            return;
	          }
	          null !== multiple || node[i].disabled || (multiple = node[i]);
	        }
	        null !== multiple && (multiple.selected = true);
	      }
	    }
	    function validateSelectProps(element, props) {
	      for (element = 0; element < valuePropNames.length; element++) {
	        var propName = valuePropNames[element];
	        if (null != props[propName]) {
	          var propNameIsArray = isArrayImpl(props[propName]);
	          props.multiple && !propNameIsArray
	            ? console.error(
	                "The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",
	                propName,
	                getDeclarationErrorAddendum()
	              )
	            : !props.multiple &&
	              propNameIsArray &&
	              console.error(
	                "The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",
	                propName,
	                getDeclarationErrorAddendum()
	              );
	        }
	      }
	      undefined === props.value ||
	        undefined === props.defaultValue ||
	        didWarnValueDefaultValue ||
	        (console.error(
	          "Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://react.dev/link/controlled-components"
	        ),
	        (didWarnValueDefaultValue = true));
	    }
	    function validateTextareaProps(element, props) {
	      undefined === props.value ||
	        undefined === props.defaultValue ||
	        didWarnValDefaultVal ||
	        (console.error(
	          "%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://react.dev/link/controlled-components",
	          getCurrentFiberOwnerNameInDevOrNull() || "A component"
	        ),
	        (didWarnValDefaultVal = true));
	      null != props.children &&
	        null == props.value &&
	        console.error(
	          "Use the `defaultValue` or `value` props instead of setting children on <textarea>."
	        );
	    }
	    function updateTextarea(element, value, defaultValue) {
	      if (
	        null != value &&
	        ((value = "" + getToStringValue(value)),
	        value !== element.value && (element.value = value),
	        null == defaultValue)
	      ) {
	        element.defaultValue !== value && (element.defaultValue = value);
	        return;
	      }
	      element.defaultValue =
	        null != defaultValue ? "" + getToStringValue(defaultValue) : "";
	    }
	    function initTextarea(element, value, defaultValue, children) {
	      if (null == value) {
	        if (null != children) {
	          if (null != defaultValue)
	            throw Error(
	              "If you supply `defaultValue` on a <textarea>, do not pass children."
	            );
	          if (isArrayImpl(children)) {
	            if (1 < children.length)
	              throw Error("<textarea> can only have at most one child.");
	            children = children[0];
	          }
	          defaultValue = children;
	        }
	        null == defaultValue && (defaultValue = "");
	        value = defaultValue;
	      }
	      defaultValue = getToStringValue(value);
	      element.defaultValue = defaultValue;
	      children = element.textContent;
	      children === defaultValue &&
	        "" !== children &&
	        null !== children &&
	        (element.value = children);
	    }
	    function findNotableNode(node, indent) {
	      return undefined === node.serverProps &&
	        0 === node.serverTail.length &&
	        1 === node.children.length &&
	        3 < node.distanceFromLeaf &&
	        node.distanceFromLeaf > 15 - indent
	        ? findNotableNode(node.children[0], indent)
	        : node;
	    }
	    function indentation(indent) {
	      return "  " + "  ".repeat(indent);
	    }
	    function added(indent) {
	      return "+ " + "  ".repeat(indent);
	    }
	    function removed(indent) {
	      return "- " + "  ".repeat(indent);
	    }
	    function describeFiberType(fiber) {
	      switch (fiber.tag) {
	        case 26:
	        case 27:
	        case 5:
	          return fiber.type;
	        case 16:
	          return "Lazy";
	        case 13:
	          return "Suspense";
	        case 19:
	          return "SuspenseList";
	        case 0:
	        case 15:
	          return (fiber = fiber.type), fiber.displayName || fiber.name || null;
	        case 11:
	          return (
	            (fiber = fiber.type.render), fiber.displayName || fiber.name || null
	          );
	        case 1:
	          return (fiber = fiber.type), fiber.displayName || fiber.name || null;
	        default:
	          return null;
	      }
	    }
	    function describeTextNode(content, maxLength) {
	      return needsEscaping.test(content)
	        ? ((content = JSON.stringify(content)),
	          content.length > maxLength - 2
	            ? 8 > maxLength
	              ? '{"..."}'
	              : "{" + content.slice(0, maxLength - 7) + '..."}'
	            : "{" + content + "}")
	        : content.length > maxLength
	          ? 5 > maxLength
	            ? '{"..."}'
	            : content.slice(0, maxLength - 3) + "..."
	          : content;
	    }
	    function describeTextDiff(clientText, serverProps, indent) {
	      var maxLength = 120 - 2 * indent;
	      if (null === serverProps)
	        return added(indent) + describeTextNode(clientText, maxLength) + "\n";
	      if ("string" === typeof serverProps) {
	        for (
	          var firstDiff = 0;
	          firstDiff < serverProps.length &&
	          firstDiff < clientText.length &&
	          serverProps.charCodeAt(firstDiff) ===
	            clientText.charCodeAt(firstDiff);
	          firstDiff++
	        );
	        firstDiff > maxLength - 8 &&
	          10 < firstDiff &&
	          ((clientText = "..." + clientText.slice(firstDiff - 8)),
	          (serverProps = "..." + serverProps.slice(firstDiff - 8)));
	        return (
	          added(indent) +
	          describeTextNode(clientText, maxLength) +
	          "\n" +
	          removed(indent) +
	          describeTextNode(serverProps, maxLength) +
	          "\n"
	        );
	      }
	      return (
	        indentation(indent) + describeTextNode(clientText, maxLength) + "\n"
	      );
	    }
	    function objectName(object) {
	      return Object.prototype.toString
	        .call(object)
	        .replace(/^\[object (.*)\]$/, function (m, p0) {
	          return p0;
	        });
	    }
	    function describeValue(value, maxLength) {
	      switch (typeof value) {
	        case "string":
	          return (
	            (value = JSON.stringify(value)),
	            value.length > maxLength
	              ? 5 > maxLength
	                ? '"..."'
	                : value.slice(0, maxLength - 4) + '..."'
	              : value
	          );
	        case "object":
	          if (null === value) return "null";
	          if (isArrayImpl(value)) return "[...]";
	          if (value.$$typeof === REACT_ELEMENT_TYPE)
	            return (maxLength = getComponentNameFromType(value.type))
	              ? "<" + maxLength + ">"
	              : "<...>";
	          var name = objectName(value);
	          if ("Object" === name) {
	            name = "";
	            maxLength -= 2;
	            for (var propName in value)
	              if (value.hasOwnProperty(propName)) {
	                var jsonPropName = JSON.stringify(propName);
	                jsonPropName !== '"' + propName + '"' &&
	                  (propName = jsonPropName);
	                maxLength -= propName.length - 2;
	                jsonPropName = describeValue(
	                  value[propName],
	                  15 > maxLength ? maxLength : 15
	                );
	                maxLength -= jsonPropName.length;
	                if (0 > maxLength) {
	                  name += "" === name ? "..." : ", ...";
	                  break;
	                }
	                name +=
	                  ("" === name ? "" : ",") + propName + ":" + jsonPropName;
	              }
	            return "{" + name + "}";
	          }
	          return name;
	        case "function":
	          return (maxLength = value.displayName || value.name)
	            ? "function " + maxLength
	            : "function";
	        default:
	          return String(value);
	      }
	    }
	    function describePropValue(value, maxLength) {
	      return "string" !== typeof value || needsEscaping.test(value)
	        ? "{" + describeValue(value, maxLength - 2) + "}"
	        : value.length > maxLength - 2
	          ? 5 > maxLength
	            ? '"..."'
	            : '"' + value.slice(0, maxLength - 5) + '..."'
	          : '"' + value + '"';
	    }
	    function describeExpandedElement(type, props, rowPrefix) {
	      var remainingRowLength = 120 - rowPrefix.length - type.length,
	        properties = [],
	        propName;
	      for (propName in props)
	        if (props.hasOwnProperty(propName) && "children" !== propName) {
	          var propValue = describePropValue(
	            props[propName],
	            120 - rowPrefix.length - propName.length - 1
	          );
	          remainingRowLength -= propName.length + propValue.length + 2;
	          properties.push(propName + "=" + propValue);
	        }
	      return 0 === properties.length
	        ? rowPrefix + "<" + type + ">\n"
	        : 0 < remainingRowLength
	          ? rowPrefix + "<" + type + " " + properties.join(" ") + ">\n"
	          : rowPrefix +
	            "<" +
	            type +
	            "\n" +
	            rowPrefix +
	            "  " +
	            properties.join("\n" + rowPrefix + "  ") +
	            "\n" +
	            rowPrefix +
	            ">\n";
	    }
	    function describePropertiesDiff(clientObject, serverObject, indent) {
	      var properties = "",
	        remainingServerProperties = assign({}, serverObject),
	        propName;
	      for (propName in clientObject)
	        if (clientObject.hasOwnProperty(propName)) {
	          delete remainingServerProperties[propName];
	          var maxLength = 120 - 2 * indent - propName.length - 2,
	            clientPropValue = describeValue(clientObject[propName], maxLength);
	          serverObject.hasOwnProperty(propName)
	            ? ((maxLength = describeValue(serverObject[propName], maxLength)),
	              (properties +=
	                added(indent) + propName + ": " + clientPropValue + "\n"),
	              (properties +=
	                removed(indent) + propName + ": " + maxLength + "\n"))
	            : (properties +=
	                added(indent) + propName + ": " + clientPropValue + "\n");
	        }
	      for (var _propName in remainingServerProperties)
	        remainingServerProperties.hasOwnProperty(_propName) &&
	          ((clientObject = describeValue(
	            remainingServerProperties[_propName],
	            120 - 2 * indent - _propName.length - 2
	          )),
	          (properties +=
	            removed(indent) + _propName + ": " + clientObject + "\n"));
	      return properties;
	    }
	    function describeElementDiff(type, clientProps, serverProps, indent) {
	      var content = "",
	        serverPropNames = new Map();
	      for (propName$jscomp$0 in serverProps)
	        serverProps.hasOwnProperty(propName$jscomp$0) &&
	          serverPropNames.set(
	            propName$jscomp$0.toLowerCase(),
	            propName$jscomp$0
	          );
	      if (1 === serverPropNames.size && serverPropNames.has("children"))
	        content += describeExpandedElement(
	          type,
	          clientProps,
	          indentation(indent)
	        );
	      else {
	        for (var _propName2 in clientProps)
	          if (
	            clientProps.hasOwnProperty(_propName2) &&
	            "children" !== _propName2
	          ) {
	            var maxLength$jscomp$0 =
	                120 - 2 * (indent + 1) - _propName2.length - 1,
	              serverPropName = serverPropNames.get(_propName2.toLowerCase());
	            if (undefined !== serverPropName) {
	              serverPropNames.delete(_propName2.toLowerCase());
	              var propName$jscomp$0 = clientProps[_propName2];
	              serverPropName = serverProps[serverPropName];
	              var clientPropValue = describePropValue(
	                propName$jscomp$0,
	                maxLength$jscomp$0
	              );
	              maxLength$jscomp$0 = describePropValue(
	                serverPropName,
	                maxLength$jscomp$0
	              );
	              "object" === typeof propName$jscomp$0 &&
	              null !== propName$jscomp$0 &&
	              "object" === typeof serverPropName &&
	              null !== serverPropName &&
	              "Object" === objectName(propName$jscomp$0) &&
	              "Object" === objectName(serverPropName) &&
	              (2 < Object.keys(propName$jscomp$0).length ||
	                2 < Object.keys(serverPropName).length ||
	                -1 < clientPropValue.indexOf("...") ||
	                -1 < maxLength$jscomp$0.indexOf("..."))
	                ? (content +=
	                    indentation(indent + 1) +
	                    _propName2 +
	                    "={{\n" +
	                    describePropertiesDiff(
	                      propName$jscomp$0,
	                      serverPropName,
	                      indent + 2
	                    ) +
	                    indentation(indent + 1) +
	                    "}}\n")
	                : ((content +=
	                    added(indent + 1) +
	                    _propName2 +
	                    "=" +
	                    clientPropValue +
	                    "\n"),
	                  (content +=
	                    removed(indent + 1) +
	                    _propName2 +
	                    "=" +
	                    maxLength$jscomp$0 +
	                    "\n"));
	            } else
	              content +=
	                indentation(indent + 1) +
	                _propName2 +
	                "=" +
	                describePropValue(clientProps[_propName2], maxLength$jscomp$0) +
	                "\n";
	          }
	        serverPropNames.forEach(function (propName) {
	          if ("children" !== propName) {
	            var maxLength = 120 - 2 * (indent + 1) - propName.length - 1;
	            content +=
	              removed(indent + 1) +
	              propName +
	              "=" +
	              describePropValue(serverProps[propName], maxLength) +
	              "\n";
	          }
	        });
	        content =
	          "" === content
	            ? indentation(indent) + "<" + type + ">\n"
	            : indentation(indent) +
	              "<" +
	              type +
	              "\n" +
	              content +
	              indentation(indent) +
	              ">\n";
	      }
	      type = serverProps.children;
	      clientProps = clientProps.children;
	      if (
	        "string" === typeof type ||
	        "number" === typeof type ||
	        "bigint" === typeof type
	      ) {
	        serverPropNames = "";
	        if (
	          "string" === typeof clientProps ||
	          "number" === typeof clientProps ||
	          "bigint" === typeof clientProps
	        )
	          serverPropNames = "" + clientProps;
	        content += describeTextDiff(serverPropNames, "" + type, indent + 1);
	      } else if (
	        "string" === typeof clientProps ||
	        "number" === typeof clientProps ||
	        "bigint" === typeof clientProps
	      )
	        content =
	          null == type
	            ? content + describeTextDiff("" + clientProps, null, indent + 1)
	            : content + describeTextDiff("" + clientProps, undefined, indent + 1);
	      return content;
	    }
	    function describeSiblingFiber(fiber, indent) {
	      var type = describeFiberType(fiber);
	      if (null === type) {
	        type = "";
	        for (fiber = fiber.child; fiber; )
	          (type += describeSiblingFiber(fiber, indent)),
	            (fiber = fiber.sibling);
	        return type;
	      }
	      return indentation(indent) + "<" + type + ">\n";
	    }
	    function describeNode(node, indent) {
	      var skipToNode = findNotableNode(node, indent);
	      if (
	        skipToNode !== node &&
	        (1 !== node.children.length || node.children[0] !== skipToNode)
	      )
	        return (
	          indentation(indent) + "...\n" + describeNode(skipToNode, indent + 1)
	        );
	      skipToNode = "";
	      var debugInfo = node.fiber._debugInfo;
	      if (debugInfo)
	        for (var i = 0; i < debugInfo.length; i++) {
	          var serverComponentName = debugInfo[i].name;
	          "string" === typeof serverComponentName &&
	            ((skipToNode +=
	              indentation(indent) + "<" + serverComponentName + ">\n"),
	            indent++);
	        }
	      debugInfo = "";
	      i = node.fiber.pendingProps;
	      if (6 === node.fiber.tag)
	        (debugInfo = describeTextDiff(i, node.serverProps, indent)), indent++;
	      else if (
	        ((serverComponentName = describeFiberType(node.fiber)),
	        null !== serverComponentName)
	      )
	        if (undefined === node.serverProps) {
	          debugInfo = indent;
	          var maxLength = 120 - 2 * debugInfo - serverComponentName.length - 2,
	            content = "";
	          for (propName in i)
	            if (i.hasOwnProperty(propName) && "children" !== propName) {
	              var propValue = describePropValue(i[propName], 15);
	              maxLength -= propName.length + propValue.length + 2;
	              if (0 > maxLength) {
	                content += " ...";
	                break;
	              }
	              content += " " + propName + "=" + propValue;
	            }
	          debugInfo =
	            indentation(debugInfo) +
	            "<" +
	            serverComponentName +
	            content +
	            ">\n";
	          indent++;
	        } else
	          null === node.serverProps
	            ? ((debugInfo = describeExpandedElement(
	                serverComponentName,
	                i,
	                added(indent)
	              )),
	              indent++)
	            : "string" === typeof node.serverProps
	              ? console.error(
	                  "Should not have matched a non HostText fiber to a Text node. This is a bug in React."
	                )
	              : ((debugInfo = describeElementDiff(
	                  serverComponentName,
	                  i,
	                  node.serverProps,
	                  indent
	                )),
	                indent++);
	      var propName = "";
	      i = node.fiber.child;
	      for (
	        serverComponentName = 0;
	        i && serverComponentName < node.children.length;

	      )
	        (maxLength = node.children[serverComponentName]),
	          maxLength.fiber === i
	            ? ((propName += describeNode(maxLength, indent)),
	              serverComponentName++)
	            : (propName += describeSiblingFiber(i, indent)),
	          (i = i.sibling);
	      i &&
	        0 < node.children.length &&
	        (propName += indentation(indent) + "...\n");
	      i = node.serverTail;
	      null === node.serverProps && indent--;
	      for (node = 0; node < i.length; node++)
	        (serverComponentName = i[node]),
	          (propName =
	            "string" === typeof serverComponentName
	              ? propName +
	                (removed(indent) +
	                  describeTextNode(serverComponentName, 120 - 2 * indent) +
	                  "\n")
	              : propName +
	                describeExpandedElement(
	                  serverComponentName.type,
	                  serverComponentName.props,
	                  removed(indent)
	                ));
	      return skipToNode + debugInfo + propName;
	    }
	    function describeDiff(rootNode) {
	      try {
	        return "\n\n" + describeNode(rootNode, 0);
	      } catch (x) {
	        return "";
	      }
	    }
	    function describeAncestors(ancestor, child, props) {
	      for (var fiber = child, node = null, distanceFromLeaf = 0; fiber; )
	        fiber === ancestor && (distanceFromLeaf = 0),
	          (node = {
	            fiber: fiber,
	            children: null !== node ? [node] : [],
	            serverProps:
	              fiber === child ? props : fiber === ancestor ? null : undefined,
	            serverTail: [],
	            distanceFromLeaf: distanceFromLeaf
	          }),
	          distanceFromLeaf++,
	          (fiber = fiber.return);
	      return null !== node ? describeDiff(node).replaceAll(/^[+-]/gm, ">") : "";
	    }
	    function updatedAncestorInfoDev(oldInfo, tag) {
	      oldInfo = assign({}, oldInfo || emptyAncestorInfoDev);
	      var info = { tag: tag };
	      -1 !== inScopeTags.indexOf(tag) &&
	        ((oldInfo.aTagInScope = null),
	        (oldInfo.buttonTagInScope = null),
	        (oldInfo.nobrTagInScope = null));
	      -1 !== buttonScopeTags.indexOf(tag) && (oldInfo.pTagInButtonScope = null);
	      -1 !== specialTags.indexOf(tag) &&
	        "address" !== tag &&
	        "div" !== tag &&
	        "p" !== tag &&
	        ((oldInfo.listItemTagAutoclosing = null),
	        (oldInfo.dlItemTagAutoclosing = null));
	      oldInfo.current = info;
	      "form" === tag && (oldInfo.formTag = info);
	      "a" === tag && (oldInfo.aTagInScope = info);
	      "button" === tag && (oldInfo.buttonTagInScope = info);
	      "nobr" === tag && (oldInfo.nobrTagInScope = info);
	      "p" === tag && (oldInfo.pTagInButtonScope = info);
	      "li" === tag && (oldInfo.listItemTagAutoclosing = info);
	      if ("dd" === tag || "dt" === tag) oldInfo.dlItemTagAutoclosing = info;
	      "#document" === tag || "html" === tag
	        ? (oldInfo.containerTagInScope = null)
	        : oldInfo.containerTagInScope || (oldInfo.containerTagInScope = info);
	      return oldInfo;
	    }
	    function isTagValidWithParent(tag, parentTag) {
	      switch (parentTag) {
	        case "select":
	          return (
	            "hr" === tag ||
	            "option" === tag ||
	            "optgroup" === tag ||
	            "#text" === tag
	          );
	        case "optgroup":
	          return "option" === tag || "#text" === tag;
	        case "option":
	          return "#text" === tag;
	        case "tr":
	          return (
	            "th" === tag ||
	            "td" === tag ||
	            "style" === tag ||
	            "script" === tag ||
	            "template" === tag
	          );
	        case "tbody":
	        case "thead":
	        case "tfoot":
	          return (
	            "tr" === tag ||
	            "style" === tag ||
	            "script" === tag ||
	            "template" === tag
	          );
	        case "colgroup":
	          return "col" === tag || "template" === tag;
	        case "table":
	          return (
	            "caption" === tag ||
	            "colgroup" === tag ||
	            "tbody" === tag ||
	            "tfoot" === tag ||
	            "thead" === tag ||
	            "style" === tag ||
	            "script" === tag ||
	            "template" === tag
	          );
	        case "head":
	          return (
	            "base" === tag ||
	            "basefont" === tag ||
	            "bgsound" === tag ||
	            "link" === tag ||
	            "meta" === tag ||
	            "title" === tag ||
	            "noscript" === tag ||
	            "noframes" === tag ||
	            "style" === tag ||
	            "script" === tag ||
	            "template" === tag
	          );
	        case "html":
	          return "head" === tag || "body" === tag || "frameset" === tag;
	        case "frameset":
	          return "frame" === tag;
	        case "#document":
	          return "html" === tag;
	      }
	      switch (tag) {
	        case "h1":
	        case "h2":
	        case "h3":
	        case "h4":
	        case "h5":
	        case "h6":
	          return (
	            "h1" !== parentTag &&
	            "h2" !== parentTag &&
	            "h3" !== parentTag &&
	            "h4" !== parentTag &&
	            "h5" !== parentTag &&
	            "h6" !== parentTag
	          );
	        case "rp":
	        case "rt":
	          return -1 === impliedEndTags.indexOf(parentTag);
	        case "body":
	        case "caption":
	        case "col":
	        case "colgroup":
	        case "frameset":
	        case "frame":
	        case "head":
	        case "html":
	        case "tbody":
	        case "td":
	        case "tfoot":
	        case "th":
	        case "thead":
	        case "tr":
	          return null == parentTag;
	      }
	      return true;
	    }
	    function findInvalidAncestorForTag(tag, ancestorInfo) {
	      switch (tag) {
	        case "address":
	        case "article":
	        case "aside":
	        case "blockquote":
	        case "center":
	        case "details":
	        case "dialog":
	        case "dir":
	        case "div":
	        case "dl":
	        case "fieldset":
	        case "figcaption":
	        case "figure":
	        case "footer":
	        case "header":
	        case "hgroup":
	        case "main":
	        case "menu":
	        case "nav":
	        case "ol":
	        case "p":
	        case "section":
	        case "summary":
	        case "ul":
	        case "pre":
	        case "listing":
	        case "table":
	        case "hr":
	        case "xmp":
	        case "h1":
	        case "h2":
	        case "h3":
	        case "h4":
	        case "h5":
	        case "h6":
	          return ancestorInfo.pTagInButtonScope;
	        case "form":
	          return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
	        case "li":
	          return ancestorInfo.listItemTagAutoclosing;
	        case "dd":
	        case "dt":
	          return ancestorInfo.dlItemTagAutoclosing;
	        case "button":
	          return ancestorInfo.buttonTagInScope;
	        case "a":
	          return ancestorInfo.aTagInScope;
	        case "nobr":
	          return ancestorInfo.nobrTagInScope;
	      }
	      return null;
	    }
	    function findAncestor(parent, tagName) {
	      for (; parent; ) {
	        switch (parent.tag) {
	          case 5:
	          case 26:
	          case 27:
	            if (parent.type === tagName) return parent;
	        }
	        parent = parent.return;
	      }
	      return null;
	    }
	    function validateDOMNesting(childTag, ancestorInfo) {
	      ancestorInfo = ancestorInfo || emptyAncestorInfoDev;
	      var parentInfo = ancestorInfo.current;
	      ancestorInfo = (parentInfo = isTagValidWithParent(
	        childTag,
	        parentInfo && parentInfo.tag
	      )
	        ? null
	        : parentInfo)
	        ? null
	        : findInvalidAncestorForTag(childTag, ancestorInfo);
	      ancestorInfo = parentInfo || ancestorInfo;
	      if (!ancestorInfo) return true;
	      ancestorInfo = ancestorInfo.tag;
	      var warnKey = String(!!parentInfo) + "|" + childTag + "|" + ancestorInfo;
	      if (didWarn[warnKey]) return false;
	      didWarn[warnKey] = true;
	      var ancestor = (warnKey = current)
	        ? findAncestor(warnKey.return, ancestorInfo)
	        : null;
	      warnKey =
	        null !== warnKey && null !== ancestor
	          ? describeAncestors(ancestor, warnKey, null)
	          : "";
	      ancestor = "<" + childTag + ">";
	      parentInfo
	        ? ((parentInfo = ""),
	          "table" === ancestorInfo &&
	            "tr" === childTag &&
	            (parentInfo +=
	              " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."),
	          console.error(
	            "In HTML, %s cannot be a child of <%s>.%s\nThis will cause a hydration error.%s",
	            ancestor,
	            ancestorInfo,
	            parentInfo,
	            warnKey
	          ))
	        : console.error(
	            "In HTML, %s cannot be a descendant of <%s>.\nThis will cause a hydration error.%s",
	            ancestor,
	            ancestorInfo,
	            warnKey
	          );
	      return false;
	    }
	    function validateTextNesting(childText, parentTag) {
	      if (isTagValidWithParent("#text", parentTag)) return true;
	      var warnKey = "#text|" + parentTag;
	      if (didWarn[warnKey]) return false;
	      didWarn[warnKey] = true;
	      var ancestor = (warnKey = current)
	        ? findAncestor(warnKey, parentTag)
	        : null;
	      warnKey =
	        null !== warnKey && null !== ancestor
	          ? describeAncestors(
	              ancestor,
	              warnKey,
	              6 !== warnKey.tag ? { children: null } : null
	            )
	          : "";
	      /\S/.test(childText)
	        ? console.error(
	            "In HTML, text nodes cannot be a child of <%s>.\nThis will cause a hydration error.%s",
	            parentTag,
	            warnKey
	          )
	        : console.error(
	            "In HTML, whitespace text nodes cannot be a child of <%s>. Make sure you don't have any extra whitespace between tags on each line of your source code.\nThis will cause a hydration error.%s",
	            parentTag,
	            warnKey
	          );
	      return false;
	    }
	    function setTextContent(node, text) {
	      if (text) {
	        var firstChild = node.firstChild;
	        if (
	          firstChild &&
	          firstChild === node.lastChild &&
	          3 === firstChild.nodeType
	        ) {
	          firstChild.nodeValue = text;
	          return;
	        }
	      }
	      node.textContent = text;
	    }
	    function camelize(string) {
	      return string.replace(hyphenPattern, function (_, character) {
	        return character.toUpperCase();
	      });
	    }
	    function setValueForStyle(style, styleName, value) {
	      var isCustomProperty = 0 === styleName.indexOf("--");
	      isCustomProperty ||
	        (-1 < styleName.indexOf("-")
	          ? (warnedStyleNames.hasOwnProperty(styleName) &&
	              warnedStyleNames[styleName]) ||
	            ((warnedStyleNames[styleName] = true),
	            console.error(
	              "Unsupported style property %s. Did you mean %s?",
	              styleName,
	              camelize(styleName.replace(msPattern, "ms-"))
	            ))
	          : badVendoredStyleNamePattern.test(styleName)
	            ? (warnedStyleNames.hasOwnProperty(styleName) &&
	                warnedStyleNames[styleName]) ||
	              ((warnedStyleNames[styleName] = true),
	              console.error(
	                "Unsupported vendor-prefixed style property %s. Did you mean %s?",
	                styleName,
	                styleName.charAt(0).toUpperCase() + styleName.slice(1)
	              ))
	            : !badStyleValueWithSemicolonPattern.test(value) ||
	              (warnedStyleValues.hasOwnProperty(value) &&
	                warnedStyleValues[value]) ||
	              ((warnedStyleValues[value] = true),
	              console.error(
	                'Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.',
	                styleName,
	                value.replace(badStyleValueWithSemicolonPattern, "")
	              )),
	        "number" === typeof value &&
	          (isNaN(value)
	            ? warnedForNaNValue ||
	              ((warnedForNaNValue = true),
	              console.error(
	                "`NaN` is an invalid value for the `%s` css style property.",
	                styleName
	              ))
	            : isFinite(value) ||
	              warnedForInfinityValue ||
	              ((warnedForInfinityValue = true),
	              console.error(
	                "`Infinity` is an invalid value for the `%s` css style property.",
	                styleName
	              ))));
	      null == value || "boolean" === typeof value || "" === value
	        ? isCustomProperty
	          ? style.setProperty(styleName, "")
	          : "float" === styleName
	            ? (style.cssFloat = "")
	            : (style[styleName] = "")
	        : isCustomProperty
	          ? style.setProperty(styleName, value)
	          : "number" !== typeof value ||
	              0 === value ||
	              unitlessNumbers.has(styleName)
	            ? "float" === styleName
	              ? (style.cssFloat = value)
	              : (checkCSSPropertyStringCoercion(value, styleName),
	                (style[styleName] = ("" + value).trim()))
	            : (style[styleName] = value + "px");
	    }
	    function setValueForStyles(node, styles, prevStyles) {
	      if (null != styles && "object" !== typeof styles)
	        throw Error(
	          "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
	        );
	      styles && Object.freeze(styles);
	      node = node.style;
	      if (null != prevStyles) {
	        if (styles) {
	          var expandedUpdates = {};
	          if (prevStyles)
	            for (var key in prevStyles)
	              if (prevStyles.hasOwnProperty(key) && !styles.hasOwnProperty(key))
	                for (
	                  var longhands = shorthandToLonghand[key] || [key], i = 0;
	                  i < longhands.length;
	                  i++
	                )
	                  expandedUpdates[longhands[i]] = key;
	          for (var _key in styles)
	            if (
	              styles.hasOwnProperty(_key) &&
	              (!prevStyles || prevStyles[_key] !== styles[_key])
	            )
	              for (
	                key = shorthandToLonghand[_key] || [_key], longhands = 0;
	                longhands < key.length;
	                longhands++
	              )
	                expandedUpdates[key[longhands]] = _key;
	          _key = {};
	          for (var key$jscomp$0 in styles)
	            for (
	              key = shorthandToLonghand[key$jscomp$0] || [key$jscomp$0],
	                longhands = 0;
	              longhands < key.length;
	              longhands++
	            )
	              _key[key[longhands]] = key$jscomp$0;
	          key$jscomp$0 = {};
	          for (var _key2 in expandedUpdates)
	            if (
	              ((key = expandedUpdates[_key2]),
	              (longhands = _key[_key2]) &&
	                key !== longhands &&
	                ((i = key + "," + longhands), !key$jscomp$0[i]))
	            ) {
	              key$jscomp$0[i] = true;
	              i = console;
	              var value = styles[key];
	              i.error.call(
	                i,
	                "%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.",
	                null == value || "boolean" === typeof value || "" === value
	                  ? "Removing"
	                  : "Updating",
	                key,
	                longhands
	              );
	            }
	        }
	        for (var styleName in prevStyles)
	          !prevStyles.hasOwnProperty(styleName) ||
	            (null != styles && styles.hasOwnProperty(styleName)) ||
	            (0 === styleName.indexOf("--")
	              ? node.setProperty(styleName, "")
	              : "float" === styleName
	                ? (node.cssFloat = "")
	                : (node[styleName] = ""));
	        for (var _styleName in styles)
	          (_key2 = styles[_styleName]),
	            styles.hasOwnProperty(_styleName) &&
	              prevStyles[_styleName] !== _key2 &&
	              setValueForStyle(node, _styleName, _key2);
	      } else
	        for (expandedUpdates in styles)
	          styles.hasOwnProperty(expandedUpdates) &&
	            setValueForStyle(node, expandedUpdates, styles[expandedUpdates]);
	    }
	    function isCustomElement(tagName) {
	      if (-1 === tagName.indexOf("-")) return false;
	      switch (tagName) {
	        case "annotation-xml":
	        case "color-profile":
	        case "font-face":
	        case "font-face-src":
	        case "font-face-uri":
	        case "font-face-format":
	        case "font-face-name":
	        case "missing-glyph":
	          return false;
	        default:
	          return true;
	      }
	    }
	    function getAttributeAlias(name) {
	      return aliases.get(name) || name;
	    }
	    function validateProperty$1(tagName, name) {
	      if (
	        hasOwnProperty.call(warnedProperties$1, name) &&
	        warnedProperties$1[name]
	      )
	        return true;
	      if (rARIACamel$1.test(name)) {
	        tagName = "aria-" + name.slice(4).toLowerCase();
	        tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
	        if (null == tagName)
	          return (
	            console.error(
	              "Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.",
	              name
	            ),
	            (warnedProperties$1[name] = true)
	          );
	        if (name !== tagName)
	          return (
	            console.error(
	              "Invalid ARIA attribute `%s`. Did you mean `%s`?",
	              name,
	              tagName
	            ),
	            (warnedProperties$1[name] = true)
	          );
	      }
	      if (rARIA$1.test(name)) {
	        tagName = name.toLowerCase();
	        tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
	        if (null == tagName) return (warnedProperties$1[name] = true), false;
	        name !== tagName &&
	          (console.error(
	            "Unknown ARIA attribute `%s`. Did you mean `%s`?",
	            name,
	            tagName
	          ),
	          (warnedProperties$1[name] = true));
	      }
	      return true;
	    }
	    function validateProperties$2(type, props) {
	      var invalidProps = [],
	        key;
	      for (key in props)
	        validateProperty$1(type, key) || invalidProps.push(key);
	      props = invalidProps
	        .map(function (prop) {
	          return "`" + prop + "`";
	        })
	        .join(", ");
	      1 === invalidProps.length
	        ? console.error(
	            "Invalid aria prop %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",
	            props,
	            type
	          )
	        : 1 < invalidProps.length &&
	          console.error(
	            "Invalid aria props %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",
	            props,
	            type
	          );
	    }
	    function validateProperty(tagName, name, value, eventRegistry) {
	      if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
	        return true;
	      var lowerCasedName = name.toLowerCase();
	      if ("onfocusin" === lowerCasedName || "onfocusout" === lowerCasedName)
	        return (
	          console.error(
	            "React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."
	          ),
	          (warnedProperties[name] = true)
	        );
	      if (
	        "function" === typeof value &&
	        (("form" === tagName && "action" === name) ||
	          ("input" === tagName && "formAction" === name) ||
	          ("button" === tagName && "formAction" === name))
	      )
	        return true;
	      if (null != eventRegistry) {
	        tagName = eventRegistry.possibleRegistrationNames;
	        if (eventRegistry.registrationNameDependencies.hasOwnProperty(name))
	          return true;
	        eventRegistry = tagName.hasOwnProperty(lowerCasedName)
	          ? tagName[lowerCasedName]
	          : null;
	        if (null != eventRegistry)
	          return (
	            console.error(
	              "Invalid event handler property `%s`. Did you mean `%s`?",
	              name,
	              eventRegistry
	            ),
	            (warnedProperties[name] = true)
	          );
	        if (EVENT_NAME_REGEX.test(name))
	          return (
	            console.error(
	              "Unknown event handler property `%s`. It will be ignored.",
	              name
	            ),
	            (warnedProperties[name] = true)
	          );
	      } else if (EVENT_NAME_REGEX.test(name))
	        return (
	          INVALID_EVENT_NAME_REGEX.test(name) &&
	            console.error(
	              "Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.",
	              name
	            ),
	          (warnedProperties[name] = true)
	        );
	      if (rARIA.test(name) || rARIACamel.test(name)) return true;
	      if ("innerhtml" === lowerCasedName)
	        return (
	          console.error(
	            "Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."
	          ),
	          (warnedProperties[name] = true)
	        );
	      if ("aria" === lowerCasedName)
	        return (
	          console.error(
	            "The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."
	          ),
	          (warnedProperties[name] = true)
	        );
	      if (
	        "is" === lowerCasedName &&
	        null !== value &&
	        undefined !== value &&
	        "string" !== typeof value
	      )
	        return (
	          console.error(
	            "Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.",
	            typeof value
	          ),
	          (warnedProperties[name] = true)
	        );
	      if ("number" === typeof value && isNaN(value))
	        return (
	          console.error(
	            "Received NaN for the `%s` attribute. If this is expected, cast the value to a string.",
	            name
	          ),
	          (warnedProperties[name] = true)
	        );
	      if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	        if (
	          ((lowerCasedName = possibleStandardNames[lowerCasedName]),
	          lowerCasedName !== name)
	        )
	          return (
	            console.error(
	              "Invalid DOM property `%s`. Did you mean `%s`?",
	              name,
	              lowerCasedName
	            ),
	            (warnedProperties[name] = true)
	          );
	      } else if (name !== lowerCasedName)
	        return (
	          console.error(
	            "React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.",
	            name,
	            lowerCasedName
	          ),
	          (warnedProperties[name] = true)
	        );
	      switch (name) {
	        case "dangerouslySetInnerHTML":
	        case "children":
	        case "style":
	        case "suppressContentEditableWarning":
	        case "suppressHydrationWarning":
	        case "defaultValue":
	        case "defaultChecked":
	        case "innerHTML":
	        case "ref":
	          return true;
	        case "innerText":
	        case "textContent":
	          return true;
	      }
	      switch (typeof value) {
	        case "boolean":
	          switch (name) {
	            case "autoFocus":
	            case "checked":
	            case "multiple":
	            case "muted":
	            case "selected":
	            case "contentEditable":
	            case "spellCheck":
	            case "draggable":
	            case "value":
	            case "autoReverse":
	            case "externalResourcesRequired":
	            case "focusable":
	            case "preserveAlpha":
	            case "allowFullScreen":
	            case "async":
	            case "autoPlay":
	            case "controls":
	            case "default":
	            case "defer":
	            case "disabled":
	            case "disablePictureInPicture":
	            case "disableRemotePlayback":
	            case "formNoValidate":
	            case "hidden":
	            case "loop":
	            case "noModule":
	            case "noValidate":
	            case "open":
	            case "playsInline":
	            case "readOnly":
	            case "required":
	            case "reversed":
	            case "scoped":
	            case "seamless":
	            case "itemScope":
	            case "capture":
	            case "download":
	            case "inert":
	              return true;
	            default:
	              lowerCasedName = name.toLowerCase().slice(0, 5);
	              if ("data-" === lowerCasedName || "aria-" === lowerCasedName)
	                return true;
	              value
	                ? console.error(
	                    'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.',
	                    value,
	                    name,
	                    name,
	                    value,
	                    name
	                  )
	                : console.error(
	                    'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',
	                    value,
	                    name,
	                    name,
	                    value,
	                    name,
	                    name,
	                    name
	                  );
	              return (warnedProperties[name] = true);
	          }
	        case "function":
	        case "symbol":
	          return (warnedProperties[name] = true), false;
	        case "string":
	          if ("false" === value || "true" === value) {
	            switch (name) {
	              case "checked":
	              case "selected":
	              case "multiple":
	              case "muted":
	              case "allowFullScreen":
	              case "async":
	              case "autoPlay":
	              case "controls":
	              case "default":
	              case "defer":
	              case "disabled":
	              case "disablePictureInPicture":
	              case "disableRemotePlayback":
	              case "formNoValidate":
	              case "hidden":
	              case "loop":
	              case "noModule":
	              case "noValidate":
	              case "open":
	              case "playsInline":
	              case "readOnly":
	              case "required":
	              case "reversed":
	              case "scoped":
	              case "seamless":
	              case "itemScope":
	              case "inert":
	                break;
	              default:
	                return true;
	            }
	            console.error(
	              "Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?",
	              value,
	              name,
	              "false" === value
	                ? "The browser will interpret it as a truthy value."
	                : 'Although this works, it will not work as expected if you pass the string "false".',
	              name,
	              value
	            );
	            warnedProperties[name] = true;
	          }
	      }
	      return true;
	    }
	    function warnUnknownProperties(type, props, eventRegistry) {
	      var unknownProps = [],
	        key;
	      for (key in props)
	        validateProperty(type, key, props[key], eventRegistry) ||
	          unknownProps.push(key);
	      props = unknownProps
	        .map(function (prop) {
	          return "`" + prop + "`";
	        })
	        .join(", ");
	      1 === unknownProps.length
	        ? console.error(
	            "Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://react.dev/link/attribute-behavior ",
	            props,
	            type
	          )
	        : 1 < unknownProps.length &&
	          console.error(
	            "Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://react.dev/link/attribute-behavior ",
	            props,
	            type
	          );
	    }
	    function sanitizeURL(url) {
	      return isJavaScriptProtocol.test("" + url)
	        ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')"
	        : url;
	    }
	    function getEventTarget(nativeEvent) {
	      nativeEvent = nativeEvent.target || nativeEvent.srcElement || window;
	      nativeEvent.correspondingUseElement &&
	        (nativeEvent = nativeEvent.correspondingUseElement);
	      return 3 === nativeEvent.nodeType ? nativeEvent.parentNode : nativeEvent;
	    }
	    function restoreStateOfTarget(target) {
	      var internalInstance = getInstanceFromNode(target);
	      if (internalInstance && (target = internalInstance.stateNode)) {
	        var props = target[internalPropsKey] || null;
	        a: switch (
	          ((target = internalInstance.stateNode), internalInstance.type)
	        ) {
	          case "input":
	            updateInput(
	              target,
	              props.value,
	              props.defaultValue,
	              props.defaultValue,
	              props.checked,
	              props.defaultChecked,
	              props.type,
	              props.name
	            );
	            internalInstance = props.name;
	            if ("radio" === props.type && null != internalInstance) {
	              for (props = target; props.parentNode; ) props = props.parentNode;
	              checkAttributeStringCoercion(internalInstance, "name");
	              props = props.querySelectorAll(
	                'input[name="' +
	                  escapeSelectorAttributeValueInsideDoubleQuotes(
	                    "" + internalInstance
	                  ) +
	                  '"][type="radio"]'
	              );
	              for (
	                internalInstance = 0;
	                internalInstance < props.length;
	                internalInstance++
	              ) {
	                var otherNode = props[internalInstance];
	                if (otherNode !== target && otherNode.form === target.form) {
	                  var otherProps = otherNode[internalPropsKey] || null;
	                  if (!otherProps)
	                    throw Error(
	                      "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."
	                    );
	                  updateInput(
	                    otherNode,
	                    otherProps.value,
	                    otherProps.defaultValue,
	                    otherProps.defaultValue,
	                    otherProps.checked,
	                    otherProps.defaultChecked,
	                    otherProps.type,
	                    otherProps.name
	                  );
	                }
	              }
	              for (
	                internalInstance = 0;
	                internalInstance < props.length;
	                internalInstance++
	              )
	                (otherNode = props[internalInstance]),
	                  otherNode.form === target.form &&
	                    updateValueIfChanged(otherNode);
	            }
	            break a;
	          case "textarea":
	            updateTextarea(target, props.value, props.defaultValue);
	            break a;
	          case "select":
	            (internalInstance = props.value),
	              null != internalInstance &&
	                updateOptions(target, !!props.multiple, internalInstance, false);
	        }
	      }
	    }
	    function batchedUpdates$1(fn, a, b) {
	      if (isInsideEventHandler) return fn(a, b);
	      isInsideEventHandler = true;
	      try {
	        var JSCompiler_inline_result = fn(a);
	        return JSCompiler_inline_result;
	      } finally {
	        if (
	          ((isInsideEventHandler = false),
	          null !== restoreTarget || null !== restoreQueue)
	        )
	          if (
	            (flushSyncWork$1(),
	            restoreTarget &&
	              ((a = restoreTarget),
	              (fn = restoreQueue),
	              (restoreQueue = restoreTarget = null),
	              restoreStateOfTarget(a),
	              fn))
	          )
	            for (a = 0; a < fn.length; a++) restoreStateOfTarget(fn[a]);
	      }
	    }
	    function getListener(inst, registrationName) {
	      var stateNode = inst.stateNode;
	      if (null === stateNode) return null;
	      var props = stateNode[internalPropsKey] || null;
	      if (null === props) return null;
	      stateNode = props[registrationName];
	      a: switch (registrationName) {
	        case "onClick":
	        case "onClickCapture":
	        case "onDoubleClick":
	        case "onDoubleClickCapture":
	        case "onMouseDown":
	        case "onMouseDownCapture":
	        case "onMouseMove":
	        case "onMouseMoveCapture":
	        case "onMouseUp":
	        case "onMouseUpCapture":
	        case "onMouseEnter":
	          (props = !props.disabled) ||
	            ((inst = inst.type),
	            (props = !(
	              "button" === inst ||
	              "input" === inst ||
	              "select" === inst ||
	              "textarea" === inst
	            )));
	          inst = !props;
	          break a;
	        default:
	          inst = false;
	      }
	      if (inst) return null;
	      if (stateNode && "function" !== typeof stateNode)
	        throw Error(
	          "Expected `" +
	            registrationName +
	            "` listener to be a function, instead got a value of `" +
	            typeof stateNode +
	            "` type."
	        );
	      return stateNode;
	    }
	    function getData() {
	      if (fallbackText) return fallbackText;
	      var start,
	        startValue = startText,
	        startLength = startValue.length,
	        end,
	        endValue = "value" in root ? root.value : root.textContent,
	        endLength = endValue.length;
	      for (
	        start = 0;
	        start < startLength && startValue[start] === endValue[start];
	        start++
	      );
	      var minEnd = startLength - start;
	      for (
	        end = 1;
	        end <= minEnd &&
	        startValue[startLength - end] === endValue[endLength - end];
	        end++
	      );
	      return (fallbackText = endValue.slice(start, 1 < end ? 1 - end : undefined));
	    }
	    function getEventCharCode(nativeEvent) {
	      var keyCode = nativeEvent.keyCode;
	      "charCode" in nativeEvent
	        ? ((nativeEvent = nativeEvent.charCode),
	          0 === nativeEvent && 13 === keyCode && (nativeEvent = 13))
	        : (nativeEvent = keyCode);
	      10 === nativeEvent && (nativeEvent = 13);
	      return 32 <= nativeEvent || 13 === nativeEvent ? nativeEvent : 0;
	    }
	    function functionThatReturnsTrue() {
	      return true;
	    }
	    function functionThatReturnsFalse() {
	      return false;
	    }
	    function createSyntheticEvent(Interface) {
	      function SyntheticBaseEvent(
	        reactName,
	        reactEventType,
	        targetInst,
	        nativeEvent,
	        nativeEventTarget
	      ) {
	        this._reactName = reactName;
	        this._targetInst = targetInst;
	        this.type = reactEventType;
	        this.nativeEvent = nativeEvent;
	        this.target = nativeEventTarget;
	        this.currentTarget = null;
	        for (var propName in Interface)
	          Interface.hasOwnProperty(propName) &&
	            ((reactName = Interface[propName]),
	            (this[propName] = reactName
	              ? reactName(nativeEvent)
	              : nativeEvent[propName]));
	        this.isDefaultPrevented = (
	          null != nativeEvent.defaultPrevented
	            ? nativeEvent.defaultPrevented
	            : false === nativeEvent.returnValue
	        )
	          ? functionThatReturnsTrue
	          : functionThatReturnsFalse;
	        this.isPropagationStopped = functionThatReturnsFalse;
	        return this;
	      }
	      assign(SyntheticBaseEvent.prototype, {
	        preventDefault: function () {
	          this.defaultPrevented = true;
	          var event = this.nativeEvent;
	          event &&
	            (event.preventDefault
	              ? event.preventDefault()
	              : "unknown" !== typeof event.returnValue &&
	                (event.returnValue = false),
	            (this.isDefaultPrevented = functionThatReturnsTrue));
	        },
	        stopPropagation: function () {
	          var event = this.nativeEvent;
	          event &&
	            (event.stopPropagation
	              ? event.stopPropagation()
	              : "unknown" !== typeof event.cancelBubble &&
	                (event.cancelBubble = true),
	            (this.isPropagationStopped = functionThatReturnsTrue));
	        },
	        persist: function () {},
	        isPersistent: functionThatReturnsTrue
	      });
	      return SyntheticBaseEvent;
	    }
	    function modifierStateGetter(keyArg) {
	      var nativeEvent = this.nativeEvent;
	      return nativeEvent.getModifierState
	        ? nativeEvent.getModifierState(keyArg)
	        : (keyArg = modifierKeyToProp[keyArg])
	          ? !!nativeEvent[keyArg]
	          : false;
	    }
	    function getEventModifierState() {
	      return modifierStateGetter;
	    }
	    function isFallbackCompositionEnd(domEventName, nativeEvent) {
	      switch (domEventName) {
	        case "keyup":
	          return -1 !== END_KEYCODES.indexOf(nativeEvent.keyCode);
	        case "keydown":
	          return nativeEvent.keyCode !== START_KEYCODE;
	        case "keypress":
	        case "mousedown":
	        case "focusout":
	          return true;
	        default:
	          return false;
	      }
	    }
	    function getDataFromCustomEvent(nativeEvent) {
	      nativeEvent = nativeEvent.detail;
	      return "object" === typeof nativeEvent && "data" in nativeEvent
	        ? nativeEvent.data
	        : null;
	    }
	    function getNativeBeforeInputChars(domEventName, nativeEvent) {
	      switch (domEventName) {
	        case "compositionend":
	          return getDataFromCustomEvent(nativeEvent);
	        case "keypress":
	          if (nativeEvent.which !== SPACEBAR_CODE) return null;
	          hasSpaceKeypress = true;
	          return SPACEBAR_CHAR;
	        case "textInput":
	          return (
	            (domEventName = nativeEvent.data),
	            domEventName === SPACEBAR_CHAR && hasSpaceKeypress
	              ? null
	              : domEventName
	          );
	        default:
	          return null;
	      }
	    }
	    function getFallbackBeforeInputChars(domEventName, nativeEvent) {
	      if (isComposing)
	        return "compositionend" === domEventName ||
	          (!canUseCompositionEvent &&
	            isFallbackCompositionEnd(domEventName, nativeEvent))
	          ? ((domEventName = getData()),
	            (fallbackText = startText = root = null),
	            (isComposing = false),
	            domEventName)
	          : null;
	      switch (domEventName) {
	        case "paste":
	          return null;
	        case "keypress":
	          if (
	            !(
	              nativeEvent.ctrlKey ||
	              nativeEvent.altKey ||
	              nativeEvent.metaKey
	            ) ||
	            (nativeEvent.ctrlKey && nativeEvent.altKey)
	          ) {
	            if (nativeEvent.char && 1 < nativeEvent.char.length)
	              return nativeEvent.char;
	            if (nativeEvent.which)
	              return String.fromCharCode(nativeEvent.which);
	          }
	          return null;
	        case "compositionend":
	          return useFallbackCompositionData && "ko" !== nativeEvent.locale
	            ? null
	            : nativeEvent.data;
	        default:
	          return null;
	      }
	    }
	    function isTextInputElement(elem) {
	      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	      return "input" === nodeName
	        ? !!supportedInputTypes[elem.type]
	        : "textarea" === nodeName
	          ? true
	          : false;
	    }
	    function isEventSupported(eventNameSuffix) {
	      if (!canUseDOM) return false;
	      eventNameSuffix = "on" + eventNameSuffix;
	      var isSupported = eventNameSuffix in document;
	      isSupported ||
	        ((isSupported = document.createElement("div")),
	        isSupported.setAttribute(eventNameSuffix, "return;"),
	        (isSupported = "function" === typeof isSupported[eventNameSuffix]));
	      return isSupported;
	    }
	    function createAndAccumulateChangeEvent(
	      dispatchQueue,
	      inst,
	      nativeEvent,
	      target
	    ) {
	      restoreTarget
	        ? restoreQueue
	          ? restoreQueue.push(target)
	          : (restoreQueue = [target])
	        : (restoreTarget = target);
	      inst = accumulateTwoPhaseListeners(inst, "onChange");
	      0 < inst.length &&
	        ((nativeEvent = new SyntheticEvent(
	          "onChange",
	          "change",
	          null,
	          nativeEvent,
	          target
	        )),
	        dispatchQueue.push({ event: nativeEvent, listeners: inst }));
	    }
	    function runEventInBatch(dispatchQueue) {
	      processDispatchQueue(dispatchQueue, 0);
	    }
	    function getInstIfValueChanged(targetInst) {
	      var targetNode = getNodeFromInstance(targetInst);
	      if (updateValueIfChanged(targetNode)) return targetInst;
	    }
	    function getTargetInstForChangeEvent(domEventName, targetInst) {
	      if ("change" === domEventName) return targetInst;
	    }
	    function stopWatchingForValueChange() {
	      activeElement$1 &&
	        (activeElement$1.detachEvent("onpropertychange", handlePropertyChange),
	        (activeElementInst$1 = activeElement$1 = null));
	    }
	    function handlePropertyChange(nativeEvent) {
	      if (
	        "value" === nativeEvent.propertyName &&
	        getInstIfValueChanged(activeElementInst$1)
	      ) {
	        var dispatchQueue = [];
	        createAndAccumulateChangeEvent(
	          dispatchQueue,
	          activeElementInst$1,
	          nativeEvent,
	          getEventTarget(nativeEvent)
	        );
	        batchedUpdates$1(runEventInBatch, dispatchQueue);
	      }
	    }
	    function handleEventsForInputEventPolyfill(
	      domEventName,
	      target,
	      targetInst
	    ) {
	      "focusin" === domEventName
	        ? (stopWatchingForValueChange(),
	          (activeElement$1 = target),
	          (activeElementInst$1 = targetInst),
	          activeElement$1.attachEvent("onpropertychange", handlePropertyChange))
	        : "focusout" === domEventName && stopWatchingForValueChange();
	    }
	    function getTargetInstForInputEventPolyfill(domEventName) {
	      if (
	        "selectionchange" === domEventName ||
	        "keyup" === domEventName ||
	        "keydown" === domEventName
	      )
	        return getInstIfValueChanged(activeElementInst$1);
	    }
	    function getTargetInstForClickEvent(domEventName, targetInst) {
	      if ("click" === domEventName) return getInstIfValueChanged(targetInst);
	    }
	    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
	      if ("input" === domEventName || "change" === domEventName)
	        return getInstIfValueChanged(targetInst);
	    }
	    function is(x, y) {
	      return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);
	    }
	    function shallowEqual(objA, objB) {
	      if (objectIs(objA, objB)) return true;
	      if (
	        "object" !== typeof objA ||
	        null === objA ||
	        "object" !== typeof objB ||
	        null === objB
	      )
	        return false;
	      var keysA = Object.keys(objA),
	        keysB = Object.keys(objB);
	      if (keysA.length !== keysB.length) return false;
	      for (keysB = 0; keysB < keysA.length; keysB++) {
	        var currentKey = keysA[keysB];
	        if (
	          !hasOwnProperty.call(objB, currentKey) ||
	          !objectIs(objA[currentKey], objB[currentKey])
	        )
	          return false;
	      }
	      return true;
	    }
	    function getLeafNode(node) {
	      for (; node && node.firstChild; ) node = node.firstChild;
	      return node;
	    }
	    function getNodeForCharacterOffset(root, offset) {
	      var node = getLeafNode(root);
	      root = 0;
	      for (var nodeEnd; node; ) {
	        if (3 === node.nodeType) {
	          nodeEnd = root + node.textContent.length;
	          if (root <= offset && nodeEnd >= offset)
	            return { node: node, offset: offset - root };
	          root = nodeEnd;
	        }
	        a: {
	          for (; node; ) {
	            if (node.nextSibling) {
	              node = node.nextSibling;
	              break a;
	            }
	            node = node.parentNode;
	          }
	          node = undefined;
	        }
	        node = getLeafNode(node);
	      }
	    }
	    function containsNode(outerNode, innerNode) {
	      return outerNode && innerNode
	        ? outerNode === innerNode
	          ? true
	          : outerNode && 3 === outerNode.nodeType
	            ? false
	            : innerNode && 3 === innerNode.nodeType
	              ? containsNode(outerNode, innerNode.parentNode)
	              : "contains" in outerNode
	                ? outerNode.contains(innerNode)
	                : outerNode.compareDocumentPosition
	                  ? !!(outerNode.compareDocumentPosition(innerNode) & 16)
	                  : false
	        : false;
	    }
	    function getActiveElementDeep(containerInfo) {
	      containerInfo =
	        null != containerInfo &&
	        null != containerInfo.ownerDocument &&
	        null != containerInfo.ownerDocument.defaultView
	          ? containerInfo.ownerDocument.defaultView
	          : window;
	      for (
	        var element = getActiveElement(containerInfo.document);
	        element instanceof containerInfo.HTMLIFrameElement;

	      ) {
	        try {
	          var JSCompiler_inline_result =
	            "string" === typeof element.contentWindow.location.href;
	        } catch (err) {
	          JSCompiler_inline_result = false;
	        }
	        if (JSCompiler_inline_result) containerInfo = element.contentWindow;
	        else break;
	        element = getActiveElement(containerInfo.document);
	      }
	      return element;
	    }
	    function hasSelectionCapabilities(elem) {
	      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	      return (
	        nodeName &&
	        (("input" === nodeName &&
	          ("text" === elem.type ||
	            "search" === elem.type ||
	            "tel" === elem.type ||
	            "url" === elem.type ||
	            "password" === elem.type)) ||
	          "textarea" === nodeName ||
	          "true" === elem.contentEditable)
	      );
	    }
	    function restoreSelection(priorSelectionInformation, containerInfo) {
	      var curFocusedElem = getActiveElementDeep(containerInfo);
	      containerInfo = priorSelectionInformation.focusedElem;
	      var priorSelectionRange = priorSelectionInformation.selectionRange;
	      if (
	        curFocusedElem !== containerInfo &&
	        containerInfo &&
	        containerInfo.ownerDocument &&
	        containsNode(containerInfo.ownerDocument.documentElement, containerInfo)
	      ) {
	        if (
	          null !== priorSelectionRange &&
	          hasSelectionCapabilities(containerInfo)
	        )
	          if (
	            ((priorSelectionInformation = priorSelectionRange.start),
	            (curFocusedElem = priorSelectionRange.end),
	            undefined === curFocusedElem &&
	              (curFocusedElem = priorSelectionInformation),
	            "selectionStart" in containerInfo)
	          )
	            (containerInfo.selectionStart = priorSelectionInformation),
	              (containerInfo.selectionEnd = Math.min(
	                curFocusedElem,
	                containerInfo.value.length
	              ));
	          else if (
	            ((curFocusedElem =
	              ((priorSelectionInformation =
	                containerInfo.ownerDocument || document) &&
	                priorSelectionInformation.defaultView) ||
	              window),
	            curFocusedElem.getSelection)
	          ) {
	            curFocusedElem = curFocusedElem.getSelection();
	            var length = containerInfo.textContent.length,
	              start = Math.min(priorSelectionRange.start, length);
	            priorSelectionRange =
	              undefined === priorSelectionRange.end
	                ? start
	                : Math.min(priorSelectionRange.end, length);
	            !curFocusedElem.extend &&
	              start > priorSelectionRange &&
	              ((length = priorSelectionRange),
	              (priorSelectionRange = start),
	              (start = length));
	            length = getNodeForCharacterOffset(containerInfo, start);
	            var endMarker = getNodeForCharacterOffset(
	              containerInfo,
	              priorSelectionRange
	            );
	            length &&
	              endMarker &&
	              (1 !== curFocusedElem.rangeCount ||
	                curFocusedElem.anchorNode !== length.node ||
	                curFocusedElem.anchorOffset !== length.offset ||
	                curFocusedElem.focusNode !== endMarker.node ||
	                curFocusedElem.focusOffset !== endMarker.offset) &&
	              ((priorSelectionInformation =
	                priorSelectionInformation.createRange()),
	              priorSelectionInformation.setStart(length.node, length.offset),
	              curFocusedElem.removeAllRanges(),
	              start > priorSelectionRange
	                ? (curFocusedElem.addRange(priorSelectionInformation),
	                  curFocusedElem.extend(endMarker.node, endMarker.offset))
	                : (priorSelectionInformation.setEnd(
	                    endMarker.node,
	                    endMarker.offset
	                  ),
	                  curFocusedElem.addRange(priorSelectionInformation)));
	          }
	        priorSelectionInformation = [];
	        for (
	          curFocusedElem = containerInfo;
	          (curFocusedElem = curFocusedElem.parentNode);

	        )
	          1 === curFocusedElem.nodeType &&
	            priorSelectionInformation.push({
	              element: curFocusedElem,
	              left: curFocusedElem.scrollLeft,
	              top: curFocusedElem.scrollTop
	            });
	        "function" === typeof containerInfo.focus && containerInfo.focus();
	        for (
	          containerInfo = 0;
	          containerInfo < priorSelectionInformation.length;
	          containerInfo++
	        )
	          (curFocusedElem = priorSelectionInformation[containerInfo]),
	            (curFocusedElem.element.scrollLeft = curFocusedElem.left),
	            (curFocusedElem.element.scrollTop = curFocusedElem.top);
	      }
	    }
	    function constructSelectEvent(
	      dispatchQueue,
	      nativeEvent,
	      nativeEventTarget
	    ) {
	      var doc =
	        nativeEventTarget.window === nativeEventTarget
	          ? nativeEventTarget.document
	          : 9 === nativeEventTarget.nodeType
	            ? nativeEventTarget
	            : nativeEventTarget.ownerDocument;
	      mouseDown ||
	        null == activeElement ||
	        activeElement !== getActiveElement(doc) ||
	        ((doc = activeElement),
	        "selectionStart" in doc && hasSelectionCapabilities(doc)
	          ? (doc = { start: doc.selectionStart, end: doc.selectionEnd })
	          : ((doc = (
	              (doc.ownerDocument && doc.ownerDocument.defaultView) ||
	              window
	            ).getSelection()),
	            (doc = {
	              anchorNode: doc.anchorNode,
	              anchorOffset: doc.anchorOffset,
	              focusNode: doc.focusNode,
	              focusOffset: doc.focusOffset
	            })),
	        (lastSelection && shallowEqual(lastSelection, doc)) ||
	          ((lastSelection = doc),
	          (doc = accumulateTwoPhaseListeners(activeElementInst, "onSelect")),
	          0 < doc.length &&
	            ((nativeEvent = new SyntheticEvent(
	              "onSelect",
	              "select",
	              null,
	              nativeEvent,
	              nativeEventTarget
	            )),
	            dispatchQueue.push({ event: nativeEvent, listeners: doc }),
	            (nativeEvent.target = activeElement))));
	    }
	    function makePrefixMap(styleProp, eventName) {
	      var prefixes = {};
	      prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	      prefixes["Webkit" + styleProp] = "webkit" + eventName;
	      prefixes["Moz" + styleProp] = "moz" + eventName;
	      return prefixes;
	    }
	    function getVendorPrefixedEventName(eventName) {
	      if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
	      if (!vendorPrefixes[eventName]) return eventName;
	      var prefixMap = vendorPrefixes[eventName],
	        styleProp;
	      for (styleProp in prefixMap)
	        if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
	          return (prefixedEventNames[eventName] = prefixMap[styleProp]);
	      return eventName;
	    }
	    function registerSimpleEvent(domEventName, reactName) {
	      topLevelEventsToReactNames.set(domEventName, reactName);
	      registerTwoPhaseEvent(reactName, [domEventName]);
	    }
	    function finishQueueingConcurrentUpdates() {
	      for (
	        var endIndex = concurrentQueuesIndex,
	          i = (concurrentlyUpdatedLanes = concurrentQueuesIndex = 0);
	        i < endIndex;

	      ) {
	        var fiber = concurrentQueues[i];
	        concurrentQueues[i++] = null;
	        var queue = concurrentQueues[i];
	        concurrentQueues[i++] = null;
	        var update = concurrentQueues[i];
	        concurrentQueues[i++] = null;
	        var lane = concurrentQueues[i];
	        concurrentQueues[i++] = null;
	        if (null !== queue && null !== update) {
	          var pending = queue.pending;
	          null === pending
	            ? (update.next = update)
	            : ((update.next = pending.next), (pending.next = update));
	          queue.pending = update;
	        }
	        0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
	      }
	    }
	    function enqueueUpdate$1(fiber, queue, update, lane) {
	      concurrentQueues[concurrentQueuesIndex++] = fiber;
	      concurrentQueues[concurrentQueuesIndex++] = queue;
	      concurrentQueues[concurrentQueuesIndex++] = update;
	      concurrentQueues[concurrentQueuesIndex++] = lane;
	      concurrentlyUpdatedLanes |= lane;
	      fiber.lanes |= lane;
	      fiber = fiber.alternate;
	      null !== fiber && (fiber.lanes |= lane);
	    }
	    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
	      enqueueUpdate$1(fiber, queue, update, lane);
	      return getRootForUpdatedFiber(fiber);
	    }
	    function enqueueConcurrentRenderForLane(fiber, lane) {
	      enqueueUpdate$1(fiber, null, null, lane);
	      return getRootForUpdatedFiber(fiber);
	    }
	    function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
	      sourceFiber.lanes |= lane;
	      var alternate = sourceFiber.alternate;
	      null !== alternate && (alternate.lanes |= lane);
	      for (var isHidden = false, parent = sourceFiber.return; null !== parent; )
	        (parent.childLanes |= lane),
	          (alternate = parent.alternate),
	          null !== alternate && (alternate.childLanes |= lane),
	          22 === parent.tag &&
	            ((sourceFiber = parent.stateNode),
	            null === sourceFiber ||
	              sourceFiber._visibility & OffscreenVisible ||
	              (isHidden = true)),
	          (sourceFiber = parent),
	          (parent = parent.return);
	      isHidden &&
	        null !== update &&
	        3 === sourceFiber.tag &&
	        ((parent = sourceFiber.stateNode),
	        (isHidden = 31 - clz32(lane)),
	        (parent = parent.hiddenUpdates),
	        (sourceFiber = parent[isHidden]),
	        null === sourceFiber
	          ? (parent[isHidden] = [update])
	          : sourceFiber.push(update),
	        (update.lane = lane | 536870912));
	    }
	    function getRootForUpdatedFiber(sourceFiber) {
	      if (nestedUpdateCount > NESTED_UPDATE_LIMIT)
	        throw (
	          ((nestedPassiveUpdateCount = nestedUpdateCount = 0),
	          (rootWithPassiveNestedUpdates = rootWithNestedUpdates = null),
	          Error(
	            "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."
	          ))
	        );
	      nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT &&
	        ((nestedPassiveUpdateCount = 0),
	        (rootWithPassiveNestedUpdates = null),
	        console.error(
	          "Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."
	        ));
	      null === sourceFiber.alternate &&
	        0 !== (sourceFiber.flags & 4098) &&
	        warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
	      for (var node = sourceFiber, parent = node.return; null !== parent; )
	        null === node.alternate &&
	          0 !== (node.flags & 4098) &&
	          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber),
	          (node = parent),
	          (parent = node.return);
	      return 3 === node.tag ? node.stateNode : null;
	    }
	    function resolveFunctionForHotReloading(type) {
	      if (null === resolveFamily) return type;
	      var family = resolveFamily(type);
	      return undefined === family ? type : family.current;
	    }
	    function resolveForwardRefForHotReloading(type) {
	      if (null === resolveFamily) return type;
	      var family = resolveFamily(type);
	      return undefined === family
	        ? null !== type &&
	          undefined !== type &&
	          "function" === typeof type.render &&
	          ((family = resolveFunctionForHotReloading(type.render)),
	          type.render !== family)
	          ? ((family = { $$typeof: REACT_FORWARD_REF_TYPE, render: family }),
	            undefined !== type.displayName &&
	              (family.displayName = type.displayName),
	            family)
	          : type
	        : family.current;
	    }
	    function isCompatibleFamilyForHotReloading(fiber, element) {
	      if (null === resolveFamily) return false;
	      var prevType = fiber.elementType;
	      element = element.type;
	      var needsCompareFamilies = false,
	        $$typeofNextType =
	          "object" === typeof element && null !== element
	            ? element.$$typeof
	            : null;
	      switch (fiber.tag) {
	        case 1:
	          "function" === typeof element && (needsCompareFamilies = true);
	          break;
	        case 0:
	          "function" === typeof element
	            ? (needsCompareFamilies = true)
	            : $$typeofNextType === REACT_LAZY_TYPE &&
	              (needsCompareFamilies = true);
	          break;
	        case 11:
	          $$typeofNextType === REACT_FORWARD_REF_TYPE
	            ? (needsCompareFamilies = true)
	            : $$typeofNextType === REACT_LAZY_TYPE &&
	              (needsCompareFamilies = true);
	          break;
	        case 14:
	        case 15:
	          $$typeofNextType === REACT_MEMO_TYPE
	            ? (needsCompareFamilies = true)
	            : $$typeofNextType === REACT_LAZY_TYPE &&
	              (needsCompareFamilies = true);
	          break;
	        default:
	          return false;
	      }
	      return needsCompareFamilies &&
	        ((fiber = resolveFamily(prevType)),
	        undefined !== fiber && fiber === resolveFamily(element))
	        ? true
	        : false;
	    }
	    function markFailedErrorBoundaryForHotReloading(fiber) {
	      null !== resolveFamily &&
	        "function" === typeof WeakSet &&
	        (null === failedBoundaries && (failedBoundaries = new WeakSet()),
	        failedBoundaries.add(fiber));
	    }
	    function scheduleFibersWithFamiliesRecursively(
	      fiber,
	      updatedFamilies,
	      staleFamilies
	    ) {
	      var alternate = fiber.alternate,
	        child = fiber.child,
	        sibling = fiber.sibling,
	        tag = fiber.tag,
	        type = fiber.type,
	        candidateType = null;
	      switch (tag) {
	        case 0:
	        case 15:
	        case 1:
	          candidateType = type;
	          break;
	        case 11:
	          candidateType = type.render;
	      }
	      if (null === resolveFamily)
	        throw Error("Expected resolveFamily to be set during hot reload.");
	      var needsRender = false;
	      type = false;
	      null !== candidateType &&
	        ((candidateType = resolveFamily(candidateType)),
	        undefined !== candidateType &&
	          (staleFamilies.has(candidateType)
	            ? (type = true)
	            : updatedFamilies.has(candidateType) &&
	              (1 === tag ? (type = true) : (needsRender = true))));
	      null !== failedBoundaries &&
	        (failedBoundaries.has(fiber) ||
	          (null !== alternate && failedBoundaries.has(alternate))) &&
	        (type = true);
	      type && (fiber._debugNeedsRemount = true);
	      if (type || needsRender)
	        (alternate = enqueueConcurrentRenderForLane(fiber, 2)),
	          null !== alternate && scheduleUpdateOnFiber(alternate, fiber, 2);
	      null === child ||
	        type ||
	        scheduleFibersWithFamiliesRecursively(
	          child,
	          updatedFamilies,
	          staleFamilies
	        );
	      null !== sibling &&
	        scheduleFibersWithFamiliesRecursively(
	          sibling,
	          updatedFamilies,
	          staleFamilies
	        );
	    }
	    function pushNestedEffectDurations() {
	      var prevEffectDuration = profilerEffectDuration;
	      profilerEffectDuration = 0;
	      return prevEffectDuration;
	    }
	    function popNestedEffectDurations(prevEffectDuration) {
	      var elapsedTime = profilerEffectDuration;
	      profilerEffectDuration = prevEffectDuration;
	      return elapsedTime;
	    }
	    function bubbleNestedEffectDurations(prevEffectDuration) {
	      var elapsedTime = profilerEffectDuration;
	      profilerEffectDuration += prevEffectDuration;
	      return elapsedTime;
	    }
	    function startProfilerTimer(fiber) {
	      profilerStartTime = now();
	      0 > fiber.actualStartTime && (fiber.actualStartTime = profilerStartTime);
	    }
	    function stopProfilerTimerIfRunningAndRecordDuration(fiber) {
	      if (0 <= profilerStartTime) {
	        var elapsedTime = now() - profilerStartTime;
	        fiber.actualDuration += elapsedTime;
	        fiber.selfBaseDuration = elapsedTime;
	        profilerStartTime = -1;
	      }
	    }
	    function stopProfilerTimerIfRunningAndRecordIncompleteDuration(fiber) {
	      if (0 <= profilerStartTime) {
	        var elapsedTime = now() - profilerStartTime;
	        fiber.actualDuration += elapsedTime;
	        profilerStartTime = -1;
	      }
	    }
	    function recordEffectDuration() {
	      if (0 <= profilerStartTime) {
	        var elapsedTime = now() - profilerStartTime;
	        profilerStartTime = -1;
	        profilerEffectDuration += elapsedTime;
	      }
	    }
	    function startEffectTimer() {
	      profilerStartTime = now();
	    }
	    function transferActualDuration(fiber) {
	      for (var child = fiber.child; child; )
	        (fiber.actualDuration += child.actualDuration), (child = child.sibling);
	    }
	    function createCapturedValueAtFiber(value, source) {
	      if ("object" === typeof value && null !== value) {
	        var existing = CapturedStacks.get(value);
	        if (undefined !== existing) return existing;
	        source = {
	          value: value,
	          source: source,
	          stack: getStackByFiberInDevAndProd(source)
	        };
	        CapturedStacks.set(value, source);
	        return source;
	      }
	      return {
	        value: value,
	        source: source,
	        stack: getStackByFiberInDevAndProd(source)
	      };
	    }
	    function pushTreeFork(workInProgress, totalChildren) {
	      warnIfNotHydrating();
	      forkStack[forkStackIndex++] = treeForkCount;
	      forkStack[forkStackIndex++] = treeForkProvider;
	      treeForkProvider = workInProgress;
	      treeForkCount = totalChildren;
	    }
	    function pushTreeId(workInProgress, totalChildren, index) {
	      warnIfNotHydrating();
	      idStack[idStackIndex++] = treeContextId;
	      idStack[idStackIndex++] = treeContextOverflow;
	      idStack[idStackIndex++] = treeContextProvider;
	      treeContextProvider = workInProgress;
	      var baseIdWithLeadingBit = treeContextId;
	      workInProgress = treeContextOverflow;
	      var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
	      baseIdWithLeadingBit &= ~(1 << baseLength);
	      index += 1;
	      var length = 32 - clz32(totalChildren) + baseLength;
	      if (30 < length) {
	        var numberOfOverflowBits = baseLength - (baseLength % 5);
	        length = (
	          baseIdWithLeadingBit &
	          ((1 << numberOfOverflowBits) - 1)
	        ).toString(32);
	        baseIdWithLeadingBit >>= numberOfOverflowBits;
	        baseLength -= numberOfOverflowBits;
	        treeContextId =
	          (1 << (32 - clz32(totalChildren) + baseLength)) |
	          (index << baseLength) |
	          baseIdWithLeadingBit;
	        treeContextOverflow = length + workInProgress;
	      } else
	        (treeContextId =
	          (1 << length) | (index << baseLength) | baseIdWithLeadingBit),
	          (treeContextOverflow = workInProgress);
	    }
	    function pushMaterializedTreeId(workInProgress) {
	      warnIfNotHydrating();
	      null !== workInProgress.return &&
	        (pushTreeFork(workInProgress, 1), pushTreeId(workInProgress, 1, 0));
	    }
	    function popTreeContext(workInProgress) {
	      for (; workInProgress === treeForkProvider; )
	        (treeForkProvider = forkStack[--forkStackIndex]),
	          (forkStack[forkStackIndex] = null),
	          (treeForkCount = forkStack[--forkStackIndex]),
	          (forkStack[forkStackIndex] = null);
	      for (; workInProgress === treeContextProvider; )
	        (treeContextProvider = idStack[--idStackIndex]),
	          (idStack[idStackIndex] = null),
	          (treeContextOverflow = idStack[--idStackIndex]),
	          (idStack[idStackIndex] = null),
	          (treeContextId = idStack[--idStackIndex]),
	          (idStack[idStackIndex] = null);
	    }
	    function warnIfNotHydrating() {
	      isHydrating ||
	        console.error(
	          "Expected to be hydrating. This is a bug in React. Please file an issue."
	        );
	    }
	    function buildHydrationDiffNode(fiber, distanceFromLeaf) {
	      if (null === fiber.return) {
	        if (null === hydrationDiffRootDEV)
	          hydrationDiffRootDEV = {
	            fiber: fiber,
	            children: [],
	            serverProps: undefined,
	            serverTail: [],
	            distanceFromLeaf: distanceFromLeaf
	          };
	        else {
	          if (hydrationDiffRootDEV.fiber !== fiber)
	            throw Error(
	              "Saw multiple hydration diff roots in a pass. This is a bug in React."
	            );
	          hydrationDiffRootDEV.distanceFromLeaf > distanceFromLeaf &&
	            (hydrationDiffRootDEV.distanceFromLeaf = distanceFromLeaf);
	        }
	        return hydrationDiffRootDEV;
	      }
	      var siblings = buildHydrationDiffNode(
	        fiber.return,
	        distanceFromLeaf + 1
	      ).children;
	      if (0 < siblings.length && siblings[siblings.length - 1].fiber === fiber)
	        return (
	          (siblings = siblings[siblings.length - 1]),
	          siblings.distanceFromLeaf > distanceFromLeaf &&
	            (siblings.distanceFromLeaf = distanceFromLeaf),
	          siblings
	        );
	      distanceFromLeaf = {
	        fiber: fiber,
	        children: [],
	        serverProps: undefined,
	        serverTail: [],
	        distanceFromLeaf: distanceFromLeaf
	      };
	      siblings.push(distanceFromLeaf);
	      return distanceFromLeaf;
	    }
	    function warnNonHydratedInstance(fiber, rejectedCandidate) {
	      didSuspendOrErrorDEV ||
	        ((fiber = buildHydrationDiffNode(fiber, 0)),
	        (fiber.serverProps = null),
	        null !== rejectedCandidate &&
	          ((rejectedCandidate =
	            describeHydratableInstanceForDevWarnings(rejectedCandidate)),
	          fiber.serverTail.push(rejectedCandidate)));
	    }
	    function throwOnHydrationMismatch(fiber) {
	      var diff = "",
	        diffRoot = hydrationDiffRootDEV;
	      null !== diffRoot &&
	        ((hydrationDiffRootDEV = null), (diff = describeDiff(diffRoot)));
	      queueHydrationError(
	        createCapturedValueAtFiber(
	          Error(
	            "Hydration failed because the server rendered HTML didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\nhttps://react.dev/link/hydration-mismatch" +
	              diff
	          ),
	          fiber
	        )
	      );
	      throw HydrationMismatchException;
	    }
	    function prepareToHydrateHostInstance(fiber) {
	      var didHydrate = fiber.stateNode;
	      var type = fiber.type,
	        props = fiber.memoizedProps;
	      didHydrate[internalInstanceKey] = fiber;
	      didHydrate[internalPropsKey] = props;
	      validatePropertiesInDevelopment(type, props);
	      switch (type) {
	        case "dialog":
	          listenToNonDelegatedEvent("cancel", didHydrate);
	          listenToNonDelegatedEvent("close", didHydrate);
	          break;
	        case "iframe":
	        case "object":
	        case "embed":
	          listenToNonDelegatedEvent("load", didHydrate);
	          break;
	        case "video":
	        case "audio":
	          for (type = 0; type < mediaEventTypes.length; type++)
	            listenToNonDelegatedEvent(mediaEventTypes[type], didHydrate);
	          break;
	        case "source":
	          listenToNonDelegatedEvent("error", didHydrate);
	          break;
	        case "img":
	        case "image":
	        case "link":
	          listenToNonDelegatedEvent("error", didHydrate);
	          listenToNonDelegatedEvent("load", didHydrate);
	          break;
	        case "details":
	          listenToNonDelegatedEvent("toggle", didHydrate);
	          break;
	        case "input":
	          checkControlledValueProps("input", props);
	          listenToNonDelegatedEvent("invalid", didHydrate);
	          validateInputProps(didHydrate, props);
	          initInput(
	            didHydrate,
	            props.value,
	            props.defaultValue,
	            props.checked,
	            props.defaultChecked,
	            props.type,
	            props.name,
	            true
	          );
	          track(didHydrate);
	          break;
	        case "option":
	          validateOptionProps(didHydrate, props);
	          break;
	        case "select":
	          checkControlledValueProps("select", props);
	          listenToNonDelegatedEvent("invalid", didHydrate);
	          validateSelectProps(didHydrate, props);
	          break;
	        case "textarea":
	          checkControlledValueProps("textarea", props),
	            listenToNonDelegatedEvent("invalid", didHydrate),
	            validateTextareaProps(didHydrate, props),
	            initTextarea(
	              didHydrate,
	              props.value,
	              props.defaultValue,
	              props.children
	            ),
	            track(didHydrate);
	      }
	      type = props.children;
	      ("string" !== typeof type &&
	        "number" !== typeof type &&
	        "bigint" !== typeof type) ||
	      didHydrate.textContent === "" + type ||
	      true === props.suppressHydrationWarning ||
	      checkForUnmatchedText(didHydrate.textContent, type)
	        ? (null != props.popover &&
	            (listenToNonDelegatedEvent("beforetoggle", didHydrate),
	            listenToNonDelegatedEvent("toggle", didHydrate)),
	          null != props.onScroll &&
	            listenToNonDelegatedEvent("scroll", didHydrate),
	          null != props.onScrollEnd &&
	            listenToNonDelegatedEvent("scrollend", didHydrate),
	          null != props.onClick && (didHydrate.onclick = noop$1),
	          (didHydrate = true))
	        : (didHydrate = false);
	      didHydrate || throwOnHydrationMismatch(fiber);
	    }
	    function popToNextHostParent(fiber) {
	      for (hydrationParentFiber = fiber.return; hydrationParentFiber; )
	        switch (hydrationParentFiber.tag) {
	          case 3:
	          case 27:
	            rootOrSingletonContext = true;
	            return;
	          case 5:
	          case 13:
	            rootOrSingletonContext = false;
	            return;
	          default:
	            hydrationParentFiber = hydrationParentFiber.return;
	        }
	    }
	    function popHydrationState(fiber) {
	      if (fiber !== hydrationParentFiber) return false;
	      if (!isHydrating)
	        return popToNextHostParent(fiber), (isHydrating = true), false;
	      var shouldClear = false,
	        JSCompiler_temp;
	      if ((JSCompiler_temp = 3 !== fiber.tag && 27 !== fiber.tag)) {
	        if ((JSCompiler_temp = 5 === fiber.tag))
	          (JSCompiler_temp = fiber.type),
	            (JSCompiler_temp =
	              !("form" !== JSCompiler_temp && "button" !== JSCompiler_temp) ||
	              shouldSetTextContent(fiber.type, fiber.memoizedProps));
	        JSCompiler_temp = !JSCompiler_temp;
	      }
	      JSCompiler_temp && (shouldClear = true);
	      if (shouldClear && nextHydratableInstance) {
	        for (shouldClear = nextHydratableInstance; shouldClear; ) {
	          JSCompiler_temp = buildHydrationDiffNode(fiber, 0);
	          var description =
	            describeHydratableInstanceForDevWarnings(shouldClear);
	          JSCompiler_temp.serverTail.push(description);
	          shouldClear =
	            "Suspense" === description.type
	              ? getNextHydratableInstanceAfterSuspenseInstance(shouldClear)
	              : getNextHydratable(shouldClear.nextSibling);
	        }
	        throwOnHydrationMismatch(fiber);
	      }
	      popToNextHostParent(fiber);
	      if (13 === fiber.tag) {
	        fiber = fiber.memoizedState;
	        fiber = null !== fiber ? fiber.dehydrated : null;
	        if (!fiber)
	          throw Error(
	            "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
	          );
	        nextHydratableInstance =
	          getNextHydratableInstanceAfterSuspenseInstance(fiber);
	      } else
	        nextHydratableInstance = hydrationParentFiber
	          ? getNextHydratable(fiber.stateNode.nextSibling)
	          : null;
	      return true;
	    }
	    function resetHydrationState() {
	      nextHydratableInstance = hydrationParentFiber = null;
	      didSuspendOrErrorDEV = isHydrating = false;
	    }
	    function queueHydrationError(error) {
	      null === hydrationErrors
	        ? (hydrationErrors = [error])
	        : hydrationErrors.push(error);
	    }
	    function emitPendingHydrationWarnings() {
	      var diffRoot = hydrationDiffRootDEV;
	      null !== diffRoot &&
	        ((hydrationDiffRootDEV = null),
	        (diffRoot = describeDiff(diffRoot)),
	        console.error(
	          "A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\n%s%s",
	          "https://react.dev/link/hydration-mismatch",
	          diffRoot
	        ));
	    }
	    function createThenableState() {
	      return { didWarnAboutUncachedPromise: false, thenables: [] };
	    }
	    function isThenableResolved(thenable) {
	      thenable = thenable.status;
	      return "fulfilled" === thenable || "rejected" === thenable;
	    }
	    function noop$3() {}
	    function trackUsedThenable(thenableState, thenable, index) {
	      null !== ReactSharedInternals.actQueue &&
	        (ReactSharedInternals.didUsePromise = true);
	      var trackedThenables = thenableState.thenables;
	      index = trackedThenables[index];
	      undefined === index
	        ? trackedThenables.push(thenable)
	        : index !== thenable &&
	          (thenableState.didWarnAboutUncachedPromise ||
	            ((thenableState.didWarnAboutUncachedPromise = true),
	            console.error(
	              "A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework."
	            )),
	          thenable.then(noop$3, noop$3),
	          (thenable = index));
	      switch (thenable.status) {
	        case "fulfilled":
	          return thenable.value;
	        case "rejected":
	          throw (
	            ((thenableState = thenable.reason),
	            checkIfUseWrappedInAsyncCatch(thenableState),
	            thenableState)
	          );
	        default:
	          if ("string" === typeof thenable.status)
	            thenable.then(noop$3, noop$3);
	          else {
	            thenableState = workInProgressRoot;
	            if (
	              null !== thenableState &&
	              100 < thenableState.shellSuspendCounter
	            )
	              throw Error(
	                "async/await is not yet supported in Client Components, only Server Components. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
	              );
	            thenableState = thenable;
	            thenableState.status = "pending";
	            thenableState.then(
	              function (fulfilledValue) {
	                if ("pending" === thenable.status) {
	                  var fulfilledThenable = thenable;
	                  fulfilledThenable.status = "fulfilled";
	                  fulfilledThenable.value = fulfilledValue;
	                }
	              },
	              function (error) {
	                if ("pending" === thenable.status) {
	                  var rejectedThenable = thenable;
	                  rejectedThenable.status = "rejected";
	                  rejectedThenable.reason = error;
	                }
	              }
	            );
	          }
	          switch (thenable.status) {
	            case "fulfilled":
	              return thenable.value;
	            case "rejected":
	              throw (
	                ((thenableState = thenable.reason),
	                checkIfUseWrappedInAsyncCatch(thenableState),
	                thenableState)
	              );
	          }
	          suspendedThenable = thenable;
	          needsToResetSuspendedThenableDEV = true;
	          throw SuspenseException;
	      }
	    }
	    function getSuspendedThenable() {
	      if (null === suspendedThenable)
	        throw Error(
	          "Expected a suspended thenable. This is a bug in React. Please file an issue."
	        );
	      var thenable = suspendedThenable;
	      suspendedThenable = null;
	      needsToResetSuspendedThenableDEV = false;
	      return thenable;
	    }
	    function checkIfUseWrappedInAsyncCatch(rejectedReason) {
	      if (rejectedReason === SuspenseException)
	        throw Error(
	          "Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
	        );
	    }
	    function pushDebugInfo(debugInfo) {
	      var previousDebugInfo = currentDebugInfo;
	      null != debugInfo &&
	        (currentDebugInfo =
	          null === previousDebugInfo
	            ? debugInfo
	            : previousDebugInfo.concat(debugInfo));
	      return previousDebugInfo;
	    }
	    function validateFragmentProps(element, fiber, returnFiber) {
	      for (var keys = Object.keys(element.props), i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        if ("children" !== key && "key" !== key) {
	          null === fiber &&
	            ((fiber = createFiberFromElement(element, returnFiber.mode, 0)),
	            (fiber._debugInfo = currentDebugInfo),
	            (fiber.return = returnFiber));
	          runWithFiberInDEV(
	            fiber,
	            function (erroredKey) {
	              console.error(
	                "Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",
	                erroredKey
	              );
	            },
	            key
	          );
	          break;
	        }
	      }
	    }
	    function unwrapThenable(thenable) {
	      var index = thenableIndexCounter$1;
	      thenableIndexCounter$1 += 1;
	      null === thenableState$1 && (thenableState$1 = createThenableState());
	      return trackUsedThenable(thenableState$1, thenable, index);
	    }
	    function coerceRef(workInProgress, element) {
	      element = element.props.ref;
	      workInProgress.ref = undefined !== element ? element : null;
	    }
	    function throwOnInvalidObjectType(returnFiber, newChild) {
	      if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)
	        throw Error(
	          'A React Element from an older version of React was rendered. This is not supported. It can happen if:\n- Multiple copies of the "react" package is used.\n- A library pre-bundled an old copy of "react" or "react/jsx-runtime".\n- A compiler tries to "inline" JSX instead of using the runtime.'
	        );
	      returnFiber = Object.prototype.toString.call(newChild);
	      throw Error(
	        "Objects are not valid as a React child (found: " +
	          ("[object Object]" === returnFiber
	            ? "object with keys {" + Object.keys(newChild).join(", ") + "}"
	            : returnFiber) +
	          "). If you meant to render a collection of children, use an array instead."
	      );
	    }
	    function warnOnFunctionType(returnFiber, invalidChild) {
	      var parentName = getComponentNameFromFiber(returnFiber) || "Component";
	      ownerHasFunctionTypeWarning[parentName] ||
	        ((ownerHasFunctionTypeWarning[parentName] = true),
	        (invalidChild =
	          invalidChild.displayName || invalidChild.name || "Component"),
	        3 === returnFiber.tag
	          ? console.error(
	              "Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  root.render(%s)",
	              invalidChild,
	              invalidChild,
	              invalidChild
	            )
	          : console.error(
	              "Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  <%s>{%s}</%s>",
	              invalidChild,
	              invalidChild,
	              parentName,
	              invalidChild,
	              parentName
	            ));
	    }
	    function warnOnSymbolType(returnFiber, invalidChild) {
	      var parentName = getComponentNameFromFiber(returnFiber) || "Component";
	      ownerHasSymbolTypeWarning[parentName] ||
	        ((ownerHasSymbolTypeWarning[parentName] = true),
	        (invalidChild = String(invalidChild)),
	        3 === returnFiber.tag
	          ? console.error(
	              "Symbols are not valid as a React child.\n  root.render(%s)",
	              invalidChild
	            )
	          : console.error(
	              "Symbols are not valid as a React child.\n  <%s>%s</%s>",
	              parentName,
	              invalidChild,
	              parentName
	            ));
	    }
	    function createChildReconciler(shouldTrackSideEffects) {
	      function deleteChild(returnFiber, childToDelete) {
	        if (shouldTrackSideEffects) {
	          var deletions = returnFiber.deletions;
	          null === deletions
	            ? ((returnFiber.deletions = [childToDelete]),
	              (returnFiber.flags |= 16))
	            : deletions.push(childToDelete);
	        }
	      }
	      function deleteRemainingChildren(returnFiber, currentFirstChild) {
	        if (!shouldTrackSideEffects) return null;
	        for (; null !== currentFirstChild; )
	          deleteChild(returnFiber, currentFirstChild),
	            (currentFirstChild = currentFirstChild.sibling);
	        return null;
	      }
	      function mapRemainingChildren(currentFirstChild) {
	        for (var existingChildren = new Map(); null !== currentFirstChild; )
	          null !== currentFirstChild.key
	            ? existingChildren.set(currentFirstChild.key, currentFirstChild)
	            : existingChildren.set(currentFirstChild.index, currentFirstChild),
	            (currentFirstChild = currentFirstChild.sibling);
	        return existingChildren;
	      }
	      function useFiber(fiber, pendingProps) {
	        fiber = createWorkInProgress(fiber, pendingProps);
	        fiber.index = 0;
	        fiber.sibling = null;
	        return fiber;
	      }
	      function placeChild(newFiber, lastPlacedIndex, newIndex) {
	        newFiber.index = newIndex;
	        if (!shouldTrackSideEffects)
	          return (newFiber.flags |= 1048576), lastPlacedIndex;
	        newIndex = newFiber.alternate;
	        if (null !== newIndex)
	          return (
	            (newIndex = newIndex.index),
	            newIndex < lastPlacedIndex
	              ? ((newFiber.flags |= 33554434), lastPlacedIndex)
	              : newIndex
	          );
	        newFiber.flags |= 33554434;
	        return lastPlacedIndex;
	      }
	      function placeSingleChild(newFiber) {
	        shouldTrackSideEffects &&
	          null === newFiber.alternate &&
	          (newFiber.flags |= 33554434);
	        return newFiber;
	      }
	      function updateTextNode(returnFiber, current, textContent, lanes) {
	        if (null === current || 6 !== current.tag)
	          return (
	            (current = createFiberFromText(
	              textContent,
	              returnFiber.mode,
	              lanes
	            )),
	            (current.return = returnFiber),
	            (current._debugOwner = returnFiber),
	            (current._debugInfo = currentDebugInfo),
	            current
	          );
	        current = useFiber(current, textContent);
	        current.return = returnFiber;
	        current._debugInfo = currentDebugInfo;
	        return current;
	      }
	      function updateElement(returnFiber, current, element, lanes) {
	        var elementType = element.type;
	        if (elementType === REACT_FRAGMENT_TYPE)
	          return (
	            (current = updateFragment(
	              returnFiber,
	              current,
	              element.props.children,
	              lanes,
	              element.key
	            )),
	            validateFragmentProps(element, current, returnFiber),
	            current
	          );
	        if (
	          null !== current &&
	          (current.elementType === elementType ||
	            isCompatibleFamilyForHotReloading(current, element) ||
	            ("object" === typeof elementType &&
	              null !== elementType &&
	              elementType.$$typeof === REACT_LAZY_TYPE &&
	              callLazyInitInDEV(elementType) === current.type))
	        )
	          return (
	            (current = useFiber(current, element.props)),
	            coerceRef(current, element),
	            (current.return = returnFiber),
	            (current._debugOwner = element._owner),
	            (current._debugInfo = currentDebugInfo),
	            current
	          );
	        current = createFiberFromElement(element, returnFiber.mode, lanes);
	        coerceRef(current, element);
	        current.return = returnFiber;
	        current._debugInfo = currentDebugInfo;
	        return current;
	      }
	      function updatePortal(returnFiber, current, portal, lanes) {
	        if (
	          null === current ||
	          4 !== current.tag ||
	          current.stateNode.containerInfo !== portal.containerInfo ||
	          current.stateNode.implementation !== portal.implementation
	        )
	          return (
	            (current = createFiberFromPortal(portal, returnFiber.mode, lanes)),
	            (current.return = returnFiber),
	            (current._debugInfo = currentDebugInfo),
	            current
	          );
	        current = useFiber(current, portal.children || []);
	        current.return = returnFiber;
	        current._debugInfo = currentDebugInfo;
	        return current;
	      }
	      function updateFragment(returnFiber, current, fragment, lanes, key) {
	        if (null === current || 7 !== current.tag)
	          return (
	            (current = createFiberFromFragment(
	              fragment,
	              returnFiber.mode,
	              lanes,
	              key
	            )),
	            (current.return = returnFiber),
	            (current._debugOwner = returnFiber),
	            (current._debugInfo = currentDebugInfo),
	            current
	          );
	        current = useFiber(current, fragment);
	        current.return = returnFiber;
	        current._debugInfo = currentDebugInfo;
	        return current;
	      }
	      function createChild(returnFiber, newChild, lanes) {
	        if (
	          ("string" === typeof newChild && "" !== newChild) ||
	          "number" === typeof newChild ||
	          "bigint" === typeof newChild
	        )
	          return (
	            (newChild = createFiberFromText(
	              "" + newChild,
	              returnFiber.mode,
	              lanes
	            )),
	            (newChild.return = returnFiber),
	            (newChild._debugOwner = returnFiber),
	            (newChild._debugInfo = currentDebugInfo),
	            newChild
	          );
	        if ("object" === typeof newChild && null !== newChild) {
	          switch (newChild.$$typeof) {
	            case REACT_ELEMENT_TYPE:
	              return (
	                (lanes = createFiberFromElement(
	                  newChild,
	                  returnFiber.mode,
	                  lanes
	                )),
	                coerceRef(lanes, newChild),
	                (lanes.return = returnFiber),
	                (returnFiber = pushDebugInfo(newChild._debugInfo)),
	                (lanes._debugInfo = currentDebugInfo),
	                (currentDebugInfo = returnFiber),
	                lanes
	              );
	            case REACT_PORTAL_TYPE:
	              return (
	                (newChild = createFiberFromPortal(
	                  newChild,
	                  returnFiber.mode,
	                  lanes
	                )),
	                (newChild.return = returnFiber),
	                (newChild._debugInfo = currentDebugInfo),
	                newChild
	              );
	            case REACT_LAZY_TYPE:
	              var _prevDebugInfo = pushDebugInfo(newChild._debugInfo);
	              newChild = callLazyInitInDEV(newChild);
	              returnFiber = createChild(returnFiber, newChild, lanes);
	              currentDebugInfo = _prevDebugInfo;
	              return returnFiber;
	          }
	          if (isArrayImpl(newChild) || getIteratorFn(newChild))
	            return (
	              (lanes = createFiberFromFragment(
	                newChild,
	                returnFiber.mode,
	                lanes,
	                null
	              )),
	              (lanes.return = returnFiber),
	              (lanes._debugOwner = returnFiber),
	              (returnFiber = pushDebugInfo(newChild._debugInfo)),
	              (lanes._debugInfo = currentDebugInfo),
	              (currentDebugInfo = returnFiber),
	              lanes
	            );
	          if ("function" === typeof newChild.then)
	            return (
	              (_prevDebugInfo = pushDebugInfo(newChild._debugInfo)),
	              (returnFiber = createChild(
	                returnFiber,
	                unwrapThenable(newChild),
	                lanes
	              )),
	              (currentDebugInfo = _prevDebugInfo),
	              returnFiber
	            );
	          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
	            return createChild(
	              returnFiber,
	              readContextDuringReconciliation(returnFiber, newChild),
	              lanes
	            );
	          throwOnInvalidObjectType(returnFiber, newChild);
	        }
	        "function" === typeof newChild &&
	          warnOnFunctionType(returnFiber, newChild);
	        "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
	        return null;
	      }
	      function updateSlot(returnFiber, oldFiber, newChild, lanes) {
	        var key = null !== oldFiber ? oldFiber.key : null;
	        if (
	          ("string" === typeof newChild && "" !== newChild) ||
	          "number" === typeof newChild ||
	          "bigint" === typeof newChild
	        )
	          return null !== key
	            ? null
	            : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
	        if ("object" === typeof newChild && null !== newChild) {
	          switch (newChild.$$typeof) {
	            case REACT_ELEMENT_TYPE:
	              return newChild.key === key
	                ? ((key = pushDebugInfo(newChild._debugInfo)),
	                  (returnFiber = updateElement(
	                    returnFiber,
	                    oldFiber,
	                    newChild,
	                    lanes
	                  )),
	                  (currentDebugInfo = key),
	                  returnFiber)
	                : null;
	            case REACT_PORTAL_TYPE:
	              return newChild.key === key
	                ? updatePortal(returnFiber, oldFiber, newChild, lanes)
	                : null;
	            case REACT_LAZY_TYPE:
	              return (
	                (key = pushDebugInfo(newChild._debugInfo)),
	                (newChild = callLazyInitInDEV(newChild)),
	                (returnFiber = updateSlot(
	                  returnFiber,
	                  oldFiber,
	                  newChild,
	                  lanes
	                )),
	                (currentDebugInfo = key),
	                returnFiber
	              );
	          }
	          if (isArrayImpl(newChild) || getIteratorFn(newChild)) {
	            if (null !== key) return null;
	            key = pushDebugInfo(newChild._debugInfo);
	            returnFiber = updateFragment(
	              returnFiber,
	              oldFiber,
	              newChild,
	              lanes,
	              null
	            );
	            currentDebugInfo = key;
	            return returnFiber;
	          }
	          if ("function" === typeof newChild.then)
	            return (
	              (key = pushDebugInfo(newChild._debugInfo)),
	              (returnFiber = updateSlot(
	                returnFiber,
	                oldFiber,
	                unwrapThenable(newChild),
	                lanes
	              )),
	              (currentDebugInfo = key),
	              returnFiber
	            );
	          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
	            return updateSlot(
	              returnFiber,
	              oldFiber,
	              readContextDuringReconciliation(returnFiber, newChild),
	              lanes
	            );
	          throwOnInvalidObjectType(returnFiber, newChild);
	        }
	        "function" === typeof newChild &&
	          warnOnFunctionType(returnFiber, newChild);
	        "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
	        return null;
	      }
	      function updateFromMap(
	        existingChildren,
	        returnFiber,
	        newIdx,
	        newChild,
	        lanes
	      ) {
	        if (
	          ("string" === typeof newChild && "" !== newChild) ||
	          "number" === typeof newChild ||
	          "bigint" === typeof newChild
	        )
	          return (
	            (existingChildren = existingChildren.get(newIdx) || null),
	            updateTextNode(returnFiber, existingChildren, "" + newChild, lanes)
	          );
	        if ("object" === typeof newChild && null !== newChild) {
	          switch (newChild.$$typeof) {
	            case REACT_ELEMENT_TYPE:
	              return (
	                (newIdx =
	                  existingChildren.get(
	                    null === newChild.key ? newIdx : newChild.key
	                  ) || null),
	                (existingChildren = pushDebugInfo(newChild._debugInfo)),
	                (returnFiber = updateElement(
	                  returnFiber,
	                  newIdx,
	                  newChild,
	                  lanes
	                )),
	                (currentDebugInfo = existingChildren),
	                returnFiber
	              );
	            case REACT_PORTAL_TYPE:
	              return (
	                (existingChildren =
	                  existingChildren.get(
	                    null === newChild.key ? newIdx : newChild.key
	                  ) || null),
	                updatePortal(returnFiber, existingChildren, newChild, lanes)
	              );
	            case REACT_LAZY_TYPE:
	              var _prevDebugInfo7 = pushDebugInfo(newChild._debugInfo);
	              newChild = callLazyInitInDEV(newChild);
	              returnFiber = updateFromMap(
	                existingChildren,
	                returnFiber,
	                newIdx,
	                newChild,
	                lanes
	              );
	              currentDebugInfo = _prevDebugInfo7;
	              return returnFiber;
	          }
	          if (isArrayImpl(newChild) || getIteratorFn(newChild))
	            return (
	              (newIdx = existingChildren.get(newIdx) || null),
	              (existingChildren = pushDebugInfo(newChild._debugInfo)),
	              (returnFiber = updateFragment(
	                returnFiber,
	                newIdx,
	                newChild,
	                lanes,
	                null
	              )),
	              (currentDebugInfo = existingChildren),
	              returnFiber
	            );
	          if ("function" === typeof newChild.then)
	            return (
	              (_prevDebugInfo7 = pushDebugInfo(newChild._debugInfo)),
	              (returnFiber = updateFromMap(
	                existingChildren,
	                returnFiber,
	                newIdx,
	                unwrapThenable(newChild),
	                lanes
	              )),
	              (currentDebugInfo = _prevDebugInfo7),
	              returnFiber
	            );
	          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
	            return updateFromMap(
	              existingChildren,
	              returnFiber,
	              newIdx,
	              readContextDuringReconciliation(returnFiber, newChild),
	              lanes
	            );
	          throwOnInvalidObjectType(returnFiber, newChild);
	        }
	        "function" === typeof newChild &&
	          warnOnFunctionType(returnFiber, newChild);
	        "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
	        return null;
	      }
	      function warnOnInvalidKey(returnFiber, workInProgress, child, knownKeys) {
	        if ("object" !== typeof child || null === child) return knownKeys;
	        switch (child.$$typeof) {
	          case REACT_ELEMENT_TYPE:
	          case REACT_PORTAL_TYPE:
	            warnForMissingKey(returnFiber, workInProgress, child);
	            var key = child.key;
	            if ("string" !== typeof key) break;
	            if (null === knownKeys) {
	              knownKeys = new Set();
	              knownKeys.add(key);
	              break;
	            }
	            if (!knownKeys.has(key)) {
	              knownKeys.add(key);
	              break;
	            }
	            runWithFiberInDEV(workInProgress, function () {
	              console.error(
	                "Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.",
	                key
	              );
	            });
	            break;
	          case REACT_LAZY_TYPE:
	            (child = callLazyInitInDEV(child)),
	              warnOnInvalidKey(returnFiber, workInProgress, child, knownKeys);
	        }
	        return knownKeys;
	      }
	      function reconcileChildrenArray(
	        returnFiber,
	        currentFirstChild,
	        newChildren,
	        lanes
	      ) {
	        for (
	          var knownKeys = null,
	            resultingFirstChild = null,
	            previousNewFiber = null,
	            oldFiber = currentFirstChild,
	            newIdx = (currentFirstChild = 0),
	            nextOldFiber = null;
	          null !== oldFiber && newIdx < newChildren.length;
	          newIdx++
	        ) {
	          oldFiber.index > newIdx
	            ? ((nextOldFiber = oldFiber), (oldFiber = null))
	            : (nextOldFiber = oldFiber.sibling);
	          var newFiber = updateSlot(
	            returnFiber,
	            oldFiber,
	            newChildren[newIdx],
	            lanes
	          );
	          if (null === newFiber) {
	            null === oldFiber && (oldFiber = nextOldFiber);
	            break;
	          }
	          knownKeys = warnOnInvalidKey(
	            returnFiber,
	            newFiber,
	            newChildren[newIdx],
	            knownKeys
	          );
	          shouldTrackSideEffects &&
	            oldFiber &&
	            null === newFiber.alternate &&
	            deleteChild(returnFiber, oldFiber);
	          currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
	          null === previousNewFiber
	            ? (resultingFirstChild = newFiber)
	            : (previousNewFiber.sibling = newFiber);
	          previousNewFiber = newFiber;
	          oldFiber = nextOldFiber;
	        }
	        if (newIdx === newChildren.length)
	          return (
	            deleteRemainingChildren(returnFiber, oldFiber),
	            isHydrating && pushTreeFork(returnFiber, newIdx),
	            resultingFirstChild
	          );
	        if (null === oldFiber) {
	          for (; newIdx < newChildren.length; newIdx++)
	            (oldFiber = createChild(returnFiber, newChildren[newIdx], lanes)),
	              null !== oldFiber &&
	                ((knownKeys = warnOnInvalidKey(
	                  returnFiber,
	                  oldFiber,
	                  newChildren[newIdx],
	                  knownKeys
	                )),
	                (currentFirstChild = placeChild(
	                  oldFiber,
	                  currentFirstChild,
	                  newIdx
	                )),
	                null === previousNewFiber
	                  ? (resultingFirstChild = oldFiber)
	                  : (previousNewFiber.sibling = oldFiber),
	                (previousNewFiber = oldFiber));
	          isHydrating && pushTreeFork(returnFiber, newIdx);
	          return resultingFirstChild;
	        }
	        for (
	          oldFiber = mapRemainingChildren(oldFiber);
	          newIdx < newChildren.length;
	          newIdx++
	        )
	          (nextOldFiber = updateFromMap(
	            oldFiber,
	            returnFiber,
	            newIdx,
	            newChildren[newIdx],
	            lanes
	          )),
	            null !== nextOldFiber &&
	              ((knownKeys = warnOnInvalidKey(
	                returnFiber,
	                nextOldFiber,
	                newChildren[newIdx],
	                knownKeys
	              )),
	              shouldTrackSideEffects &&
	                null !== nextOldFiber.alternate &&
	                oldFiber.delete(
	                  null === nextOldFiber.key ? newIdx : nextOldFiber.key
	                ),
	              (currentFirstChild = placeChild(
	                nextOldFiber,
	                currentFirstChild,
	                newIdx
	              )),
	              null === previousNewFiber
	                ? (resultingFirstChild = nextOldFiber)
	                : (previousNewFiber.sibling = nextOldFiber),
	              (previousNewFiber = nextOldFiber));
	        shouldTrackSideEffects &&
	          oldFiber.forEach(function (child) {
	            return deleteChild(returnFiber, child);
	          });
	        isHydrating && pushTreeFork(returnFiber, newIdx);
	        return resultingFirstChild;
	      }
	      function reconcileChildrenIterator(
	        returnFiber,
	        currentFirstChild,
	        newChildren,
	        lanes
	      ) {
	        if (null == newChildren)
	          throw Error("An iterable object provided no iterator.");
	        for (
	          var resultingFirstChild = null,
	            previousNewFiber = null,
	            oldFiber = currentFirstChild,
	            newIdx = (currentFirstChild = 0),
	            nextOldFiber = null,
	            knownKeys = null,
	            step = newChildren.next();
	          null !== oldFiber && !step.done;
	          newIdx++, step = newChildren.next()
	        ) {
	          oldFiber.index > newIdx
	            ? ((nextOldFiber = oldFiber), (oldFiber = null))
	            : (nextOldFiber = oldFiber.sibling);
	          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
	          if (null === newFiber) {
	            null === oldFiber && (oldFiber = nextOldFiber);
	            break;
	          }
	          knownKeys = warnOnInvalidKey(
	            returnFiber,
	            newFiber,
	            step.value,
	            knownKeys
	          );
	          shouldTrackSideEffects &&
	            oldFiber &&
	            null === newFiber.alternate &&
	            deleteChild(returnFiber, oldFiber);
	          currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
	          null === previousNewFiber
	            ? (resultingFirstChild = newFiber)
	            : (previousNewFiber.sibling = newFiber);
	          previousNewFiber = newFiber;
	          oldFiber = nextOldFiber;
	        }
	        if (step.done)
	          return (
	            deleteRemainingChildren(returnFiber, oldFiber),
	            isHydrating && pushTreeFork(returnFiber, newIdx),
	            resultingFirstChild
	          );
	        if (null === oldFiber) {
	          for (; !step.done; newIdx++, step = newChildren.next())
	            (oldFiber = createChild(returnFiber, step.value, lanes)),
	              null !== oldFiber &&
	                ((knownKeys = warnOnInvalidKey(
	                  returnFiber,
	                  oldFiber,
	                  step.value,
	                  knownKeys
	                )),
	                (currentFirstChild = placeChild(
	                  oldFiber,
	                  currentFirstChild,
	                  newIdx
	                )),
	                null === previousNewFiber
	                  ? (resultingFirstChild = oldFiber)
	                  : (previousNewFiber.sibling = oldFiber),
	                (previousNewFiber = oldFiber));
	          isHydrating && pushTreeFork(returnFiber, newIdx);
	          return resultingFirstChild;
	        }
	        for (
	          oldFiber = mapRemainingChildren(oldFiber);
	          !step.done;
	          newIdx++, step = newChildren.next()
	        )
	          (nextOldFiber = updateFromMap(
	            oldFiber,
	            returnFiber,
	            newIdx,
	            step.value,
	            lanes
	          )),
	            null !== nextOldFiber &&
	              ((knownKeys = warnOnInvalidKey(
	                returnFiber,
	                nextOldFiber,
	                step.value,
	                knownKeys
	              )),
	              shouldTrackSideEffects &&
	                null !== nextOldFiber.alternate &&
	                oldFiber.delete(
	                  null === nextOldFiber.key ? newIdx : nextOldFiber.key
	                ),
	              (currentFirstChild = placeChild(
	                nextOldFiber,
	                currentFirstChild,
	                newIdx
	              )),
	              null === previousNewFiber
	                ? (resultingFirstChild = nextOldFiber)
	                : (previousNewFiber.sibling = nextOldFiber),
	              (previousNewFiber = nextOldFiber));
	        shouldTrackSideEffects &&
	          oldFiber.forEach(function (child) {
	            return deleteChild(returnFiber, child);
	          });
	        isHydrating && pushTreeFork(returnFiber, newIdx);
	        return resultingFirstChild;
	      }
	      function reconcileChildFibersImpl(
	        returnFiber,
	        currentFirstChild,
	        newChild,
	        lanes
	      ) {
	        "object" === typeof newChild &&
	          null !== newChild &&
	          newChild.type === REACT_FRAGMENT_TYPE &&
	          null === newChild.key &&
	          (validateFragmentProps(newChild, null, returnFiber),
	          (newChild = newChild.props.children));
	        if ("object" === typeof newChild && null !== newChild) {
	          switch (newChild.$$typeof) {
	            case REACT_ELEMENT_TYPE:
	              var prevDebugInfo = pushDebugInfo(newChild._debugInfo);
	              a: {
	                for (var key = newChild.key; null !== currentFirstChild; ) {
	                  if (currentFirstChild.key === key) {
	                    key = newChild.type;
	                    if (key === REACT_FRAGMENT_TYPE) {
	                      if (7 === currentFirstChild.tag) {
	                        deleteRemainingChildren(
	                          returnFiber,
	                          currentFirstChild.sibling
	                        );
	                        lanes = useFiber(
	                          currentFirstChild,
	                          newChild.props.children
	                        );
	                        lanes.return = returnFiber;
	                        lanes._debugOwner = newChild._owner;
	                        lanes._debugInfo = currentDebugInfo;
	                        validateFragmentProps(newChild, lanes, returnFiber);
	                        returnFiber = lanes;
	                        break a;
	                      }
	                    } else if (
	                      currentFirstChild.elementType === key ||
	                      isCompatibleFamilyForHotReloading(
	                        currentFirstChild,
	                        newChild
	                      ) ||
	                      ("object" === typeof key &&
	                        null !== key &&
	                        key.$$typeof === REACT_LAZY_TYPE &&
	                        callLazyInitInDEV(key) === currentFirstChild.type)
	                    ) {
	                      deleteRemainingChildren(
	                        returnFiber,
	                        currentFirstChild.sibling
	                      );
	                      lanes = useFiber(currentFirstChild, newChild.props);
	                      coerceRef(lanes, newChild);
	                      lanes.return = returnFiber;
	                      lanes._debugOwner = newChild._owner;
	                      lanes._debugInfo = currentDebugInfo;
	                      returnFiber = lanes;
	                      break a;
	                    }
	                    deleteRemainingChildren(returnFiber, currentFirstChild);
	                    break;
	                  } else deleteChild(returnFiber, currentFirstChild);
	                  currentFirstChild = currentFirstChild.sibling;
	                }
	                newChild.type === REACT_FRAGMENT_TYPE
	                  ? ((lanes = createFiberFromFragment(
	                      newChild.props.children,
	                      returnFiber.mode,
	                      lanes,
	                      newChild.key
	                    )),
	                    (lanes.return = returnFiber),
	                    (lanes._debugOwner = returnFiber),
	                    (lanes._debugInfo = currentDebugInfo),
	                    validateFragmentProps(newChild, lanes, returnFiber),
	                    (returnFiber = lanes))
	                  : ((lanes = createFiberFromElement(
	                      newChild,
	                      returnFiber.mode,
	                      lanes
	                    )),
	                    coerceRef(lanes, newChild),
	                    (lanes.return = returnFiber),
	                    (lanes._debugInfo = currentDebugInfo),
	                    (returnFiber = lanes));
	              }
	              returnFiber = placeSingleChild(returnFiber);
	              currentDebugInfo = prevDebugInfo;
	              return returnFiber;
	            case REACT_PORTAL_TYPE:
	              a: {
	                prevDebugInfo = newChild;
	                for (
	                  newChild = prevDebugInfo.key;
	                  null !== currentFirstChild;

	                ) {
	                  if (currentFirstChild.key === newChild)
	                    if (
	                      4 === currentFirstChild.tag &&
	                      currentFirstChild.stateNode.containerInfo ===
	                        prevDebugInfo.containerInfo &&
	                      currentFirstChild.stateNode.implementation ===
	                        prevDebugInfo.implementation
	                    ) {
	                      deleteRemainingChildren(
	                        returnFiber,
	                        currentFirstChild.sibling
	                      );
	                      lanes = useFiber(
	                        currentFirstChild,
	                        prevDebugInfo.children || []
	                      );
	                      lanes.return = returnFiber;
	                      returnFiber = lanes;
	                      break a;
	                    } else {
	                      deleteRemainingChildren(returnFiber, currentFirstChild);
	                      break;
	                    }
	                  else deleteChild(returnFiber, currentFirstChild);
	                  currentFirstChild = currentFirstChild.sibling;
	                }
	                lanes = createFiberFromPortal(
	                  prevDebugInfo,
	                  returnFiber.mode,
	                  lanes
	                );
	                lanes.return = returnFiber;
	                returnFiber = lanes;
	              }
	              return placeSingleChild(returnFiber);
	            case REACT_LAZY_TYPE:
	              return (
	                (prevDebugInfo = pushDebugInfo(newChild._debugInfo)),
	                (newChild = callLazyInitInDEV(newChild)),
	                (returnFiber = reconcileChildFibersImpl(
	                  returnFiber,
	                  currentFirstChild,
	                  newChild,
	                  lanes
	                )),
	                (currentDebugInfo = prevDebugInfo),
	                returnFiber
	              );
	          }
	          if (isArrayImpl(newChild))
	            return (
	              (prevDebugInfo = pushDebugInfo(newChild._debugInfo)),
	              (returnFiber = reconcileChildrenArray(
	                returnFiber,
	                currentFirstChild,
	                newChild,
	                lanes
	              )),
	              (currentDebugInfo = prevDebugInfo),
	              returnFiber
	            );
	          if (getIteratorFn(newChild)) {
	            prevDebugInfo = pushDebugInfo(newChild._debugInfo);
	            key = getIteratorFn(newChild);
	            if ("function" !== typeof key)
	              throw Error(
	                "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."
	              );
	            var newChildren = key.call(newChild);
	            if (newChildren === newChild) {
	              if (
	                0 !== returnFiber.tag ||
	                "[object GeneratorFunction]" !==
	                  Object.prototype.toString.call(returnFiber.type) ||
	                "[object Generator]" !==
	                  Object.prototype.toString.call(newChildren)
	              )
	                didWarnAboutGenerators ||
	                  console.error(
	                    "Using Iterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. You can also use an Iterable that can iterate multiple times over the same items."
	                  ),
	                  (didWarnAboutGenerators = true);
	            } else
	              newChild.entries !== key ||
	                didWarnAboutMaps ||
	                (console.error(
	                  "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
	                ),
	                (didWarnAboutMaps = true));
	            returnFiber = reconcileChildrenIterator(
	              returnFiber,
	              currentFirstChild,
	              newChildren,
	              lanes
	            );
	            currentDebugInfo = prevDebugInfo;
	            return returnFiber;
	          }
	          if ("function" === typeof newChild.then)
	            return (
	              (prevDebugInfo = pushDebugInfo(newChild._debugInfo)),
	              (returnFiber = reconcileChildFibersImpl(
	                returnFiber,
	                currentFirstChild,
	                unwrapThenable(newChild),
	                lanes
	              )),
	              (currentDebugInfo = prevDebugInfo),
	              returnFiber
	            );
	          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
	            return reconcileChildFibersImpl(
	              returnFiber,
	              currentFirstChild,
	              readContextDuringReconciliation(returnFiber, newChild),
	              lanes
	            );
	          throwOnInvalidObjectType(returnFiber, newChild);
	        }
	        if (
	          ("string" === typeof newChild && "" !== newChild) ||
	          "number" === typeof newChild ||
	          "bigint" === typeof newChild
	        )
	          return (
	            (prevDebugInfo = "" + newChild),
	            null !== currentFirstChild && 6 === currentFirstChild.tag
	              ? (deleteRemainingChildren(
	                  returnFiber,
	                  currentFirstChild.sibling
	                ),
	                (lanes = useFiber(currentFirstChild, prevDebugInfo)),
	                (lanes.return = returnFiber),
	                (returnFiber = lanes))
	              : (deleteRemainingChildren(returnFiber, currentFirstChild),
	                (lanes = createFiberFromText(
	                  prevDebugInfo,
	                  returnFiber.mode,
	                  lanes
	                )),
	                (lanes.return = returnFiber),
	                (lanes._debugOwner = returnFiber),
	                (lanes._debugInfo = currentDebugInfo),
	                (returnFiber = lanes)),
	            placeSingleChild(returnFiber)
	          );
	        "function" === typeof newChild &&
	          warnOnFunctionType(returnFiber, newChild);
	        "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
	        return deleteRemainingChildren(returnFiber, currentFirstChild);
	      }
	      return function (returnFiber, currentFirstChild, newChild, lanes) {
	        var prevDebugInfo = currentDebugInfo;
	        currentDebugInfo = null;
	        try {
	          thenableIndexCounter$1 = 0;
	          var firstChildFiber = reconcileChildFibersImpl(
	            returnFiber,
	            currentFirstChild,
	            newChild,
	            lanes
	          );
	          thenableState$1 = null;
	          return firstChildFiber;
	        } catch (x) {
	          if (x === SuspenseException) throw x;
	          var fiber = createFiber(29, x, null, returnFiber.mode);
	          fiber.lanes = lanes;
	          fiber.return = returnFiber;
	          var debugInfo = (fiber._debugInfo = currentDebugInfo);
	          fiber._debugOwner = returnFiber._debugOwner;
	          if (null != debugInfo)
	            for (var i = debugInfo.length - 1; 0 <= i; i--)
	              if ("string" === typeof debugInfo[i].stack) {
	                fiber._debugOwner = debugInfo[i];
	                break;
	              }
	          return fiber;
	        } finally {
	          currentDebugInfo = prevDebugInfo;
	        }
	      };
	    }
	    function pushHiddenContext(fiber, context) {
	      var prevEntangledRenderLanes = entangledRenderLanes;
	      push(prevEntangledRenderLanesCursor, prevEntangledRenderLanes, fiber);
	      push(currentTreeHiddenStackCursor, context, fiber);
	      entangledRenderLanes = prevEntangledRenderLanes | context.baseLanes;
	    }
	    function reuseHiddenContextOnStack(fiber) {
	      push(prevEntangledRenderLanesCursor, entangledRenderLanes, fiber);
	      push(
	        currentTreeHiddenStackCursor,
	        currentTreeHiddenStackCursor.current,
	        fiber
	      );
	    }
	    function popHiddenContext(fiber) {
	      entangledRenderLanes = prevEntangledRenderLanesCursor.current;
	      pop(currentTreeHiddenStackCursor, fiber);
	      pop(prevEntangledRenderLanesCursor, fiber);
	    }
	    function pushPrimaryTreeSuspenseHandler(handler) {
	      var current = handler.alternate;
	      push(
	        suspenseStackCursor,
	        suspenseStackCursor.current & SubtreeSuspenseContextMask,
	        handler
	      );
	      push(suspenseHandlerStackCursor, handler, handler);
	      null === shellBoundary &&
	        (null === current || null !== currentTreeHiddenStackCursor.current
	          ? (shellBoundary = handler)
	          : null !== current.memoizedState && (shellBoundary = handler));
	    }
	    function pushOffscreenSuspenseHandler(fiber) {
	      if (22 === fiber.tag) {
	        if (
	          (push(suspenseStackCursor, suspenseStackCursor.current, fiber),
	          push(suspenseHandlerStackCursor, fiber, fiber),
	          null === shellBoundary)
	        ) {
	          var current = fiber.alternate;
	          null !== current &&
	            null !== current.memoizedState &&
	            (shellBoundary = fiber);
	        }
	      } else reuseSuspenseHandlerOnStack(fiber);
	    }
	    function reuseSuspenseHandlerOnStack(fiber) {
	      push(suspenseStackCursor, suspenseStackCursor.current, fiber);
	      push(
	        suspenseHandlerStackCursor,
	        suspenseHandlerStackCursor.current,
	        fiber
	      );
	    }
	    function popSuspenseHandler(fiber) {
	      pop(suspenseHandlerStackCursor, fiber);
	      shellBoundary === fiber && (shellBoundary = null);
	      pop(suspenseStackCursor, fiber);
	    }
	    function findFirstSuspended(row) {
	      for (var node = row; null !== node; ) {
	        if (13 === node.tag) {
	          var state = node.memoizedState;
	          if (
	            null !== state &&
	            ((state = state.dehydrated),
	            null === state ||
	              state.data === SUSPENSE_PENDING_START_DATA ||
	              state.data === SUSPENSE_FALLBACK_START_DATA)
	          )
	            return node;
	        } else if (
	          19 === node.tag &&
	          undefined !== node.memoizedProps.revealOrder
	        ) {
	          if (0 !== (node.flags & 128)) return node;
	        } else if (null !== node.child) {
	          node.child.return = node;
	          node = node.child;
	          continue;
	        }
	        if (node === row) break;
	        for (; null === node.sibling; ) {
	          if (null === node.return || node.return === row) return null;
	          node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	      }
	      return null;
	    }
	    function createCache() {
	      return {
	        controller: new AbortControllerLocal(),
	        data: new Map(),
	        refCount: 0
	      };
	    }
	    function retainCache(cache) {
	      cache.controller.signal.aborted &&
	        console.warn(
	          "A cache instance was retained after it was already freed. This likely indicates a bug in React."
	        );
	      cache.refCount++;
	    }
	    function releaseCache(cache) {
	      cache.refCount--;
	      0 > cache.refCount &&
	        console.warn(
	          "A cache instance was released after it was already freed. This likely indicates a bug in React."
	        );
	      0 === cache.refCount &&
	        scheduleCallback$2(NormalPriority, function () {
	          cache.controller.abort();
	        });
	    }
	    function entangleAsyncAction(transition, thenable) {
	      if (null === currentEntangledListeners) {
	        var entangledListeners = (currentEntangledListeners = []);
	        currentEntangledPendingCount = 0;
	        currentEntangledLane = requestTransitionLane();
	        currentEntangledActionThenable = {
	          status: "pending",
	          value: undefined,
	          then: function (resolve) {
	            entangledListeners.push(resolve);
	          }
	        };
	      }
	      currentEntangledPendingCount++;
	      thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
	      return thenable;
	    }
	    function pingEngtangledActionScope() {
	      if (
	        0 === --currentEntangledPendingCount &&
	        null !== currentEntangledListeners
	      ) {
	        null !== currentEntangledActionThenable &&
	          (currentEntangledActionThenable.status = "fulfilled");
	        var listeners = currentEntangledListeners;
	        currentEntangledListeners = null;
	        currentEntangledLane = 0;
	        currentEntangledActionThenable = null;
	        for (var i = 0; i < listeners.length; i++) (0, listeners[i])();
	      }
	    }
	    function chainThenableValue(thenable, result) {
	      var listeners = [],
	        thenableWithOverride = {
	          status: "pending",
	          value: null,
	          reason: null,
	          then: function (resolve) {
	            listeners.push(resolve);
	          }
	        };
	      thenable.then(
	        function () {
	          thenableWithOverride.status = "fulfilled";
	          thenableWithOverride.value = result;
	          for (var i = 0; i < listeners.length; i++) (0, listeners[i])(result);
	        },
	        function (error) {
	          thenableWithOverride.status = "rejected";
	          thenableWithOverride.reason = error;
	          for (error = 0; error < listeners.length; error++)
	            (0, listeners[error])(undefined);
	        }
	      );
	      return thenableWithOverride;
	    }
	    function peekCacheFromPool() {
	      var cacheResumedFromPreviousRender = resumedCache.current;
	      return null !== cacheResumedFromPreviousRender
	        ? cacheResumedFromPreviousRender
	        : workInProgressRoot.pooledCache;
	    }
	    function pushTransition(offscreenWorkInProgress, prevCachePool) {
	      null === prevCachePool
	        ? push(resumedCache, resumedCache.current, offscreenWorkInProgress)
	        : push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);
	    }
	    function getSuspendedCache() {
	      var cacheFromPool = peekCacheFromPool();
	      return null === cacheFromPool
	        ? null
	        : { parent: CacheContext._currentValue, pool: cacheFromPool };
	    }
	    function mountHookTypesDev() {
	      var hookName = currentHookNameInDev;
	      null === hookTypesDev
	        ? (hookTypesDev = [hookName])
	        : hookTypesDev.push(hookName);
	    }
	    function updateHookTypesDev() {
	      var hookName = currentHookNameInDev;
	      if (
	        null !== hookTypesDev &&
	        (hookTypesUpdateIndexDev++,
	        hookTypesDev[hookTypesUpdateIndexDev] !== hookName)
	      ) {
	        var componentName = getComponentNameFromFiber(
	          currentlyRenderingFiber$1
	        );
	        if (
	          !didWarnAboutMismatchedHooksForComponent.has(componentName) &&
	          (didWarnAboutMismatchedHooksForComponent.add(componentName),
	          null !== hookTypesDev)
	        ) {
	          for (var table = "", i = 0; i <= hookTypesUpdateIndexDev; i++) {
	            var oldHookName = hookTypesDev[i],
	              newHookName =
	                i === hookTypesUpdateIndexDev ? hookName : oldHookName;
	            for (
	              oldHookName = i + 1 + ". " + oldHookName;
	              30 > oldHookName.length;

	            )
	              oldHookName += " ";
	            oldHookName += newHookName + "\n";
	            table += oldHookName;
	          }
	          console.error(
	            "React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://react.dev/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
	            componentName,
	            table
	          );
	        }
	      }
	    }
	    function checkDepsAreArrayDev(deps) {
	      undefined === deps ||
	        null === deps ||
	        isArrayImpl(deps) ||
	        console.error(
	          "%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.",
	          currentHookNameInDev,
	          typeof deps
	        );
	    }
	    function warnOnUseFormStateInDev() {
	      var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
	      didWarnAboutUseFormState.has(componentName) ||
	        (didWarnAboutUseFormState.add(componentName),
	        console.error(
	          "ReactDOM.useFormState has been renamed to React.useActionState. Please update %s to use React.useActionState.",
	          componentName
	        ));
	    }
	    function throwInvalidHookError() {
	      throw Error(
	        "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
	      );
	    }
	    function areHookInputsEqual(nextDeps, prevDeps) {
	      if (ignorePreviousDependencies) return false;
	      if (null === prevDeps)
	        return (
	          console.error(
	            "%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",
	            currentHookNameInDev
	          ),
	          false
	        );
	      nextDeps.length !== prevDeps.length &&
	        console.error(
	          "The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s",
	          currentHookNameInDev,
	          "[" + prevDeps.join(", ") + "]",
	          "[" + nextDeps.join(", ") + "]"
	        );
	      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
	        if (!objectIs(nextDeps[i], prevDeps[i])) return false;
	      return true;
	    }
	    function renderWithHooks(
	      current,
	      workInProgress,
	      Component,
	      props,
	      secondArg,
	      nextRenderLanes
	    ) {
	      renderLanes = nextRenderLanes;
	      currentlyRenderingFiber$1 = workInProgress;
	      hookTypesDev = null !== current ? current._debugHookTypes : null;
	      hookTypesUpdateIndexDev = -1;
	      ignorePreviousDependencies =
	        null !== current && current.type !== workInProgress.type;
	      if (
	        "[object AsyncFunction]" ===
	          Object.prototype.toString.call(Component) ||
	        "[object AsyncGeneratorFunction]" ===
	          Object.prototype.toString.call(Component)
	      )
	        (nextRenderLanes = getComponentNameFromFiber(
	          currentlyRenderingFiber$1
	        )),
	          didWarnAboutAsyncClientComponent.has(nextRenderLanes) ||
	            (didWarnAboutAsyncClientComponent.add(nextRenderLanes),
	            console.error(
	              "async/await is not yet supported in Client Components, only Server Components. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
	            ));
	      workInProgress.memoizedState = null;
	      workInProgress.updateQueue = null;
	      workInProgress.lanes = 0;
	      ReactSharedInternals.H =
	        null !== current && null !== current.memoizedState
	          ? HooksDispatcherOnUpdateInDEV
	          : null !== hookTypesDev
	            ? HooksDispatcherOnMountWithHookTypesInDEV
	            : HooksDispatcherOnMountInDEV;
	      shouldDoubleInvokeUserFnsInHooksDEV = nextRenderLanes =
	        (workInProgress.mode & StrictLegacyMode) !== NoMode;
	      var children = callComponentInDEV(Component, props, secondArg);
	      shouldDoubleInvokeUserFnsInHooksDEV = false;
	      didScheduleRenderPhaseUpdateDuringThisPass &&
	        (children = renderWithHooksAgain(
	          workInProgress,
	          Component,
	          props,
	          secondArg
	        ));
	      if (nextRenderLanes) {
	        setIsStrictModeForDevtools(true);
	        try {
	          children = renderWithHooksAgain(
	            workInProgress,
	            Component,
	            props,
	            secondArg
	          );
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }
	      finishRenderingHooks(current, workInProgress);
	      return children;
	    }
	    function finishRenderingHooks(current, workInProgress) {
	      workInProgress._debugHookTypes = hookTypesDev;
	      null === workInProgress.dependencies
	        ? null !== thenableState &&
	          (workInProgress.dependencies = {
	            lanes: 0,
	            firstContext: null,
	            _debugThenableState: thenableState
	          })
	        : (workInProgress.dependencies._debugThenableState = thenableState);
	      ReactSharedInternals.H = ContextOnlyDispatcher;
	      var didRenderTooFewHooks =
	        null !== currentHook && null !== currentHook.next;
	      renderLanes = 0;
	      hookTypesDev =
	        currentHookNameInDev =
	        workInProgressHook =
	        currentHook =
	        currentlyRenderingFiber$1 =
	          null;
	      hookTypesUpdateIndexDev = -1;
	      null !== current &&
	        (current.flags & 31457280) !== (workInProgress.flags & 31457280) &&
	        console.error(
	          "Internal React error: Expected static flag was missing. Please notify the React team."
	        );
	      didScheduleRenderPhaseUpdate = false;
	      thenableIndexCounter = 0;
	      thenableState = null;
	      if (didRenderTooFewHooks)
	        throw Error(
	          "Rendered fewer hooks than expected. This may be caused by an accidental early return statement."
	        );
	      null === current ||
	        didReceiveUpdate ||
	        ((current = current.dependencies),
	        null !== current &&
	          checkIfContextChanged(current) &&
	          (didReceiveUpdate = true));
	      needsToResetSuspendedThenableDEV
	        ? ((needsToResetSuspendedThenableDEV = false), (current = true))
	        : (current = false);
	      current &&
	        ((workInProgress =
	          getComponentNameFromFiber(workInProgress) || "Unknown"),
	        didWarnAboutUseWrappedInTryCatch.has(workInProgress) ||
	          didWarnAboutAsyncClientComponent.has(workInProgress) ||
	          (didWarnAboutUseWrappedInTryCatch.add(workInProgress),
	          console.error(
	            "`use` was called from inside a try/catch block. This is not allowed and can lead to unexpected behavior. To handle errors triggered by `use`, wrap your component in a error boundary."
	          )));
	    }
	    function renderWithHooksAgain(workInProgress, Component, props, secondArg) {
	      currentlyRenderingFiber$1 = workInProgress;
	      var numberOfReRenders = 0;
	      do {
	        didScheduleRenderPhaseUpdateDuringThisPass && (thenableState = null);
	        thenableIndexCounter = 0;
	        didScheduleRenderPhaseUpdateDuringThisPass = false;
	        if (numberOfReRenders >= RE_RENDER_LIMIT)
	          throw Error(
	            "Too many re-renders. React limits the number of renders to prevent an infinite loop."
	          );
	        numberOfReRenders += 1;
	        ignorePreviousDependencies = false;
	        workInProgressHook = currentHook = null;
	        if (null != workInProgress.updateQueue) {
	          var children = workInProgress.updateQueue;
	          children.lastEffect = null;
	          children.events = null;
	          children.stores = null;
	          null != children.memoCache && (children.memoCache.index = 0);
	        }
	        hookTypesUpdateIndexDev = -1;
	        ReactSharedInternals.H = HooksDispatcherOnRerenderInDEV;
	        children = callComponentInDEV(Component, props, secondArg);
	      } while (didScheduleRenderPhaseUpdateDuringThisPass);
	      return children;
	    }
	    function TransitionAwareHostComponent() {
	      var dispatcher = ReactSharedInternals.H,
	        maybeThenable = dispatcher.useState()[0];
	      maybeThenable =
	        "function" === typeof maybeThenable.then
	          ? useThenable(maybeThenable)
	          : maybeThenable;
	      dispatcher = dispatcher.useState()[0];
	      (null !== currentHook ? currentHook.memoizedState : null) !==
	        dispatcher && (currentlyRenderingFiber$1.flags |= 1024);
	      return maybeThenable;
	    }
	    function checkDidRenderIdHook() {
	      var didRenderIdHook = 0 !== localIdCounter;
	      localIdCounter = 0;
	      return didRenderIdHook;
	    }
	    function bailoutHooks(current, workInProgress, lanes) {
	      workInProgress.updateQueue = current.updateQueue;
	      workInProgress.flags =
	        (workInProgress.mode & StrictEffectsMode) !== NoMode
	          ? workInProgress.flags & -201328645
	          : workInProgress.flags & -2053;
	      current.lanes &= ~lanes;
	    }
	    function resetHooksOnUnwind(workInProgress) {
	      if (didScheduleRenderPhaseUpdate) {
	        for (
	          workInProgress = workInProgress.memoizedState;
	          null !== workInProgress;

	        ) {
	          var queue = workInProgress.queue;
	          null !== queue && (queue.pending = null);
	          workInProgress = workInProgress.next;
	        }
	        didScheduleRenderPhaseUpdate = false;
	      }
	      renderLanes = 0;
	      hookTypesDev =
	        workInProgressHook =
	        currentHook =
	        currentlyRenderingFiber$1 =
	          null;
	      hookTypesUpdateIndexDev = -1;
	      currentHookNameInDev = null;
	      didScheduleRenderPhaseUpdateDuringThisPass = false;
	      thenableIndexCounter = localIdCounter = 0;
	      thenableState = null;
	    }
	    function mountWorkInProgressHook() {
	      var hook = {
	        memoizedState: null,
	        baseState: null,
	        baseQueue: null,
	        queue: null,
	        next: null
	      };
	      null === workInProgressHook
	        ? (currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook)
	        : (workInProgressHook = workInProgressHook.next = hook);
	      return workInProgressHook;
	    }
	    function updateWorkInProgressHook() {
	      if (null === currentHook) {
	        var nextCurrentHook = currentlyRenderingFiber$1.alternate;
	        nextCurrentHook =
	          null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
	      } else nextCurrentHook = currentHook.next;
	      var nextWorkInProgressHook =
	        null === workInProgressHook
	          ? currentlyRenderingFiber$1.memoizedState
	          : workInProgressHook.next;
	      if (null !== nextWorkInProgressHook)
	        (workInProgressHook = nextWorkInProgressHook),
	          (currentHook = nextCurrentHook);
	      else {
	        if (null === nextCurrentHook) {
	          if (null === currentlyRenderingFiber$1.alternate)
	            throw Error(
	              "Update hook called on initial render. This is likely a bug in React. Please file an issue."
	            );
	          throw Error("Rendered more hooks than during the previous render.");
	        }
	        currentHook = nextCurrentHook;
	        nextCurrentHook = {
	          memoizedState: currentHook.memoizedState,
	          baseState: currentHook.baseState,
	          baseQueue: currentHook.baseQueue,
	          queue: currentHook.queue,
	          next: null
	        };
	        null === workInProgressHook
	          ? (currentlyRenderingFiber$1.memoizedState = workInProgressHook =
	              nextCurrentHook)
	          : (workInProgressHook = workInProgressHook.next = nextCurrentHook);
	      }
	      return workInProgressHook;
	    }
	    function useThenable(thenable) {
	      var index = thenableIndexCounter;
	      thenableIndexCounter += 1;
	      null === thenableState && (thenableState = createThenableState());
	      thenable = trackUsedThenable(thenableState, thenable, index);
	      index = currentlyRenderingFiber$1;
	      null ===
	        (null === workInProgressHook
	          ? index.memoizedState
	          : workInProgressHook.next) &&
	        ((index = index.alternate),
	        (ReactSharedInternals.H =
	          null !== index && null !== index.memoizedState
	            ? HooksDispatcherOnUpdateInDEV
	            : HooksDispatcherOnMountInDEV));
	      return thenable;
	    }
	    function use(usable) {
	      if (null !== usable && "object" === typeof usable) {
	        if ("function" === typeof usable.then) return useThenable(usable);
	        if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
	      }
	      throw Error("An unsupported type was passed to use(): " + String(usable));
	    }
	    function useMemoCache(size) {
	      var memoCache = null,
	        updateQueue = currentlyRenderingFiber$1.updateQueue;
	      null !== updateQueue && (memoCache = updateQueue.memoCache);
	      if (null == memoCache) {
	        var current = currentlyRenderingFiber$1.alternate;
	        null !== current &&
	          ((current = current.updateQueue),
	          null !== current &&
	            ((current = current.memoCache),
	            null != current &&
	              (memoCache = {
	                data: current.data.map(function (array) {
	                  return array.slice();
	                }),
	                index: 0
	              })));
	      }
	      null == memoCache && (memoCache = { data: [], index: 0 });
	      null === updateQueue &&
	        ((updateQueue = createFunctionComponentUpdateQueue()),
	        (currentlyRenderingFiber$1.updateQueue = updateQueue));
	      updateQueue.memoCache = memoCache;
	      updateQueue = memoCache.data[memoCache.index];
	      if (undefined === updateQueue || ignorePreviousDependencies)
	        for (
	          updateQueue = memoCache.data[memoCache.index] = Array(size),
	            current = 0;
	          current < size;
	          current++
	        )
	          updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;
	      else
	        updateQueue.length !== size &&
	          console.error(
	            "Expected a constant size argument for each invocation of useMemoCache. The previous cache was allocated with size %s but size %s was requested.",
	            updateQueue.length,
	            size
	          );
	      memoCache.index++;
	      return updateQueue;
	    }
	    function basicStateReducer(state, action) {
	      return "function" === typeof action ? action(state) : action;
	    }
	    function mountReducer(reducer, initialArg, init) {
	      var hook = mountWorkInProgressHook();
	      if (undefined !== init) {
	        var initialState = init(initialArg);
	        if (shouldDoubleInvokeUserFnsInHooksDEV) {
	          setIsStrictModeForDevtools(true);
	          try {
	            init(initialArg);
	          } finally {
	            setIsStrictModeForDevtools(false);
	          }
	        }
	      } else initialState = initialArg;
	      hook.memoizedState = hook.baseState = initialState;
	      reducer = {
	        pending: null,
	        lanes: 0,
	        dispatch: null,
	        lastRenderedReducer: reducer,
	        lastRenderedState: initialState
	      };
	      hook.queue = reducer;
	      reducer = reducer.dispatch = dispatchReducerAction.bind(
	        null,
	        currentlyRenderingFiber$1,
	        reducer
	      );
	      return [hook.memoizedState, reducer];
	    }
	    function updateReducer(reducer) {
	      var hook = updateWorkInProgressHook();
	      return updateReducerImpl(hook, currentHook, reducer);
	    }
	    function updateReducerImpl(hook, current, reducer) {
	      var queue = hook.queue;
	      if (null === queue)
	        throw Error(
	          "Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)"
	        );
	      queue.lastRenderedReducer = reducer;
	      var baseQueue = hook.baseQueue,
	        pendingQueue = queue.pending;
	      if (null !== pendingQueue) {
	        if (null !== baseQueue) {
	          var baseFirst = baseQueue.next;
	          baseQueue.next = pendingQueue.next;
	          pendingQueue.next = baseFirst;
	        }
	        current.baseQueue !== baseQueue &&
	          console.error(
	            "Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."
	          );
	        current.baseQueue = baseQueue = pendingQueue;
	        queue.pending = null;
	      }
	      pendingQueue = hook.baseState;
	      if (null === baseQueue) hook.memoizedState = pendingQueue;
	      else {
	        current = baseQueue.next;
	        var newBaseQueueFirst = (baseFirst = null),
	          newBaseQueueLast = null,
	          update = current,
	          didReadFromEntangledAsyncAction = false;
	        do {
	          var updateLane = update.lane & -536870913;
	          if (
	            updateLane !== update.lane
	              ? (workInProgressRootRenderLanes & updateLane) === updateLane
	              : (renderLanes & updateLane) === updateLane
	          ) {
	            var revertLane = update.revertLane;
	            if (0 === revertLane)
	              null !== newBaseQueueLast &&
	                (newBaseQueueLast = newBaseQueueLast.next =
	                  {
	                    lane: 0,
	                    revertLane: 0,
	                    action: update.action,
	                    hasEagerState: update.hasEagerState,
	                    eagerState: update.eagerState,
	                    next: null
	                  }),
	                updateLane === currentEntangledLane &&
	                  (didReadFromEntangledAsyncAction = true);
	            else if ((renderLanes & revertLane) === revertLane) {
	              update = update.next;
	              revertLane === currentEntangledLane &&
	                (didReadFromEntangledAsyncAction = true);
	              continue;
	            } else
	              (updateLane = {
	                lane: 0,
	                revertLane: update.revertLane,
	                action: update.action,
	                hasEagerState: update.hasEagerState,
	                eagerState: update.eagerState,
	                next: null
	              }),
	                null === newBaseQueueLast
	                  ? ((newBaseQueueFirst = newBaseQueueLast = updateLane),
	                    (baseFirst = pendingQueue))
	                  : (newBaseQueueLast = newBaseQueueLast.next = updateLane),
	                (currentlyRenderingFiber$1.lanes |= revertLane),
	                (workInProgressRootSkippedLanes |= revertLane);
	            updateLane = update.action;
	            shouldDoubleInvokeUserFnsInHooksDEV &&
	              reducer(pendingQueue, updateLane);
	            pendingQueue = update.hasEagerState
	              ? update.eagerState
	              : reducer(pendingQueue, updateLane);
	          } else
	            (revertLane = {
	              lane: updateLane,
	              revertLane: update.revertLane,
	              action: update.action,
	              hasEagerState: update.hasEagerState,
	              eagerState: update.eagerState,
	              next: null
	            }),
	              null === newBaseQueueLast
	                ? ((newBaseQueueFirst = newBaseQueueLast = revertLane),
	                  (baseFirst = pendingQueue))
	                : (newBaseQueueLast = newBaseQueueLast.next = revertLane),
	              (currentlyRenderingFiber$1.lanes |= updateLane),
	              (workInProgressRootSkippedLanes |= updateLane);
	          update = update.next;
	        } while (null !== update && update !== current);
	        null === newBaseQueueLast
	          ? (baseFirst = pendingQueue)
	          : (newBaseQueueLast.next = newBaseQueueFirst);
	        if (
	          !objectIs(pendingQueue, hook.memoizedState) &&
	          ((didReceiveUpdate = true),
	          didReadFromEntangledAsyncAction &&
	            ((reducer = currentEntangledActionThenable), null !== reducer))
	        )
	          throw reducer;
	        hook.memoizedState = pendingQueue;
	        hook.baseState = baseFirst;
	        hook.baseQueue = newBaseQueueLast;
	        queue.lastRenderedState = pendingQueue;
	      }
	      null === baseQueue && (queue.lanes = 0);
	      return [hook.memoizedState, queue.dispatch];
	    }
	    function rerenderReducer(reducer) {
	      var hook = updateWorkInProgressHook(),
	        queue = hook.queue;
	      if (null === queue)
	        throw Error(
	          "Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)"
	        );
	      queue.lastRenderedReducer = reducer;
	      var dispatch = queue.dispatch,
	        lastRenderPhaseUpdate = queue.pending,
	        newState = hook.memoizedState;
	      if (null !== lastRenderPhaseUpdate) {
	        queue.pending = null;
	        var update = (lastRenderPhaseUpdate = lastRenderPhaseUpdate.next);
	        do
	          (newState = reducer(newState, update.action)), (update = update.next);
	        while (update !== lastRenderPhaseUpdate);
	        objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
	        hook.memoizedState = newState;
	        null === hook.baseQueue && (hook.baseState = newState);
	        queue.lastRenderedState = newState;
	      }
	      return [newState, dispatch];
	    }
	    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
	      var fiber = currentlyRenderingFiber$1,
	        hook = mountWorkInProgressHook();
	      if (isHydrating) {
	        if (undefined === getServerSnapshot)
	          throw Error(
	            "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
	          );
	        var nextSnapshot = getServerSnapshot();
	        didWarnUncachedGetSnapshot ||
	          nextSnapshot === getServerSnapshot() ||
	          (console.error(
	            "The result of getServerSnapshot should be cached to avoid an infinite loop"
	          ),
	          (didWarnUncachedGetSnapshot = true));
	      } else {
	        nextSnapshot = getSnapshot();
	        didWarnUncachedGetSnapshot ||
	          ((getServerSnapshot = getSnapshot()),
	          objectIs(nextSnapshot, getServerSnapshot) ||
	            (console.error(
	              "The result of getSnapshot should be cached to avoid an infinite loop"
	            ),
	            (didWarnUncachedGetSnapshot = true)));
	        if (null === workInProgressRoot)
	          throw Error(
	            "Expected a work-in-progress root. This is a bug in React. Please file an issue."
	          );
	        0 !== (workInProgressRootRenderLanes & 60) ||
	          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
	      }
	      hook.memoizedState = nextSnapshot;
	      getServerSnapshot = { value: nextSnapshot, getSnapshot: getSnapshot };
	      hook.queue = getServerSnapshot;
	      mountEffect(
	        subscribeToStore.bind(null, fiber, getServerSnapshot, subscribe),
	        [subscribe]
	      );
	      fiber.flags |= 2048;
	      pushEffect(
	        HasEffect | Passive,
	        updateStoreInstance.bind(
	          null,
	          fiber,
	          getServerSnapshot,
	          nextSnapshot,
	          getSnapshot
	        ),
	        { destroy: undefined },
	        null
	      );
	      return nextSnapshot;
	    }
	    function updateSyncExternalStore(
	      subscribe,
	      getSnapshot,
	      getServerSnapshot
	    ) {
	      var fiber = currentlyRenderingFiber$1,
	        hook = updateWorkInProgressHook(),
	        isHydrating$jscomp$0 = isHydrating;
	      if (isHydrating$jscomp$0) {
	        if (undefined === getServerSnapshot)
	          throw Error(
	            "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
	          );
	        getServerSnapshot = getServerSnapshot();
	      } else if (
	        ((getServerSnapshot = getSnapshot()), !didWarnUncachedGetSnapshot)
	      ) {
	        var cachedSnapshot = getSnapshot();
	        objectIs(getServerSnapshot, cachedSnapshot) ||
	          (console.error(
	            "The result of getSnapshot should be cached to avoid an infinite loop"
	          ),
	          (didWarnUncachedGetSnapshot = true));
	      }
	      if (
	        (cachedSnapshot = !objectIs(
	          (currentHook || hook).memoizedState,
	          getServerSnapshot
	        ))
	      )
	        (hook.memoizedState = getServerSnapshot), (didReceiveUpdate = true);
	      hook = hook.queue;
	      var create = subscribeToStore.bind(null, fiber, hook, subscribe);
	      updateEffectImpl(2048, Passive, create, [subscribe]);
	      if (
	        hook.getSnapshot !== getSnapshot ||
	        cachedSnapshot ||
	        (null !== workInProgressHook &&
	          workInProgressHook.memoizedState.tag & HasEffect)
	      ) {
	        fiber.flags |= 2048;
	        pushEffect(
	          HasEffect | Passive,
	          updateStoreInstance.bind(
	            null,
	            fiber,
	            hook,
	            getServerSnapshot,
	            getSnapshot
	          ),
	          { destroy: undefined },
	          null
	        );
	        if (null === workInProgressRoot)
	          throw Error(
	            "Expected a work-in-progress root. This is a bug in React. Please file an issue."
	          );
	        isHydrating$jscomp$0 ||
	          0 !== (renderLanes & 60) ||
	          pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
	      }
	      return getServerSnapshot;
	    }
	    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
	      fiber.flags |= 16384;
	      fiber = { getSnapshot: getSnapshot, value: renderedSnapshot };
	      getSnapshot = currentlyRenderingFiber$1.updateQueue;
	      null === getSnapshot
	        ? ((getSnapshot = createFunctionComponentUpdateQueue()),
	          (currentlyRenderingFiber$1.updateQueue = getSnapshot),
	          (getSnapshot.stores = [fiber]))
	        : ((renderedSnapshot = getSnapshot.stores),
	          null === renderedSnapshot
	            ? (getSnapshot.stores = [fiber])
	            : renderedSnapshot.push(fiber));
	    }
	    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
	      inst.value = nextSnapshot;
	      inst.getSnapshot = getSnapshot;
	      checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
	    }
	    function subscribeToStore(fiber, inst, subscribe) {
	      return subscribe(function () {
	        checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
	      });
	    }
	    function checkIfSnapshotChanged(inst) {
	      var latestGetSnapshot = inst.getSnapshot;
	      inst = inst.value;
	      try {
	        var nextValue = latestGetSnapshot();
	        return !objectIs(inst, nextValue);
	      } catch (error) {
	        return true;
	      }
	    }
	    function forceStoreRerender(fiber) {
	      var root = enqueueConcurrentRenderForLane(fiber, 2);
	      null !== root && scheduleUpdateOnFiber(root, fiber, 2);
	    }
	    function mountStateImpl(initialState) {
	      var hook = mountWorkInProgressHook();
	      if ("function" === typeof initialState) {
	        var initialStateInitializer = initialState;
	        initialState = initialStateInitializer();
	        if (shouldDoubleInvokeUserFnsInHooksDEV) {
	          setIsStrictModeForDevtools(true);
	          try {
	            initialStateInitializer();
	          } finally {
	            setIsStrictModeForDevtools(false);
	          }
	        }
	      }
	      hook.memoizedState = hook.baseState = initialState;
	      hook.queue = {
	        pending: null,
	        lanes: 0,
	        dispatch: null,
	        lastRenderedReducer: basicStateReducer,
	        lastRenderedState: initialState
	      };
	      return hook;
	    }
	    function mountState(initialState) {
	      initialState = mountStateImpl(initialState);
	      var queue = initialState.queue,
	        dispatch = dispatchSetState.bind(
	          null,
	          currentlyRenderingFiber$1,
	          queue
	        );
	      queue.dispatch = dispatch;
	      return [initialState.memoizedState, dispatch];
	    }
	    function mountOptimistic(passthrough) {
	      var hook = mountWorkInProgressHook();
	      hook.memoizedState = hook.baseState = passthrough;
	      var queue = {
	        pending: null,
	        lanes: 0,
	        dispatch: null,
	        lastRenderedReducer: null,
	        lastRenderedState: null
	      };
	      hook.queue = queue;
	      hook = dispatchOptimisticSetState.bind(
	        null,
	        currentlyRenderingFiber$1,
	        true,
	        queue
	      );
	      queue.dispatch = hook;
	      return [passthrough, hook];
	    }
	    function updateOptimistic(passthrough, reducer) {
	      var hook = updateWorkInProgressHook();
	      return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
	    }
	    function updateOptimisticImpl(hook, current, passthrough, reducer) {
	      hook.baseState = passthrough;
	      return updateReducerImpl(
	        hook,
	        currentHook,
	        "function" === typeof reducer ? reducer : basicStateReducer
	      );
	    }
	    function rerenderOptimistic(passthrough, reducer) {
	      var hook = updateWorkInProgressHook();
	      if (null !== currentHook)
	        return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
	      hook.baseState = passthrough;
	      return [passthrough, hook.queue.dispatch];
	    }
	    function dispatchActionState(
	      fiber,
	      actionQueue,
	      setPendingState,
	      setState,
	      payload
	    ) {
	      if (isRenderPhaseUpdate(fiber))
	        throw Error("Cannot update form state while rendering.");
	      fiber = actionQueue.action;
	      if (null !== fiber) {
	        var actionNode = {
	          payload: payload,
	          action: fiber,
	          next: null,
	          isTransition: true,
	          status: "pending",
	          value: null,
	          reason: null,
	          listeners: [],
	          then: function (listener) {
	            actionNode.listeners.push(listener);
	          }
	        };
	        null !== ReactSharedInternals.T
	          ? setPendingState(true)
	          : (actionNode.isTransition = false);
	        setState(actionNode);
	        setPendingState = actionQueue.pending;
	        null === setPendingState
	          ? ((actionNode.next = actionQueue.pending = actionNode),
	            runActionStateAction(actionQueue, actionNode))
	          : ((actionNode.next = setPendingState.next),
	            (actionQueue.pending = setPendingState.next = actionNode));
	      }
	    }
	    function runActionStateAction(actionQueue, node) {
	      var action = node.action,
	        payload = node.payload,
	        prevState = actionQueue.state;
	      if (node.isTransition) {
	        var prevTransition = ReactSharedInternals.T,
	          currentTransition = {};
	        ReactSharedInternals.T = currentTransition;
	        ReactSharedInternals.T._updatedFibers = new Set();
	        try {
	          var returnValue = action(prevState, payload),
	            onStartTransitionFinish = ReactSharedInternals.S;
	          null !== onStartTransitionFinish &&
	            onStartTransitionFinish(currentTransition, returnValue);
	          handleActionReturnValue(actionQueue, node, returnValue);
	        } catch (error) {
	          onActionError(actionQueue, node, error);
	        } finally {
	          (ReactSharedInternals.T = prevTransition),
	            null === prevTransition &&
	              currentTransition._updatedFibers &&
	              ((actionQueue = currentTransition._updatedFibers.size),
	              currentTransition._updatedFibers.clear(),
	              10 < actionQueue &&
	                console.warn(
	                  "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
	                ));
	        }
	      } else
	        try {
	          (currentTransition = action(prevState, payload)),
	            handleActionReturnValue(actionQueue, node, currentTransition);
	        } catch (error$3) {
	          onActionError(actionQueue, node, error$3);
	        }
	    }
	    function handleActionReturnValue(actionQueue, node, returnValue) {
	      null !== returnValue &&
	      "object" === typeof returnValue &&
	      "function" === typeof returnValue.then
	        ? (returnValue.then(
	            function (nextState) {
	              onActionSuccess(actionQueue, node, nextState);
	            },
	            function (error) {
	              return onActionError(actionQueue, node, error);
	            }
	          ),
	          node.isTransition ||
	            console.error(
	              "An async function was passed to useActionState, but it was dispatched outside of an action context. This is likely not what you intended. Either pass the dispatch function to an `action` prop, or dispatch manually inside `startTransition`"
	            ))
	        : onActionSuccess(actionQueue, node, returnValue);
	    }
	    function onActionSuccess(actionQueue, actionNode, nextState) {
	      actionNode.status = "fulfilled";
	      actionNode.value = nextState;
	      notifyActionListeners(actionNode);
	      actionQueue.state = nextState;
	      actionNode = actionQueue.pending;
	      null !== actionNode &&
	        ((nextState = actionNode.next),
	        nextState === actionNode
	          ? (actionQueue.pending = null)
	          : ((nextState = nextState.next),
	            (actionNode.next = nextState),
	            runActionStateAction(actionQueue, nextState)));
	    }
	    function onActionError(actionQueue, actionNode, error) {
	      var last = actionQueue.pending;
	      actionQueue.pending = null;
	      if (null !== last) {
	        last = last.next;
	        do
	          (actionNode.status = "rejected"),
	            (actionNode.reason = error),
	            notifyActionListeners(actionNode),
	            (actionNode = actionNode.next);
	        while (actionNode !== last);
	      }
	      actionQueue.action = null;
	    }
	    function notifyActionListeners(actionNode) {
	      actionNode = actionNode.listeners;
	      for (var i = 0; i < actionNode.length; i++) (0, actionNode[i])();
	    }
	    function actionStateReducer(oldState, newState) {
	      return newState;
	    }
	    function mountActionState(action, initialStateProp) {
	      if (isHydrating) {
	        var ssrFormState = workInProgressRoot.formState;
	        if (null !== ssrFormState) {
	          a: {
	            var isMatching = currentlyRenderingFiber$1;
	            if (isHydrating) {
	              if (nextHydratableInstance) {
	                b: {
	                  var markerInstance = nextHydratableInstance;
	                  for (
	                    var inRootOrSingleton = rootOrSingletonContext;
	                    8 !== markerInstance.nodeType;

	                  ) {
	                    if (!inRootOrSingleton) {
	                      markerInstance = null;
	                      break b;
	                    }
	                    markerInstance = getNextHydratable(
	                      markerInstance.nextSibling
	                    );
	                    if (null === markerInstance) {
	                      markerInstance = null;
	                      break b;
	                    }
	                  }
	                  inRootOrSingleton = markerInstance.data;
	                  markerInstance =
	                    inRootOrSingleton === FORM_STATE_IS_MATCHING ||
	                    inRootOrSingleton === FORM_STATE_IS_NOT_MATCHING
	                      ? markerInstance
	                      : null;
	                }
	                if (markerInstance) {
	                  nextHydratableInstance = getNextHydratable(
	                    markerInstance.nextSibling
	                  );
	                  isMatching = markerInstance.data === FORM_STATE_IS_MATCHING;
	                  break a;
	                }
	              }
	              throwOnHydrationMismatch(isMatching);
	            }
	            isMatching = false;
	          }
	          isMatching && (initialStateProp = ssrFormState[0]);
	        }
	      }
	      ssrFormState = mountWorkInProgressHook();
	      ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;
	      isMatching = {
	        pending: null,
	        lanes: 0,
	        dispatch: null,
	        lastRenderedReducer: actionStateReducer,
	        lastRenderedState: initialStateProp
	      };
	      ssrFormState.queue = isMatching;
	      ssrFormState = dispatchSetState.bind(
	        null,
	        currentlyRenderingFiber$1,
	        isMatching
	      );
	      isMatching.dispatch = ssrFormState;
	      isMatching = mountStateImpl(false);
	      inRootOrSingleton = dispatchOptimisticSetState.bind(
	        null,
	        currentlyRenderingFiber$1,
	        false,
	        isMatching.queue
	      );
	      isMatching = mountWorkInProgressHook();
	      markerInstance = {
	        state: initialStateProp,
	        dispatch: null,
	        action: action,
	        pending: null
	      };
	      isMatching.queue = markerInstance;
	      ssrFormState = dispatchActionState.bind(
	        null,
	        currentlyRenderingFiber$1,
	        markerInstance,
	        inRootOrSingleton,
	        ssrFormState
	      );
	      markerInstance.dispatch = ssrFormState;
	      isMatching.memoizedState = action;
	      return [initialStateProp, ssrFormState, false];
	    }
	    function updateActionState(action) {
	      var stateHook = updateWorkInProgressHook();
	      return updateActionStateImpl(stateHook, currentHook, action);
	    }
	    function updateActionStateImpl(stateHook, currentStateHook, action) {
	      currentStateHook = updateReducerImpl(
	        stateHook,
	        currentStateHook,
	        actionStateReducer
	      )[0];
	      stateHook = updateReducer(basicStateReducer)[0];
	      currentStateHook =
	        "object" === typeof currentStateHook &&
	        null !== currentStateHook &&
	        "function" === typeof currentStateHook.then
	          ? useThenable(currentStateHook)
	          : currentStateHook;
	      var actionQueueHook = updateWorkInProgressHook(),
	        actionQueue = actionQueueHook.queue,
	        dispatch = actionQueue.dispatch;
	      action !== actionQueueHook.memoizedState &&
	        ((currentlyRenderingFiber$1.flags |= 2048),
	        pushEffect(
	          HasEffect | Passive,
	          actionStateActionEffect.bind(null, actionQueue, action),
	          { destroy: undefined },
	          null
	        ));
	      return [currentStateHook, dispatch, stateHook];
	    }
	    function actionStateActionEffect(actionQueue, action) {
	      actionQueue.action = action;
	    }
	    function rerenderActionState(action) {
	      var stateHook = updateWorkInProgressHook(),
	        currentStateHook = currentHook;
	      if (null !== currentStateHook)
	        return updateActionStateImpl(stateHook, currentStateHook, action);
	      updateWorkInProgressHook();
	      stateHook = stateHook.memoizedState;
	      currentStateHook = updateWorkInProgressHook();
	      var dispatch = currentStateHook.queue.dispatch;
	      currentStateHook.memoizedState = action;
	      return [stateHook, dispatch, false];
	    }
	    function pushEffect(tag, create, inst, deps) {
	      tag = { tag: tag, create: create, inst: inst, deps: deps, next: null };
	      create = currentlyRenderingFiber$1.updateQueue;
	      null === create &&
	        ((create = createFunctionComponentUpdateQueue()),
	        (currentlyRenderingFiber$1.updateQueue = create));
	      inst = create.lastEffect;
	      null === inst
	        ? (create.lastEffect = tag.next = tag)
	        : ((deps = inst.next),
	          (inst.next = tag),
	          (tag.next = deps),
	          (create.lastEffect = tag));
	      return tag;
	    }
	    function mountRef(initialValue) {
	      var hook = mountWorkInProgressHook();
	      initialValue = { current: initialValue };
	      return (hook.memoizedState = initialValue);
	    }
	    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
	      var hook = mountWorkInProgressHook();
	      currentlyRenderingFiber$1.flags |= fiberFlags;
	      hook.memoizedState = pushEffect(
	        HasEffect | hookFlags,
	        create,
	        { destroy: undefined },
	        undefined === deps ? null : deps
	      );
	    }
	    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
	      var hook = updateWorkInProgressHook();
	      deps = undefined === deps ? null : deps;
	      var inst = hook.memoizedState.inst;
	      null !== currentHook &&
	      null !== deps &&
	      areHookInputsEqual(deps, currentHook.memoizedState.deps)
	        ? (hook.memoizedState = pushEffect(hookFlags, create, inst, deps))
	        : ((currentlyRenderingFiber$1.flags |= fiberFlags),
	          (hook.memoizedState = pushEffect(
	            HasEffect | hookFlags,
	            create,
	            inst,
	            deps
	          )));
	    }
	    function mountEffect(create, deps) {
	      (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode &&
	      (currentlyRenderingFiber$1.mode & NoStrictPassiveEffectsMode) === NoMode
	        ? mountEffectImpl(142608384, Passive, create, deps)
	        : mountEffectImpl(8390656, Passive, create, deps);
	    }
	    function mountLayoutEffect(create, deps) {
	      var fiberFlags = 4194308;
	      (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode &&
	        (fiberFlags |= 67108864);
	      return mountEffectImpl(fiberFlags, Layout, create, deps);
	    }
	    function imperativeHandleEffect(create, ref) {
	      if ("function" === typeof ref) {
	        create = create();
	        var refCleanup = ref(create);
	        return function () {
	          "function" === typeof refCleanup ? refCleanup() : ref(null);
	        };
	      }
	      if (null !== ref && undefined !== ref)
	        return (
	          ref.hasOwnProperty("current") ||
	            console.error(
	              "Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.",
	              "an object with keys {" + Object.keys(ref).join(", ") + "}"
	            ),
	          (create = create()),
	          (ref.current = create),
	          function () {
	            ref.current = null;
	          }
	        );
	    }
	    function mountImperativeHandle(ref, create, deps) {
	      "function" !== typeof create &&
	        console.error(
	          "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
	          null !== create ? typeof create : "null"
	        );
	      deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
	      var fiberFlags = 4194308;
	      (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode &&
	        (fiberFlags |= 67108864);
	      mountEffectImpl(
	        fiberFlags,
	        Layout,
	        imperativeHandleEffect.bind(null, create, ref),
	        deps
	      );
	    }
	    function updateImperativeHandle(ref, create, deps) {
	      "function" !== typeof create &&
	        console.error(
	          "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
	          null !== create ? typeof create : "null"
	        );
	      deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
	      updateEffectImpl(
	        4,
	        Layout,
	        imperativeHandleEffect.bind(null, create, ref),
	        deps
	      );
	    }
	    function mountCallback(callback, deps) {
	      mountWorkInProgressHook().memoizedState = [
	        callback,
	        undefined === deps ? null : deps
	      ];
	      return callback;
	    }
	    function updateCallback(callback, deps) {
	      var hook = updateWorkInProgressHook();
	      deps = undefined === deps ? null : deps;
	      var prevState = hook.memoizedState;
	      if (null !== deps && areHookInputsEqual(deps, prevState[1]))
	        return prevState[0];
	      hook.memoizedState = [callback, deps];
	      return callback;
	    }
	    function mountMemo(nextCreate, deps) {
	      var hook = mountWorkInProgressHook();
	      deps = undefined === deps ? null : deps;
	      var nextValue = nextCreate();
	      if (shouldDoubleInvokeUserFnsInHooksDEV) {
	        setIsStrictModeForDevtools(true);
	        try {
	          nextCreate();
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }
	      hook.memoizedState = [nextValue, deps];
	      return nextValue;
	    }
	    function updateMemo(nextCreate, deps) {
	      var hook = updateWorkInProgressHook();
	      deps = undefined === deps ? null : deps;
	      var prevState = hook.memoizedState;
	      if (null !== deps && areHookInputsEqual(deps, prevState[1]))
	        return prevState[0];
	      prevState = nextCreate();
	      if (shouldDoubleInvokeUserFnsInHooksDEV) {
	        setIsStrictModeForDevtools(true);
	        try {
	          nextCreate();
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }
	      hook.memoizedState = [prevState, deps];
	      return prevState;
	    }
	    function mountDeferredValue(value, initialValue) {
	      var hook = mountWorkInProgressHook();
	      return mountDeferredValueImpl(hook, value, initialValue);
	    }
	    function updateDeferredValue(value, initialValue) {
	      var hook = updateWorkInProgressHook();
	      return updateDeferredValueImpl(
	        hook,
	        currentHook.memoizedState,
	        value,
	        initialValue
	      );
	    }
	    function rerenderDeferredValue(value, initialValue) {
	      var hook = updateWorkInProgressHook();
	      return null === currentHook
	        ? mountDeferredValueImpl(hook, value, initialValue)
	        : updateDeferredValueImpl(
	            hook,
	            currentHook.memoizedState,
	            value,
	            initialValue
	          );
	    }
	    function mountDeferredValueImpl(hook, value, initialValue) {
	      if (undefined === initialValue || 0 !== (renderLanes & 1073741824))
	        return (hook.memoizedState = value);
	      hook.memoizedState = initialValue;
	      hook = requestDeferredLane();
	      currentlyRenderingFiber$1.lanes |= hook;
	      workInProgressRootSkippedLanes |= hook;
	      return initialValue;
	    }
	    function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
	      if (objectIs(value, prevValue)) return value;
	      if (null !== currentTreeHiddenStackCursor.current)
	        return (
	          (hook = mountDeferredValueImpl(hook, value, initialValue)),
	          objectIs(hook, prevValue) || (didReceiveUpdate = true),
	          hook
	        );
	      if (0 === (renderLanes & 42))
	        return (didReceiveUpdate = true), (hook.memoizedState = value);
	      hook = requestDeferredLane();
	      currentlyRenderingFiber$1.lanes |= hook;
	      workInProgressRootSkippedLanes |= hook;
	      return prevValue;
	    }
	    function startTransition(
	      fiber,
	      queue,
	      pendingState,
	      finishedState,
	      callback
	    ) {
	      var previousPriority = ReactDOMSharedInternals.p;
	      ReactDOMSharedInternals.p =
	        0 !== previousPriority && previousPriority < ContinuousEventPriority
	          ? previousPriority
	          : ContinuousEventPriority;
	      var prevTransition = ReactSharedInternals.T,
	        currentTransition = {};
	      ReactSharedInternals.T = currentTransition;
	      dispatchOptimisticSetState(fiber, false, queue, pendingState);
	      currentTransition._updatedFibers = new Set();
	      try {
	        var returnValue = callback(),
	          onStartTransitionFinish = ReactSharedInternals.S;
	        null !== onStartTransitionFinish &&
	          onStartTransitionFinish(currentTransition, returnValue);
	        if (
	          null !== returnValue &&
	          "object" === typeof returnValue &&
	          "function" === typeof returnValue.then
	        ) {
	          var thenableForFinishedState = chainThenableValue(
	            returnValue,
	            finishedState
	          );
	          dispatchSetStateInternal(
	            fiber,
	            queue,
	            thenableForFinishedState,
	            requestUpdateLane(fiber)
	          );
	        } else
	          dispatchSetStateInternal(
	            fiber,
	            queue,
	            finishedState,
	            requestUpdateLane(fiber)
	          );
	      } catch (error) {
	        dispatchSetStateInternal(
	          fiber,
	          queue,
	          { then: function () {}, status: "rejected", reason: error },
	          requestUpdateLane(fiber)
	        );
	      } finally {
	        (ReactDOMSharedInternals.p = previousPriority),
	          (ReactSharedInternals.T = prevTransition),
	          null === prevTransition &&
	            currentTransition._updatedFibers &&
	            ((fiber = currentTransition._updatedFibers.size),
	            currentTransition._updatedFibers.clear(),
	            10 < fiber &&
	              console.warn(
	                "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
	              ));
	      }
	    }
	    function startHostTransition(formFiber, pendingState, action, formData) {
	      if (5 !== formFiber.tag)
	        throw Error(
	          "Expected the form instance to be a HostComponent. This is a bug in React."
	        );
	      var queue = ensureFormComponentIsStateful(formFiber).queue;
	      startTransition(
	        formFiber,
	        queue,
	        pendingState,
	        NotPendingTransition,
	        null === action
	          ? noop$2
	          : function () {
	              requestFormReset$1(formFiber);
	              return action(formData);
	            }
	      );
	    }
	    function ensureFormComponentIsStateful(formFiber) {
	      var existingStateHook = formFiber.memoizedState;
	      if (null !== existingStateHook) return existingStateHook;
	      existingStateHook = {
	        memoizedState: NotPendingTransition,
	        baseState: NotPendingTransition,
	        baseQueue: null,
	        queue: {
	          pending: null,
	          lanes: 0,
	          dispatch: null,
	          lastRenderedReducer: basicStateReducer,
	          lastRenderedState: NotPendingTransition
	        },
	        next: null
	      };
	      var initialResetState = {};
	      existingStateHook.next = {
	        memoizedState: initialResetState,
	        baseState: initialResetState,
	        baseQueue: null,
	        queue: {
	          pending: null,
	          lanes: 0,
	          dispatch: null,
	          lastRenderedReducer: basicStateReducer,
	          lastRenderedState: initialResetState
	        },
	        next: null
	      };
	      formFiber.memoizedState = existingStateHook;
	      formFiber = formFiber.alternate;
	      null !== formFiber && (formFiber.memoizedState = existingStateHook);
	      return existingStateHook;
	    }
	    function requestFormReset$1(formFiber) {
	      null === ReactSharedInternals.T &&
	        console.error(
	          "requestFormReset was called outside a transition or action. To fix, move to an action, or wrap with startTransition."
	        );
	      var resetStateQueue = ensureFormComponentIsStateful(formFiber).next.queue;
	      dispatchSetStateInternal(
	        formFiber,
	        resetStateQueue,
	        {},
	        requestUpdateLane(formFiber)
	      );
	    }
	    function mountTransition() {
	      var stateHook = mountStateImpl(false);
	      stateHook = startTransition.bind(
	        null,
	        currentlyRenderingFiber$1,
	        stateHook.queue,
	        true,
	        false
	      );
	      mountWorkInProgressHook().memoizedState = stateHook;
	      return [false, stateHook];
	    }
	    function updateTransition() {
	      var booleanOrThenable = updateReducer(basicStateReducer)[0],
	        start = updateWorkInProgressHook().memoizedState;
	      return [
	        "boolean" === typeof booleanOrThenable
	          ? booleanOrThenable
	          : useThenable(booleanOrThenable),
	        start
	      ];
	    }
	    function rerenderTransition() {
	      var booleanOrThenable = rerenderReducer(basicStateReducer)[0],
	        start = updateWorkInProgressHook().memoizedState;
	      return [
	        "boolean" === typeof booleanOrThenable
	          ? booleanOrThenable
	          : useThenable(booleanOrThenable),
	        start
	      ];
	    }
	    function useHostTransitionStatus() {
	      return readContext(HostTransitionContext);
	    }
	    function mountId() {
	      var hook = mountWorkInProgressHook(),
	        identifierPrefix = workInProgressRoot.identifierPrefix;
	      if (isHydrating) {
	        var treeId = treeContextOverflow;
	        var idWithLeadingBit = treeContextId;
	        treeId =
	          (
	            idWithLeadingBit & ~(1 << (32 - clz32(idWithLeadingBit) - 1))
	          ).toString(32) + treeId;
	        identifierPrefix = ":" + identifierPrefix + "R" + treeId;
	        treeId = localIdCounter++;
	        0 < treeId && (identifierPrefix += "H" + treeId.toString(32));
	        identifierPrefix += ":";
	      } else
	        (treeId = globalClientIdCounter++),
	          (identifierPrefix =
	            ":" + identifierPrefix + "r" + treeId.toString(32) + ":");
	      return (hook.memoizedState = identifierPrefix);
	    }
	    function mountRefresh() {
	      return (mountWorkInProgressHook().memoizedState = refreshCache.bind(
	        null,
	        currentlyRenderingFiber$1
	      ));
	    }
	    function refreshCache(fiber, seedKey) {
	      for (var provider = fiber.return; null !== provider; ) {
	        switch (provider.tag) {
	          case 24:
	          case 3:
	            var lane = requestUpdateLane(provider);
	            fiber = createUpdate(lane);
	            var root = enqueueUpdate(provider, fiber, lane);
	            null !== root &&
	              (scheduleUpdateOnFiber(root, provider, lane),
	              entangleTransitions(root, provider, lane));
	            provider = createCache();
	            null !== seedKey &&
	              undefined !== seedKey &&
	              null !== root &&
	              console.error(
	                "The seed argument is not enabled outside experimental channels."
	              );
	            fiber.payload = { cache: provider };
	            return;
	        }
	        provider = provider.return;
	      }
	    }
	    function dispatchReducerAction(
	      fiber,
	      queue,
	      action,
	      JSCompiler_OptimizeArgumentsArray_p0
	    ) {
	      "function" === typeof JSCompiler_OptimizeArgumentsArray_p0 &&
	        console.error(
	          "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
	        );
	      JSCompiler_OptimizeArgumentsArray_p0 = requestUpdateLane(fiber);
	      action = {
	        lane: JSCompiler_OptimizeArgumentsArray_p0,
	        revertLane: 0,
	        action: action,
	        hasEagerState: false,
	        eagerState: null,
	        next: null
	      };
	      isRenderPhaseUpdate(fiber)
	        ? enqueueRenderPhaseUpdate(queue, action)
	        : ((action = enqueueConcurrentHookUpdate(
	            fiber,
	            queue,
	            action,
	            JSCompiler_OptimizeArgumentsArray_p0
	          )),
	          null !== action &&
	            (scheduleUpdateOnFiber(
	              action,
	              fiber,
	              JSCompiler_OptimizeArgumentsArray_p0
	            ),
	            entangleTransitionUpdate(
	              action,
	              queue,
	              JSCompiler_OptimizeArgumentsArray_p0
	            )));
	      markStateUpdateScheduled(fiber, JSCompiler_OptimizeArgumentsArray_p0);
	    }
	    function dispatchSetState(
	      fiber,
	      queue,
	      action,
	      JSCompiler_OptimizeArgumentsArray_p1
	    ) {
	      "function" === typeof JSCompiler_OptimizeArgumentsArray_p1 &&
	        console.error(
	          "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
	        );
	      JSCompiler_OptimizeArgumentsArray_p1 = requestUpdateLane(fiber);
	      dispatchSetStateInternal(
	        fiber,
	        queue,
	        action,
	        JSCompiler_OptimizeArgumentsArray_p1
	      );
	      markStateUpdateScheduled(fiber, JSCompiler_OptimizeArgumentsArray_p1);
	    }
	    function dispatchSetStateInternal(fiber, queue, action, lane) {
	      var update = {
	        lane: lane,
	        revertLane: 0,
	        action: action,
	        hasEagerState: false,
	        eagerState: null,
	        next: null
	      };
	      if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
	      else {
	        var alternate = fiber.alternate;
	        if (
	          0 === fiber.lanes &&
	          (null === alternate || 0 === alternate.lanes) &&
	          ((alternate = queue.lastRenderedReducer), null !== alternate)
	        ) {
	          var prevDispatcher = ReactSharedInternals.H;
	          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
	          try {
	            var currentState = queue.lastRenderedState,
	              eagerState = alternate(currentState, action);
	            update.hasEagerState = !0;
	            update.eagerState = eagerState;
	            if (objectIs(eagerState, currentState))
	              return (
	                enqueueUpdate$1(fiber, queue, update, 0),
	                null === workInProgressRoot &&
	                  finishQueueingConcurrentUpdates(),
	                !1
	              );
	          } catch (error) {
	          } finally {
	            ReactSharedInternals.H = prevDispatcher;
	          }
	        }
	        action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
	        if (null !== action)
	          return (
	            scheduleUpdateOnFiber(action, fiber, lane),
	            entangleTransitionUpdate(action, queue, lane),
	            true
	          );
	      }
	      return false;
	    }
	    function dispatchOptimisticSetState(
	      fiber,
	      throwIfDuringRender,
	      queue,
	      action
	    ) {
	      null === ReactSharedInternals.T &&
	        0 === currentEntangledLane &&
	        console.error(
	          "An optimistic state update occurred outside a transition or action. To fix, move the update to an action, or wrap with startTransition."
	        );
	      action = {
	        lane: 2,
	        revertLane: requestTransitionLane(),
	        action: action,
	        hasEagerState: false,
	        eagerState: null,
	        next: null
	      };
	      if (isRenderPhaseUpdate(fiber)) {
	        if (throwIfDuringRender)
	          throw Error("Cannot update optimistic state while rendering.");
	        console.error("Cannot call startTransition while rendering.");
	      } else
	        (throwIfDuringRender = enqueueConcurrentHookUpdate(
	          fiber,
	          queue,
	          action,
	          2
	        )),
	          null !== throwIfDuringRender &&
	            scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
	      markStateUpdateScheduled(fiber, 2);
	    }
	    function isRenderPhaseUpdate(fiber) {
	      var alternate = fiber.alternate;
	      return (
	        fiber === currentlyRenderingFiber$1 ||
	        (null !== alternate && alternate === currentlyRenderingFiber$1)
	      );
	    }
	    function enqueueRenderPhaseUpdate(queue, update) {
	      didScheduleRenderPhaseUpdateDuringThisPass =
	        didScheduleRenderPhaseUpdate = true;
	      var pending = queue.pending;
	      null === pending
	        ? (update.next = update)
	        : ((update.next = pending.next), (pending.next = update));
	      queue.pending = update;
	    }
	    function entangleTransitionUpdate(root, queue, lane) {
	      if (0 !== (lane & 4194176)) {
	        var queueLanes = queue.lanes;
	        queueLanes &= root.pendingLanes;
	        lane |= queueLanes;
	        queue.lanes = lane;
	        markRootEntangled(root, lane);
	      }
	    }
	    function warnOnInvalidCallback(callback) {
	      if (null !== callback && "function" !== typeof callback) {
	        var key = String(callback);
	        didWarnOnInvalidCallback.has(key) ||
	          (didWarnOnInvalidCallback.add(key),
	          console.error(
	            "Expected the last optional `callback` argument to be a function. Instead received: %s.",
	            callback
	          ));
	      }
	    }
	    function applyDerivedStateFromProps(
	      workInProgress,
	      ctor,
	      getDerivedStateFromProps,
	      nextProps
	    ) {
	      var prevState = workInProgress.memoizedState,
	        partialState = getDerivedStateFromProps(nextProps, prevState);
	      if (workInProgress.mode & StrictLegacyMode) {
	        setIsStrictModeForDevtools(true);
	        try {
	          partialState = getDerivedStateFromProps(nextProps, prevState);
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }
	      undefined === partialState &&
	        ((ctor = getComponentNameFromType(ctor) || "Component"),
	        didWarnAboutUndefinedDerivedState.has(ctor) ||
	          (didWarnAboutUndefinedDerivedState.add(ctor),
	          console.error(
	            "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",
	            ctor
	          )));
	      prevState =
	        null === partialState || undefined === partialState
	          ? prevState
	          : assign({}, prevState, partialState);
	      workInProgress.memoizedState = prevState;
	      0 === workInProgress.lanes &&
	        (workInProgress.updateQueue.baseState = prevState);
	    }
	    function checkShouldComponentUpdate(
	      workInProgress,
	      ctor,
	      oldProps,
	      newProps,
	      oldState,
	      newState,
	      nextContext
	    ) {
	      var instance = workInProgress.stateNode;
	      if ("function" === typeof instance.shouldComponentUpdate) {
	        oldProps = instance.shouldComponentUpdate(
	          newProps,
	          newState,
	          nextContext
	        );
	        if (workInProgress.mode & StrictLegacyMode) {
	          setIsStrictModeForDevtools(true);
	          try {
	            oldProps = instance.shouldComponentUpdate(
	              newProps,
	              newState,
	              nextContext
	            );
	          } finally {
	            setIsStrictModeForDevtools(false);
	          }
	        }
	        undefined === oldProps &&
	          console.error(
	            "%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",
	            getComponentNameFromType(ctor) || "Component"
	          );
	        return oldProps;
	      }
	      return ctor.prototype && ctor.prototype.isPureReactComponent
	        ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)
	        : true;
	    }
	    function callComponentWillReceiveProps(
	      workInProgress,
	      instance,
	      newProps,
	      nextContext
	    ) {
	      var oldState = instance.state;
	      "function" === typeof instance.componentWillReceiveProps &&
	        instance.componentWillReceiveProps(newProps, nextContext);
	      "function" === typeof instance.UNSAFE_componentWillReceiveProps &&
	        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
	      instance.state !== oldState &&
	        ((workInProgress =
	          getComponentNameFromFiber(workInProgress) || "Component"),
	        didWarnAboutStateAssignmentForComponent.has(workInProgress) ||
	          (didWarnAboutStateAssignmentForComponent.add(workInProgress),
	          console.error(
	            "%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
	            workInProgress
	          )),
	        classComponentUpdater.enqueueReplaceState(
	          instance,
	          instance.state,
	          null
	        ));
	    }
	    function resolveClassComponentProps(Component, baseProps) {
	      var newProps = baseProps;
	      if ("ref" in baseProps) {
	        newProps = {};
	        for (var propName in baseProps)
	          "ref" !== propName && (newProps[propName] = baseProps[propName]);
	      }
	      if ((Component = Component.defaultProps)) {
	        newProps === baseProps && (newProps = assign({}, newProps));
	        for (var _propName in Component)
	          undefined === newProps[_propName] &&
	            (newProps[_propName] = Component[_propName]);
	      }
	      return newProps;
	    }
	    function defaultOnUncaughtError(error, errorInfo) {
	      reportGlobalError(error);
	      error = componentName
	        ? "An error occurred in the <" + componentName + "> component."
	        : "An error occurred in one of your React components.";
	      var prevGetCurrentStack = ReactSharedInternals.getCurrentStack,
	        componentStack =
	          null != errorInfo.componentStack ? errorInfo.componentStack : "";
	      ReactSharedInternals.getCurrentStack = function () {
	        return componentStack;
	      };
	      try {
	        console.warn(
	          "%s\n\n%s\n",
	          error,
	          "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://react.dev/link/error-boundaries to learn more about error boundaries."
	        );
	      } finally {
	        ReactSharedInternals.getCurrentStack = prevGetCurrentStack;
	      }
	    }
	    function defaultOnCaughtError(error, errorInfo) {
	      var componentNameMessage = componentName
	          ? "The above error occurred in the <" + componentName + "> component."
	          : "The above error occurred in one of your React components.",
	        recreateMessage =
	          "React will try to recreate this component tree from scratch using the error boundary you provided, " +
	          ((errorBoundaryName || "Anonymous") + "."),
	        prevGetCurrentStack = ReactSharedInternals.getCurrentStack,
	        componentStack =
	          null != errorInfo.componentStack ? errorInfo.componentStack : "";
	      ReactSharedInternals.getCurrentStack = function () {
	        return componentStack;
	      };
	      try {
	        "object" === typeof error &&
	        null !== error &&
	        "string" === typeof error.environmentName
	          ? bindToConsole(
	              "error",
	              [
	                "%o\n\n%s\n\n%s\n",
	                error,
	                componentNameMessage,
	                recreateMessage
	              ],
	              error.environmentName
	            )()
	          : console.error(
	              "%o\n\n%s\n\n%s\n",
	              error,
	              componentNameMessage,
	              recreateMessage
	            );
	      } finally {
	        ReactSharedInternals.getCurrentStack = prevGetCurrentStack;
	      }
	    }
	    function defaultOnRecoverableError(error) {
	      reportGlobalError(error);
	    }
	    function logUncaughtError(root, errorInfo) {
	      try {
	        componentName = errorInfo.source
	          ? getComponentNameFromFiber(errorInfo.source)
	          : null;
	        errorBoundaryName = null;
	        var error = errorInfo.value;
	        if (null !== ReactSharedInternals.actQueue)
	          ReactSharedInternals.thrownErrors.push(error);
	        else {
	          var onUncaughtError = root.onUncaughtError;
	          onUncaughtError(error, { componentStack: errorInfo.stack });
	        }
	      } catch (e$4) {
	        setTimeout(function () {
	          throw e$4;
	        });
	      }
	    }
	    function logCaughtError(root, boundary, errorInfo) {
	      try {
	        componentName = errorInfo.source
	          ? getComponentNameFromFiber(errorInfo.source)
	          : null;
	        errorBoundaryName = getComponentNameFromFiber(boundary);
	        var onCaughtError = root.onCaughtError;
	        onCaughtError(errorInfo.value, {
	          componentStack: errorInfo.stack,
	          errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
	        });
	      } catch (e$5) {
	        setTimeout(function () {
	          throw e$5;
	        });
	      }
	    }
	    function createRootErrorUpdate(root, errorInfo, lane) {
	      lane = createUpdate(lane);
	      lane.tag = CaptureUpdate;
	      lane.payload = { element: null };
	      lane.callback = function () {
	        runWithFiberInDEV(errorInfo.source, logUncaughtError, root, errorInfo);
	      };
	      return lane;
	    }
	    function createClassErrorUpdate(lane) {
	      lane = createUpdate(lane);
	      lane.tag = CaptureUpdate;
	      return lane;
	    }
	    function initializeClassErrorUpdate(update, root, fiber, errorInfo) {
	      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
	      if ("function" === typeof getDerivedStateFromError) {
	        var error = errorInfo.value;
	        update.payload = function () {
	          return getDerivedStateFromError(error);
	        };
	        update.callback = function () {
	          markFailedErrorBoundaryForHotReloading(fiber);
	          runWithFiberInDEV(
	            errorInfo.source,
	            logCaughtError,
	            root,
	            fiber,
	            errorInfo
	          );
	        };
	      }
	      var inst = fiber.stateNode;
	      null !== inst &&
	        "function" === typeof inst.componentDidCatch &&
	        (update.callback = function () {
	          markFailedErrorBoundaryForHotReloading(fiber);
	          runWithFiberInDEV(
	            errorInfo.source,
	            logCaughtError,
	            root,
	            fiber,
	            errorInfo
	          );
	          "function" !== typeof getDerivedStateFromError &&
	            (null === legacyErrorBoundariesThatAlreadyFailed
	              ? (legacyErrorBoundariesThatAlreadyFailed = new Set([this]))
	              : legacyErrorBoundariesThatAlreadyFailed.add(this));
	          callComponentDidCatchInDEV(this, errorInfo);
	          "function" === typeof getDerivedStateFromError ||
	            (0 === (fiber.lanes & 2) &&
	              console.error(
	                "%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.",
	                getComponentNameFromFiber(fiber) || "Unknown"
	              ));
	        });
	    }
	    function throwException(
	      root,
	      returnFiber,
	      sourceFiber,
	      value,
	      rootRenderLanes
	    ) {
	      sourceFiber.flags |= 32768;
	      isDevToolsPresent && restorePendingUpdaters(root, rootRenderLanes);
	      if (
	        null !== value &&
	        "object" === typeof value &&
	        "function" === typeof value.then
	      ) {
	        returnFiber = sourceFiber.alternate;
	        null !== returnFiber &&
	          propagateParentContextChanges(
	            returnFiber,
	            sourceFiber,
	            rootRenderLanes,
	            true
	          );
	        isHydrating && (didSuspendOrErrorDEV = true);
	        sourceFiber = suspenseHandlerStackCursor.current;
	        if (null !== sourceFiber) {
	          switch (sourceFiber.tag) {
	            case 13:
	              return (
	                null === shellBoundary
	                  ? renderDidSuspendDelayIfPossible()
	                  : null === sourceFiber.alternate &&
	                    workInProgressRootExitStatus === RootInProgress &&
	                    (workInProgressRootExitStatus = RootSuspended),
	                (sourceFiber.flags &= -257),
	                (sourceFiber.flags |= 65536),
	                (sourceFiber.lanes = rootRenderLanes),
	                value === noopSuspenseyCommitThenable
	                  ? (sourceFiber.flags |= 16384)
	                  : ((returnFiber = sourceFiber.updateQueue),
	                    null === returnFiber
	                      ? (sourceFiber.updateQueue = new Set([value]))
	                      : returnFiber.add(value),
	                    attachPingListener(root, value, rootRenderLanes)),
	                false
	              );
	            case 22:
	              return (
	                (sourceFiber.flags |= 65536),
	                value === noopSuspenseyCommitThenable
	                  ? (sourceFiber.flags |= 16384)
	                  : ((returnFiber = sourceFiber.updateQueue),
	                    null === returnFiber
	                      ? ((returnFiber = {
	                          transitions: null,
	                          markerInstances: null,
	                          retryQueue: new Set([value])
	                        }),
	                        (sourceFiber.updateQueue = returnFiber))
	                      : ((sourceFiber = returnFiber.retryQueue),
	                        null === sourceFiber
	                          ? (returnFiber.retryQueue = new Set([value]))
	                          : sourceFiber.add(value)),
	                    attachPingListener(root, value, rootRenderLanes)),
	                false
	              );
	          }
	          throw Error(
	            "Unexpected Suspense handler tag (" +
	              sourceFiber.tag +
	              "). This is a bug in React."
	          );
	        }
	        attachPingListener(root, value, rootRenderLanes);
	        renderDidSuspendDelayIfPossible();
	        return false;
	      }
	      if (isHydrating)
	        return (
	          (didSuspendOrErrorDEV = true),
	          (returnFiber = suspenseHandlerStackCursor.current),
	          null !== returnFiber
	            ? (0 === (returnFiber.flags & 65536) && (returnFiber.flags |= 256),
	              (returnFiber.flags |= 65536),
	              (returnFiber.lanes = rootRenderLanes),
	              value !== HydrationMismatchException &&
	                queueHydrationError(
	                  createCapturedValueAtFiber(
	                    Error(
	                      "There was an error while hydrating but React was able to recover by instead client rendering from the nearest Suspense boundary.",
	                      { cause: value }
	                    ),
	                    sourceFiber
	                  )
	                ))
	            : (value !== HydrationMismatchException &&
	                queueHydrationError(
	                  createCapturedValueAtFiber(
	                    Error(
	                      "There was an error while hydrating but React was able to recover by instead client rendering the entire root.",
	                      { cause: value }
	                    ),
	                    sourceFiber
	                  )
	                ),
	              (root = root.current.alternate),
	              (root.flags |= 65536),
	              (rootRenderLanes &= -rootRenderLanes),
	              (root.lanes |= rootRenderLanes),
	              (value = createCapturedValueAtFiber(value, sourceFiber)),
	              (rootRenderLanes = createRootErrorUpdate(
	                root.stateNode,
	                value,
	                rootRenderLanes
	              )),
	              enqueueCapturedUpdate(root, rootRenderLanes),
	              workInProgressRootExitStatus !== RootSuspendedWithDelay &&
	                (workInProgressRootExitStatus = RootErrored)),
	          false
	        );
	      var error = createCapturedValueAtFiber(
	        Error(
	          "There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.",
	          { cause: value }
	        ),
	        sourceFiber
	      );
	      null === workInProgressRootConcurrentErrors
	        ? (workInProgressRootConcurrentErrors = [error])
	        : workInProgressRootConcurrentErrors.push(error);
	      workInProgressRootExitStatus !== RootSuspendedWithDelay &&
	        (workInProgressRootExitStatus = RootErrored);
	      if (null === returnFiber) return true;
	      value = createCapturedValueAtFiber(value, sourceFiber);
	      sourceFiber = returnFiber;
	      do {
	        switch (sourceFiber.tag) {
	          case 3:
	            return (
	              (sourceFiber.flags |= 65536),
	              (root = rootRenderLanes & -rootRenderLanes),
	              (sourceFiber.lanes |= root),
	              (root = createRootErrorUpdate(
	                sourceFiber.stateNode,
	                value,
	                root
	              )),
	              enqueueCapturedUpdate(sourceFiber, root),
	              false
	            );
	          case 1:
	            if (
	              ((returnFiber = sourceFiber.type),
	              (error = sourceFiber.stateNode),
	              0 === (sourceFiber.flags & 128) &&
	                ("function" === typeof returnFiber.getDerivedStateFromError ||
	                  (null !== error &&
	                    "function" === typeof error.componentDidCatch &&
	                    (null === legacyErrorBoundariesThatAlreadyFailed ||
	                      !legacyErrorBoundariesThatAlreadyFailed.has(error)))))
	            )
	              return (
	                (sourceFiber.flags |= 65536),
	                (rootRenderLanes &= -rootRenderLanes),
	                (sourceFiber.lanes |= rootRenderLanes),
	                (rootRenderLanes = createClassErrorUpdate(rootRenderLanes)),
	                initializeClassErrorUpdate(
	                  rootRenderLanes,
	                  root,
	                  sourceFiber,
	                  value
	                ),
	                enqueueCapturedUpdate(sourceFiber, rootRenderLanes),
	                false
	              );
	        }
	        sourceFiber = sourceFiber.return;
	      } while (null !== sourceFiber);
	      return false;
	    }
	    function reconcileChildren(
	      current,
	      workInProgress,
	      nextChildren,
	      renderLanes
	    ) {
	      workInProgress.child =
	        null === current
	          ? mountChildFibers(workInProgress, null, nextChildren, renderLanes)
	          : reconcileChildFibers(
	              workInProgress,
	              current.child,
	              nextChildren,
	              renderLanes
	            );
	    }
	    function updateForwardRef(
	      current,
	      workInProgress,
	      Component,
	      nextProps,
	      renderLanes
	    ) {
	      Component = Component.render;
	      var ref = workInProgress.ref;
	      if ("ref" in nextProps) {
	        var propsWithoutRef = {};
	        for (var key in nextProps)
	          "ref" !== key && (propsWithoutRef[key] = nextProps[key]);
	      } else propsWithoutRef = nextProps;
	      prepareToReadContext(workInProgress);
	      markComponentRenderStarted(workInProgress);
	      nextProps = renderWithHooks(
	        current,
	        workInProgress,
	        Component,
	        propsWithoutRef,
	        ref,
	        renderLanes
	      );
	      key = checkDidRenderIdHook();
	      markComponentRenderStopped();
	      if (null !== current && !didReceiveUpdate)
	        return (
	          bailoutHooks(current, workInProgress, renderLanes),
	          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
	        );
	      isHydrating && key && pushMaterializedTreeId(workInProgress);
	      workInProgress.flags |= 1;
	      reconcileChildren(current, workInProgress, nextProps, renderLanes);
	      return workInProgress.child;
	    }
	    function updateMemoComponent(
	      current,
	      workInProgress,
	      Component,
	      nextProps,
	      renderLanes
	    ) {
	      if (null === current) {
	        var type = Component.type;
	        if (
	          "function" === typeof type &&
	          !shouldConstruct(type) &&
	          undefined === type.defaultProps &&
	          null === Component.compare
	        )
	          return (
	            (Component = resolveFunctionForHotReloading(type)),
	            (workInProgress.tag = 15),
	            (workInProgress.type = Component),
	            validateFunctionComponentInDev(workInProgress, type),
	            updateSimpleMemoComponent(
	              current,
	              workInProgress,
	              Component,
	              nextProps,
	              renderLanes
	            )
	          );
	        current = createFiberFromTypeAndProps(
	          Component.type,
	          null,
	          nextProps,
	          workInProgress,
	          workInProgress.mode,
	          renderLanes
	        );
	        current.ref = workInProgress.ref;
	        current.return = workInProgress;
	        return (workInProgress.child = current);
	      }
	      type = current.child;
	      if (!checkScheduledUpdateOrContext(current, renderLanes)) {
	        var prevProps = type.memoizedProps;
	        Component = Component.compare;
	        Component = null !== Component ? Component : shallowEqual;
	        if (
	          Component(prevProps, nextProps) &&
	          current.ref === workInProgress.ref
	        )
	          return bailoutOnAlreadyFinishedWork(
	            current,
	            workInProgress,
	            renderLanes
	          );
	      }
	      workInProgress.flags |= 1;
	      current = createWorkInProgress(type, nextProps);
	      current.ref = workInProgress.ref;
	      current.return = workInProgress;
	      return (workInProgress.child = current);
	    }
	    function updateSimpleMemoComponent(
	      current,
	      workInProgress,
	      Component,
	      nextProps,
	      renderLanes
	    ) {
	      if (null !== current) {
	        var prevProps = current.memoizedProps;
	        if (
	          shallowEqual(prevProps, nextProps) &&
	          current.ref === workInProgress.ref &&
	          workInProgress.type === current.type
	        )
	          if (
	            ((didReceiveUpdate = false),
	            (workInProgress.pendingProps = nextProps = prevProps),
	            checkScheduledUpdateOrContext(current, renderLanes))
	          )
	            0 !== (current.flags & 131072) && (didReceiveUpdate = true);
	          else
	            return (
	              (workInProgress.lanes = current.lanes),
	              bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
	            );
	      }
	      return updateFunctionComponent(
	        current,
	        workInProgress,
	        Component,
	        nextProps,
	        renderLanes
	      );
	    }
	    function updateOffscreenComponent(current, workInProgress, renderLanes) {
	      var nextProps = workInProgress.pendingProps,
	        nextChildren = nextProps.children,
	        nextIsDetached =
	          0 !==
	          (workInProgress.stateNode._pendingVisibility & OffscreenDetached),
	        prevState = null !== current ? current.memoizedState : null;
	      markRef(current, workInProgress);
	      if ("hidden" === nextProps.mode || nextIsDetached) {
	        if (0 !== (workInProgress.flags & 128)) {
	          nextProps =
	            null !== prevState
	              ? prevState.baseLanes | renderLanes
	              : renderLanes;
	          if (null !== current) {
	            nextChildren = workInProgress.child = current.child;
	            for (nextIsDetached = 0; null !== nextChildren; )
	              (nextIsDetached =
	                nextIsDetached | nextChildren.lanes | nextChildren.childLanes),
	                (nextChildren = nextChildren.sibling);
	            workInProgress.childLanes = nextIsDetached & ~nextProps;
	          } else (workInProgress.childLanes = 0), (workInProgress.child = null);
	          return deferHiddenOffscreenComponent(
	            current,
	            workInProgress,
	            nextProps,
	            renderLanes
	          );
	        }
	        if (0 !== (renderLanes & 536870912))
	          (workInProgress.memoizedState = { baseLanes: 0, cachePool: null }),
	            null !== current &&
	              pushTransition(
	                workInProgress,
	                null !== prevState ? prevState.cachePool : null
	              ),
	            null !== prevState
	              ? pushHiddenContext(workInProgress, prevState)
	              : reuseHiddenContextOnStack(workInProgress),
	            pushOffscreenSuspenseHandler(workInProgress);
	        else
	          return (
	            (workInProgress.lanes = workInProgress.childLanes = 536870912),
	            deferHiddenOffscreenComponent(
	              current,
	              workInProgress,
	              null !== prevState
	                ? prevState.baseLanes | renderLanes
	                : renderLanes,
	              renderLanes
	            )
	          );
	      } else
	        null !== prevState
	          ? (pushTransition(workInProgress, prevState.cachePool),
	            pushHiddenContext(workInProgress, prevState),
	            reuseSuspenseHandlerOnStack(workInProgress),
	            (workInProgress.memoizedState = null))
	          : (null !== current && pushTransition(workInProgress, null),
	            reuseHiddenContextOnStack(workInProgress),
	            reuseSuspenseHandlerOnStack(workInProgress));
	      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	      return workInProgress.child;
	    }
	    function deferHiddenOffscreenComponent(
	      current,
	      workInProgress,
	      nextBaseLanes,
	      renderLanes
	    ) {
	      var JSCompiler_inline_result = peekCacheFromPool();
	      JSCompiler_inline_result =
	        null === JSCompiler_inline_result
	          ? null
	          : {
	              parent: CacheContext._currentValue,
	              pool: JSCompiler_inline_result
	            };
	      workInProgress.memoizedState = {
	        baseLanes: nextBaseLanes,
	        cachePool: JSCompiler_inline_result
	      };
	      null !== current && pushTransition(workInProgress, null);
	      reuseHiddenContextOnStack(workInProgress);
	      pushOffscreenSuspenseHandler(workInProgress);
	      null !== current &&
	        propagateParentContextChanges(current, workInProgress, renderLanes, true);
	      return null;
	    }
	    function markRef(current, workInProgress) {
	      var ref = workInProgress.ref;
	      if (null === ref)
	        null !== current &&
	          null !== current.ref &&
	          (workInProgress.flags |= 2097664);
	      else {
	        if ("function" !== typeof ref && "object" !== typeof ref)
	          throw Error(
	            "Expected ref to be a function, an object returned by React.createRef(), or undefined/null."
	          );
	        if (null === current || current.ref !== ref)
	          workInProgress.flags |= 2097664;
	      }
	    }
	    function updateFunctionComponent(
	      current,
	      workInProgress,
	      Component,
	      nextProps,
	      renderLanes
	    ) {
	      if (
	        Component.prototype &&
	        "function" === typeof Component.prototype.render
	      ) {
	        var componentName = getComponentNameFromType(Component) || "Unknown";
	        didWarnAboutBadClass[componentName] ||
	          (console.error(
	            "The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",
	            componentName,
	            componentName
	          ),
	          (didWarnAboutBadClass[componentName] = true));
	      }
	      workInProgress.mode & StrictLegacyMode &&
	        ReactStrictModeWarnings.recordLegacyContextWarning(
	          workInProgress,
	          null
	        );
	      null === current &&
	        (validateFunctionComponentInDev(workInProgress, workInProgress.type),
	        Component.contextTypes &&
	          ((componentName = getComponentNameFromType(Component) || "Unknown"),
	          didWarnAboutContextTypes[componentName] ||
	            ((didWarnAboutContextTypes[componentName] = true),
	            console.error(
	              "%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with React.useContext() instead. (https://react.dev/link/legacy-context)",
	              componentName
	            ))));
	      prepareToReadContext(workInProgress);
	      markComponentRenderStarted(workInProgress);
	      Component = renderWithHooks(
	        current,
	        workInProgress,
	        Component,
	        nextProps,
	        undefined,
	        renderLanes
	      );
	      nextProps = checkDidRenderIdHook();
	      markComponentRenderStopped();
	      if (null !== current && !didReceiveUpdate)
	        return (
	          bailoutHooks(current, workInProgress, renderLanes),
	          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
	        );
	      isHydrating && nextProps && pushMaterializedTreeId(workInProgress);
	      workInProgress.flags |= 1;
	      reconcileChildren(current, workInProgress, Component, renderLanes);
	      return workInProgress.child;
	    }
	    function replayFunctionComponent(
	      current,
	      workInProgress,
	      nextProps,
	      Component,
	      secondArg,
	      renderLanes
	    ) {
	      prepareToReadContext(workInProgress);
	      markComponentRenderStarted(workInProgress);
	      hookTypesUpdateIndexDev = -1;
	      ignorePreviousDependencies =
	        null !== current && current.type !== workInProgress.type;
	      workInProgress.updateQueue = null;
	      nextProps = renderWithHooksAgain(
	        workInProgress,
	        Component,
	        nextProps,
	        secondArg
	      );
	      finishRenderingHooks(current, workInProgress);
	      Component = checkDidRenderIdHook();
	      markComponentRenderStopped();
	      if (null !== current && !didReceiveUpdate)
	        return (
	          bailoutHooks(current, workInProgress, renderLanes),
	          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
	        );
	      isHydrating && Component && pushMaterializedTreeId(workInProgress);
	      workInProgress.flags |= 1;
	      reconcileChildren(current, workInProgress, nextProps, renderLanes);
	      return workInProgress.child;
	    }
	    function updateClassComponent(
	      current$jscomp$0,
	      workInProgress,
	      Component,
	      nextProps,
	      renderLanes
	    ) {
	      switch (shouldErrorImpl(workInProgress)) {
	        case false:
	          var _instance = workInProgress.stateNode,
	            state = new workInProgress.type(
	              workInProgress.memoizedProps,
	              _instance.context
	            ).state;
	          _instance.updater.enqueueSetState(_instance, state, null);
	          break;
	        case true:
	          workInProgress.flags |= 128;
	          workInProgress.flags |= 65536;
	          _instance = Error("Simulated error coming from DevTools");
	          var lane = renderLanes & -renderLanes;
	          workInProgress.lanes |= lane;
	          state = workInProgressRoot;
	          if (null === state)
	            throw Error(
	              "Expected a work-in-progress root. This is a bug in React. Please file an issue."
	            );
	          lane = createClassErrorUpdate(lane);
	          initializeClassErrorUpdate(
	            lane,
	            state,
	            workInProgress,
	            createCapturedValueAtFiber(_instance, workInProgress)
	          );
	          enqueueCapturedUpdate(workInProgress, lane);
	      }
	      prepareToReadContext(workInProgress);
	      if (null === workInProgress.stateNode) {
	        state = emptyContextObject;
	        _instance = Component.contextType;
	        "contextType" in Component &&
	          null !== _instance &&
	          (undefined === _instance || _instance.$$typeof !== REACT_CONTEXT_TYPE) &&
	          !didWarnAboutInvalidateContextType.has(Component) &&
	          (didWarnAboutInvalidateContextType.add(Component),
	          (lane =
	            undefined === _instance
	              ? " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file."
	              : "object" !== typeof _instance
	                ? " However, it is set to a " + typeof _instance + "."
	                : _instance.$$typeof === REACT_CONSUMER_TYPE
	                  ? " Did you accidentally pass the Context.Consumer instead?"
	                  : " However, it is set to an object with keys {" +
	                    Object.keys(_instance).join(", ") +
	                    "}."),
	          console.error(
	            "%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",
	            getComponentNameFromType(Component) || "Component",
	            lane
	          ));
	        "object" === typeof _instance &&
	          null !== _instance &&
	          (state = readContext(_instance));
	        _instance = new Component(nextProps, state);
	        if (workInProgress.mode & StrictLegacyMode) {
	          setIsStrictModeForDevtools(true);
	          try {
	            _instance = new Component(nextProps, state);
	          } finally {
	            setIsStrictModeForDevtools(false);
	          }
	        }
	        state = workInProgress.memoizedState =
	          null !== _instance.state && undefined !== _instance.state
	            ? _instance.state
	            : null;
	        _instance.updater = classComponentUpdater;
	        workInProgress.stateNode = _instance;
	        _instance._reactInternals = workInProgress;
	        _instance._reactInternalInstance = fakeInternalInstance;
	        "function" === typeof Component.getDerivedStateFromProps &&
	          null === state &&
	          ((state = getComponentNameFromType(Component) || "Component"),
	          didWarnAboutUninitializedState.has(state) ||
	            (didWarnAboutUninitializedState.add(state),
	            console.error(
	              "`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",
	              state,
	              null === _instance.state ? "null" : "undefined",
	              state
	            )));
	        if (
	          "function" === typeof Component.getDerivedStateFromProps ||
	          "function" === typeof _instance.getSnapshotBeforeUpdate
	        ) {
	          var foundWillUpdateName = (lane = state = null);
	          "function" === typeof _instance.componentWillMount &&
	          true !== _instance.componentWillMount.__suppressDeprecationWarning
	            ? (state = "componentWillMount")
	            : "function" === typeof _instance.UNSAFE_componentWillMount &&
	              (state = "UNSAFE_componentWillMount");
	          "function" === typeof _instance.componentWillReceiveProps &&
	          true !==
	            _instance.componentWillReceiveProps.__suppressDeprecationWarning
	            ? (lane = "componentWillReceiveProps")
	            : "function" ===
	                typeof _instance.UNSAFE_componentWillReceiveProps &&
	              (lane = "UNSAFE_componentWillReceiveProps");
	          "function" === typeof _instance.componentWillUpdate &&
	          true !== _instance.componentWillUpdate.__suppressDeprecationWarning
	            ? (foundWillUpdateName = "componentWillUpdate")
	            : "function" === typeof _instance.UNSAFE_componentWillUpdate &&
	              (foundWillUpdateName = "UNSAFE_componentWillUpdate");
	          if (null !== state || null !== lane || null !== foundWillUpdateName) {
	            _instance = getComponentNameFromType(Component) || "Component";
	            var newApiName =
	              "function" === typeof Component.getDerivedStateFromProps
	                ? "getDerivedStateFromProps()"
	                : "getSnapshotBeforeUpdate()";
	            didWarnAboutLegacyLifecyclesAndDerivedState.has(_instance) ||
	              (didWarnAboutLegacyLifecyclesAndDerivedState.add(_instance),
	              console.error(
	                "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://react.dev/link/unsafe-component-lifecycles",
	                _instance,
	                newApiName,
	                null !== state ? "\n  " + state : "",
	                null !== lane ? "\n  " + lane : "",
	                null !== foundWillUpdateName ? "\n  " + foundWillUpdateName : ""
	              ));
	          }
	        }
	        _instance = workInProgress.stateNode;
	        state = getComponentNameFromType(Component) || "Component";
	        _instance.render ||
	          (Component.prototype &&
	          "function" === typeof Component.prototype.render
	            ? console.error(
	                "No `render` method found on the %s instance: did you accidentally return an object from the constructor?",
	                state
	              )
	            : console.error(
	                "No `render` method found on the %s instance: you may have forgotten to define `render`.",
	                state
	              ));
	        !_instance.getInitialState ||
	          _instance.getInitialState.isReactClassApproved ||
	          _instance.state ||
	          console.error(
	            "getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",
	            state
	          );
	        _instance.getDefaultProps &&
	          !_instance.getDefaultProps.isReactClassApproved &&
	          console.error(
	            "getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",
	            state
	          );
	        _instance.contextType &&
	          console.error(
	            "contextType was defined as an instance property on %s. Use a static property to define contextType instead.",
	            state
	          );
	        Component.childContextTypes &&
	          !didWarnAboutChildContextTypes.has(Component) &&
	          (didWarnAboutChildContextTypes.add(Component),
	          console.error(
	            "%s uses the legacy childContextTypes API which was removed in React 19. Use React.createContext() instead. (https://react.dev/link/legacy-context)",
	            state
	          ));
	        Component.contextTypes &&
	          !didWarnAboutContextTypes$1.has(Component) &&
	          (didWarnAboutContextTypes$1.add(Component),
	          console.error(
	            "%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with static contextType instead. (https://react.dev/link/legacy-context)",
	            state
	          ));
	        "function" === typeof _instance.componentShouldUpdate &&
	          console.error(
	            "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",
	            state
	          );
	        Component.prototype &&
	          Component.prototype.isPureReactComponent &&
	          "undefined" !== typeof _instance.shouldComponentUpdate &&
	          console.error(
	            "%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",
	            getComponentNameFromType(Component) || "A pure component"
	          );
	        "function" === typeof _instance.componentDidUnmount &&
	          console.error(
	            "%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",
	            state
	          );
	        "function" === typeof _instance.componentDidReceiveProps &&
	          console.error(
	            "%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",
	            state
	          );
	        "function" === typeof _instance.componentWillRecieveProps &&
	          console.error(
	            "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",
	            state
	          );
	        "function" === typeof _instance.UNSAFE_componentWillRecieveProps &&
	          console.error(
	            "%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",
	            state
	          );
	        lane = _instance.props !== nextProps;
	        undefined !== _instance.props &&
	          lane &&
	          console.error(
	            "When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",
	            state
	          );
	        _instance.defaultProps &&
	          console.error(
	            "Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",
	            state,
	            state
	          );
	        "function" !== typeof _instance.getSnapshotBeforeUpdate ||
	          "function" === typeof _instance.componentDidUpdate ||
	          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(Component) ||
	          (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(Component),
	          console.error(
	            "%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",
	            getComponentNameFromType(Component)
	          ));
	        "function" === typeof _instance.getDerivedStateFromProps &&
	          console.error(
	            "%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
	            state
	          );
	        "function" === typeof _instance.getDerivedStateFromError &&
	          console.error(
	            "%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
	            state
	          );
	        "function" === typeof Component.getSnapshotBeforeUpdate &&
	          console.error(
	            "%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",
	            state
	          );
	        (lane = _instance.state) &&
	          ("object" !== typeof lane || isArrayImpl(lane)) &&
	          console.error("%s.state: must be set to an object or null", state);
	        "function" === typeof _instance.getChildContext &&
	          "object" !== typeof Component.childContextTypes &&
	          console.error(
	            "%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",
	            state
	          );
	        _instance = workInProgress.stateNode;
	        _instance.props = nextProps;
	        _instance.state = workInProgress.memoizedState;
	        _instance.refs = {};
	        initializeUpdateQueue(workInProgress);
	        state = Component.contextType;
	        _instance.context =
	          "object" === typeof state && null !== state
	            ? readContext(state)
	            : emptyContextObject;
	        _instance.state === nextProps &&
	          ((state = getComponentNameFromType(Component) || "Component"),
	          didWarnAboutDirectlyAssigningPropsToState.has(state) ||
	            (didWarnAboutDirectlyAssigningPropsToState.add(state),
	            console.error(
	              "%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",
	              state
	            )));
	        workInProgress.mode & StrictLegacyMode &&
	          ReactStrictModeWarnings.recordLegacyContextWarning(
	            workInProgress,
	            _instance
	          );
	        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(
	          workInProgress,
	          _instance
	        );
	        _instance.state = workInProgress.memoizedState;
	        state = Component.getDerivedStateFromProps;
	        "function" === typeof state &&
	          (applyDerivedStateFromProps(
	            workInProgress,
	            Component,
	            state,
	            nextProps
	          ),
	          (_instance.state = workInProgress.memoizedState));
	        "function" === typeof Component.getDerivedStateFromProps ||
	          "function" === typeof _instance.getSnapshotBeforeUpdate ||
	          ("function" !== typeof _instance.UNSAFE_componentWillMount &&
	            "function" !== typeof _instance.componentWillMount) ||
	          ((state = _instance.state),
	          "function" === typeof _instance.componentWillMount &&
	            _instance.componentWillMount(),
	          "function" === typeof _instance.UNSAFE_componentWillMount &&
	            _instance.UNSAFE_componentWillMount(),
	          state !== _instance.state &&
	            (console.error(
	              "%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
	              getComponentNameFromFiber(workInProgress) || "Component"
	            ),
	            classComponentUpdater.enqueueReplaceState(
	              _instance,
	              _instance.state,
	              null
	            )),
	          processUpdateQueue(workInProgress, nextProps, _instance, renderLanes),
	          suspendIfUpdateReadFromEntangledAsyncAction(),
	          (_instance.state = workInProgress.memoizedState));
	        "function" === typeof _instance.componentDidMount &&
	          (workInProgress.flags |= 4194308);
	        (workInProgress.mode & StrictEffectsMode) !== NoMode &&
	          (workInProgress.flags |= 67108864);
	        _instance = true;
	      } else if (null === current$jscomp$0) {
	        _instance = workInProgress.stateNode;
	        var unresolvedOldProps = workInProgress.memoizedProps;
	        lane = resolveClassComponentProps(Component, unresolvedOldProps);
	        _instance.props = lane;
	        var oldContext = _instance.context;
	        foundWillUpdateName = Component.contextType;
	        state = emptyContextObject;
	        "object" === typeof foundWillUpdateName &&
	          null !== foundWillUpdateName &&
	          (state = readContext(foundWillUpdateName));
	        newApiName = Component.getDerivedStateFromProps;
	        foundWillUpdateName =
	          "function" === typeof newApiName ||
	          "function" === typeof _instance.getSnapshotBeforeUpdate;
	        unresolvedOldProps = workInProgress.pendingProps !== unresolvedOldProps;
	        foundWillUpdateName ||
	          ("function" !== typeof _instance.UNSAFE_componentWillReceiveProps &&
	            "function" !== typeof _instance.componentWillReceiveProps) ||
	          ((unresolvedOldProps || oldContext !== state) &&
	            callComponentWillReceiveProps(
	              workInProgress,
	              _instance,
	              nextProps,
	              state
	            ));
	        hasForceUpdate = false;
	        var oldState = workInProgress.memoizedState;
	        _instance.state = oldState;
	        processUpdateQueue(workInProgress, nextProps, _instance, renderLanes);
	        suspendIfUpdateReadFromEntangledAsyncAction();
	        oldContext = workInProgress.memoizedState;
	        unresolvedOldProps || oldState !== oldContext || hasForceUpdate
	          ? ("function" === typeof newApiName &&
	              (applyDerivedStateFromProps(
	                workInProgress,
	                Component,
	                newApiName,
	                nextProps
	              ),
	              (oldContext = workInProgress.memoizedState)),
	            (lane =
	              hasForceUpdate ||
	              checkShouldComponentUpdate(
	                workInProgress,
	                Component,
	                lane,
	                nextProps,
	                oldState,
	                oldContext,
	                state
	              ))
	              ? (foundWillUpdateName ||
	                  ("function" !== typeof _instance.UNSAFE_componentWillMount &&
	                    "function" !== typeof _instance.componentWillMount) ||
	                  ("function" === typeof _instance.componentWillMount &&
	                    _instance.componentWillMount(),
	                  "function" === typeof _instance.UNSAFE_componentWillMount &&
	                    _instance.UNSAFE_componentWillMount()),
	                "function" === typeof _instance.componentDidMount &&
	                  (workInProgress.flags |= 4194308),
	                (workInProgress.mode & StrictEffectsMode) !== NoMode &&
	                  (workInProgress.flags |= 67108864))
	              : ("function" === typeof _instance.componentDidMount &&
	                  (workInProgress.flags |= 4194308),
	                (workInProgress.mode & StrictEffectsMode) !== NoMode &&
	                  (workInProgress.flags |= 67108864),
	                (workInProgress.memoizedProps = nextProps),
	                (workInProgress.memoizedState = oldContext)),
	            (_instance.props = nextProps),
	            (_instance.state = oldContext),
	            (_instance.context = state),
	            (_instance = lane))
	          : ("function" === typeof _instance.componentDidMount &&
	              (workInProgress.flags |= 4194308),
	            (workInProgress.mode & StrictEffectsMode) !== NoMode &&
	              (workInProgress.flags |= 67108864),
	            (_instance = false));
	      } else {
	        _instance = workInProgress.stateNode;
	        cloneUpdateQueue(current$jscomp$0, workInProgress);
	        state = workInProgress.memoizedProps;
	        foundWillUpdateName = resolveClassComponentProps(Component, state);
	        _instance.props = foundWillUpdateName;
	        newApiName = workInProgress.pendingProps;
	        oldState = _instance.context;
	        oldContext = Component.contextType;
	        lane = emptyContextObject;
	        "object" === typeof oldContext &&
	          null !== oldContext &&
	          (lane = readContext(oldContext));
	        unresolvedOldProps = Component.getDerivedStateFromProps;
	        (oldContext =
	          "function" === typeof unresolvedOldProps ||
	          "function" === typeof _instance.getSnapshotBeforeUpdate) ||
	          ("function" !== typeof _instance.UNSAFE_componentWillReceiveProps &&
	            "function" !== typeof _instance.componentWillReceiveProps) ||
	          ((state !== newApiName || oldState !== lane) &&
	            callComponentWillReceiveProps(
	              workInProgress,
	              _instance,
	              nextProps,
	              lane
	            ));
	        hasForceUpdate = false;
	        oldState = workInProgress.memoizedState;
	        _instance.state = oldState;
	        processUpdateQueue(workInProgress, nextProps, _instance, renderLanes);
	        suspendIfUpdateReadFromEntangledAsyncAction();
	        var newState = workInProgress.memoizedState;
	        state !== newApiName ||
	        oldState !== newState ||
	        hasForceUpdate ||
	        (null !== current$jscomp$0 &&
	          null !== current$jscomp$0.dependencies &&
	          checkIfContextChanged(current$jscomp$0.dependencies))
	          ? ("function" === typeof unresolvedOldProps &&
	              (applyDerivedStateFromProps(
	                workInProgress,
	                Component,
	                unresolvedOldProps,
	                nextProps
	              ),
	              (newState = workInProgress.memoizedState)),
	            (foundWillUpdateName =
	              hasForceUpdate ||
	              checkShouldComponentUpdate(
	                workInProgress,
	                Component,
	                foundWillUpdateName,
	                nextProps,
	                oldState,
	                newState,
	                lane
	              ) ||
	              (null !== current$jscomp$0 &&
	                null !== current$jscomp$0.dependencies &&
	                checkIfContextChanged(current$jscomp$0.dependencies)))
	              ? (oldContext ||
	                  ("function" !== typeof _instance.UNSAFE_componentWillUpdate &&
	                    "function" !== typeof _instance.componentWillUpdate) ||
	                  ("function" === typeof _instance.componentWillUpdate &&
	                    _instance.componentWillUpdate(nextProps, newState, lane),
	                  "function" === typeof _instance.UNSAFE_componentWillUpdate &&
	                    _instance.UNSAFE_componentWillUpdate(
	                      nextProps,
	                      newState,
	                      lane
	                    )),
	                "function" === typeof _instance.componentDidUpdate &&
	                  (workInProgress.flags |= 4),
	                "function" === typeof _instance.getSnapshotBeforeUpdate &&
	                  (workInProgress.flags |= 1024))
	              : ("function" !== typeof _instance.componentDidUpdate ||
	                  (state === current$jscomp$0.memoizedProps &&
	                    oldState === current$jscomp$0.memoizedState) ||
	                  (workInProgress.flags |= 4),
	                "function" !== typeof _instance.getSnapshotBeforeUpdate ||
	                  (state === current$jscomp$0.memoizedProps &&
	                    oldState === current$jscomp$0.memoizedState) ||
	                  (workInProgress.flags |= 1024),
	                (workInProgress.memoizedProps = nextProps),
	                (workInProgress.memoizedState = newState)),
	            (_instance.props = nextProps),
	            (_instance.state = newState),
	            (_instance.context = lane),
	            (_instance = foundWillUpdateName))
	          : ("function" !== typeof _instance.componentDidUpdate ||
	              (state === current$jscomp$0.memoizedProps &&
	                oldState === current$jscomp$0.memoizedState) ||
	              (workInProgress.flags |= 4),
	            "function" !== typeof _instance.getSnapshotBeforeUpdate ||
	              (state === current$jscomp$0.memoizedProps &&
	                oldState === current$jscomp$0.memoizedState) ||
	              (workInProgress.flags |= 1024),
	            (_instance = false));
	      }
	      lane = _instance;
	      markRef(current$jscomp$0, workInProgress);
	      state = 0 !== (workInProgress.flags & 128);
	      if (lane || state) {
	        lane = workInProgress.stateNode;
	        ReactSharedInternals.getCurrentStack =
	          null === workInProgress ? null : getCurrentFiberStackInDev;
	        isRendering = false;
	        current = workInProgress;
	        if (state && "function" !== typeof Component.getDerivedStateFromError)
	          (Component = null), (profilerStartTime = -1);
	        else {
	          markComponentRenderStarted(workInProgress);
	          Component = callRenderInDEV(lane);
	          if (workInProgress.mode & StrictLegacyMode) {
	            setIsStrictModeForDevtools(true);
	            try {
	              callRenderInDEV(lane);
	            } finally {
	              setIsStrictModeForDevtools(false);
	            }
	          }
	          markComponentRenderStopped();
	        }
	        workInProgress.flags |= 1;
	        null !== current$jscomp$0 && state
	          ? ((workInProgress.child = reconcileChildFibers(
	              workInProgress,
	              current$jscomp$0.child,
	              null,
	              renderLanes
	            )),
	            (workInProgress.child = reconcileChildFibers(
	              workInProgress,
	              null,
	              Component,
	              renderLanes
	            )))
	          : reconcileChildren(
	              current$jscomp$0,
	              workInProgress,
	              Component,
	              renderLanes
	            );
	        workInProgress.memoizedState = lane.state;
	        current$jscomp$0 = workInProgress.child;
	      } else
	        current$jscomp$0 = bailoutOnAlreadyFinishedWork(
	          current$jscomp$0,
	          workInProgress,
	          renderLanes
	        );
	      renderLanes = workInProgress.stateNode;
	      _instance &&
	        renderLanes.props !== nextProps &&
	        (didWarnAboutReassigningProps ||
	          console.error(
	            "It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",
	            getComponentNameFromFiber(workInProgress) || "a component"
	          ),
	        (didWarnAboutReassigningProps = true));
	      return current$jscomp$0;
	    }
	    function mountHostRootWithoutHydrating(
	      current,
	      workInProgress,
	      nextChildren,
	      renderLanes
	    ) {
	      resetHydrationState();
	      workInProgress.flags |= 256;
	      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	      return workInProgress.child;
	    }
	    function validateFunctionComponentInDev(workInProgress, Component) {
	      Component &&
	        Component.childContextTypes &&
	        console.error(
	          "childContextTypes cannot be defined on a function component.\n  %s.childContextTypes = ...",
	          Component.displayName || Component.name || "Component"
	        );
	      "function" === typeof Component.getDerivedStateFromProps &&
	        ((workInProgress = getComponentNameFromType(Component) || "Unknown"),
	        didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress] ||
	          (console.error(
	            "%s: Function components do not support getDerivedStateFromProps.",
	            workInProgress
	          ),
	          (didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress] =
	            true)));
	      "object" === typeof Component.contextType &&
	        null !== Component.contextType &&
	        ((Component = getComponentNameFromType(Component) || "Unknown"),
	        didWarnAboutContextTypeOnFunctionComponent[Component] ||
	          (console.error(
	            "%s: Function components do not support contextType.",
	            Component
	          ),
	          (didWarnAboutContextTypeOnFunctionComponent[Component] = true)));
	    }
	    function mountSuspenseOffscreenState(renderLanes) {
	      return { baseLanes: renderLanes, cachePool: getSuspendedCache() };
	    }
	    function getRemainingWorkInPrimaryTree(
	      current,
	      primaryTreeDidDefer,
	      renderLanes
	    ) {
	      current = null !== current ? current.childLanes & ~renderLanes : 0;
	      primaryTreeDidDefer && (current |= workInProgressDeferredLane);
	      return current;
	    }
	    function updateSuspenseComponent(current, workInProgress, renderLanes) {
	      var JSCompiler_object_inline_digest_2317;
	      var JSCompiler_object_inline_stack_2318 = workInProgress.pendingProps;
	      shouldSuspendImpl(workInProgress) && (workInProgress.flags |= 128);
	      var JSCompiler_object_inline_componentStack_2319 = false;
	      var didSuspend = 0 !== (workInProgress.flags & 128);
	      (JSCompiler_object_inline_digest_2317 = didSuspend) ||
	        (JSCompiler_object_inline_digest_2317 =
	          null !== current && null === current.memoizedState
	            ? false
	            : 0 !== (suspenseStackCursor.current & ForceSuspenseFallback));
	      JSCompiler_object_inline_digest_2317 &&
	        ((JSCompiler_object_inline_componentStack_2319 = true),
	        (workInProgress.flags &= -129));
	      JSCompiler_object_inline_digest_2317 = 0 !== (workInProgress.flags & 32);
	      workInProgress.flags &= -33;
	      if (null === current) {
	        if (isHydrating) {
	          JSCompiler_object_inline_componentStack_2319
	            ? pushPrimaryTreeSuspenseHandler(workInProgress)
	            : reuseSuspenseHandlerOnStack(workInProgress);
	          if (isHydrating) {
	            var JSCompiler_object_inline_message_2316 = nextHydratableInstance;
	            var JSCompiler_temp;
	            if (!(JSCompiler_temp = !JSCompiler_object_inline_message_2316)) {
	              c: {
	                var instance = JSCompiler_object_inline_message_2316;
	                for (
	                  JSCompiler_temp = rootOrSingletonContext;
	                  8 !== instance.nodeType;

	                ) {
	                  if (!JSCompiler_temp) {
	                    JSCompiler_temp = null;
	                    break c;
	                  }
	                  instance = getNextHydratable(instance.nextSibling);
	                  if (null === instance) {
	                    JSCompiler_temp = null;
	                    break c;
	                  }
	                }
	                JSCompiler_temp = instance;
	              }
	              null !== JSCompiler_temp
	                ? (warnIfNotHydrating(),
	                  (workInProgress.memoizedState = {
	                    dehydrated: JSCompiler_temp,
	                    treeContext:
	                      null !== treeContextProvider
	                        ? { id: treeContextId, overflow: treeContextOverflow }
	                        : null,
	                    retryLane: 536870912
	                  }),
	                  (instance = createFiber(18, null, null, NoMode)),
	                  (instance.stateNode = JSCompiler_temp),
	                  (instance.return = workInProgress),
	                  (workInProgress.child = instance),
	                  (hydrationParentFiber = workInProgress),
	                  (nextHydratableInstance = null),
	                  (JSCompiler_temp = true))
	                : (JSCompiler_temp = false);
	              JSCompiler_temp = !JSCompiler_temp;
	            }
	            JSCompiler_temp &&
	              (warnNonHydratedInstance(
	                workInProgress,
	                JSCompiler_object_inline_message_2316
	              ),
	              throwOnHydrationMismatch(workInProgress));
	          }
	          JSCompiler_object_inline_message_2316 = workInProgress.memoizedState;
	          if (
	            null !== JSCompiler_object_inline_message_2316 &&
	            ((JSCompiler_object_inline_message_2316 =
	              JSCompiler_object_inline_message_2316.dehydrated),
	            null !== JSCompiler_object_inline_message_2316)
	          )
	            return (
	              JSCompiler_object_inline_message_2316.data ===
	              SUSPENSE_FALLBACK_START_DATA
	                ? (workInProgress.lanes = 16)
	                : (workInProgress.lanes = 536870912),
	              null
	            );
	          popSuspenseHandler(workInProgress);
	        }
	        JSCompiler_object_inline_message_2316 =
	          JSCompiler_object_inline_stack_2318.children;
	        JSCompiler_object_inline_stack_2318 =
	          JSCompiler_object_inline_stack_2318.fallback;
	        if (JSCompiler_object_inline_componentStack_2319)
	          return (
	            reuseSuspenseHandlerOnStack(workInProgress),
	            (JSCompiler_object_inline_componentStack_2319 =
	              workInProgress.mode),
	            (JSCompiler_object_inline_message_2316 =
	              mountWorkInProgressOffscreenFiber(
	                {
	                  mode: "hidden",
	                  children: JSCompiler_object_inline_message_2316
	                },
	                JSCompiler_object_inline_componentStack_2319
	              )),
	            (JSCompiler_object_inline_stack_2318 = createFiberFromFragment(
	              JSCompiler_object_inline_stack_2318,
	              JSCompiler_object_inline_componentStack_2319,
	              renderLanes,
	              null
	            )),
	            (JSCompiler_object_inline_message_2316.return = workInProgress),
	            (JSCompiler_object_inline_stack_2318.return = workInProgress),
	            (JSCompiler_object_inline_message_2316.sibling =
	              JSCompiler_object_inline_stack_2318),
	            (workInProgress.child = JSCompiler_object_inline_message_2316),
	            (JSCompiler_object_inline_componentStack_2319 =
	              workInProgress.child),
	            (JSCompiler_object_inline_componentStack_2319.memoizedState =
	              mountSuspenseOffscreenState(renderLanes)),
	            (JSCompiler_object_inline_componentStack_2319.childLanes =
	              getRemainingWorkInPrimaryTree(
	                current,
	                JSCompiler_object_inline_digest_2317,
	                renderLanes
	              )),
	            (workInProgress.memoizedState = SUSPENDED_MARKER),
	            JSCompiler_object_inline_stack_2318
	          );
	        pushPrimaryTreeSuspenseHandler(workInProgress);
	        return mountSuspensePrimaryChildren(
	          workInProgress,
	          JSCompiler_object_inline_message_2316
	        );
	      }
	      var prevState = current.memoizedState;
	      if (
	        null !== prevState &&
	        ((JSCompiler_object_inline_message_2316 = prevState.dehydrated),
	        null !== JSCompiler_object_inline_message_2316)
	      ) {
	        if (didSuspend)
	          workInProgress.flags & 256
	            ? (pushPrimaryTreeSuspenseHandler(workInProgress),
	              (workInProgress.flags &= -257),
	              (workInProgress = retrySuspenseComponentWithoutHydrating(
	                current,
	                workInProgress,
	                renderLanes
	              )))
	            : null !== workInProgress.memoizedState
	              ? (reuseSuspenseHandlerOnStack(workInProgress),
	                (workInProgress.child = current.child),
	                (workInProgress.flags |= 128),
	                (workInProgress = null))
	              : (reuseSuspenseHandlerOnStack(workInProgress),
	                (JSCompiler_object_inline_componentStack_2319 =
	                  JSCompiler_object_inline_stack_2318.fallback),
	                (JSCompiler_object_inline_message_2316 = workInProgress.mode),
	                (JSCompiler_object_inline_stack_2318 =
	                  mountWorkInProgressOffscreenFiber(
	                    {
	                      mode: "visible",
	                      children: JSCompiler_object_inline_stack_2318.children
	                    },
	                    JSCompiler_object_inline_message_2316
	                  )),
	                (JSCompiler_object_inline_componentStack_2319 =
	                  createFiberFromFragment(
	                    JSCompiler_object_inline_componentStack_2319,
	                    JSCompiler_object_inline_message_2316,
	                    renderLanes,
	                    null
	                  )),
	                (JSCompiler_object_inline_componentStack_2319.flags |= 2),
	                (JSCompiler_object_inline_stack_2318.return = workInProgress),
	                (JSCompiler_object_inline_componentStack_2319.return =
	                  workInProgress),
	                (JSCompiler_object_inline_stack_2318.sibling =
	                  JSCompiler_object_inline_componentStack_2319),
	                (workInProgress.child = JSCompiler_object_inline_stack_2318),
	                reconcileChildFibers(
	                  workInProgress,
	                  current.child,
	                  null,
	                  renderLanes
	                ),
	                (JSCompiler_object_inline_stack_2318 = workInProgress.child),
	                (JSCompiler_object_inline_stack_2318.memoizedState =
	                  mountSuspenseOffscreenState(renderLanes)),
	                (JSCompiler_object_inline_stack_2318.childLanes =
	                  getRemainingWorkInPrimaryTree(
	                    current,
	                    JSCompiler_object_inline_digest_2317,
	                    renderLanes
	                  )),
	                (workInProgress.memoizedState = SUSPENDED_MARKER),
	                (workInProgress =
	                  JSCompiler_object_inline_componentStack_2319));
	        else if (
	          (pushPrimaryTreeSuspenseHandler(workInProgress),
	          isHydrating &&
	            console.error(
	              "We should not be hydrating here. This is a bug in React. Please file a bug."
	            ),
	          JSCompiler_object_inline_message_2316.data ===
	            SUSPENSE_FALLBACK_START_DATA)
	        ) {
	          JSCompiler_object_inline_digest_2317 =
	            JSCompiler_object_inline_message_2316.nextSibling &&
	            JSCompiler_object_inline_message_2316.nextSibling.dataset;
	          if (JSCompiler_object_inline_digest_2317) {
	            JSCompiler_temp = JSCompiler_object_inline_digest_2317.dgst;
	            var message = JSCompiler_object_inline_digest_2317.msg;
	            instance = JSCompiler_object_inline_digest_2317.stck;
	            var componentStack = JSCompiler_object_inline_digest_2317.cstck;
	          }
	          JSCompiler_object_inline_message_2316 = message;
	          JSCompiler_object_inline_digest_2317 = JSCompiler_temp;
	          JSCompiler_object_inline_stack_2318 = instance;
	          JSCompiler_temp = JSCompiler_object_inline_componentStack_2319 =
	            componentStack;
	          JSCompiler_object_inline_componentStack_2319 =
	            JSCompiler_object_inline_message_2316
	              ? Error(JSCompiler_object_inline_message_2316)
	              : Error(
	                  "The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."
	                );
	          JSCompiler_object_inline_componentStack_2319.stack =
	            JSCompiler_object_inline_stack_2318 || "";
	          JSCompiler_object_inline_componentStack_2319.digest =
	            JSCompiler_object_inline_digest_2317;
	          JSCompiler_object_inline_digest_2317 =
	            undefined === JSCompiler_temp ? null : JSCompiler_temp;
	          JSCompiler_object_inline_stack_2318 = {
	            value: JSCompiler_object_inline_componentStack_2319,
	            source: null,
	            stack: JSCompiler_object_inline_digest_2317
	          };
	          "string" === typeof JSCompiler_object_inline_digest_2317 &&
	            CapturedStacks.set(
	              JSCompiler_object_inline_componentStack_2319,
	              JSCompiler_object_inline_stack_2318
	            );
	          queueHydrationError(JSCompiler_object_inline_stack_2318);
	          workInProgress = retrySuspenseComponentWithoutHydrating(
	            current,
	            workInProgress,
	            renderLanes
	          );
	        } else if (
	          (didReceiveUpdate ||
	            propagateParentContextChanges(
	              current,
	              workInProgress,
	              renderLanes,
	              false
	            ),
	          (JSCompiler_object_inline_digest_2317 =
	            0 !== (renderLanes & current.childLanes)),
	          didReceiveUpdate || JSCompiler_object_inline_digest_2317)
	        ) {
	          JSCompiler_object_inline_digest_2317 = workInProgressRoot;
	          if (null !== JSCompiler_object_inline_digest_2317) {
	            JSCompiler_object_inline_stack_2318 = renderLanes & -renderLanes;
	            if (0 !== (JSCompiler_object_inline_stack_2318 & 42))
	              JSCompiler_object_inline_stack_2318 = 1;
	            else
	              switch (JSCompiler_object_inline_stack_2318) {
	                case 2:
	                  JSCompiler_object_inline_stack_2318 = 1;
	                  break;
	                case 8:
	                  JSCompiler_object_inline_stack_2318 = 4;
	                  break;
	                case 32:
	                  JSCompiler_object_inline_stack_2318 = 16;
	                  break;
	                case 128:
	                case 256:
	                case 512:
	                case 1024:
	                case 2048:
	                case 4096:
	                case 8192:
	                case 16384:
	                case 32768:
	                case 65536:
	                case 131072:
	                case 262144:
	                case 524288:
	                case 1048576:
	                case 2097152:
	                case 4194304:
	                case 8388608:
	                case 16777216:
	                case 33554432:
	                  JSCompiler_object_inline_stack_2318 = 64;
	                  break;
	                case 268435456:
	                  JSCompiler_object_inline_stack_2318 = 134217728;
	                  break;
	                default:
	                  JSCompiler_object_inline_stack_2318 = 0;
	              }
	            JSCompiler_object_inline_stack_2318 =
	              0 !==
	              (JSCompiler_object_inline_stack_2318 &
	                (JSCompiler_object_inline_digest_2317.suspendedLanes |
	                  renderLanes))
	                ? 0
	                : JSCompiler_object_inline_stack_2318;
	            if (
	              0 !== JSCompiler_object_inline_stack_2318 &&
	              JSCompiler_object_inline_stack_2318 !== prevState.retryLane
	            )
	              throw (
	                ((prevState.retryLane = JSCompiler_object_inline_stack_2318),
	                enqueueConcurrentRenderForLane(
	                  current,
	                  JSCompiler_object_inline_stack_2318
	                ),
	                scheduleUpdateOnFiber(
	                  JSCompiler_object_inline_digest_2317,
	                  current,
	                  JSCompiler_object_inline_stack_2318
	                ),
	                SelectiveHydrationException)
	              );
	          }
	          JSCompiler_object_inline_message_2316.data ===
	            SUSPENSE_PENDING_START_DATA || renderDidSuspendDelayIfPossible();
	          workInProgress = retrySuspenseComponentWithoutHydrating(
	            current,
	            workInProgress,
	            renderLanes
	          );
	        } else
	          JSCompiler_object_inline_message_2316.data ===
	          SUSPENSE_PENDING_START_DATA
	            ? ((workInProgress.flags |= 128),
	              (workInProgress.child = current.child),
	              (workInProgress = retryDehydratedSuspenseBoundary.bind(
	                null,
	                current
	              )),
	              (JSCompiler_object_inline_message_2316._reactRetry =
	                workInProgress),
	              (workInProgress = null))
	            : ((current = prevState.treeContext),
	              (nextHydratableInstance = getNextHydratable(
	                JSCompiler_object_inline_message_2316.nextSibling
	              )),
	              (hydrationParentFiber = workInProgress),
	              (isHydrating = true),
	              (hydrationErrors = null),
	              (didSuspendOrErrorDEV = false),
	              (hydrationDiffRootDEV = null),
	              (rootOrSingletonContext = false),
	              null !== current &&
	                (warnIfNotHydrating(),
	                (idStack[idStackIndex++] = treeContextId),
	                (idStack[idStackIndex++] = treeContextOverflow),
	                (idStack[idStackIndex++] = treeContextProvider),
	                (treeContextId = current.id),
	                (treeContextOverflow = current.overflow),
	                (treeContextProvider = workInProgress)),
	              (workInProgress = mountSuspensePrimaryChildren(
	                workInProgress,
	                JSCompiler_object_inline_stack_2318.children
	              )),
	              (workInProgress.flags |= 4096));
	        return workInProgress;
	      }
	      if (JSCompiler_object_inline_componentStack_2319)
	        return (
	          reuseSuspenseHandlerOnStack(workInProgress),
	          (JSCompiler_object_inline_componentStack_2319 =
	            JSCompiler_object_inline_stack_2318.fallback),
	          (JSCompiler_object_inline_message_2316 = workInProgress.mode),
	          (JSCompiler_temp = current.child),
	          (instance = JSCompiler_temp.sibling),
	          (JSCompiler_object_inline_stack_2318 = createWorkInProgress(
	            JSCompiler_temp,
	            {
	              mode: "hidden",
	              children: JSCompiler_object_inline_stack_2318.children
	            }
	          )),
	          (JSCompiler_object_inline_stack_2318.subtreeFlags =
	            JSCompiler_temp.subtreeFlags & 31457280),
	          null !== instance
	            ? (JSCompiler_object_inline_componentStack_2319 =
	                createWorkInProgress(
	                  instance,
	                  JSCompiler_object_inline_componentStack_2319
	                ))
	            : ((JSCompiler_object_inline_componentStack_2319 =
	                createFiberFromFragment(
	                  JSCompiler_object_inline_componentStack_2319,
	                  JSCompiler_object_inline_message_2316,
	                  renderLanes,
	                  null
	                )),
	              (JSCompiler_object_inline_componentStack_2319.flags |= 2)),
	          (JSCompiler_object_inline_componentStack_2319.return =
	            workInProgress),
	          (JSCompiler_object_inline_stack_2318.return = workInProgress),
	          (JSCompiler_object_inline_stack_2318.sibling =
	            JSCompiler_object_inline_componentStack_2319),
	          (workInProgress.child = JSCompiler_object_inline_stack_2318),
	          (JSCompiler_object_inline_stack_2318 =
	            JSCompiler_object_inline_componentStack_2319),
	          (JSCompiler_object_inline_componentStack_2319 = workInProgress.child),
	          (JSCompiler_object_inline_message_2316 = current.child.memoizedState),
	          null === JSCompiler_object_inline_message_2316
	            ? (JSCompiler_object_inline_message_2316 =
	                mountSuspenseOffscreenState(renderLanes))
	            : ((JSCompiler_temp =
	                JSCompiler_object_inline_message_2316.cachePool),
	              null !== JSCompiler_temp
	                ? ((instance = CacheContext._currentValue),
	                  (JSCompiler_temp =
	                    JSCompiler_temp.parent !== instance
	                      ? { parent: instance, pool: instance }
	                      : JSCompiler_temp))
	                : (JSCompiler_temp = getSuspendedCache()),
	              (JSCompiler_object_inline_message_2316 = {
	                baseLanes:
	                  JSCompiler_object_inline_message_2316.baseLanes | renderLanes,
	                cachePool: JSCompiler_temp
	              })),
	          (JSCompiler_object_inline_componentStack_2319.memoizedState =
	            JSCompiler_object_inline_message_2316),
	          (JSCompiler_object_inline_componentStack_2319.childLanes =
	            getRemainingWorkInPrimaryTree(
	              current,
	              JSCompiler_object_inline_digest_2317,
	              renderLanes
	            )),
	          (workInProgress.memoizedState = SUSPENDED_MARKER),
	          JSCompiler_object_inline_stack_2318
	        );
	      pushPrimaryTreeSuspenseHandler(workInProgress);
	      renderLanes = current.child;
	      current = renderLanes.sibling;
	      renderLanes = createWorkInProgress(renderLanes, {
	        mode: "visible",
	        children: JSCompiler_object_inline_stack_2318.children
	      });
	      renderLanes.return = workInProgress;
	      renderLanes.sibling = null;
	      null !== current &&
	        ((JSCompiler_object_inline_digest_2317 = workInProgress.deletions),
	        null === JSCompiler_object_inline_digest_2317
	          ? ((workInProgress.deletions = [current]),
	            (workInProgress.flags |= 16))
	          : JSCompiler_object_inline_digest_2317.push(current));
	      workInProgress.child = renderLanes;
	      workInProgress.memoizedState = null;
	      return renderLanes;
	    }
	    function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
	      primaryChildren = mountWorkInProgressOffscreenFiber(
	        { mode: "visible", children: primaryChildren },
	        workInProgress.mode
	      );
	      primaryChildren.return = workInProgress;
	      return (workInProgress.child = primaryChildren);
	    }
	    function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
	      return createFiberFromOffscreen(offscreenProps, mode, 0, null);
	    }
	    function retrySuspenseComponentWithoutHydrating(
	      current,
	      workInProgress,
	      renderLanes
	    ) {
	      reconcileChildFibers(workInProgress, current.child, null, renderLanes);
	      current = mountSuspensePrimaryChildren(
	        workInProgress,
	        workInProgress.pendingProps.children
	      );
	      current.flags |= 2;
	      workInProgress.memoizedState = null;
	      return current;
	    }
	    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
	      fiber.lanes |= renderLanes;
	      var alternate = fiber.alternate;
	      null !== alternate && (alternate.lanes |= renderLanes);
	      scheduleContextWorkOnParentPath(
	        fiber.return,
	        renderLanes,
	        propagationRoot
	      );
	    }
	    function validateSuspenseListNestedChild(childSlot, index) {
	      var isAnArray = isArrayImpl(childSlot);
	      childSlot = !isAnArray && "function" === typeof getIteratorFn(childSlot);
	      return isAnArray || childSlot
	        ? ((isAnArray = isAnArray ? "array" : "iterable"),
	          console.error(
	            "A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>",
	            isAnArray,
	            index,
	            isAnArray
	          ),
	          false)
	        : true;
	    }
	    function initSuspenseListRenderState(
	      workInProgress,
	      isBackwards,
	      tail,
	      lastContentRow,
	      tailMode
	    ) {
	      var renderState = workInProgress.memoizedState;
	      null === renderState
	        ? (workInProgress.memoizedState = {
	            isBackwards: isBackwards,
	            rendering: null,
	            renderingStartTime: 0,
	            last: lastContentRow,
	            tail: tail,
	            tailMode: tailMode
	          })
	        : ((renderState.isBackwards = isBackwards),
	          (renderState.rendering = null),
	          (renderState.renderingStartTime = 0),
	          (renderState.last = lastContentRow),
	          (renderState.tail = tail),
	          (renderState.tailMode = tailMode));
	    }
	    function updateSuspenseListComponent(current, workInProgress, renderLanes) {
	      var nextProps = workInProgress.pendingProps,
	        revealOrder = nextProps.revealOrder,
	        tailMode = nextProps.tail;
	      nextProps = nextProps.children;
	      if (
	        undefined !== revealOrder &&
	        "forwards" !== revealOrder &&
	        "backwards" !== revealOrder &&
	        "together" !== revealOrder &&
	        !didWarnAboutRevealOrder[revealOrder]
	      )
	        if (
	          ((didWarnAboutRevealOrder[revealOrder] = true),
	          "string" === typeof revealOrder)
	        )
	          switch (revealOrder.toLowerCase()) {
	            case "together":
	            case "forwards":
	            case "backwards":
	              console.error(
	                '"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',
	                revealOrder,
	                revealOrder.toLowerCase()
	              );
	              break;
	            case "forward":
	            case "backward":
	              console.error(
	                '"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',
	                revealOrder,
	                revealOrder.toLowerCase()
	              );
	              break;
	            default:
	              console.error(
	                '"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
	                revealOrder
	              );
	          }
	        else
	          console.error(
	            '%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
	            revealOrder
	          );
	      undefined === tailMode ||
	        didWarnAboutTailOptions[tailMode] ||
	        ("collapsed" !== tailMode && "hidden" !== tailMode
	          ? ((didWarnAboutTailOptions[tailMode] = true),
	            console.error(
	              '"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?',
	              tailMode
	            ))
	          : "forwards" !== revealOrder &&
	            "backwards" !== revealOrder &&
	            ((didWarnAboutTailOptions[tailMode] = true),
	            console.error(
	              '<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',
	              tailMode
	            )));
	      a: if (
	        ("forwards" === revealOrder || "backwards" === revealOrder) &&
	        undefined !== nextProps &&
	        null !== nextProps &&
	        false !== nextProps
	      )
	        if (isArrayImpl(nextProps))
	          for (var i = 0; i < nextProps.length; i++) {
	            if (!validateSuspenseListNestedChild(nextProps[i], i)) break a;
	          }
	        else if (((i = getIteratorFn(nextProps)), "function" === typeof i)) {
	          if ((i = i.call(nextProps)))
	            for (var step = i.next(), _i = 0; !step.done; step = i.next()) {
	              if (!validateSuspenseListNestedChild(step.value, _i)) break a;
	              _i++;
	            }
	        } else
	          console.error(
	            'A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',
	            revealOrder
	          );
	      reconcileChildren(current, workInProgress, nextProps, renderLanes);
	      nextProps = suspenseStackCursor.current;
	      if (0 !== (nextProps & ForceSuspenseFallback))
	        (nextProps =
	          (nextProps & SubtreeSuspenseContextMask) | ForceSuspenseFallback),
	          (workInProgress.flags |= 128);
	      else {
	        if (null !== current && 0 !== (current.flags & 128))
	          a: for (current = workInProgress.child; null !== current; ) {
	            if (13 === current.tag)
	              null !== current.memoizedState &&
	                scheduleSuspenseWorkOnFiber(
	                  current,
	                  renderLanes,
	                  workInProgress
	                );
	            else if (19 === current.tag)
	              scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
	            else if (null !== current.child) {
	              current.child.return = current;
	              current = current.child;
	              continue;
	            }
	            if (current === workInProgress) break a;
	            for (; null === current.sibling; ) {
	              if (null === current.return || current.return === workInProgress)
	                break a;
	              current = current.return;
	            }
	            current.sibling.return = current.return;
	            current = current.sibling;
	          }
	        nextProps &= SubtreeSuspenseContextMask;
	      }
	      push(suspenseStackCursor, nextProps, workInProgress);
	      switch (revealOrder) {
	        case "forwards":
	          renderLanes = workInProgress.child;
	          for (revealOrder = null; null !== renderLanes; )
	            (current = renderLanes.alternate),
	              null !== current &&
	                null === findFirstSuspended(current) &&
	                (revealOrder = renderLanes),
	              (renderLanes = renderLanes.sibling);
	          renderLanes = revealOrder;
	          null === renderLanes
	            ? ((revealOrder = workInProgress.child),
	              (workInProgress.child = null))
	            : ((revealOrder = renderLanes.sibling),
	              (renderLanes.sibling = null));
	          initSuspenseListRenderState(
	            workInProgress,
	            false,
	            revealOrder,
	            renderLanes,
	            tailMode
	          );
	          break;
	        case "backwards":
	          renderLanes = null;
	          revealOrder = workInProgress.child;
	          for (workInProgress.child = null; null !== revealOrder; ) {
	            current = revealOrder.alternate;
	            if (null !== current && null === findFirstSuspended(current)) {
	              workInProgress.child = revealOrder;
	              break;
	            }
	            current = revealOrder.sibling;
	            revealOrder.sibling = renderLanes;
	            renderLanes = revealOrder;
	            revealOrder = current;
	          }
	          initSuspenseListRenderState(
	            workInProgress,
	            true,
	            renderLanes,
	            null,
	            tailMode
	          );
	          break;
	        case "together":
	          initSuspenseListRenderState(workInProgress, false, null, null, undefined);
	          break;
	        default:
	          workInProgress.memoizedState = null;
	      }
	      return workInProgress.child;
	    }
	    function bailoutOnAlreadyFinishedWork(
	      current,
	      workInProgress,
	      renderLanes
	    ) {
	      null !== current && (workInProgress.dependencies = current.dependencies);
	      profilerStartTime = -1;
	      workInProgressRootSkippedLanes |= workInProgress.lanes;
	      if (0 === (renderLanes & workInProgress.childLanes))
	        if (null !== current) {
	          if (
	            (propagateParentContextChanges(
	              current,
	              workInProgress,
	              renderLanes,
	              false
	            ),
	            0 === (renderLanes & workInProgress.childLanes))
	          )
	            return null;
	        } else return null;
	      if (null !== current && workInProgress.child !== current.child)
	        throw Error("Resuming work not yet implemented.");
	      if (null !== workInProgress.child) {
	        current = workInProgress.child;
	        renderLanes = createWorkInProgress(current, current.pendingProps);
	        workInProgress.child = renderLanes;
	        for (renderLanes.return = workInProgress; null !== current.sibling; )
	          (current = current.sibling),
	            (renderLanes = renderLanes.sibling =
	              createWorkInProgress(current, current.pendingProps)),
	            (renderLanes.return = workInProgress);
	        renderLanes.sibling = null;
	      }
	      return workInProgress.child;
	    }
	    function checkScheduledUpdateOrContext(current, renderLanes) {
	      if (0 !== (current.lanes & renderLanes)) return true;
	      current = current.dependencies;
	      return null !== current && checkIfContextChanged(current) ? true : false;
	    }
	    function attemptEarlyBailoutIfNoScheduledUpdate(
	      current,
	      workInProgress,
	      renderLanes
	    ) {
	      switch (workInProgress.tag) {
	        case 3:
	          pushHostContainer(
	            workInProgress,
	            workInProgress.stateNode.containerInfo
	          );
	          pushProvider(
	            workInProgress,
	            CacheContext,
	            current.memoizedState.cache
	          );
	          resetHydrationState();
	          break;
	        case 27:
	        case 5:
	          pushHostContext(workInProgress);
	          break;
	        case 4:
	          pushHostContainer(
	            workInProgress,
	            workInProgress.stateNode.containerInfo
	          );
	          break;
	        case 10:
	          pushProvider(
	            workInProgress,
	            workInProgress.type,
	            workInProgress.memoizedProps.value
	          );
	          break;
	        case 12:
	          0 !== (renderLanes & workInProgress.childLanes) &&
	            (workInProgress.flags |= 4);
	          workInProgress.flags |= 2048;
	          var stateNode = workInProgress.stateNode;
	          stateNode.effectDuration = -0;
	          stateNode.passiveEffectDuration = -0;
	          break;
	        case 13:
	          stateNode = workInProgress.memoizedState;
	          if (null !== stateNode) {
	            if (null !== stateNode.dehydrated)
	              return (
	                pushPrimaryTreeSuspenseHandler(workInProgress),
	                (workInProgress.flags |= 128),
	                null
	              );
	            if (0 !== (renderLanes & workInProgress.child.childLanes))
	              return updateSuspenseComponent(
	                current,
	                workInProgress,
	                renderLanes
	              );
	            pushPrimaryTreeSuspenseHandler(workInProgress);
	            current = bailoutOnAlreadyFinishedWork(
	              current,
	              workInProgress,
	              renderLanes
	            );
	            return null !== current ? current.sibling : null;
	          }
	          pushPrimaryTreeSuspenseHandler(workInProgress);
	          break;
	        case 19:
	          var didSuspendBefore = 0 !== (current.flags & 128);
	          stateNode = 0 !== (renderLanes & workInProgress.childLanes);
	          stateNode ||
	            (propagateParentContextChanges(
	              current,
	              workInProgress,
	              renderLanes,
	              false
	            ),
	            (stateNode = 0 !== (renderLanes & workInProgress.childLanes)));
	          if (didSuspendBefore) {
	            if (stateNode)
	              return updateSuspenseListComponent(
	                current,
	                workInProgress,
	                renderLanes
	              );
	            workInProgress.flags |= 128;
	          }
	          didSuspendBefore = workInProgress.memoizedState;
	          null !== didSuspendBefore &&
	            ((didSuspendBefore.rendering = null),
	            (didSuspendBefore.tail = null),
	            (didSuspendBefore.lastEffect = null));
	          push(
	            suspenseStackCursor,
	            suspenseStackCursor.current,
	            workInProgress
	          );
	          if (stateNode) break;
	          else return null;
	        case 22:
	        case 23:
	          return (
	            (workInProgress.lanes = 0),
	            updateOffscreenComponent(current, workInProgress, renderLanes)
	          );
	        case 24:
	          pushProvider(
	            workInProgress,
	            CacheContext,
	            current.memoizedState.cache
	          );
	      }
	      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	    }
	    function beginWork(current, workInProgress, renderLanes) {
	      if (workInProgress._debugNeedsRemount && null !== current) {
	        renderLanes = createFiberFromTypeAndProps(
	          workInProgress.type,
	          workInProgress.key,
	          workInProgress.pendingProps,
	          workInProgress._debugOwner || null,
	          workInProgress.mode,
	          workInProgress.lanes
	        );
	        var returnFiber = workInProgress.return;
	        if (null === returnFiber) throw Error("Cannot swap the root fiber.");
	        current.alternate = null;
	        workInProgress.alternate = null;
	        renderLanes.index = workInProgress.index;
	        renderLanes.sibling = workInProgress.sibling;
	        renderLanes.return = workInProgress.return;
	        renderLanes.ref = workInProgress.ref;
	        renderLanes._debugInfo = workInProgress._debugInfo;
	        if (workInProgress === returnFiber.child)
	          returnFiber.child = renderLanes;
	        else {
	          var prevSibling = returnFiber.child;
	          if (null === prevSibling)
	            throw Error("Expected parent to have a child.");
	          for (; prevSibling.sibling !== workInProgress; )
	            if (((prevSibling = prevSibling.sibling), null === prevSibling))
	              throw Error("Expected to find the previous sibling.");
	          prevSibling.sibling = renderLanes;
	        }
	        workInProgress = returnFiber.deletions;
	        null === workInProgress
	          ? ((returnFiber.deletions = [current]), (returnFiber.flags |= 16))
	          : workInProgress.push(current);
	        renderLanes.flags |= 2;
	        return renderLanes;
	      }
	      if (null !== current)
	        if (
	          current.memoizedProps !== workInProgress.pendingProps ||
	          workInProgress.type !== current.type
	        )
	          didReceiveUpdate = true;
	        else {
	          if (
	            !checkScheduledUpdateOrContext(current, renderLanes) &&
	            0 === (workInProgress.flags & 128)
	          )
	            return (
	              (didReceiveUpdate = false),
	              attemptEarlyBailoutIfNoScheduledUpdate(
	                current,
	                workInProgress,
	                renderLanes
	              )
	            );
	          didReceiveUpdate = 0 !== (current.flags & 131072) ? true : false;
	        }
	      else {
	        didReceiveUpdate = false;
	        if ((returnFiber = isHydrating))
	          warnIfNotHydrating(),
	            (returnFiber = 0 !== (workInProgress.flags & 1048576));
	        returnFiber &&
	          ((returnFiber = workInProgress.index),
	          warnIfNotHydrating(),
	          pushTreeId(workInProgress, treeForkCount, returnFiber));
	      }
	      workInProgress.lanes = 0;
	      switch (workInProgress.tag) {
	        case 16:
	          a: if (
	            ((returnFiber = workInProgress.pendingProps),
	            (current = callLazyInitInDEV(workInProgress.elementType)),
	            (workInProgress.type = current),
	            "function" === typeof current)
	          )
	            shouldConstruct(current)
	              ? ((returnFiber = resolveClassComponentProps(
	                  current,
	                  returnFiber
	                )),
	                (workInProgress.tag = 1),
	                (workInProgress.type = current =
	                  resolveFunctionForHotReloading(current)),
	                (workInProgress = updateClassComponent(
	                  null,
	                  workInProgress,
	                  current,
	                  returnFiber,
	                  renderLanes
	                )))
	              : ((workInProgress.tag = 0),
	                validateFunctionComponentInDev(workInProgress, current),
	                (workInProgress.type = current =
	                  resolveFunctionForHotReloading(current)),
	                (workInProgress = updateFunctionComponent(
	                  null,
	                  workInProgress,
	                  current,
	                  returnFiber,
	                  renderLanes
	                )));
	          else {
	            if (undefined !== current && null !== current)
	              if (
	                ((prevSibling = current.$$typeof),
	                prevSibling === REACT_FORWARD_REF_TYPE)
	              ) {
	                workInProgress.tag = 11;
	                workInProgress.type = current =
	                  resolveForwardRefForHotReloading(current);
	                workInProgress = updateForwardRef(
	                  null,
	                  workInProgress,
	                  current,
	                  returnFiber,
	                  renderLanes
	                );
	                break a;
	              } else if (prevSibling === REACT_MEMO_TYPE) {
	                workInProgress.tag = 14;
	                workInProgress = updateMemoComponent(
	                  null,
	                  workInProgress,
	                  current,
	                  returnFiber,
	                  renderLanes
	                );
	                break a;
	              }
	            workInProgress = "";
	            null !== current &&
	              "object" === typeof current &&
	              current.$$typeof === REACT_LAZY_TYPE &&
	              (workInProgress =
	                " Did you wrap a component in React.lazy() more than once?");
	            current = getComponentNameFromType(current) || current;
	            throw Error(
	              "Element type is invalid. Received a promise that resolves to: " +
	                current +
	                ". Lazy element type must resolve to a class or function." +
	                workInProgress
	            );
	          }
	          return workInProgress;
	        case 0:
	          return updateFunctionComponent(
	            current,
	            workInProgress,
	            workInProgress.type,
	            workInProgress.pendingProps,
	            renderLanes
	          );
	        case 1:
	          return (
	            (returnFiber = workInProgress.type),
	            (prevSibling = resolveClassComponentProps(
	              returnFiber,
	              workInProgress.pendingProps
	            )),
	            updateClassComponent(
	              current,
	              workInProgress,
	              returnFiber,
	              prevSibling,
	              renderLanes
	            )
	          );
	        case 3:
	          a: {
	            pushHostContainer(
	              workInProgress,
	              workInProgress.stateNode.containerInfo
	            );
	            if (null === current)
	              throw Error(
	                "Should have a current fiber. This is a bug in React."
	              );
	            var nextProps = workInProgress.pendingProps;
	            prevSibling = workInProgress.memoizedState;
	            returnFiber = prevSibling.element;
	            cloneUpdateQueue(current, workInProgress);
	            processUpdateQueue(workInProgress, nextProps, null, renderLanes);
	            var nextState = workInProgress.memoizedState;
	            nextProps = nextState.cache;
	            pushProvider(workInProgress, CacheContext, nextProps);
	            nextProps !== prevSibling.cache &&
	              propagateContextChanges(
	                workInProgress,
	                [CacheContext],
	                renderLanes,
	                true
	              );
	            suspendIfUpdateReadFromEntangledAsyncAction();
	            nextProps = nextState.element;
	            if (prevSibling.isDehydrated)
	              if (
	                ((prevSibling = {
	                  element: nextProps,
	                  isDehydrated: false,
	                  cache: nextState.cache
	                }),
	                (workInProgress.updateQueue.baseState = prevSibling),
	                (workInProgress.memoizedState = prevSibling),
	                workInProgress.flags & 256)
	              ) {
	                workInProgress = mountHostRootWithoutHydrating(
	                  current,
	                  workInProgress,
	                  nextProps,
	                  renderLanes
	                );
	                break a;
	              } else if (nextProps !== returnFiber) {
	                returnFiber = createCapturedValueAtFiber(
	                  Error(
	                    "This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."
	                  ),
	                  workInProgress
	                );
	                queueHydrationError(returnFiber);
	                workInProgress = mountHostRootWithoutHydrating(
	                  current,
	                  workInProgress,
	                  nextProps,
	                  renderLanes
	                );
	                break a;
	              } else
	                for (
	                  nextHydratableInstance = getNextHydratable(
	                    workInProgress.stateNode.containerInfo.firstChild
	                  ),
	                    hydrationParentFiber = workInProgress,
	                    isHydrating = true,
	                    hydrationErrors = null,
	                    didSuspendOrErrorDEV = false,
	                    hydrationDiffRootDEV = null,
	                    rootOrSingletonContext = true,
	                    current = mountChildFibers(
	                      workInProgress,
	                      null,
	                      nextProps,
	                      renderLanes
	                    ),
	                    workInProgress.child = current;
	                  current;

	                )
	                  (current.flags = (current.flags & -3) | 4096),
	                    (current = current.sibling);
	            else {
	              resetHydrationState();
	              if (nextProps === returnFiber) {
	                workInProgress = bailoutOnAlreadyFinishedWork(
	                  current,
	                  workInProgress,
	                  renderLanes
	                );
	                break a;
	              }
	              reconcileChildren(
	                current,
	                workInProgress,
	                nextProps,
	                renderLanes
	              );
	            }
	            workInProgress = workInProgress.child;
	          }
	          return workInProgress;
	        case 26:
	          return (
	            markRef(current, workInProgress),
	            null === current
	              ? (current = getResource(
	                  workInProgress.type,
	                  null,
	                  workInProgress.pendingProps,
	                  null
	                ))
	                ? (workInProgress.memoizedState = current)
	                : isHydrating ||
	                  ((current = workInProgress.type),
	                  (renderLanes = workInProgress.pendingProps),
	                  (returnFiber = requiredContext(
	                    rootInstanceStackCursor.current
	                  )),
	                  (returnFiber =
	                    getOwnerDocumentFromRootContainer(
	                      returnFiber
	                    ).createElement(current)),
	                  (returnFiber[internalInstanceKey] = workInProgress),
	                  (returnFiber[internalPropsKey] = renderLanes),
	                  setInitialProperties(returnFiber, current, renderLanes),
	                  markNodeAsHoistable(returnFiber),
	                  (workInProgress.stateNode = returnFiber))
	              : (workInProgress.memoizedState = getResource(
	                  workInProgress.type,
	                  current.memoizedProps,
	                  workInProgress.pendingProps,
	                  current.memoizedState
	                )),
	            null
	          );
	        case 27:
	          return (
	            pushHostContext(workInProgress),
	            null === current &&
	              isHydrating &&
	              ((prevSibling = requiredContext(rootInstanceStackCursor.current)),
	              (returnFiber = getHostContext()),
	              (prevSibling = workInProgress.stateNode =
	                resolveSingletonInstance(
	                  workInProgress.type,
	                  workInProgress.pendingProps,
	                  prevSibling,
	                  returnFiber,
	                  false
	                )),
	              didSuspendOrErrorDEV ||
	                ((returnFiber = diffHydratedProperties(
	                  prevSibling,
	                  workInProgress.type,
	                  workInProgress.pendingProps,
	                  returnFiber
	                )),
	                null !== returnFiber &&
	                  (buildHydrationDiffNode(workInProgress, 0).serverProps =
	                    returnFiber)),
	              (hydrationParentFiber = workInProgress),
	              (rootOrSingletonContext = true),
	              (nextHydratableInstance = getNextHydratable(
	                prevSibling.firstChild
	              ))),
	            (returnFiber = workInProgress.pendingProps.children),
	            null !== current || isHydrating
	              ? reconcileChildren(
	                  current,
	                  workInProgress,
	                  returnFiber,
	                  renderLanes
	                )
	              : (workInProgress.child = reconcileChildFibers(
	                  workInProgress,
	                  null,
	                  returnFiber,
	                  renderLanes
	                )),
	            markRef(current, workInProgress),
	            workInProgress.child
	          );
	        case 5:
	          return (
	            null === current &&
	              isHydrating &&
	              ((nextProps = getHostContext()),
	              (returnFiber = validateDOMNesting(
	                workInProgress.type,
	                nextProps.ancestorInfo
	              )),
	              (prevSibling = nextHydratableInstance),
	              (nextState = !prevSibling) ||
	                ((nextState = canHydrateInstance(
	                  prevSibling,
	                  workInProgress.type,
	                  workInProgress.pendingProps,
	                  rootOrSingletonContext
	                )),
	                null !== nextState
	                  ? ((workInProgress.stateNode = nextState),
	                    didSuspendOrErrorDEV ||
	                      ((nextProps = diffHydratedProperties(
	                        nextState,
	                        workInProgress.type,
	                        workInProgress.pendingProps,
	                        nextProps
	                      )),
	                      null !== nextProps &&
	                        (buildHydrationDiffNode(workInProgress, 0).serverProps =
	                          nextProps)),
	                    (hydrationParentFiber = workInProgress),
	                    (nextHydratableInstance = getNextHydratable(
	                      nextState.firstChild
	                    )),
	                    (rootOrSingletonContext = false),
	                    (nextProps = true))
	                  : (nextProps = false),
	                (nextState = !nextProps)),
	              nextState &&
	                (returnFiber &&
	                  warnNonHydratedInstance(workInProgress, prevSibling),
	                throwOnHydrationMismatch(workInProgress))),
	            pushHostContext(workInProgress),
	            (prevSibling = workInProgress.type),
	            (nextProps = workInProgress.pendingProps),
	            (nextState = null !== current ? current.memoizedProps : null),
	            (returnFiber = nextProps.children),
	            shouldSetTextContent(prevSibling, nextProps)
	              ? (returnFiber = null)
	              : null !== nextState &&
	                shouldSetTextContent(prevSibling, nextState) &&
	                (workInProgress.flags |= 32),
	            null !== workInProgress.memoizedState &&
	              ((prevSibling = renderWithHooks(
	                current,
	                workInProgress,
	                TransitionAwareHostComponent,
	                null,
	                null,
	                renderLanes
	              )),
	              (HostTransitionContext._currentValue = prevSibling)),
	            markRef(current, workInProgress),
	            reconcileChildren(
	              current,
	              workInProgress,
	              returnFiber,
	              renderLanes
	            ),
	            workInProgress.child
	          );
	        case 6:
	          return (
	            null === current &&
	              isHydrating &&
	              ((current = workInProgress.pendingProps),
	              (renderLanes = getHostContext().ancestorInfo.current),
	              (current =
	                null != renderLanes
	                  ? validateTextNesting(current, renderLanes.tag)
	                  : true),
	              (renderLanes = nextHydratableInstance),
	              (returnFiber = !renderLanes) ||
	                ((returnFiber = canHydrateTextInstance(
	                  renderLanes,
	                  workInProgress.pendingProps,
	                  rootOrSingletonContext
	                )),
	                null !== returnFiber
	                  ? ((workInProgress.stateNode = returnFiber),
	                    (hydrationParentFiber = workInProgress),
	                    (nextHydratableInstance = null),
	                    (returnFiber = true))
	                  : (returnFiber = false),
	                (returnFiber = !returnFiber)),
	              returnFiber &&
	                (current &&
	                  warnNonHydratedInstance(workInProgress, renderLanes),
	                throwOnHydrationMismatch(workInProgress))),
	            null
	          );
	        case 13:
	          return updateSuspenseComponent(current, workInProgress, renderLanes);
	        case 4:
	          return (
	            pushHostContainer(
	              workInProgress,
	              workInProgress.stateNode.containerInfo
	            ),
	            (returnFiber = workInProgress.pendingProps),
	            null === current
	              ? (workInProgress.child = reconcileChildFibers(
	                  workInProgress,
	                  null,
	                  returnFiber,
	                  renderLanes
	                ))
	              : reconcileChildren(
	                  current,
	                  workInProgress,
	                  returnFiber,
	                  renderLanes
	                ),
	            workInProgress.child
	          );
	        case 11:
	          return updateForwardRef(
	            current,
	            workInProgress,
	            workInProgress.type,
	            workInProgress.pendingProps,
	            renderLanes
	          );
	        case 7:
	          return (
	            reconcileChildren(
	              current,
	              workInProgress,
	              workInProgress.pendingProps,
	              renderLanes
	            ),
	            workInProgress.child
	          );
	        case 8:
	          return (
	            reconcileChildren(
	              current,
	              workInProgress,
	              workInProgress.pendingProps.children,
	              renderLanes
	            ),
	            workInProgress.child
	          );
	        case 12:
	          return (
	            (workInProgress.flags |= 4),
	            (workInProgress.flags |= 2048),
	            (returnFiber = workInProgress.stateNode),
	            (returnFiber.effectDuration = -0),
	            (returnFiber.passiveEffectDuration = -0),
	            reconcileChildren(
	              current,
	              workInProgress,
	              workInProgress.pendingProps.children,
	              renderLanes
	            ),
	            workInProgress.child
	          );
	        case 10:
	          return (
	            (returnFiber = workInProgress.type),
	            (prevSibling = workInProgress.pendingProps),
	            (nextProps = prevSibling.value),
	            "value" in prevSibling ||
	              hasWarnedAboutUsingNoValuePropOnContextProvider ||
	              ((hasWarnedAboutUsingNoValuePropOnContextProvider = true),
	              console.error(
	                "The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"
	              )),
	            pushProvider(workInProgress, returnFiber, nextProps),
	            reconcileChildren(
	              current,
	              workInProgress,
	              prevSibling.children,
	              renderLanes
	            ),
	            workInProgress.child
	          );
	        case 9:
	          return (
	            (prevSibling = workInProgress.type._context),
	            (returnFiber = workInProgress.pendingProps.children),
	            "function" !== typeof returnFiber &&
	              console.error(
	                "A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."
	              ),
	            prepareToReadContext(workInProgress),
	            (prevSibling = readContext(prevSibling)),
	            markComponentRenderStarted(workInProgress),
	            (returnFiber = callComponentInDEV(
	              returnFiber,
	              prevSibling,
	              undefined
	            )),
	            markComponentRenderStopped(),
	            (workInProgress.flags |= 1),
	            reconcileChildren(
	              current,
	              workInProgress,
	              returnFiber,
	              renderLanes
	            ),
	            workInProgress.child
	          );
	        case 14:
	          return updateMemoComponent(
	            current,
	            workInProgress,
	            workInProgress.type,
	            workInProgress.pendingProps,
	            renderLanes
	          );
	        case 15:
	          return updateSimpleMemoComponent(
	            current,
	            workInProgress,
	            workInProgress.type,
	            workInProgress.pendingProps,
	            renderLanes
	          );
	        case 19:
	          return updateSuspenseListComponent(
	            current,
	            workInProgress,
	            renderLanes
	          );
	        case 22:
	          return updateOffscreenComponent(current, workInProgress, renderLanes);
	        case 24:
	          return (
	            prepareToReadContext(workInProgress),
	            (returnFiber = readContext(CacheContext)),
	            null === current
	              ? ((prevSibling = peekCacheFromPool()),
	                null === prevSibling &&
	                  ((prevSibling = workInProgressRoot),
	                  (nextProps = createCache()),
	                  (prevSibling.pooledCache = nextProps),
	                  retainCache(nextProps),
	                  null !== nextProps &&
	                    (prevSibling.pooledCacheLanes |= renderLanes),
	                  (prevSibling = nextProps)),
	                (workInProgress.memoizedState = {
	                  parent: returnFiber,
	                  cache: prevSibling
	                }),
	                initializeUpdateQueue(workInProgress),
	                pushProvider(workInProgress, CacheContext, prevSibling))
	              : (0 !== (current.lanes & renderLanes) &&
	                  (cloneUpdateQueue(current, workInProgress),
	                  processUpdateQueue(workInProgress, null, null, renderLanes),
	                  suspendIfUpdateReadFromEntangledAsyncAction()),
	                (prevSibling = current.memoizedState),
	                (nextProps = workInProgress.memoizedState),
	                prevSibling.parent !== returnFiber
	                  ? ((prevSibling = {
	                      parent: returnFiber,
	                      cache: returnFiber
	                    }),
	                    (workInProgress.memoizedState = prevSibling),
	                    0 === workInProgress.lanes &&
	                      (workInProgress.memoizedState =
	                        workInProgress.updateQueue.baseState =
	                          prevSibling),
	                    pushProvider(workInProgress, CacheContext, returnFiber))
	                  : ((returnFiber = nextProps.cache),
	                    pushProvider(workInProgress, CacheContext, returnFiber),
	                    returnFiber !== prevSibling.cache &&
	                      propagateContextChanges(
	                        workInProgress,
	                        [CacheContext],
	                        renderLanes,
	                        true
	                      ))),
	            reconcileChildren(
	              current,
	              workInProgress,
	              workInProgress.pendingProps.children,
	              renderLanes
	            ),
	            workInProgress.child
	          );
	        case 29:
	          throw workInProgress.pendingProps;
	      }
	      throw Error(
	        "Unknown unit of work tag (" +
	          workInProgress.tag +
	          "). This error is likely caused by a bug in React. Please file an issue."
	      );
	    }
	    function resetContextDependencies() {
	      lastContextDependency = currentlyRenderingFiber = null;
	      isDisallowedContextReadInDEV = false;
	    }
	    function pushProvider(providerFiber, context, nextValue) {
	      push(valueCursor, context._currentValue, providerFiber);
	      context._currentValue = nextValue;
	      push(rendererCursorDEV, context._currentRenderer, providerFiber);
	      undefined !== context._currentRenderer &&
	        null !== context._currentRenderer &&
	        context._currentRenderer !== rendererSigil &&
	        console.error(
	          "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."
	        );
	      context._currentRenderer = rendererSigil;
	    }
	    function popProvider(context, providerFiber) {
	      context._currentValue = valueCursor.current;
	      var currentRenderer = rendererCursorDEV.current;
	      pop(rendererCursorDEV, providerFiber);
	      context._currentRenderer = currentRenderer;
	      pop(valueCursor, providerFiber);
	    }
	    function scheduleContextWorkOnParentPath(
	      parent,
	      renderLanes,
	      propagationRoot
	    ) {
	      for (; null !== parent; ) {
	        var alternate = parent.alternate;
	        (parent.childLanes & renderLanes) !== renderLanes
	          ? ((parent.childLanes |= renderLanes),
	            null !== alternate && (alternate.childLanes |= renderLanes))
	          : null !== alternate &&
	            (alternate.childLanes & renderLanes) !== renderLanes &&
	            (alternate.childLanes |= renderLanes);
	        if (parent === propagationRoot) break;
	        parent = parent.return;
	      }
	      parent !== propagationRoot &&
	        console.error(
	          "Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue."
	        );
	    }
	    function propagateContextChanges(
	      workInProgress,
	      contexts,
	      renderLanes,
	      forcePropagateEntireTree
	    ) {
	      var fiber = workInProgress.child;
	      null !== fiber && (fiber.return = workInProgress);
	      for (; null !== fiber; ) {
	        var list = fiber.dependencies;
	        if (null !== list) {
	          var nextFiber = fiber.child;
	          list = list.firstContext;
	          a: for (; null !== list; ) {
	            var dependency = list;
	            list = fiber;
	            for (var i = 0; i < contexts.length; i++)
	              if (dependency.context === contexts[i]) {
	                list.lanes |= renderLanes;
	                dependency = list.alternate;
	                null !== dependency && (dependency.lanes |= renderLanes);
	                scheduleContextWorkOnParentPath(
	                  list.return,
	                  renderLanes,
	                  workInProgress
	                );
	                forcePropagateEntireTree || (nextFiber = null);
	                break a;
	              }
	            list = dependency.next;
	          }
	        } else if (18 === fiber.tag) {
	          nextFiber = fiber.return;
	          if (null === nextFiber)
	            throw Error(
	              "We just came from a parent so we must have had a parent. This is a bug in React."
	            );
	          nextFiber.lanes |= renderLanes;
	          list = nextFiber.alternate;
	          null !== list && (list.lanes |= renderLanes);
	          scheduleContextWorkOnParentPath(
	            nextFiber,
	            renderLanes,
	            workInProgress
	          );
	          nextFiber = null;
	        } else nextFiber = fiber.child;
	        if (null !== nextFiber) nextFiber.return = fiber;
	        else
	          for (nextFiber = fiber; null !== nextFiber; ) {
	            if (nextFiber === workInProgress) {
	              nextFiber = null;
	              break;
	            }
	            fiber = nextFiber.sibling;
	            if (null !== fiber) {
	              fiber.return = nextFiber.return;
	              nextFiber = fiber;
	              break;
	            }
	            nextFiber = nextFiber.return;
	          }
	        fiber = nextFiber;
	      }
	    }
	    function propagateParentContextChanges(
	      current,
	      workInProgress,
	      renderLanes,
	      forcePropagateEntireTree
	    ) {
	      current = null;
	      for (
	        var parent = workInProgress, isInsidePropagationBailout = false;
	        null !== parent;

	      ) {
	        if (!isInsidePropagationBailout)
	          if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = true;
	          else if (0 !== (parent.flags & 262144)) break;
	        if (10 === parent.tag) {
	          var currentParent = parent.alternate;
	          if (null === currentParent)
	            throw Error("Should have a current fiber. This is a bug in React.");
	          currentParent = currentParent.memoizedProps;
	          if (null !== currentParent) {
	            var context = parent.type;
	            objectIs(parent.pendingProps.value, currentParent.value) ||
	              (null !== current
	                ? current.push(context)
	                : (current = [context]));
	          }
	        } else if (parent === hostTransitionProviderCursor.current) {
	          currentParent = parent.alternate;
	          if (null === currentParent)
	            throw Error("Should have a current fiber. This is a bug in React.");
	          currentParent.memoizedState.memoizedState !==
	            parent.memoizedState.memoizedState &&
	            (null !== current
	              ? current.push(HostTransitionContext)
	              : (current = [HostTransitionContext]));
	        }
	        parent = parent.return;
	      }
	      null !== current &&
	        propagateContextChanges(
	          workInProgress,
	          current,
	          renderLanes,
	          forcePropagateEntireTree
	        );
	      workInProgress.flags |= 262144;
	    }
	    function checkIfContextChanged(currentDependencies) {
	      for (
	        currentDependencies = currentDependencies.firstContext;
	        null !== currentDependencies;

	      ) {
	        if (
	          !objectIs(
	            currentDependencies.context._currentValue,
	            currentDependencies.memoizedValue
	          )
	        )
	          return true;
	        currentDependencies = currentDependencies.next;
	      }
	      return false;
	    }
	    function prepareToReadContext(workInProgress) {
	      currentlyRenderingFiber = workInProgress;
	      lastContextDependency = null;
	      workInProgress = workInProgress.dependencies;
	      null !== workInProgress && (workInProgress.firstContext = null);
	    }
	    function readContext(context) {
	      isDisallowedContextReadInDEV &&
	        console.error(
	          "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
	        );
	      return readContextForConsumer(currentlyRenderingFiber, context);
	    }
	    function readContextDuringReconciliation(consumer, context) {
	      null === currentlyRenderingFiber && prepareToReadContext(consumer);
	      return readContextForConsumer(consumer, context);
	    }
	    function readContextForConsumer(consumer, context) {
	      var value = context._currentValue;
	      context = { context: context, memoizedValue: value, next: null };
	      if (null === lastContextDependency) {
	        if (null === consumer)
	          throw Error(
	            "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
	          );
	        lastContextDependency = context;
	        consumer.dependencies = {
	          lanes: 0,
	          firstContext: context,
	          _debugThenableState: null
	        };
	        consumer.flags |= 524288;
	      } else lastContextDependency = lastContextDependency.next = context;
	      return value;
	    }
	    function initializeUpdateQueue(fiber) {
	      fiber.updateQueue = {
	        baseState: fiber.memoizedState,
	        firstBaseUpdate: null,
	        lastBaseUpdate: null,
	        shared: { pending: null, lanes: 0, hiddenCallbacks: null },
	        callbacks: null
	      };
	    }
	    function cloneUpdateQueue(current, workInProgress) {
	      current = current.updateQueue;
	      workInProgress.updateQueue === current &&
	        (workInProgress.updateQueue = {
	          baseState: current.baseState,
	          firstBaseUpdate: current.firstBaseUpdate,
	          lastBaseUpdate: current.lastBaseUpdate,
	          shared: current.shared,
	          callbacks: null
	        });
	    }
	    function createUpdate(lane) {
	      return {
	        lane: lane,
	        tag: UpdateState,
	        payload: null,
	        callback: null,
	        next: null
	      };
	    }
	    function enqueueUpdate(fiber, update, lane) {
	      var updateQueue = fiber.updateQueue;
	      if (null === updateQueue) return null;
	      updateQueue = updateQueue.shared;
	      if (
	        currentlyProcessingQueue === updateQueue &&
	        !didWarnUpdateInsideUpdate
	      ) {
	        var componentName = getComponentNameFromFiber(fiber);
	        console.error(
	          "An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.\n\nPlease update the following component: %s",
	          componentName
	        );
	        didWarnUpdateInsideUpdate = true;
	      }
	      if ((executionContext & RenderContext) !== NoContext)
	        return (
	          (componentName = updateQueue.pending),
	          null === componentName
	            ? (update.next = update)
	            : ((update.next = componentName.next),
	              (componentName.next = update)),
	          (updateQueue.pending = update),
	          (update = getRootForUpdatedFiber(fiber)),
	          markUpdateLaneFromFiberToRoot(fiber, null, lane),
	          update
	        );
	      enqueueUpdate$1(fiber, updateQueue, update, lane);
	      return getRootForUpdatedFiber(fiber);
	    }
	    function entangleTransitions(root, fiber, lane) {
	      fiber = fiber.updateQueue;
	      if (null !== fiber && ((fiber = fiber.shared), 0 !== (lane & 4194176))) {
	        var queueLanes = fiber.lanes;
	        queueLanes &= root.pendingLanes;
	        lane |= queueLanes;
	        fiber.lanes = lane;
	        markRootEntangled(root, lane);
	      }
	    }
	    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
	      var queue = workInProgress.updateQueue,
	        current = workInProgress.alternate;
	      if (
	        null !== current &&
	        ((current = current.updateQueue), queue === current)
	      ) {
	        var newFirst = null,
	          newLast = null;
	        queue = queue.firstBaseUpdate;
	        if (null !== queue) {
	          do {
	            var clone = {
	              lane: queue.lane,
	              tag: queue.tag,
	              payload: queue.payload,
	              callback: null,
	              next: null
	            };
	            null === newLast
	              ? (newFirst = newLast = clone)
	              : (newLast = newLast.next = clone);
	            queue = queue.next;
	          } while (null !== queue);
	          null === newLast
	            ? (newFirst = newLast = capturedUpdate)
	            : (newLast = newLast.next = capturedUpdate);
	        } else newFirst = newLast = capturedUpdate;
	        queue = {
	          baseState: current.baseState,
	          firstBaseUpdate: newFirst,
	          lastBaseUpdate: newLast,
	          shared: current.shared,
	          callbacks: current.callbacks
	        };
	        workInProgress.updateQueue = queue;
	        return;
	      }
	      workInProgress = queue.lastBaseUpdate;
	      null === workInProgress
	        ? (queue.firstBaseUpdate = capturedUpdate)
	        : (workInProgress.next = capturedUpdate);
	      queue.lastBaseUpdate = capturedUpdate;
	    }
	    function suspendIfUpdateReadFromEntangledAsyncAction() {
	      if (didReadFromEntangledAsyncAction) {
	        var entangledActionThenable = currentEntangledActionThenable;
	        if (null !== entangledActionThenable) throw entangledActionThenable;
	      }
	    }
	    function processUpdateQueue(
	      workInProgress,
	      props,
	      instance$jscomp$0,
	      renderLanes
	    ) {
	      didReadFromEntangledAsyncAction = false;
	      var queue = workInProgress.updateQueue;
	      hasForceUpdate = false;
	      currentlyProcessingQueue = queue.shared;
	      var firstBaseUpdate = queue.firstBaseUpdate,
	        lastBaseUpdate = queue.lastBaseUpdate,
	        pendingQueue = queue.shared.pending;
	      if (null !== pendingQueue) {
	        queue.shared.pending = null;
	        var lastPendingUpdate = pendingQueue,
	          firstPendingUpdate = lastPendingUpdate.next;
	        lastPendingUpdate.next = null;
	        null === lastBaseUpdate
	          ? (firstBaseUpdate = firstPendingUpdate)
	          : (lastBaseUpdate.next = firstPendingUpdate);
	        lastBaseUpdate = lastPendingUpdate;
	        var current = workInProgress.alternate;
	        null !== current &&
	          ((current = current.updateQueue),
	          (pendingQueue = current.lastBaseUpdate),
	          pendingQueue !== lastBaseUpdate &&
	            (null === pendingQueue
	              ? (current.firstBaseUpdate = firstPendingUpdate)
	              : (pendingQueue.next = firstPendingUpdate),
	            (current.lastBaseUpdate = lastPendingUpdate)));
	      }
	      if (null !== firstBaseUpdate) {
	        var newState = queue.baseState;
	        lastBaseUpdate = 0;
	        current = firstPendingUpdate = lastPendingUpdate = null;
	        pendingQueue = firstBaseUpdate;
	        do {
	          var updateLane = pendingQueue.lane & -536870913,
	            isHiddenUpdate = updateLane !== pendingQueue.lane;
	          if (
	            isHiddenUpdate
	              ? (workInProgressRootRenderLanes & updateLane) === updateLane
	              : (renderLanes & updateLane) === updateLane
	          ) {
	            0 !== updateLane &&
	              updateLane === currentEntangledLane &&
	              (didReadFromEntangledAsyncAction = true);
	            null !== current &&
	              (current = current.next =
	                {
	                  lane: 0,
	                  tag: pendingQueue.tag,
	                  payload: pendingQueue.payload,
	                  callback: null,
	                  next: null
	                });
	            a: {
	              updateLane = workInProgress;
	              var partialState = pendingQueue;
	              var nextProps = props,
	                instance = instance$jscomp$0;
	              switch (partialState.tag) {
	                case ReplaceState:
	                  partialState = partialState.payload;
	                  if ("function" === typeof partialState) {
	                    isDisallowedContextReadInDEV = true;
	                    var nextState = partialState.call(
	                      instance,
	                      newState,
	                      nextProps
	                    );
	                    if (updateLane.mode & StrictLegacyMode) {
	                      setIsStrictModeForDevtools(true);
	                      try {
	                        partialState.call(instance, newState, nextProps);
	                      } finally {
	                        setIsStrictModeForDevtools(false);
	                      }
	                    }
	                    isDisallowedContextReadInDEV = false;
	                    newState = nextState;
	                    break a;
	                  }
	                  newState = partialState;
	                  break a;
	                case CaptureUpdate:
	                  updateLane.flags = (updateLane.flags & -65537) | 128;
	                case UpdateState:
	                  nextState = partialState.payload;
	                  if ("function" === typeof nextState) {
	                    isDisallowedContextReadInDEV = true;
	                    partialState = nextState.call(
	                      instance,
	                      newState,
	                      nextProps
	                    );
	                    if (updateLane.mode & StrictLegacyMode) {
	                      setIsStrictModeForDevtools(true);
	                      try {
	                        nextState.call(instance, newState, nextProps);
	                      } finally {
	                        setIsStrictModeForDevtools(false);
	                      }
	                    }
	                    isDisallowedContextReadInDEV = false;
	                  } else partialState = nextState;
	                  if (null === partialState || undefined === partialState) break a;
	                  newState = assign({}, newState, partialState);
	                  break a;
	                case ForceUpdate:
	                  hasForceUpdate = true;
	              }
	            }
	            updateLane = pendingQueue.callback;
	            null !== updateLane &&
	              ((workInProgress.flags |= 64),
	              isHiddenUpdate && (workInProgress.flags |= 8192),
	              (isHiddenUpdate = queue.callbacks),
	              null === isHiddenUpdate
	                ? (queue.callbacks = [updateLane])
	                : isHiddenUpdate.push(updateLane));
	          } else
	            (isHiddenUpdate = {
	              lane: updateLane,
	              tag: pendingQueue.tag,
	              payload: pendingQueue.payload,
	              callback: pendingQueue.callback,
	              next: null
	            }),
	              null === current
	                ? ((firstPendingUpdate = current = isHiddenUpdate),
	                  (lastPendingUpdate = newState))
	                : (current = current.next = isHiddenUpdate),
	              (lastBaseUpdate |= updateLane);
	          pendingQueue = pendingQueue.next;
	          if (null === pendingQueue)
	            if (((pendingQueue = queue.shared.pending), null === pendingQueue))
	              break;
	            else
	              (isHiddenUpdate = pendingQueue),
	                (pendingQueue = isHiddenUpdate.next),
	                (isHiddenUpdate.next = null),
	                (queue.lastBaseUpdate = isHiddenUpdate),
	                (queue.shared.pending = null);
	        } while (1);
	        null === current && (lastPendingUpdate = newState);
	        queue.baseState = lastPendingUpdate;
	        queue.firstBaseUpdate = firstPendingUpdate;
	        queue.lastBaseUpdate = current;
	        null === firstBaseUpdate && (queue.shared.lanes = 0);
	        workInProgressRootSkippedLanes |= lastBaseUpdate;
	        workInProgress.lanes = lastBaseUpdate;
	        workInProgress.memoizedState = newState;
	      }
	      currentlyProcessingQueue = null;
	    }
	    function callCallback(callback, context) {
	      if ("function" !== typeof callback)
	        throw Error(
	          "Invalid argument passed as callback. Expected a function. Instead received: " +
	            callback
	        );
	      callback.call(context);
	    }
	    function commitHiddenCallbacks(updateQueue, context) {
	      var hiddenCallbacks = updateQueue.shared.hiddenCallbacks;
	      if (null !== hiddenCallbacks)
	        for (
	          updateQueue.shared.hiddenCallbacks = null, updateQueue = 0;
	          updateQueue < hiddenCallbacks.length;
	          updateQueue++
	        )
	          callCallback(hiddenCallbacks[updateQueue], context);
	    }
	    function commitCallbacks(updateQueue, context) {
	      var callbacks = updateQueue.callbacks;
	      if (null !== callbacks)
	        for (
	          updateQueue.callbacks = null, updateQueue = 0;
	          updateQueue < callbacks.length;
	          updateQueue++
	        )
	          callCallback(callbacks[updateQueue], context);
	    }
	    function shouldProfile(current) {
	      return (current.mode & ProfileMode) !== NoMode;
	    }
	    function commitHookLayoutEffects(finishedWork, hookFlags) {
	      shouldProfile(finishedWork)
	        ? (startEffectTimer(),
	          commitHookEffectListMount(hookFlags, finishedWork),
	          recordEffectDuration())
	        : commitHookEffectListMount(hookFlags, finishedWork);
	    }
	    function commitHookLayoutUnmountEffects(
	      finishedWork,
	      nearestMountedAncestor,
	      hookFlags
	    ) {
	      shouldProfile(finishedWork)
	        ? (startEffectTimer(),
	          commitHookEffectListUnmount(
	            hookFlags,
	            finishedWork,
	            nearestMountedAncestor
	          ),
	          recordEffectDuration())
	        : commitHookEffectListUnmount(
	            hookFlags,
	            finishedWork,
	            nearestMountedAncestor
	          );
	    }
	    function commitHookEffectListMount(flags, finishedWork) {
	      try {
	        var updateQueue = finishedWork.updateQueue,
	          lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
	        if (null !== lastEffect) {
	          var firstEffect = lastEffect.next;
	          updateQueue = firstEffect;
	          do {
	            if (
	              (updateQueue.tag & flags) === flags &&
	              ((flags & Passive) !== NoFlags
	                ? null !== injectedProfilingHooks &&
	                  "function" ===
	                    typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted &&
	                  injectedProfilingHooks.markComponentPassiveEffectMountStarted(
	                    finishedWork
	                  )
	                : (flags & Layout) !== NoFlags &&
	                  null !== injectedProfilingHooks &&
	                  "function" ===
	                    typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted &&
	                  injectedProfilingHooks.markComponentLayoutEffectMountStarted(
	                    finishedWork
	                  ),
	              (lastEffect = void 0),
	              (flags & Insertion) !== NoFlags &&
	                (isRunningInsertionEffect = !0),
	              (lastEffect = runWithFiberInDEV(
	                finishedWork,
	                callCreateInDEV,
	                updateQueue
	              )),
	              (flags & Insertion) !== NoFlags &&
	                (isRunningInsertionEffect = !1),
	              (flags & Passive) !== NoFlags
	                ? null !== injectedProfilingHooks &&
	                  "function" ===
	                    typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped &&
	                  injectedProfilingHooks.markComponentPassiveEffectMountStopped()
	                : (flags & Layout) !== NoFlags &&
	                  null !== injectedProfilingHooks &&
	                  "function" ===
	                    typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped &&
	                  injectedProfilingHooks.markComponentLayoutEffectMountStopped(),
	              void 0 !== lastEffect && "function" !== typeof lastEffect)
	            ) {
	              var hookName = void 0;
	              hookName =
	                0 !== (updateQueue.tag & Layout)
	                  ? "useLayoutEffect"
	                  : 0 !== (updateQueue.tag & Insertion)
	                    ? "useInsertionEffect"
	                    : "useEffect";
	              var addendum = void 0;
	              addendum =
	                null === lastEffect
	                  ? " You returned null. If your effect does not require clean up, return undefined (or nothing)."
	                  : "function" === typeof lastEffect.then
	                    ? "\n\nIt looks like you wrote " +
	                      hookName +
	                      "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" +
	                      hookName +
	                      "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching"
	                    : " You returned: " + lastEffect;
	              runWithFiberInDEV(
	                finishedWork,
	                function (n, a) {
	                  console.error(
	                    "%s must not return anything besides a function, which is used for clean-up.%s",
	                    n,
	                    a
	                  );
	                },
	                hookName,
	                addendum
	              );
	            }
	            updateQueue = updateQueue.next;
	          } while (updateQueue !== firstEffect);
	        }
	      } catch (error) {
	        captureCommitPhaseError(finishedWork, finishedWork.return, error);
	      }
	    }
	    function commitHookEffectListUnmount(
	      flags,
	      finishedWork,
	      nearestMountedAncestor
	    ) {
	      try {
	        var updateQueue = finishedWork.updateQueue,
	          lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
	        if (null !== lastEffect) {
	          var firstEffect = lastEffect.next;
	          updateQueue = firstEffect;
	          do {
	            if ((updateQueue.tag & flags) === flags) {
	              var inst = updateQueue.inst,
	                destroy = inst.destroy;
	              void 0 !== destroy &&
	                ((inst.destroy = void 0),
	                (flags & Passive) !== NoFlags
	                  ? null !== injectedProfilingHooks &&
	                    "function" ===
	                      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted &&
	                    injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(
	                      finishedWork
	                    )
	                  : (flags & Layout) !== NoFlags &&
	                    null !== injectedProfilingHooks &&
	                    "function" ===
	                      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted &&
	                    injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(
	                      finishedWork
	                    ),
	                (flags & Insertion) !== NoFlags &&
	                  (isRunningInsertionEffect = !0),
	                runWithFiberInDEV(
	                  finishedWork,
	                  callDestroyInDEV,
	                  finishedWork,
	                  nearestMountedAncestor,
	                  destroy
	                ),
	                (flags & Insertion) !== NoFlags &&
	                  (isRunningInsertionEffect = !1),
	                (flags & Passive) !== NoFlags
	                  ? null !== injectedProfilingHooks &&
	                    "function" ===
	                      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped &&
	                    injectedProfilingHooks.markComponentPassiveEffectUnmountStopped()
	                  : (flags & Layout) !== NoFlags &&
	                    null !== injectedProfilingHooks &&
	                    "function" ===
	                      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped &&
	                    injectedProfilingHooks.markComponentLayoutEffectUnmountStopped());
	            }
	            updateQueue = updateQueue.next;
	          } while (updateQueue !== firstEffect);
	        }
	      } catch (error) {
	        captureCommitPhaseError(finishedWork, finishedWork.return, error);
	      }
	    }
	    function commitHookPassiveMountEffects(finishedWork, hookFlags) {
	      shouldProfile(finishedWork)
	        ? (startEffectTimer(),
	          commitHookEffectListMount(hookFlags, finishedWork),
	          recordEffectDuration())
	        : commitHookEffectListMount(hookFlags, finishedWork);
	    }
	    function commitHookPassiveUnmountEffects(
	      finishedWork,
	      nearestMountedAncestor,
	      hookFlags
	    ) {
	      shouldProfile(finishedWork)
	        ? (startEffectTimer(),
	          commitHookEffectListUnmount(
	            hookFlags,
	            finishedWork,
	            nearestMountedAncestor
	          ),
	          recordEffectDuration())
	        : commitHookEffectListUnmount(
	            hookFlags,
	            finishedWork,
	            nearestMountedAncestor
	          );
	    }
	    function commitClassCallbacks(finishedWork) {
	      var updateQueue = finishedWork.updateQueue;
	      if (null !== updateQueue) {
	        var instance = finishedWork.stateNode;
	        finishedWork.type.defaultProps ||
	          "ref" in finishedWork.memoizedProps ||
	          didWarnAboutReassigningProps ||
	          (instance.props !== finishedWork.memoizedProps &&
	            console.error(
	              "Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
	              getComponentNameFromFiber(finishedWork) || "instance"
	            ),
	          instance.state !== finishedWork.memoizedState &&
	            console.error(
	              "Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
	              getComponentNameFromFiber(finishedWork) || "instance"
	            ));
	        try {
	          runWithFiberInDEV(
	            finishedWork,
	            commitCallbacks,
	            updateQueue,
	            instance
	          );
	        } catch (error) {
	          captureCommitPhaseError(finishedWork, finishedWork.return, error);
	        }
	      }
	    }
	    function callGetSnapshotBeforeUpdates(instance, prevProps, prevState) {
	      return instance.getSnapshotBeforeUpdate(prevProps, prevState);
	    }
	    function commitClassSnapshot(finishedWork, current) {
	      var prevProps = current.memoizedProps,
	        prevState = current.memoizedState;
	      current = finishedWork.stateNode;
	      finishedWork.type.defaultProps ||
	        "ref" in finishedWork.memoizedProps ||
	        didWarnAboutReassigningProps ||
	        (current.props !== finishedWork.memoizedProps &&
	          console.error(
	            "Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
	            getComponentNameFromFiber(finishedWork) || "instance"
	          ),
	        current.state !== finishedWork.memoizedState &&
	          console.error(
	            "Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
	            getComponentNameFromFiber(finishedWork) || "instance"
	          ));
	      try {
	        var resolvedPrevProps = resolveClassComponentProps(
	          finishedWork.type,
	          prevProps,
	          finishedWork.elementType === finishedWork.type
	        );
	        var snapshot = runWithFiberInDEV(
	          finishedWork,
	          callGetSnapshotBeforeUpdates,
	          current,
	          resolvedPrevProps,
	          prevState
	        );
	        prevProps = didWarnAboutUndefinedSnapshotBeforeUpdate;
	        void 0 !== snapshot ||
	          prevProps.has(finishedWork.type) ||
	          (prevProps.add(finishedWork.type),
	          runWithFiberInDEV(finishedWork, function () {
	            console.error(
	              "%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",
	              getComponentNameFromFiber(finishedWork)
	            );
	          }));
	        current.__reactInternalSnapshotBeforeUpdate = snapshot;
	      } catch (error) {
	        captureCommitPhaseError(finishedWork, finishedWork.return, error);
	      }
	    }
	    function safelyCallComponentWillUnmount(
	      current,
	      nearestMountedAncestor,
	      instance
	    ) {
	      instance.props = resolveClassComponentProps(
	        current.type,
	        current.memoizedProps
	      );
	      instance.state = current.memoizedState;
	      shouldProfile(current)
	        ? (startEffectTimer(),
	          runWithFiberInDEV(
	            current,
	            callComponentWillUnmountInDEV,
	            current,
	            nearestMountedAncestor,
	            instance
	          ),
	          recordEffectDuration())
	        : runWithFiberInDEV(
	            current,
	            callComponentWillUnmountInDEV,
	            current,
	            nearestMountedAncestor,
	            instance
	          );
	    }
	    function commitAttachRef(finishedWork) {
	      var ref = finishedWork.ref;
	      if (null !== ref) {
	        var instance = finishedWork.stateNode;
	        if ("function" === typeof ref)
	          if (shouldProfile(finishedWork))
	            try {
	              startEffectTimer(), (finishedWork.refCleanup = ref(instance));
	            } finally {
	              recordEffectDuration();
	            }
	          else finishedWork.refCleanup = ref(instance);
	        else
	          "string" === typeof ref
	            ? console.error("String refs are no longer supported.")
	            : ref.hasOwnProperty("current") ||
	              console.error(
	                "Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().",
	                getComponentNameFromFiber(finishedWork)
	              ),
	            (ref.current = instance);
	      }
	    }
	    function safelyAttachRef(current, nearestMountedAncestor) {
	      try {
	        runWithFiberInDEV(current, commitAttachRef, current);
	      } catch (error) {
	        captureCommitPhaseError(current, nearestMountedAncestor, error);
	      }
	    }
	    function safelyDetachRef(current, nearestMountedAncestor) {
	      var ref = current.ref,
	        refCleanup = current.refCleanup;
	      if (null !== ref)
	        if ("function" === typeof refCleanup)
	          try {
	            if (shouldProfile(current))
	              try {
	                startEffectTimer(), runWithFiberInDEV(current, refCleanup);
	              } finally {
	                recordEffectDuration(current);
	              }
	            else runWithFiberInDEV(current, refCleanup);
	          } catch (error) {
	            captureCommitPhaseError(current, nearestMountedAncestor, error);
	          } finally {
	            (current.refCleanup = null),
	              (current = current.alternate),
	              null != current && (current.refCleanup = null);
	          }
	        else if ("function" === typeof ref)
	          try {
	            if (shouldProfile(current))
	              try {
	                startEffectTimer(), runWithFiberInDEV(current, ref, null);
	              } finally {
	                recordEffectDuration(current);
	              }
	            else runWithFiberInDEV(current, ref, null);
	          } catch (error$6) {
	            captureCommitPhaseError(current, nearestMountedAncestor, error$6);
	          }
	        else ref.current = null;
	    }
	    function commitProfiler(
	      finishedWork,
	      current,
	      commitStartTime,
	      effectDuration
	    ) {
	      var _finishedWork$memoize = finishedWork.memoizedProps,
	        id = _finishedWork$memoize.id,
	        onCommit = _finishedWork$memoize.onCommit;
	      _finishedWork$memoize = _finishedWork$memoize.onRender;
	      current = null === current ? "mount" : "update";
	      currentUpdateIsNested && (current = "nested-update");
	      "function" === typeof _finishedWork$memoize &&
	        _finishedWork$memoize(
	          id,
	          current,
	          finishedWork.actualDuration,
	          finishedWork.treeBaseDuration,
	          finishedWork.actualStartTime,
	          commitStartTime
	        );
	      "function" === typeof onCommit &&
	        onCommit(
	          finishedWork.memoizedProps.id,
	          current,
	          effectDuration,
	          commitStartTime
	        );
	    }
	    function commitProfilerPostCommitImpl(
	      finishedWork,
	      current,
	      commitStartTime,
	      passiveEffectDuration
	    ) {
	      var _finishedWork$memoize2 = finishedWork.memoizedProps;
	      finishedWork = _finishedWork$memoize2.id;
	      _finishedWork$memoize2 = _finishedWork$memoize2.onPostCommit;
	      current = null === current ? "mount" : "update";
	      currentUpdateIsNested && (current = "nested-update");
	      "function" === typeof _finishedWork$memoize2 &&
	        _finishedWork$memoize2(
	          finishedWork,
	          current,
	          passiveEffectDuration,
	          commitStartTime
	        );
	    }
	    function commitHostMount(finishedWork) {
	      var type = finishedWork.type,
	        props = finishedWork.memoizedProps,
	        instance = finishedWork.stateNode;
	      try {
	        runWithFiberInDEV(
	          finishedWork,
	          commitMount,
	          instance,
	          type,
	          props,
	          finishedWork
	        );
	      } catch (error) {
	        captureCommitPhaseError(finishedWork, finishedWork.return, error);
	      }
	    }
	    function commitHostUpdate(finishedWork, newProps, oldProps) {
	      try {
	        runWithFiberInDEV(
	          finishedWork,
	          commitUpdate,
	          finishedWork.stateNode,
	          finishedWork.type,
	          oldProps,
	          newProps,
	          finishedWork
	        );
	      } catch (error) {
	        captureCommitPhaseError(finishedWork, finishedWork.return, error);
	      }
	    }
	    function isHostParent(fiber) {
	      return (
	        5 === fiber.tag ||
	        3 === fiber.tag ||
	        26 === fiber.tag ||
	        27 === fiber.tag ||
	        4 === fiber.tag
	      );
	    }
	    function getHostSibling(fiber) {
	      a: for (;;) {
	        for (; null === fiber.sibling; ) {
	          if (null === fiber.return || isHostParent(fiber.return)) return null;
	          fiber = fiber.return;
	        }
	        fiber.sibling.return = fiber.return;
	        for (
	          fiber = fiber.sibling;
	          5 !== fiber.tag &&
	          6 !== fiber.tag &&
	          27 !== fiber.tag &&
	          18 !== fiber.tag;

	        ) {
	          if (fiber.flags & 2) continue a;
	          if (null === fiber.child || 4 === fiber.tag) continue a;
	          else (fiber.child.return = fiber), (fiber = fiber.child);
	        }
	        if (!(fiber.flags & 2)) return fiber.stateNode;
	      }
	    }
	    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
	      var tag = node.tag;
	      if (5 === tag || 6 === tag)
	        (node = node.stateNode),
	          before
	            ? 8 === parent.nodeType
	              ? parent.parentNode.insertBefore(node, before)
	              : parent.insertBefore(node, before)
	            : (8 === parent.nodeType
	                ? ((before = parent.parentNode),
	                  before.insertBefore(node, parent))
	                : ((before = parent), before.appendChild(node)),
	              (parent = parent._reactRootContainer),
	              (null !== parent && undefined !== parent) ||
	                null !== before.onclick ||
	                (before.onclick = noop$1));
	      else if (4 !== tag && 27 !== tag && ((node = node.child), null !== node))
	        for (
	          insertOrAppendPlacementNodeIntoContainer(node, before, parent),
	            node = node.sibling;
	          null !== node;

	        )
	          insertOrAppendPlacementNodeIntoContainer(node, before, parent),
	            (node = node.sibling);
	    }
	    function insertOrAppendPlacementNode(node, before, parent) {
	      var tag = node.tag;
	      if (5 === tag || 6 === tag)
	        (node = node.stateNode),
	          before ? parent.insertBefore(node, before) : parent.appendChild(node);
	      else if (4 !== tag && 27 !== tag && ((node = node.child), null !== node))
	        for (
	          insertOrAppendPlacementNode(node, before, parent),
	            node = node.sibling;
	          null !== node;

	        )
	          insertOrAppendPlacementNode(node, before, parent),
	            (node = node.sibling);
	    }
	    function commitPlacement(finishedWork) {
	      if (27 !== finishedWork.tag) {
	        a: {
	          for (var parent = finishedWork.return; null !== parent; ) {
	            if (isHostParent(parent)) {
	              var parentFiber = parent;
	              break a;
	            }
	            parent = parent.return;
	          }
	          throw Error(
	            "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
	          );
	        }
	        switch (parentFiber.tag) {
	          case 27:
	            parent = parentFiber.stateNode;
	            parentFiber = getHostSibling(finishedWork);
	            insertOrAppendPlacementNode(finishedWork, parentFiber, parent);
	            break;
	          case 5:
	            parent = parentFiber.stateNode;
	            parentFiber.flags & 32 &&
	              (resetTextContent(parent), (parentFiber.flags &= -33));
	            parentFiber = getHostSibling(finishedWork);
	            insertOrAppendPlacementNode(finishedWork, parentFiber, parent);
	            break;
	          case 3:
	          case 4:
	            parent = parentFiber.stateNode.containerInfo;
	            parentFiber = getHostSibling(finishedWork);
	            insertOrAppendPlacementNodeIntoContainer(
	              finishedWork,
	              parentFiber,
	              parent
	            );
	            break;
	          default:
	            throw Error(
	              "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue."
	            );
	        }
	      }
	    }
	    function commitBeforeMutationEffects(root, firstChild) {
	      root = root.containerInfo;
	      eventsEnabled = _enabled;
	      root = getActiveElementDeep(root);
	      if (hasSelectionCapabilities(root)) {
	        if ("selectionStart" in root)
	          var JSCompiler_temp = {
	            start: root.selectionStart,
	            end: root.selectionEnd
	          };
	        else
	          a: {
	            JSCompiler_temp =
	              ((JSCompiler_temp = root.ownerDocument) &&
	                JSCompiler_temp.defaultView) ||
	              window;
	            var selection =
	              JSCompiler_temp.getSelection && JSCompiler_temp.getSelection();
	            if (selection && 0 !== selection.rangeCount) {
	              JSCompiler_temp = selection.anchorNode;
	              var anchorOffset = selection.anchorOffset,
	                focusNode = selection.focusNode;
	              selection = selection.focusOffset;
	              try {
	                JSCompiler_temp.nodeType, focusNode.nodeType;
	              } catch (e$2) {
	                JSCompiler_temp = null;
	                break a;
	              }
	              var length = 0,
	                start = -1,
	                end = -1,
	                indexWithinAnchor = 0,
	                indexWithinFocus = 0,
	                node = root,
	                parentNode = null;
	              b: for (;;) {
	                for (var next; ; ) {
	                  node !== JSCompiler_temp ||
	                    (0 !== anchorOffset && 3 !== node.nodeType) ||
	                    (start = length + anchorOffset);
	                  node !== focusNode ||
	                    (0 !== selection && 3 !== node.nodeType) ||
	                    (end = length + selection);
	                  3 === node.nodeType && (length += node.nodeValue.length);
	                  if (null === (next = node.firstChild)) break;
	                  parentNode = node;
	                  node = next;
	                }
	                for (;;) {
	                  if (node === root) break b;
	                  parentNode === JSCompiler_temp &&
	                    ++indexWithinAnchor === anchorOffset &&
	                    (start = length);
	                  parentNode === focusNode &&
	                    ++indexWithinFocus === selection &&
	                    (end = length);
	                  if (null !== (next = node.nextSibling)) break;
	                  node = parentNode;
	                  parentNode = node.parentNode;
	                }
	                node = next;
	              }
	              JSCompiler_temp =
	                -1 === start || -1 === end ? null : { start: start, end: end };
	            } else JSCompiler_temp = null;
	          }
	        JSCompiler_temp = JSCompiler_temp || { start: 0, end: 0 };
	      } else JSCompiler_temp = null;
	      selectionInformation = {
	        focusedElem: root,
	        selectionRange: JSCompiler_temp
	      };
	      _enabled = false;
	      for (nextEffect = firstChild; null !== nextEffect; )
	        if (
	          ((firstChild = nextEffect),
	          (root = firstChild.child),
	          0 !== (firstChild.subtreeFlags & 1028) && null !== root)
	        )
	          (root.return = firstChild), (nextEffect = root);
	        else
	          for (; null !== nextEffect; ) {
	            root = firstChild = nextEffect;
	            JSCompiler_temp = root.alternate;
	            anchorOffset = root.flags;
	            switch (root.tag) {
	              case 0:
	                break;
	              case 11:
	              case 15:
	                break;
	              case 1:
	                0 !== (anchorOffset & 1024) &&
	                  null !== JSCompiler_temp &&
	                  commitClassSnapshot(root, JSCompiler_temp);
	                break;
	              case 3:
	                if (0 !== (anchorOffset & 1024))
	                  if (
	                    ((root = root.stateNode.containerInfo),
	                    (JSCompiler_temp = root.nodeType),
	                    9 === JSCompiler_temp)
	                  )
	                    clearContainerSparingly(root);
	                  else if (1 === JSCompiler_temp)
	                    switch (root.nodeName) {
	                      case "HEAD":
	                      case "HTML":
	                      case "BODY":
	                        clearContainerSparingly(root);
	                        break;
	                      default:
	                        root.textContent = "";
	                    }
	                break;
	              case 5:
	              case 26:
	              case 27:
	              case 6:
	              case 4:
	              case 17:
	                break;
	              default:
	                if (0 !== (anchorOffset & 1024))
	                  throw Error(
	                    "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
	                  );
	            }
	            root = firstChild.sibling;
	            if (null !== root) {
	              root.return = firstChild.return;
	              nextEffect = root;
	              break;
	            }
	            nextEffect = firstChild.return;
	          }
	      firstChild = shouldFireAfterActiveInstanceBlur;
	      shouldFireAfterActiveInstanceBlur = false;
	      return firstChild;
	    }
	    function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {
	      var flags = finishedWork.flags;
	      switch (finishedWork.tag) {
	        case 0:
	        case 11:
	        case 15:
	          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	          flags & 4 &&
	            commitHookLayoutEffects(finishedWork, Layout | HasEffect);
	          break;
	        case 1:
	          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	          if (flags & 4)
	            if (((finishedRoot = finishedWork.stateNode), null === current))
	              finishedWork.type.defaultProps ||
	                "ref" in finishedWork.memoizedProps ||
	                didWarnAboutReassigningProps ||
	                (finishedRoot.props !== finishedWork.memoizedProps &&
	                  console.error(
	                    "Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
	                    getComponentNameFromFiber(finishedWork) || "instance"
	                  ),
	                finishedRoot.state !== finishedWork.memoizedState &&
	                  console.error(
	                    "Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
	                    getComponentNameFromFiber(finishedWork) || "instance"
	                  )),
	                shouldProfile(finishedWork)
	                  ? (startEffectTimer(),
	                    runWithFiberInDEV(
	                      finishedWork,
	                      callComponentDidMountInDEV,
	                      finishedWork,
	                      finishedRoot
	                    ),
	                    recordEffectDuration())
	                  : runWithFiberInDEV(
	                      finishedWork,
	                      callComponentDidMountInDEV,
	                      finishedWork,
	                      finishedRoot
	                    );
	            else {
	              var prevProps = resolveClassComponentProps(
	                finishedWork.type,
	                current.memoizedProps
	              );
	              current = current.memoizedState;
	              finishedWork.type.defaultProps ||
	                "ref" in finishedWork.memoizedProps ||
	                didWarnAboutReassigningProps ||
	                (finishedRoot.props !== finishedWork.memoizedProps &&
	                  console.error(
	                    "Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
	                    getComponentNameFromFiber(finishedWork) || "instance"
	                  ),
	                finishedRoot.state !== finishedWork.memoizedState &&
	                  console.error(
	                    "Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
	                    getComponentNameFromFiber(finishedWork) || "instance"
	                  ));
	              shouldProfile(finishedWork)
	                ? (startEffectTimer(),
	                  runWithFiberInDEV(
	                    finishedWork,
	                    callComponentDidUpdateInDEV,
	                    finishedWork,
	                    finishedRoot,
	                    prevProps,
	                    current,
	                    finishedRoot.__reactInternalSnapshotBeforeUpdate
	                  ),
	                  recordEffectDuration())
	                : runWithFiberInDEV(
	                    finishedWork,
	                    callComponentDidUpdateInDEV,
	                    finishedWork,
	                    finishedRoot,
	                    prevProps,
	                    current,
	                    finishedRoot.__reactInternalSnapshotBeforeUpdate
	                  );
	            }
	          flags & 64 && commitClassCallbacks(finishedWork);
	          flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
	          break;
	        case 3:
	          current = pushNestedEffectDurations();
	          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	          if (
	            flags & 64 &&
	            ((flags = finishedWork.updateQueue), null !== flags)
	          ) {
	            prevProps = null;
	            if (null !== finishedWork.child)
	              switch (finishedWork.child.tag) {
	                case 27:
	                case 5:
	                  prevProps = finishedWork.child.stateNode;
	                  break;
	                case 1:
	                  prevProps = finishedWork.child.stateNode;
	              }
	            try {
	              runWithFiberInDEV(
	                finishedWork,
	                commitCallbacks,
	                flags,
	                prevProps
	              );
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }
	          finishedRoot.effectDuration += popNestedEffectDurations(current);
	          break;
	        case 26:
	          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	          flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
	          break;
	        case 27:
	        case 5:
	          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	          null === current && flags & 4 && commitHostMount(finishedWork);
	          flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
	          break;
	        case 12:
	          if (flags & 4) {
	            flags = pushNestedEffectDurations();
	            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	            finishedRoot = finishedWork.stateNode;
	            finishedRoot.effectDuration += bubbleNestedEffectDurations(flags);
	            try {
	              runWithFiberInDEV(
	                finishedWork,
	                commitProfiler,
	                finishedWork,
	                current,
	                commitStartTime,
	                finishedRoot.effectDuration
	              );
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          } else recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	          break;
	        case 13:
	          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	          flags & 4 &&
	            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
	          break;
	        case 22:
	          prevProps =
	            null !== finishedWork.memoizedState || offscreenSubtreeIsHidden;
	          if (!prevProps) {
	            current =
	              (null !== current && null !== current.memoizedState) ||
	              offscreenSubtreeWasHidden;
	            var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden,
	              prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
	            offscreenSubtreeIsHidden = prevProps;
	            (offscreenSubtreeWasHidden = current) &&
	            !prevOffscreenSubtreeWasHidden
	              ? recursivelyTraverseReappearLayoutEffects(
	                  finishedRoot,
	                  finishedWork,
	                  0 !== (finishedWork.subtreeFlags & 8772)
	                )
	              : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
	            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
	          }
	          flags & 512 &&
	            ("manual" === finishedWork.memoizedProps.mode
	              ? safelyAttachRef(finishedWork, finishedWork.return)
	              : safelyDetachRef(finishedWork, finishedWork.return));
	          break;
	        default:
	          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	      }
	    }
	    function detachFiberAfterEffects(fiber) {
	      var alternate = fiber.alternate;
	      null !== alternate &&
	        ((fiber.alternate = null), detachFiberAfterEffects(alternate));
	      fiber.child = null;
	      fiber.deletions = null;
	      fiber.sibling = null;
	      5 === fiber.tag &&
	        ((alternate = fiber.stateNode),
	        null !== alternate && detachDeletedInstance(alternate));
	      fiber.stateNode = null;
	      fiber._debugOwner = null;
	      fiber.return = null;
	      fiber.dependencies = null;
	      fiber.memoizedProps = null;
	      fiber.memoizedState = null;
	      fiber.pendingProps = null;
	      fiber.stateNode = null;
	      fiber.updateQueue = null;
	    }
	    function recursivelyTraverseDeletionEffects(
	      finishedRoot,
	      nearestMountedAncestor,
	      parent
	    ) {
	      for (parent = parent.child; null !== parent; )
	        commitDeletionEffectsOnFiber(
	          finishedRoot,
	          nearestMountedAncestor,
	          parent
	        ),
	          (parent = parent.sibling);
	    }
	    function commitDeletionEffectsOnFiber(
	      finishedRoot,
	      nearestMountedAncestor,
	      deletedFiber
	    ) {
	      if (
	        injectedHook &&
	        "function" === typeof injectedHook.onCommitFiberUnmount
	      )
	        try {
	          injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
	        } catch (err) {
	          hasLoggedError ||
	            ((hasLoggedError = true),
	            console.error(
	              "React instrumentation encountered an error: %s",
	              err
	            ));
	        }
	      switch (deletedFiber.tag) {
	        case 26:
	          offscreenSubtreeWasHidden ||
	            safelyDetachRef(deletedFiber, nearestMountedAncestor);
	          recursivelyTraverseDeletionEffects(
	            finishedRoot,
	            nearestMountedAncestor,
	            deletedFiber
	          );
	          deletedFiber.memoizedState
	            ? deletedFiber.memoizedState.count--
	            : deletedFiber.stateNode &&
	              ((deletedFiber = deletedFiber.stateNode),
	              deletedFiber.parentNode.removeChild(deletedFiber));
	          break;
	        case 27:
	          offscreenSubtreeWasHidden ||
	            safelyDetachRef(deletedFiber, nearestMountedAncestor);
	          var prevHostParent = hostParent,
	            prevHostParentIsContainer = hostParentIsContainer;
	          hostParent = deletedFiber.stateNode;
	          recursivelyTraverseDeletionEffects(
	            finishedRoot,
	            nearestMountedAncestor,
	            deletedFiber
	          );
	          deletedFiber = deletedFiber.stateNode;
	          for (finishedRoot = deletedFiber.attributes; finishedRoot.length; )
	            deletedFiber.removeAttributeNode(finishedRoot[0]);
	          detachDeletedInstance(deletedFiber);
	          hostParent = prevHostParent;
	          hostParentIsContainer = prevHostParentIsContainer;
	          break;
	        case 5:
	          offscreenSubtreeWasHidden ||
	            safelyDetachRef(deletedFiber, nearestMountedAncestor);
	        case 6:
	          prevHostParent = hostParent;
	          prevHostParentIsContainer = hostParentIsContainer;
	          hostParent = null;
	          recursivelyTraverseDeletionEffects(
	            finishedRoot,
	            nearestMountedAncestor,
	            deletedFiber
	          );
	          hostParent = prevHostParent;
	          hostParentIsContainer = prevHostParentIsContainer;
	          if (null !== hostParent)
	            if (hostParentIsContainer)
	              try {
	                runWithFiberInDEV(
	                  deletedFiber,
	                  removeChildFromContainer,
	                  hostParent,
	                  deletedFiber.stateNode
	                );
	              } catch (error) {
	                captureCommitPhaseError(
	                  deletedFiber,
	                  nearestMountedAncestor,
	                  error
	                );
	              }
	            else
	              try {
	                runWithFiberInDEV(
	                  deletedFiber,
	                  removeChild,
	                  hostParent,
	                  deletedFiber.stateNode
	                );
	              } catch (error) {
	                captureCommitPhaseError(
	                  deletedFiber,
	                  nearestMountedAncestor,
	                  error
	                );
	              }
	          break;
	        case 18:
	          null !== hostParent &&
	            (hostParentIsContainer
	              ? ((finishedRoot = hostParent),
	                (deletedFiber = deletedFiber.stateNode),
	                8 === finishedRoot.nodeType
	                  ? clearSuspenseBoundary(finishedRoot.parentNode, deletedFiber)
	                  : 1 === finishedRoot.nodeType &&
	                    clearSuspenseBoundary(finishedRoot, deletedFiber),
	                retryIfBlockedOn(finishedRoot))
	              : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
	          break;
	        case 4:
	          prevHostParent = hostParent;
	          prevHostParentIsContainer = hostParentIsContainer;
	          hostParent = deletedFiber.stateNode.containerInfo;
	          hostParentIsContainer = true;
	          recursivelyTraverseDeletionEffects(
	            finishedRoot,
	            nearestMountedAncestor,
	            deletedFiber
	          );
	          hostParent = prevHostParent;
	          hostParentIsContainer = prevHostParentIsContainer;
	          break;
	        case 0:
	        case 11:
	        case 14:
	        case 15:
	          offscreenSubtreeWasHidden ||
	            commitHookEffectListUnmount(
	              Insertion,
	              deletedFiber,
	              nearestMountedAncestor
	            );
	          offscreenSubtreeWasHidden ||
	            commitHookLayoutUnmountEffects(
	              deletedFiber,
	              nearestMountedAncestor,
	              Layout
	            );
	          recursivelyTraverseDeletionEffects(
	            finishedRoot,
	            nearestMountedAncestor,
	            deletedFiber
	          );
	          break;
	        case 1:
	          offscreenSubtreeWasHidden ||
	            (safelyDetachRef(deletedFiber, nearestMountedAncestor),
	            (prevHostParent = deletedFiber.stateNode),
	            "function" === typeof prevHostParent.componentWillUnmount &&
	              safelyCallComponentWillUnmount(
	                deletedFiber,
	                nearestMountedAncestor,
	                prevHostParent
	              ));
	          recursivelyTraverseDeletionEffects(
	            finishedRoot,
	            nearestMountedAncestor,
	            deletedFiber
	          );
	          break;
	        case 21:
	          recursivelyTraverseDeletionEffects(
	            finishedRoot,
	            nearestMountedAncestor,
	            deletedFiber
	          );
	          break;
	        case 22:
	          offscreenSubtreeWasHidden ||
	            safelyDetachRef(deletedFiber, nearestMountedAncestor);
	          offscreenSubtreeWasHidden =
	            (prevHostParent = offscreenSubtreeWasHidden) ||
	            null !== deletedFiber.memoizedState;
	          recursivelyTraverseDeletionEffects(
	            finishedRoot,
	            nearestMountedAncestor,
	            deletedFiber
	          );
	          offscreenSubtreeWasHidden = prevHostParent;
	          break;
	        default:
	          recursivelyTraverseDeletionEffects(
	            finishedRoot,
	            nearestMountedAncestor,
	            deletedFiber
	          );
	      }
	    }
	    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
	      if (
	        null === finishedWork.memoizedState &&
	        ((finishedRoot = finishedWork.alternate),
	        null !== finishedRoot &&
	          ((finishedRoot = finishedRoot.memoizedState),
	          null !== finishedRoot &&
	            ((finishedRoot = finishedRoot.dehydrated), null !== finishedRoot)))
	      )
	        try {
	          runWithFiberInDEV(
	            finishedWork,
	            commitHydratedSuspenseInstance,
	            finishedRoot
	          );
	        } catch (error) {
	          captureCommitPhaseError(finishedWork, finishedWork.return, error);
	        }
	    }
	    function getRetryCache(finishedWork) {
	      switch (finishedWork.tag) {
	        case 13:
	        case 19:
	          var retryCache = finishedWork.stateNode;
	          null === retryCache &&
	            (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
	          return retryCache;
	        case 22:
	          return (
	            (finishedWork = finishedWork.stateNode),
	            (retryCache = finishedWork._retryCache),
	            null === retryCache &&
	              (retryCache = finishedWork._retryCache = new PossiblyWeakSet()),
	            retryCache
	          );
	        default:
	          throw Error(
	            "Unexpected Suspense handler tag (" +
	              finishedWork.tag +
	              "). This is a bug in React."
	          );
	      }
	    }
	    function attachSuspenseRetryListeners(finishedWork, wakeables) {
	      var retryCache = getRetryCache(finishedWork);
	      wakeables.forEach(function (wakeable) {
	        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
	        if (!retryCache.has(wakeable)) {
	          retryCache.add(wakeable);
	          if (isDevToolsPresent)
	            if (null !== inProgressLanes && null !== inProgressRoot)
	              restorePendingUpdaters(inProgressRoot, inProgressLanes);
	            else
	              throw Error(
	                "Expected finished root and lanes to be set. This is a bug in React."
	              );
	          wakeable.then(retry, retry);
	        }
	      });
	    }
	    function commitMutationEffects(root, finishedWork, committedLanes) {
	      inProgressLanes = committedLanes;
	      inProgressRoot = root;
	      commitMutationEffectsOnFiber(finishedWork, root);
	      inProgressRoot = inProgressLanes = null;
	    }
	    function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
	      var deletions = parentFiber.deletions;
	      if (null !== deletions)
	        for (var i = 0; i < deletions.length; i++) {
	          var root = root$jscomp$0,
	            returnFiber = parentFiber,
	            deletedFiber = deletions[i],
	            parent = returnFiber;
	          a: for (; null !== parent; ) {
	            switch (parent.tag) {
	              case 27:
	              case 5:
	                hostParent = parent.stateNode;
	                hostParentIsContainer = false;
	                break a;
	              case 3:
	                hostParent = parent.stateNode.containerInfo;
	                hostParentIsContainer = true;
	                break a;
	              case 4:
	                hostParent = parent.stateNode.containerInfo;
	                hostParentIsContainer = true;
	                break a;
	            }
	            parent = parent.return;
	          }
	          if (null === hostParent)
	            throw Error(
	              "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
	            );
	          commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
	          hostParent = null;
	          hostParentIsContainer = false;
	          root = deletedFiber;
	          returnFiber = root.alternate;
	          null !== returnFiber && (returnFiber.return = null);
	          root.return = null;
	        }
	      if (parentFiber.subtreeFlags & 13878)
	        for (parentFiber = parentFiber.child; null !== parentFiber; )
	          commitMutationEffectsOnFiber(parentFiber, root$jscomp$0),
	            (parentFiber = parentFiber.sibling);
	    }
	    function commitMutationEffectsOnFiber(finishedWork, root) {
	      var current = finishedWork.alternate,
	        flags = finishedWork.flags;
	      switch (finishedWork.tag) {
	        case 0:
	        case 11:
	        case 14:
	        case 15:
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          commitReconciliationEffects(finishedWork);
	          flags & 4 &&
	            (commitHookEffectListUnmount(
	              Insertion | HasEffect,
	              finishedWork,
	              finishedWork.return
	            ),
	            commitHookEffectListMount(Insertion | HasEffect, finishedWork),
	            commitHookLayoutUnmountEffects(
	              finishedWork,
	              finishedWork.return,
	              Layout | HasEffect
	            ));
	          break;
	        case 1:
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          commitReconciliationEffects(finishedWork);
	          flags & 512 &&
	            (offscreenSubtreeWasHidden ||
	              null === current ||
	              safelyDetachRef(current, current.return));
	          flags & 64 &&
	            offscreenSubtreeIsHidden &&
	            ((finishedWork = finishedWork.updateQueue),
	            null !== finishedWork &&
	              ((flags = finishedWork.callbacks),
	              null !== flags &&
	                ((current = finishedWork.shared.hiddenCallbacks),
	                (finishedWork.shared.hiddenCallbacks =
	                  null === current ? flags : current.concat(flags)))));
	          break;
	        case 26:
	          var hoistableRoot = currentHoistableRoot;
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          commitReconciliationEffects(finishedWork);
	          flags & 512 &&
	            (offscreenSubtreeWasHidden ||
	              null === current ||
	              safelyDetachRef(current, current.return));
	          if (flags & 4)
	            if (
	              ((root = null !== current ? current.memoizedState : null),
	              (flags = finishedWork.memoizedState),
	              null === current)
	            )
	              if (null === flags)
	                if (null === finishedWork.stateNode) {
	                  a: {
	                    flags = finishedWork.type;
	                    current = finishedWork.memoizedProps;
	                    root = hoistableRoot.ownerDocument || hoistableRoot;
	                    b: switch (flags) {
	                      case "title":
	                        hoistableRoot = root.getElementsByTagName("title")[0];
	                        if (
	                          !hoistableRoot ||
	                          hoistableRoot[internalHoistableMarker] ||
	                          hoistableRoot[internalInstanceKey] ||
	                          hoistableRoot.namespaceURI === SVG_NAMESPACE ||
	                          hoistableRoot.hasAttribute("itemprop")
	                        )
	                          (hoistableRoot = root.createElement(flags)),
	                            root.head.insertBefore(
	                              hoistableRoot,
	                              root.querySelector("head > title")
	                            );
	                        setInitialProperties(hoistableRoot, flags, current);
	                        hoistableRoot[internalInstanceKey] = finishedWork;
	                        markNodeAsHoistable(hoistableRoot);
	                        flags = hoistableRoot;
	                        break a;
	                      case "link":
	                        var maybeNodes = getHydratableHoistableCache(
	                          "link",
	                          "href",
	                          root
	                        ).get(flags + (current.href || ""));
	                        if (maybeNodes)
	                          for (var i = 0; i < maybeNodes.length; i++)
	                            if (
	                              ((hoistableRoot = maybeNodes[i]),
	                              hoistableRoot.getAttribute("href") ===
	                                (null == current.href ? null : current.href) &&
	                                hoistableRoot.getAttribute("rel") ===
	                                  (null == current.rel ? null : current.rel) &&
	                                hoistableRoot.getAttribute("title") ===
	                                  (null == current.title
	                                    ? null
	                                    : current.title) &&
	                                hoistableRoot.getAttribute("crossorigin") ===
	                                  (null == current.crossOrigin
	                                    ? null
	                                    : current.crossOrigin))
	                            ) {
	                              maybeNodes.splice(i, 1);
	                              break b;
	                            }
	                        hoistableRoot = root.createElement(flags);
	                        setInitialProperties(hoistableRoot, flags, current);
	                        root.head.appendChild(hoistableRoot);
	                        break;
	                      case "meta":
	                        if (
	                          (maybeNodes = getHydratableHoistableCache(
	                            "meta",
	                            "content",
	                            root
	                          ).get(flags + (current.content || "")))
	                        )
	                          for (i = 0; i < maybeNodes.length; i++)
	                            if (
	                              ((hoistableRoot = maybeNodes[i]),
	                              checkAttributeStringCoercion(
	                                current.content,
	                                "content"
	                              ),
	                              hoistableRoot.getAttribute("content") ===
	                                (null == current.content
	                                  ? null
	                                  : "" + current.content) &&
	                                hoistableRoot.getAttribute("name") ===
	                                  (null == current.name
	                                    ? null
	                                    : current.name) &&
	                                hoistableRoot.getAttribute("property") ===
	                                  (null == current.property
	                                    ? null
	                                    : current.property) &&
	                                hoistableRoot.getAttribute("http-equiv") ===
	                                  (null == current.httpEquiv
	                                    ? null
	                                    : current.httpEquiv) &&
	                                hoistableRoot.getAttribute("charset") ===
	                                  (null == current.charSet
	                                    ? null
	                                    : current.charSet))
	                            ) {
	                              maybeNodes.splice(i, 1);
	                              break b;
	                            }
	                        hoistableRoot = root.createElement(flags);
	                        setInitialProperties(hoistableRoot, flags, current);
	                        root.head.appendChild(hoistableRoot);
	                        break;
	                      default:
	                        throw Error(
	                          'getNodesForType encountered a type it did not expect: "' +
	                            flags +
	                            '". This is a bug in React.'
	                        );
	                    }
	                    hoistableRoot[internalInstanceKey] = finishedWork;
	                    markNodeAsHoistable(hoistableRoot);
	                    flags = hoistableRoot;
	                  }
	                  finishedWork.stateNode = flags;
	                } else
	                  mountHoistable(
	                    hoistableRoot,
	                    finishedWork.type,
	                    finishedWork.stateNode
	                  );
	              else
	                finishedWork.stateNode = acquireResource(
	                  hoistableRoot,
	                  flags,
	                  finishedWork.memoizedProps
	                );
	            else
	              root !== flags
	                ? (null === root
	                    ? null !== current.stateNode &&
	                      ((current = current.stateNode),
	                      current.parentNode.removeChild(current))
	                    : root.count--,
	                  null === flags
	                    ? mountHoistable(
	                        hoistableRoot,
	                        finishedWork.type,
	                        finishedWork.stateNode
	                      )
	                    : acquireResource(
	                        hoistableRoot,
	                        flags,
	                        finishedWork.memoizedProps
	                      ))
	                : null === flags &&
	                  null !== finishedWork.stateNode &&
	                  commitHostUpdate(
	                    finishedWork,
	                    finishedWork.memoizedProps,
	                    current.memoizedProps
	                  );
	          break;
	        case 27:
	          if (flags & 4 && null === finishedWork.alternate) {
	            hoistableRoot = finishedWork.stateNode;
	            maybeNodes = finishedWork.memoizedProps;
	            try {
	              for (i = hoistableRoot.firstChild; i; ) {
	                var nextNode = i.nextSibling,
	                  nodeName = i.nodeName;
	                i[internalHoistableMarker] ||
	                  "HEAD" === nodeName ||
	                  "BODY" === nodeName ||
	                  "SCRIPT" === nodeName ||
	                  "STYLE" === nodeName ||
	                  ("LINK" === nodeName &&
	                    "stylesheet" === i.rel.toLowerCase()) ||
	                  hoistableRoot.removeChild(i);
	                i = nextNode;
	              }
	              runWithFiberInDEV(
	                finishedWork,
	                acquireSingletonInstance,
	                finishedWork.type,
	                maybeNodes,
	                hoistableRoot,
	                finishedWork
	              );
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }
	        case 5:
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          commitReconciliationEffects(finishedWork);
	          flags & 512 &&
	            (offscreenSubtreeWasHidden ||
	              null === current ||
	              safelyDetachRef(current, current.return));
	          if (finishedWork.flags & 32) {
	            root = finishedWork.stateNode;
	            try {
	              runWithFiberInDEV(finishedWork, resetTextContent, root);
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }
	          flags & 4 &&
	            null != finishedWork.stateNode &&
	            ((root = finishedWork.memoizedProps),
	            commitHostUpdate(
	              finishedWork,
	              root,
	              null !== current ? current.memoizedProps : root
	            ));
	          flags & 1024 &&
	            ((needsFormReset = true),
	            "form" !== finishedWork.type &&
	              console.error(
	                "Unexpected host component type. Expected a form. This is a bug in React."
	              ));
	          break;
	        case 6:
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          commitReconciliationEffects(finishedWork);
	          if (flags & 4) {
	            if (null === finishedWork.stateNode)
	              throw Error(
	                "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue."
	              );
	            flags = finishedWork.memoizedProps;
	            current = null !== current ? current.memoizedProps : flags;
	            root = finishedWork.stateNode;
	            try {
	              runWithFiberInDEV(
	                finishedWork,
	                commitTextUpdate,
	                root,
	                current,
	                flags
	              );
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }
	          break;
	        case 3:
	          hoistableRoot = pushNestedEffectDurations();
	          tagCaches = null;
	          maybeNodes = currentHoistableRoot;
	          currentHoistableRoot = getHoistableRoot(root.containerInfo);
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          currentHoistableRoot = maybeNodes;
	          commitReconciliationEffects(finishedWork);
	          if (
	            flags & 4 &&
	            null !== current &&
	            current.memoizedState.isDehydrated
	          )
	            try {
	              runWithFiberInDEV(
	                finishedWork,
	                commitHydratedContainer,
	                root.containerInfo
	              );
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          needsFormReset &&
	            ((needsFormReset = false), recursivelyResetForms(finishedWork));
	          root.effectDuration += popNestedEffectDurations(hoistableRoot);
	          break;
	        case 4:
	          flags = currentHoistableRoot;
	          currentHoistableRoot = getHoistableRoot(
	            finishedWork.stateNode.containerInfo
	          );
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          commitReconciliationEffects(finishedWork);
	          currentHoistableRoot = flags;
	          break;
	        case 12:
	          flags = pushNestedEffectDurations();
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          commitReconciliationEffects(finishedWork);
	          finishedWork.stateNode.effectDuration +=
	            bubbleNestedEffectDurations(flags);
	          break;
	        case 13:
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          commitReconciliationEffects(finishedWork);
	          finishedWork.child.flags & 8192 &&
	            (null !== finishedWork.memoizedState) !==
	              (null !== current && null !== current.memoizedState) &&
	            (globalMostRecentFallbackTime = now$1());
	          flags & 4 &&
	            ((flags = finishedWork.updateQueue),
	            null !== flags &&
	              ((finishedWork.updateQueue = null),
	              attachSuspenseRetryListeners(finishedWork, flags)));
	          break;
	        case 22:
	          flags & 512 &&
	            (offscreenSubtreeWasHidden ||
	              null === current ||
	              safelyDetachRef(current, current.return));
	          i = null !== finishedWork.memoizedState;
	          nextNode = null !== current && null !== current.memoizedState;
	          nodeName = offscreenSubtreeIsHidden;
	          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
	          offscreenSubtreeIsHidden = nodeName || i;
	          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || nextNode;
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
	          offscreenSubtreeIsHidden = nodeName;
	          commitReconciliationEffects(finishedWork);
	          root = finishedWork.stateNode;
	          root._current = finishedWork;
	          root._visibility &= -3;
	          root._visibility |= root._pendingVisibility & OffscreenDetached;
	          if (
	            flags & 8192 &&
	            ((root._visibility = i
	              ? root._visibility & -2
	              : root._visibility | OffscreenVisible),
	            i &&
	              ((root = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden),
	              null === current ||
	                nextNode ||
	                root ||
	                recursivelyTraverseDisappearLayoutEffects(finishedWork)),
	            null === finishedWork.memoizedProps ||
	              "manual" !== finishedWork.memoizedProps.mode)
	          )
	            a: for (current = null, root = finishedWork; ; ) {
	              if (5 === root.tag || 26 === root.tag || 27 === root.tag) {
	                if (null === current) {
	                  nextNode = current = root;
	                  try {
	                    (hoistableRoot = nextNode.stateNode),
	                      i
	                        ? runWithFiberInDEV(
	                            nextNode,
	                            hideInstance,
	                            hoistableRoot
	                          )
	                        : runWithFiberInDEV(
	                            nextNode,
	                            unhideInstance,
	                            nextNode.stateNode,
	                            nextNode.memoizedProps
	                          );
	                  } catch (error) {
	                    captureCommitPhaseError(nextNode, nextNode.return, error);
	                  }
	                }
	              } else if (6 === root.tag) {
	                if (null === current) {
	                  nextNode = root;
	                  try {
	                    (maybeNodes = nextNode.stateNode),
	                      i
	                        ? runWithFiberInDEV(
	                            nextNode,
	                            hideTextInstance,
	                            maybeNodes
	                          )
	                        : runWithFiberInDEV(
	                            nextNode,
	                            unhideTextInstance,
	                            maybeNodes,
	                            nextNode.memoizedProps
	                          );
	                  } catch (error) {
	                    captureCommitPhaseError(nextNode, nextNode.return, error);
	                  }
	                }
	              } else if (
	                ((22 !== root.tag && 23 !== root.tag) ||
	                  null === root.memoizedState ||
	                  root === finishedWork) &&
	                null !== root.child
	              ) {
	                root.child.return = root;
	                root = root.child;
	                continue;
	              }
	              if (root === finishedWork) break a;
	              for (; null === root.sibling; ) {
	                if (null === root.return || root.return === finishedWork)
	                  break a;
	                current === root && (current = null);
	                root = root.return;
	              }
	              current === root && (current = null);
	              root.sibling.return = root.return;
	              root = root.sibling;
	            }
	          flags & 4 &&
	            ((flags = finishedWork.updateQueue),
	            null !== flags &&
	              ((current = flags.retryQueue),
	              null !== current &&
	                ((flags.retryQueue = null),
	                attachSuspenseRetryListeners(finishedWork, current))));
	          break;
	        case 19:
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          commitReconciliationEffects(finishedWork);
	          flags & 4 &&
	            ((flags = finishedWork.updateQueue),
	            null !== flags &&
	              ((finishedWork.updateQueue = null),
	              attachSuspenseRetryListeners(finishedWork, flags)));
	          break;
	        case 21:
	          break;
	        default:
	          recursivelyTraverseMutationEffects(root, finishedWork),
	            commitReconciliationEffects(finishedWork);
	      }
	    }
	    function commitReconciliationEffects(finishedWork) {
	      var flags = finishedWork.flags;
	      if (flags & 2) {
	        try {
	          runWithFiberInDEV(finishedWork, commitPlacement, finishedWork);
	        } catch (error) {
	          captureCommitPhaseError(finishedWork, finishedWork.return, error);
	        }
	        finishedWork.flags &= -3;
	      }
	      flags & 4096 && (finishedWork.flags &= -4097);
	    }
	    function recursivelyResetForms(parentFiber) {
	      if (parentFiber.subtreeFlags & 1024)
	        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
	          var fiber = parentFiber;
	          recursivelyResetForms(fiber);
	          5 === fiber.tag && fiber.flags & 1024 && fiber.stateNode.reset();
	          parentFiber = parentFiber.sibling;
	        }
	    }
	    function commitLayoutEffects(finishedWork, root, committedLanes) {
	      inProgressLanes = committedLanes;
	      inProgressRoot = root;
	      commitLayoutEffectOnFiber(root, finishedWork.alternate, finishedWork);
	      inProgressRoot = inProgressLanes = null;
	    }
	    function recursivelyTraverseLayoutEffects(root, parentFiber) {
	      if (parentFiber.subtreeFlags & 8772)
	        for (parentFiber = parentFiber.child; null !== parentFiber; )
	          commitLayoutEffectOnFiber(root, parentFiber.alternate, parentFiber),
	            (parentFiber = parentFiber.sibling);
	    }
	    function disappearLayoutEffects(finishedWork) {
	      switch (finishedWork.tag) {
	        case 0:
	        case 11:
	        case 14:
	        case 15:
	          commitHookLayoutUnmountEffects(
	            finishedWork,
	            finishedWork.return,
	            Layout
	          );
	          recursivelyTraverseDisappearLayoutEffects(finishedWork);
	          break;
	        case 1:
	          safelyDetachRef(finishedWork, finishedWork.return);
	          var instance = finishedWork.stateNode;
	          "function" === typeof instance.componentWillUnmount &&
	            safelyCallComponentWillUnmount(
	              finishedWork,
	              finishedWork.return,
	              instance
	            );
	          recursivelyTraverseDisappearLayoutEffects(finishedWork);
	          break;
	        case 26:
	        case 27:
	        case 5:
	          safelyDetachRef(finishedWork, finishedWork.return);
	          recursivelyTraverseDisappearLayoutEffects(finishedWork);
	          break;
	        case 22:
	          safelyDetachRef(finishedWork, finishedWork.return);
	          null === finishedWork.memoizedState &&
	            recursivelyTraverseDisappearLayoutEffects(finishedWork);
	          break;
	        default:
	          recursivelyTraverseDisappearLayoutEffects(finishedWork);
	      }
	    }
	    function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
	      for (parentFiber = parentFiber.child; null !== parentFiber; )
	        disappearLayoutEffects(parentFiber),
	          (parentFiber = parentFiber.sibling);
	    }
	    function reappearLayoutEffects(
	      finishedRoot,
	      current,
	      finishedWork,
	      includeWorkInProgressEffects
	    ) {
	      var flags = finishedWork.flags;
	      switch (finishedWork.tag) {
	        case 0:
	        case 11:
	        case 15:
	          recursivelyTraverseReappearLayoutEffects(
	            finishedRoot,
	            finishedWork,
	            includeWorkInProgressEffects
	          );
	          commitHookLayoutEffects(finishedWork, Layout);
	          break;
	        case 1:
	          recursivelyTraverseReappearLayoutEffects(
	            finishedRoot,
	            finishedWork,
	            includeWorkInProgressEffects
	          );
	          current = finishedWork.stateNode;
	          "function" === typeof current.componentDidMount &&
	            runWithFiberInDEV(
	              finishedWork,
	              callComponentDidMountInDEV,
	              finishedWork,
	              current
	            );
	          current = finishedWork.updateQueue;
	          if (null !== current) {
	            finishedRoot = finishedWork.stateNode;
	            try {
	              runWithFiberInDEV(
	                finishedWork,
	                commitHiddenCallbacks,
	                current,
	                finishedRoot
	              );
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }
	          includeWorkInProgressEffects &&
	            flags & 64 &&
	            commitClassCallbacks(finishedWork);
	          safelyAttachRef(finishedWork, finishedWork.return);
	          break;
	        case 26:
	        case 27:
	        case 5:
	          recursivelyTraverseReappearLayoutEffects(
	            finishedRoot,
	            finishedWork,
	            includeWorkInProgressEffects
	          );
	          includeWorkInProgressEffects &&
	            null === current &&
	            flags & 4 &&
	            commitHostMount(finishedWork);
	          safelyAttachRef(finishedWork, finishedWork.return);
	          break;
	        case 12:
	          if (includeWorkInProgressEffects && flags & 4) {
	            flags = pushNestedEffectDurations();
	            recursivelyTraverseReappearLayoutEffects(
	              finishedRoot,
	              finishedWork,
	              includeWorkInProgressEffects
	            );
	            includeWorkInProgressEffects = finishedWork.stateNode;
	            includeWorkInProgressEffects.effectDuration +=
	              bubbleNestedEffectDurations(flags);
	            try {
	              runWithFiberInDEV(
	                finishedWork,
	                commitProfiler,
	                finishedWork,
	                current,
	                commitStartTime,
	                includeWorkInProgressEffects.effectDuration
	              );
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          } else
	            recursivelyTraverseReappearLayoutEffects(
	              finishedRoot,
	              finishedWork,
	              includeWorkInProgressEffects
	            );
	          break;
	        case 13:
	          recursivelyTraverseReappearLayoutEffects(
	            finishedRoot,
	            finishedWork,
	            includeWorkInProgressEffects
	          );
	          includeWorkInProgressEffects &&
	            flags & 4 &&
	            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
	          break;
	        case 22:
	          null === finishedWork.memoizedState &&
	            recursivelyTraverseReappearLayoutEffects(
	              finishedRoot,
	              finishedWork,
	              includeWorkInProgressEffects
	            );
	          safelyAttachRef(finishedWork, finishedWork.return);
	          break;
	        default:
	          recursivelyTraverseReappearLayoutEffects(
	            finishedRoot,
	            finishedWork,
	            includeWorkInProgressEffects
	          );
	      }
	    }
	    function recursivelyTraverseReappearLayoutEffects(
	      finishedRoot,
	      parentFiber,
	      includeWorkInProgressEffects
	    ) {
	      includeWorkInProgressEffects =
	        includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
	      for (parentFiber = parentFiber.child; null !== parentFiber; )
	        reappearLayoutEffects(
	          finishedRoot,
	          parentFiber.alternate,
	          parentFiber,
	          includeWorkInProgressEffects
	        ),
	          (parentFiber = parentFiber.sibling);
	    }
	    function commitOffscreenPassiveMountEffects(current, finishedWork) {
	      var previousCache = null;
	      null !== current &&
	        null !== current.memoizedState &&
	        null !== current.memoizedState.cachePool &&
	        (previousCache = current.memoizedState.cachePool.pool);
	      current = null;
	      null !== finishedWork.memoizedState &&
	        null !== finishedWork.memoizedState.cachePool &&
	        (current = finishedWork.memoizedState.cachePool.pool);
	      current !== previousCache &&
	        (null != current && retainCache(current),
	        null != previousCache && releaseCache(previousCache));
	    }
	    function commitCachePassiveMountEffect(current, finishedWork) {
	      current = null;
	      null !== finishedWork.alternate &&
	        (current = finishedWork.alternate.memoizedState.cache);
	      finishedWork = finishedWork.memoizedState.cache;
	      finishedWork !== current &&
	        (retainCache(finishedWork), null != current && releaseCache(current));
	    }
	    function recursivelyTraversePassiveMountEffects(
	      root,
	      parentFiber,
	      committedLanes,
	      committedTransitions
	    ) {
	      if (parentFiber.subtreeFlags & 10256)
	        for (parentFiber = parentFiber.child; null !== parentFiber; )
	          commitPassiveMountOnFiber(
	            root,
	            parentFiber,
	            committedLanes,
	            committedTransitions
	          ),
	            (parentFiber = parentFiber.sibling);
	    }
	    function commitPassiveMountOnFiber(
	      finishedRoot,
	      finishedWork,
	      committedLanes,
	      committedTransitions
	    ) {
	      var flags = finishedWork.flags;
	      switch (finishedWork.tag) {
	        case 0:
	        case 11:
	        case 15:
	          recursivelyTraversePassiveMountEffects(
	            finishedRoot,
	            finishedWork,
	            committedLanes,
	            committedTransitions
	          );
	          flags & 2048 &&
	            commitHookPassiveMountEffects(finishedWork, Passive | HasEffect);
	          break;
	        case 3:
	          var prevEffectDuration = pushNestedEffectDurations();
	          recursivelyTraversePassiveMountEffects(
	            finishedRoot,
	            finishedWork,
	            committedLanes,
	            committedTransitions
	          );
	          flags & 2048 &&
	            ((committedLanes = null),
	            null !== finishedWork.alternate &&
	              (committedLanes = finishedWork.alternate.memoizedState.cache),
	            (finishedWork = finishedWork.memoizedState.cache),
	            finishedWork !== committedLanes &&
	              (retainCache(finishedWork),
	              null != committedLanes && releaseCache(committedLanes)));
	          finishedRoot.passiveEffectDuration +=
	            popNestedEffectDurations(prevEffectDuration);
	          break;
	        case 12:
	          if (flags & 2048) {
	            prevEffectDuration = pushNestedEffectDurations();
	            recursivelyTraversePassiveMountEffects(
	              finishedRoot,
	              finishedWork,
	              committedLanes,
	              committedTransitions
	            );
	            finishedRoot = finishedWork.stateNode;
	            finishedRoot.passiveEffectDuration +=
	              bubbleNestedEffectDurations(prevEffectDuration);
	            try {
	              runWithFiberInDEV(
	                finishedWork,
	                commitProfilerPostCommitImpl,
	                finishedWork,
	                finishedWork.alternate,
	                commitStartTime,
	                finishedRoot.passiveEffectDuration
	              );
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          } else
	            recursivelyTraversePassiveMountEffects(
	              finishedRoot,
	              finishedWork,
	              committedLanes,
	              committedTransitions
	            );
	          break;
	        case 23:
	          break;
	        case 22:
	          prevEffectDuration = finishedWork.stateNode;
	          null !== finishedWork.memoizedState
	            ? prevEffectDuration._visibility & OffscreenPassiveEffectsConnected
	              ? recursivelyTraversePassiveMountEffects(
	                  finishedRoot,
	                  finishedWork,
	                  committedLanes,
	                  committedTransitions
	                )
	              : recursivelyTraverseAtomicPassiveEffects(
	                  finishedRoot,
	                  finishedWork
	                )
	            : prevEffectDuration._visibility & OffscreenPassiveEffectsConnected
	              ? recursivelyTraversePassiveMountEffects(
	                  finishedRoot,
	                  finishedWork,
	                  committedLanes,
	                  committedTransitions
	                )
	              : ((prevEffectDuration._visibility |=
	                  OffscreenPassiveEffectsConnected),
	                recursivelyTraverseReconnectPassiveEffects(
	                  finishedRoot,
	                  finishedWork,
	                  committedLanes,
	                  committedTransitions,
	                  0 !== (finishedWork.subtreeFlags & 10256)
	                ));
	          flags & 2048 &&
	            commitOffscreenPassiveMountEffects(
	              finishedWork.alternate,
	              finishedWork
	            );
	          break;
	        case 24:
	          recursivelyTraversePassiveMountEffects(
	            finishedRoot,
	            finishedWork,
	            committedLanes,
	            committedTransitions
	          );
	          flags & 2048 &&
	            commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
	          break;
	        default:
	          recursivelyTraversePassiveMountEffects(
	            finishedRoot,
	            finishedWork,
	            committedLanes,
	            committedTransitions
	          );
	      }
	    }
	    function recursivelyTraverseReconnectPassiveEffects(
	      finishedRoot,
	      parentFiber,
	      committedLanes,
	      committedTransitions,
	      includeWorkInProgressEffects
	    ) {
	      includeWorkInProgressEffects =
	        includeWorkInProgressEffects &&
	        0 !== (parentFiber.subtreeFlags & 10256);
	      for (parentFiber = parentFiber.child; null !== parentFiber; )
	        reconnectPassiveEffects(
	          finishedRoot,
	          parentFiber,
	          committedLanes,
	          committedTransitions,
	          includeWorkInProgressEffects
	        ),
	          (parentFiber = parentFiber.sibling);
	    }
	    function reconnectPassiveEffects(
	      finishedRoot,
	      finishedWork,
	      committedLanes,
	      committedTransitions,
	      includeWorkInProgressEffects
	    ) {
	      var flags = finishedWork.flags;
	      switch (finishedWork.tag) {
	        case 0:
	        case 11:
	        case 15:
	          recursivelyTraverseReconnectPassiveEffects(
	            finishedRoot,
	            finishedWork,
	            committedLanes,
	            committedTransitions,
	            includeWorkInProgressEffects
	          );
	          commitHookPassiveMountEffects(finishedWork, Passive);
	          break;
	        case 23:
	          break;
	        case 22:
	          var _instance2 = finishedWork.stateNode;
	          null !== finishedWork.memoizedState
	            ? _instance2._visibility & OffscreenPassiveEffectsConnected
	              ? recursivelyTraverseReconnectPassiveEffects(
	                  finishedRoot,
	                  finishedWork,
	                  committedLanes,
	                  committedTransitions,
	                  includeWorkInProgressEffects
	                )
	              : recursivelyTraverseAtomicPassiveEffects(
	                  finishedRoot,
	                  finishedWork
	                )
	            : ((_instance2._visibility |= OffscreenPassiveEffectsConnected),
	              recursivelyTraverseReconnectPassiveEffects(
	                finishedRoot,
	                finishedWork,
	                committedLanes,
	                committedTransitions,
	                includeWorkInProgressEffects
	              ));
	          includeWorkInProgressEffects &&
	            flags & 2048 &&
	            commitOffscreenPassiveMountEffects(
	              finishedWork.alternate,
	              finishedWork
	            );
	          break;
	        case 24:
	          recursivelyTraverseReconnectPassiveEffects(
	            finishedRoot,
	            finishedWork,
	            committedLanes,
	            committedTransitions,
	            includeWorkInProgressEffects
	          );
	          includeWorkInProgressEffects &&
	            flags & 2048 &&
	            commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
	          break;
	        default:
	          recursivelyTraverseReconnectPassiveEffects(
	            finishedRoot,
	            finishedWork,
	            committedLanes,
	            committedTransitions,
	            includeWorkInProgressEffects
	          );
	      }
	    }
	    function recursivelyTraverseAtomicPassiveEffects(
	      finishedRoot$jscomp$0,
	      parentFiber
	    ) {
	      if (parentFiber.subtreeFlags & 10256)
	        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
	          var finishedRoot = finishedRoot$jscomp$0,
	            finishedWork = parentFiber,
	            flags = finishedWork.flags;
	          switch (finishedWork.tag) {
	            case 22:
	              recursivelyTraverseAtomicPassiveEffects(
	                finishedRoot,
	                finishedWork
	              );
	              flags & 2048 &&
	                commitOffscreenPassiveMountEffects(
	                  finishedWork.alternate,
	                  finishedWork
	                );
	              break;
	            case 24:
	              recursivelyTraverseAtomicPassiveEffects(
	                finishedRoot,
	                finishedWork
	              );
	              flags & 2048 &&
	                commitCachePassiveMountEffect(
	                  finishedWork.alternate,
	                  finishedWork
	                );
	              break;
	            default:
	              recursivelyTraverseAtomicPassiveEffects(
	                finishedRoot,
	                finishedWork
	              );
	          }
	          parentFiber = parentFiber.sibling;
	        }
	    }
	    function recursivelyAccumulateSuspenseyCommit(parentFiber) {
	      if (parentFiber.subtreeFlags & suspenseyCommitFlag)
	        for (parentFiber = parentFiber.child; null !== parentFiber; )
	          accumulateSuspenseyCommitOnFiber(parentFiber),
	            (parentFiber = parentFiber.sibling);
	    }
	    function accumulateSuspenseyCommitOnFiber(fiber) {
	      switch (fiber.tag) {
	        case 26:
	          recursivelyAccumulateSuspenseyCommit(fiber);
	          fiber.flags & suspenseyCommitFlag &&
	            null !== fiber.memoizedState &&
	            suspendResource(
	              currentHoistableRoot,
	              fiber.memoizedState,
	              fiber.memoizedProps
	            );
	          break;
	        case 5:
	          recursivelyAccumulateSuspenseyCommit(fiber);
	          break;
	        case 3:
	        case 4:
	          var previousHoistableRoot = currentHoistableRoot;
	          currentHoistableRoot = getHoistableRoot(
	            fiber.stateNode.containerInfo
	          );
	          recursivelyAccumulateSuspenseyCommit(fiber);
	          currentHoistableRoot = previousHoistableRoot;
	          break;
	        case 22:
	          null === fiber.memoizedState &&
	            ((previousHoistableRoot = fiber.alternate),
	            null !== previousHoistableRoot &&
	            null !== previousHoistableRoot.memoizedState
	              ? ((previousHoistableRoot = suspenseyCommitFlag),
	                (suspenseyCommitFlag = 16777216),
	                recursivelyAccumulateSuspenseyCommit(fiber),
	                (suspenseyCommitFlag = previousHoistableRoot))
	              : recursivelyAccumulateSuspenseyCommit(fiber));
	          break;
	        default:
	          recursivelyAccumulateSuspenseyCommit(fiber);
	      }
	    }
	    function detachAlternateSiblings(parentFiber) {
	      var previousFiber = parentFiber.alternate;
	      if (
	        null !== previousFiber &&
	        ((parentFiber = previousFiber.child), null !== parentFiber)
	      ) {
	        previousFiber.child = null;
	        do
	          (previousFiber = parentFiber.sibling),
	            (parentFiber.sibling = null),
	            (parentFiber = previousFiber);
	        while (null !== parentFiber);
	      }
	    }
	    function recursivelyTraversePassiveUnmountEffects(parentFiber) {
	      var deletions = parentFiber.deletions;
	      if (0 !== (parentFiber.flags & 16)) {
	        if (null !== deletions)
	          for (var i = 0; i < deletions.length; i++) {
	            var childToDelete = deletions[i];
	            nextEffect = childToDelete;
	            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
	              childToDelete,
	              parentFiber
	            );
	          }
	        detachAlternateSiblings(parentFiber);
	      }
	      if (parentFiber.subtreeFlags & 10256)
	        for (parentFiber = parentFiber.child; null !== parentFiber; )
	          commitPassiveUnmountOnFiber(parentFiber),
	            (parentFiber = parentFiber.sibling);
	    }
	    function commitPassiveUnmountOnFiber(finishedWork) {
	      switch (finishedWork.tag) {
	        case 0:
	        case 11:
	        case 15:
	          recursivelyTraversePassiveUnmountEffects(finishedWork);
	          finishedWork.flags & 2048 &&
	            commitHookPassiveUnmountEffects(
	              finishedWork,
	              finishedWork.return,
	              Passive | HasEffect
	            );
	          break;
	        case 3:
	          var prevEffectDuration = pushNestedEffectDurations();
	          recursivelyTraversePassiveUnmountEffects(finishedWork);
	          finishedWork.stateNode.passiveEffectDuration +=
	            popNestedEffectDurations(prevEffectDuration);
	          break;
	        case 12:
	          prevEffectDuration = pushNestedEffectDurations();
	          recursivelyTraversePassiveUnmountEffects(finishedWork);
	          finishedWork.stateNode.passiveEffectDuration +=
	            bubbleNestedEffectDurations(prevEffectDuration);
	          break;
	        case 22:
	          prevEffectDuration = finishedWork.stateNode;
	          null !== finishedWork.memoizedState &&
	          prevEffectDuration._visibility & OffscreenPassiveEffectsConnected &&
	          (null === finishedWork.return || 13 !== finishedWork.return.tag)
	            ? ((prevEffectDuration._visibility &=
	                -5),
	              recursivelyTraverseDisconnectPassiveEffects(finishedWork))
	            : recursivelyTraversePassiveUnmountEffects(finishedWork);
	          break;
	        default:
	          recursivelyTraversePassiveUnmountEffects(finishedWork);
	      }
	    }
	    function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
	      var deletions = parentFiber.deletions;
	      if (0 !== (parentFiber.flags & 16)) {
	        if (null !== deletions)
	          for (var i = 0; i < deletions.length; i++) {
	            var childToDelete = deletions[i];
	            nextEffect = childToDelete;
	            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
	              childToDelete,
	              parentFiber
	            );
	          }
	        detachAlternateSiblings(parentFiber);
	      }
	      for (parentFiber = parentFiber.child; null !== parentFiber; )
	        disconnectPassiveEffect(parentFiber),
	          (parentFiber = parentFiber.sibling);
	    }
	    function disconnectPassiveEffect(finishedWork) {
	      switch (finishedWork.tag) {
	        case 0:
	        case 11:
	        case 15:
	          commitHookPassiveUnmountEffects(
	            finishedWork,
	            finishedWork.return,
	            Passive
	          );
	          recursivelyTraverseDisconnectPassiveEffects(finishedWork);
	          break;
	        case 22:
	          var instance = finishedWork.stateNode;
	          instance._visibility & OffscreenPassiveEffectsConnected &&
	            ((instance._visibility &= -5),
	            recursivelyTraverseDisconnectPassiveEffects(finishedWork));
	          break;
	        default:
	          recursivelyTraverseDisconnectPassiveEffects(finishedWork);
	      }
	    }
	    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
	      deletedSubtreeRoot,
	      nearestMountedAncestor
	    ) {
	      for (; null !== nextEffect; ) {
	        var fiber = nextEffect,
	          current = fiber;
	        switch (current.tag) {
	          case 0:
	          case 11:
	          case 15:
	            commitHookPassiveUnmountEffects(
	              current,
	              nearestMountedAncestor,
	              Passive
	            );
	            break;
	          case 23:
	          case 22:
	            null !== current.memoizedState &&
	              null !== current.memoizedState.cachePool &&
	              ((current = current.memoizedState.cachePool.pool),
	              null != current && retainCache(current));
	            break;
	          case 24:
	            releaseCache(current.memoizedState.cache);
	        }
	        current = fiber.child;
	        if (null !== current) (current.return = fiber), (nextEffect = current);
	        else
	          a: for (fiber = deletedSubtreeRoot; null !== nextEffect; ) {
	            current = nextEffect;
	            var sibling = current.sibling,
	              returnFiber = current.return;
	            detachFiberAfterEffects(current);
	            if (current === fiber) {
	              nextEffect = null;
	              break a;
	            }
	            if (null !== sibling) {
	              sibling.return = returnFiber;
	              nextEffect = sibling;
	              break a;
	            }
	            nextEffect = returnFiber;
	          }
	      }
	    }
	    function FiberNode(tag, pendingProps, key, mode) {
	      this.tag = tag;
	      this.key = key;
	      this.sibling =
	        this.child =
	        this.return =
	        this.stateNode =
	        this.type =
	        this.elementType =
	          null;
	      this.index = 0;
	      this.refCleanup = this.ref = null;
	      this.pendingProps = pendingProps;
	      this.dependencies =
	        this.memoizedState =
	        this.updateQueue =
	        this.memoizedProps =
	          null;
	      this.mode = mode;
	      this.subtreeFlags = this.flags = 0;
	      this.deletions = null;
	      this.childLanes = this.lanes = 0;
	      this.alternate = null;
	      this.actualDuration = -0;
	      this.actualStartTime = -1.1;
	      this.treeBaseDuration = this.selfBaseDuration = -0;
	      this._debugOwner = this._debugInfo = null;
	      this._debugNeedsRemount = false;
	      this._debugHookTypes = null;
	      hasBadMapPolyfill ||
	        "function" !== typeof Object.preventExtensions ||
	        Object.preventExtensions(this);
	    }
	    function shouldConstruct(Component) {
	      Component = Component.prototype;
	      return !(!Component || !Component.isReactComponent);
	    }
	    function createWorkInProgress(current, pendingProps) {
	      var workInProgress = current.alternate;
	      null === workInProgress
	        ? ((workInProgress = createFiber(
	            current.tag,
	            pendingProps,
	            current.key,
	            current.mode
	          )),
	          (workInProgress.elementType = current.elementType),
	          (workInProgress.type = current.type),
	          (workInProgress.stateNode = current.stateNode),
	          (workInProgress._debugOwner = current._debugOwner),
	          (workInProgress._debugHookTypes = current._debugHookTypes),
	          (workInProgress.alternate = current),
	          (current.alternate = workInProgress))
	        : ((workInProgress.pendingProps = pendingProps),
	          (workInProgress.type = current.type),
	          (workInProgress.flags = 0),
	          (workInProgress.subtreeFlags = 0),
	          (workInProgress.deletions = null),
	          (workInProgress.actualDuration = -0),
	          (workInProgress.actualStartTime = -1.1));
	      workInProgress.flags = current.flags & 31457280;
	      workInProgress.childLanes = current.childLanes;
	      workInProgress.lanes = current.lanes;
	      workInProgress.child = current.child;
	      workInProgress.memoizedProps = current.memoizedProps;
	      workInProgress.memoizedState = current.memoizedState;
	      workInProgress.updateQueue = current.updateQueue;
	      pendingProps = current.dependencies;
	      workInProgress.dependencies =
	        null === pendingProps
	          ? null
	          : {
	              lanes: pendingProps.lanes,
	              firstContext: pendingProps.firstContext,
	              _debugThenableState: pendingProps._debugThenableState
	            };
	      workInProgress.sibling = current.sibling;
	      workInProgress.index = current.index;
	      workInProgress.ref = current.ref;
	      workInProgress.refCleanup = current.refCleanup;
	      workInProgress.selfBaseDuration = current.selfBaseDuration;
	      workInProgress.treeBaseDuration = current.treeBaseDuration;
	      workInProgress._debugInfo = current._debugInfo;
	      workInProgress._debugNeedsRemount = current._debugNeedsRemount;
	      switch (workInProgress.tag) {
	        case 0:
	        case 15:
	          workInProgress.type = resolveFunctionForHotReloading(current.type);
	          break;
	        case 1:
	          workInProgress.type = resolveFunctionForHotReloading(current.type);
	          break;
	        case 11:
	          workInProgress.type = resolveForwardRefForHotReloading(current.type);
	      }
	      return workInProgress;
	    }
	    function resetWorkInProgress(workInProgress, renderLanes) {
	      workInProgress.flags &= 31457282;
	      var current = workInProgress.alternate;
	      null === current
	        ? ((workInProgress.childLanes = 0),
	          (workInProgress.lanes = renderLanes),
	          (workInProgress.child = null),
	          (workInProgress.subtreeFlags = 0),
	          (workInProgress.memoizedProps = null),
	          (workInProgress.memoizedState = null),
	          (workInProgress.updateQueue = null),
	          (workInProgress.dependencies = null),
	          (workInProgress.stateNode = null),
	          (workInProgress.selfBaseDuration = 0),
	          (workInProgress.treeBaseDuration = 0))
	        : ((workInProgress.childLanes = current.childLanes),
	          (workInProgress.lanes = current.lanes),
	          (workInProgress.child = current.child),
	          (workInProgress.subtreeFlags = 0),
	          (workInProgress.deletions = null),
	          (workInProgress.memoizedProps = current.memoizedProps),
	          (workInProgress.memoizedState = current.memoizedState),
	          (workInProgress.updateQueue = current.updateQueue),
	          (workInProgress.type = current.type),
	          (renderLanes = current.dependencies),
	          (workInProgress.dependencies =
	            null === renderLanes
	              ? null
	              : {
	                  lanes: renderLanes.lanes,
	                  firstContext: renderLanes.firstContext,
	                  _debugThenableState: renderLanes._debugThenableState
	                }),
	          (workInProgress.selfBaseDuration = current.selfBaseDuration),
	          (workInProgress.treeBaseDuration = current.treeBaseDuration));
	      return workInProgress;
	    }
	    function createFiberFromTypeAndProps(
	      type,
	      key,
	      pendingProps,
	      owner,
	      mode,
	      lanes
	    ) {
	      var fiberTag = 0,
	        resolvedType = type;
	      if ("function" === typeof type)
	        shouldConstruct(type) && (fiberTag = 1),
	          (resolvedType = resolveFunctionForHotReloading(resolvedType));
	      else if ("string" === typeof type)
	        (fiberTag = getHostContext()),
	          (fiberTag = isHostHoistableType(type, pendingProps, fiberTag)
	            ? 26
	            : "html" === type || "head" === type || "body" === type
	              ? 27
	              : 5);
	      else
	        a: switch (type) {
	          case REACT_FRAGMENT_TYPE:
	            return createFiberFromFragment(
	              pendingProps.children,
	              mode,
	              lanes,
	              key
	            );
	          case REACT_STRICT_MODE_TYPE:
	            fiberTag = 8;
	            mode |= StrictLegacyMode;
	            mode |= StrictEffectsMode;
	            break;
	          case REACT_PROFILER_TYPE:
	            return (
	              (type = pendingProps),
	              (owner = mode),
	              "string" !== typeof type.id &&
	                console.error(
	                  'Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.',
	                  typeof type.id
	                ),
	              (key = createFiber(12, type, key, owner | ProfileMode)),
	              (key.elementType = REACT_PROFILER_TYPE),
	              (key.lanes = lanes),
	              (key.stateNode = { effectDuration: 0, passiveEffectDuration: 0 }),
	              key
	            );
	          case REACT_SUSPENSE_TYPE:
	            return (
	              (key = createFiber(13, pendingProps, key, mode)),
	              (key.elementType = REACT_SUSPENSE_TYPE),
	              (key.lanes = lanes),
	              key
	            );
	          case REACT_SUSPENSE_LIST_TYPE:
	            return (
	              (key = createFiber(19, pendingProps, key, mode)),
	              (key.elementType = REACT_SUSPENSE_LIST_TYPE),
	              (key.lanes = lanes),
	              key
	            );
	          case REACT_OFFSCREEN_TYPE:
	            return createFiberFromOffscreen(pendingProps, mode, lanes, key);
	          default:
	            if ("object" === typeof type && null !== type)
	              switch (type.$$typeof) {
	                case REACT_PROVIDER_TYPE:
	                case REACT_CONTEXT_TYPE:
	                  fiberTag = 10;
	                  break a;
	                case REACT_CONSUMER_TYPE:
	                  fiberTag = 9;
	                  break a;
	                case REACT_FORWARD_REF_TYPE:
	                  fiberTag = 11;
	                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
	                  break a;
	                case REACT_MEMO_TYPE:
	                  fiberTag = 14;
	                  break a;
	                case REACT_LAZY_TYPE:
	                  fiberTag = 16;
	                  resolvedType = null;
	                  break a;
	              }
	            resolvedType = "";
	            if (
	              undefined === type ||
	              ("object" === typeof type &&
	                null !== type &&
	                0 === Object.keys(type).length)
	            )
	              resolvedType +=
	                " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
	            null === type
	              ? (pendingProps = "null")
	              : isArrayImpl(type)
	                ? (pendingProps = "array")
	                : undefined !== type && type.$$typeof === REACT_ELEMENT_TYPE
	                  ? ((pendingProps =
	                      "<" +
	                      (getComponentNameFromType(type.type) || "Unknown") +
	                      " />"),
	                    (resolvedType =
	                      " Did you accidentally export a JSX literal instead of a component?"))
	                  : (pendingProps = typeof type);
	            (fiberTag = owner ? getComponentNameFromOwner(owner) : null) &&
	              (resolvedType +=
	                "\n\nCheck the render method of `" + fiberTag + "`.");
	            fiberTag = 29;
	            pendingProps = Error(
	              "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " +
	                (pendingProps + "." + resolvedType)
	            );
	            resolvedType = null;
	        }
	      key = createFiber(fiberTag, pendingProps, key, mode);
	      key.elementType = type;
	      key.type = resolvedType;
	      key.lanes = lanes;
	      key._debugOwner = owner;
	      return key;
	    }
	    function createFiberFromElement(element, mode, lanes) {
	      mode = createFiberFromTypeAndProps(
	        element.type,
	        element.key,
	        element.props,
	        element._owner,
	        mode,
	        lanes
	      );
	      mode._debugOwner = element._owner;
	      return mode;
	    }
	    function createFiberFromFragment(elements, mode, lanes, key) {
	      elements = createFiber(7, elements, key, mode);
	      elements.lanes = lanes;
	      return elements;
	    }
	    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
	      pendingProps = createFiber(22, pendingProps, key, mode);
	      pendingProps.elementType = REACT_OFFSCREEN_TYPE;
	      pendingProps.lanes = lanes;
	      var primaryChildInstance = {
	        _visibility: OffscreenVisible,
	        _pendingVisibility: OffscreenVisible,
	        _pendingMarkers: null,
	        _retryCache: null,
	        _transitions: null,
	        _current: null,
	        detach: function () {
	          var instance = primaryChildInstance,
	            fiber = instance._current;
	          if (null === fiber)
	            throw Error(
	              "Calling Offscreen.detach before instance handle has been set."
	            );
	          if (0 === (instance._pendingVisibility & OffscreenDetached)) {
	            var root = enqueueConcurrentRenderForLane(fiber, 2);
	            null !== root &&
	              ((instance._pendingVisibility |= OffscreenDetached),
	              scheduleUpdateOnFiber(root, fiber, 2));
	          }
	        },
	        attach: function () {
	          var instance = primaryChildInstance,
	            fiber = instance._current;
	          if (null === fiber)
	            throw Error(
	              "Calling Offscreen.detach before instance handle has been set."
	            );
	          if (0 !== (instance._pendingVisibility & OffscreenDetached)) {
	            var root = enqueueConcurrentRenderForLane(fiber, 2);
	            null !== root &&
	              ((instance._pendingVisibility &= -3),
	              scheduleUpdateOnFiber(root, fiber, 2));
	          }
	        }
	      };
	      pendingProps.stateNode = primaryChildInstance;
	      return pendingProps;
	    }
	    function createFiberFromText(content, mode, lanes) {
	      content = createFiber(6, content, null, mode);
	      content.lanes = lanes;
	      return content;
	    }
	    function createFiberFromPortal(portal, mode, lanes) {
	      mode = createFiber(
	        4,
	        null !== portal.children ? portal.children : [],
	        portal.key,
	        mode
	      );
	      mode.lanes = lanes;
	      mode.stateNode = {
	        containerInfo: portal.containerInfo,
	        pendingChildren: null,
	        implementation: portal.implementation
	      };
	      return mode;
	    }
	    function markUpdate(workInProgress) {
	      workInProgress.flags |= 4;
	    }
	    function preloadResourceAndSuspendIfNeeded(workInProgress, resource) {
	      if (
	        "stylesheet" !== resource.type ||
	        (resource.state.loading & Inserted) !== NotLoaded
	      )
	        workInProgress.flags &= -16777217;
	      else if (
	        ((workInProgress.flags |= 16777216), !preloadResource(resource))
	      ) {
	        resource = suspenseHandlerStackCursor.current;
	        if (
	          null !== resource &&
	          ((workInProgressRootRenderLanes & 4194176) ===
	          workInProgressRootRenderLanes
	            ? null !== shellBoundary
	            : ((workInProgressRootRenderLanes & 62914560) !==
	                workInProgressRootRenderLanes &&
	                0 === (workInProgressRootRenderLanes & 536870912)) ||
	              resource !== shellBoundary)
	        )
	          throw (
	            ((suspendedThenable = noopSuspenseyCommitThenable),
	            SuspenseyCommitException)
	          );
	        workInProgress.flags |= 8192;
	      }
	    }
	    function scheduleRetryEffect(workInProgress, retryQueue) {
	      null !== retryQueue && (workInProgress.flags |= 4);
	      workInProgress.flags & 16384 &&
	        ((retryQueue =
	          22 !== workInProgress.tag ? claimNextRetryLane() : 536870912),
	        (workInProgress.lanes |= retryQueue),
	        (workInProgressSuspendedRetryLanes |= retryQueue));
	    }
	    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
	      if (!isHydrating)
	        switch (renderState.tailMode) {
	          case "hidden":
	            hasRenderedATailFallback = renderState.tail;
	            for (var lastTailNode = null; null !== hasRenderedATailFallback; )
	              null !== hasRenderedATailFallback.alternate &&
	                (lastTailNode = hasRenderedATailFallback),
	                (hasRenderedATailFallback = hasRenderedATailFallback.sibling);
	            null === lastTailNode
	              ? (renderState.tail = null)
	              : (lastTailNode.sibling = null);
	            break;
	          case "collapsed":
	            lastTailNode = renderState.tail;
	            for (var _lastTailNode = null; null !== lastTailNode; )
	              null !== lastTailNode.alternate && (_lastTailNode = lastTailNode),
	                (lastTailNode = lastTailNode.sibling);
	            null === _lastTailNode
	              ? hasRenderedATailFallback || null === renderState.tail
	                ? (renderState.tail = null)
	                : (renderState.tail.sibling = null)
	              : (_lastTailNode.sibling = null);
	        }
	    }
	    function bubbleProperties(completedWork) {
	      var didBailout =
	          null !== completedWork.alternate &&
	          completedWork.alternate.child === completedWork.child,
	        newChildLanes = 0,
	        subtreeFlags = 0;
	      if (didBailout)
	        if ((completedWork.mode & ProfileMode) !== NoMode) {
	          for (
	            var _treeBaseDuration = completedWork.selfBaseDuration,
	              _child2 = completedWork.child;
	            null !== _child2;

	          )
	            (newChildLanes |= _child2.lanes | _child2.childLanes),
	              (subtreeFlags |= _child2.subtreeFlags & 31457280),
	              (subtreeFlags |= _child2.flags & 31457280),
	              (_treeBaseDuration += _child2.treeBaseDuration),
	              (_child2 = _child2.sibling);
	          completedWork.treeBaseDuration = _treeBaseDuration;
	        } else
	          for (
	            _treeBaseDuration = completedWork.child;
	            null !== _treeBaseDuration;

	          )
	            (newChildLanes |=
	              _treeBaseDuration.lanes | _treeBaseDuration.childLanes),
	              (subtreeFlags |= _treeBaseDuration.subtreeFlags & 31457280),
	              (subtreeFlags |= _treeBaseDuration.flags & 31457280),
	              (_treeBaseDuration.return = completedWork),
	              (_treeBaseDuration = _treeBaseDuration.sibling);
	      else if ((completedWork.mode & ProfileMode) !== NoMode) {
	        _treeBaseDuration = completedWork.actualDuration;
	        _child2 = completedWork.selfBaseDuration;
	        for (var child = completedWork.child; null !== child; )
	          (newChildLanes |= child.lanes | child.childLanes),
	            (subtreeFlags |= child.subtreeFlags),
	            (subtreeFlags |= child.flags),
	            (_treeBaseDuration += child.actualDuration),
	            (_child2 += child.treeBaseDuration),
	            (child = child.sibling);
	        completedWork.actualDuration = _treeBaseDuration;
	        completedWork.treeBaseDuration = _child2;
	      } else
	        for (
	          _treeBaseDuration = completedWork.child;
	          null !== _treeBaseDuration;

	        )
	          (newChildLanes |=
	            _treeBaseDuration.lanes | _treeBaseDuration.childLanes),
	            (subtreeFlags |= _treeBaseDuration.subtreeFlags),
	            (subtreeFlags |= _treeBaseDuration.flags),
	            (_treeBaseDuration.return = completedWork),
	            (_treeBaseDuration = _treeBaseDuration.sibling);
	      completedWork.subtreeFlags |= subtreeFlags;
	      completedWork.childLanes = newChildLanes;
	      return didBailout;
	    }
	    function completeWork(current, workInProgress, renderLanes) {
	      var newProps = workInProgress.pendingProps;
	      popTreeContext(workInProgress);
	      switch (workInProgress.tag) {
	        case 16:
	        case 15:
	        case 0:
	        case 11:
	        case 7:
	        case 8:
	        case 12:
	        case 9:
	        case 14:
	          return bubbleProperties(workInProgress), null;
	        case 1:
	          return bubbleProperties(workInProgress), null;
	        case 3:
	          newProps = workInProgress.stateNode;
	          renderLanes = null;
	          null !== current && (renderLanes = current.memoizedState.cache);
	          workInProgress.memoizedState.cache !== renderLanes &&
	            (workInProgress.flags |= 2048);
	          popProvider(CacheContext, workInProgress);
	          popHostContainer(workInProgress);
	          newProps.pendingContext &&
	            ((newProps.context = newProps.pendingContext),
	            (newProps.pendingContext = null));
	          if (null === current || null === current.child)
	            popHydrationState(workInProgress)
	              ? (emitPendingHydrationWarnings(), markUpdate(workInProgress))
	              : null === current ||
	                (current.memoizedState.isDehydrated &&
	                  0 === (workInProgress.flags & 256)) ||
	                ((workInProgress.flags |= 1024),
	                null !== hydrationErrors &&
	                  (queueRecoverableErrors(hydrationErrors),
	                  (hydrationErrors = null)));
	          bubbleProperties(workInProgress);
	          return null;
	        case 26:
	          return (
	            (renderLanes = workInProgress.memoizedState),
	            null === current
	              ? (markUpdate(workInProgress),
	                null !== renderLanes
	                  ? (bubbleProperties(workInProgress),
	                    preloadResourceAndSuspendIfNeeded(
	                      workInProgress,
	                      renderLanes
	                    ))
	                  : (bubbleProperties(workInProgress),
	                    (workInProgress.flags &= -16777217)))
	              : renderLanes
	                ? renderLanes !== current.memoizedState
	                  ? (markUpdate(workInProgress),
	                    bubbleProperties(workInProgress),
	                    preloadResourceAndSuspendIfNeeded(
	                      workInProgress,
	                      renderLanes
	                    ))
	                  : (bubbleProperties(workInProgress),
	                    (workInProgress.flags &= -16777217))
	                : (current.memoizedProps !== newProps &&
	                    markUpdate(workInProgress),
	                  bubbleProperties(workInProgress),
	                  (workInProgress.flags &= -16777217)),
	            null
	          );
	        case 27:
	          popHostContext(workInProgress);
	          renderLanes = requiredContext(rootInstanceStackCursor.current);
	          var _type = workInProgress.type;
	          if (null !== current && null != workInProgress.stateNode)
	            current.memoizedProps !== newProps && markUpdate(workInProgress);
	          else {
	            if (!newProps) {
	              if (null === workInProgress.stateNode)
	                throw Error(
	                  "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
	                );
	              bubbleProperties(workInProgress);
	              return null;
	            }
	            current = getHostContext();
	            popHydrationState(workInProgress)
	              ? prepareToHydrateHostInstance(workInProgress)
	              : ((current = resolveSingletonInstance(
	                  _type,
	                  newProps,
	                  renderLanes,
	                  current,
	                  true
	                )),
	                (workInProgress.stateNode = current),
	                markUpdate(workInProgress));
	          }
	          bubbleProperties(workInProgress);
	          return null;
	        case 5:
	          popHostContext(workInProgress);
	          renderLanes = workInProgress.type;
	          if (null !== current && null != workInProgress.stateNode)
	            current.memoizedProps !== newProps && markUpdate(workInProgress);
	          else {
	            if (!newProps) {
	              if (null === workInProgress.stateNode)
	                throw Error(
	                  "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
	                );
	              bubbleProperties(workInProgress);
	              return null;
	            }
	            _type = getHostContext();
	            if (popHydrationState(workInProgress))
	              prepareToHydrateHostInstance(workInProgress);
	            else {
	              current = requiredContext(rootInstanceStackCursor.current);
	              validateDOMNesting(renderLanes, _type.ancestorInfo);
	              _type = _type.context;
	              current = getOwnerDocumentFromRootContainer(current);
	              switch (_type) {
	                case HostContextNamespaceSvg:
	                  current = current.createElementNS(SVG_NAMESPACE, renderLanes);
	                  break;
	                case HostContextNamespaceMath:
	                  current = current.createElementNS(
	                    MATH_NAMESPACE,
	                    renderLanes
	                  );
	                  break;
	                default:
	                  switch (renderLanes) {
	                    case "svg":
	                      current = current.createElementNS(
	                        SVG_NAMESPACE,
	                        renderLanes
	                      );
	                      break;
	                    case "math":
	                      current = current.createElementNS(
	                        MATH_NAMESPACE,
	                        renderLanes
	                      );
	                      break;
	                    case "script":
	                      current = current.createElement("div");
	                      current.innerHTML = "<script>\x3c/script>";
	                      current = current.removeChild(current.firstChild);
	                      break;
	                    case "select":
	                      current =
	                        "string" === typeof newProps.is
	                          ? current.createElement("select", { is: newProps.is })
	                          : current.createElement("select");
	                      newProps.multiple
	                        ? (current.multiple = true)
	                        : newProps.size && (current.size = newProps.size);
	                      break;
	                    default:
	                      (current =
	                        "string" === typeof newProps.is
	                          ? current.createElement(renderLanes, {
	                              is: newProps.is
	                            })
	                          : current.createElement(renderLanes)),
	                        -1 === renderLanes.indexOf("-") &&
	                          (renderLanes !== renderLanes.toLowerCase() &&
	                            console.error(
	                              "<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.",
	                              renderLanes
	                            ),
	                          "[object HTMLUnknownElement]" !==
	                            Object.prototype.toString.call(current) ||
	                            hasOwnProperty.call(
	                              warnedUnknownTags,
	                              renderLanes
	                            ) ||
	                            ((warnedUnknownTags[renderLanes] = true),
	                            console.error(
	                              "The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.",
	                              renderLanes
	                            )));
	                  }
	              }
	              current[internalInstanceKey] = workInProgress;
	              current[internalPropsKey] = newProps;
	              a: for (_type = workInProgress.child; null !== _type; ) {
	                if (5 === _type.tag || 6 === _type.tag)
	                  current.appendChild(_type.stateNode);
	                else if (
	                  4 !== _type.tag &&
	                  27 !== _type.tag &&
	                  null !== _type.child
	                ) {
	                  _type.child.return = _type;
	                  _type = _type.child;
	                  continue;
	                }
	                if (_type === workInProgress) break a;
	                for (; null === _type.sibling; ) {
	                  if (null === _type.return || _type.return === workInProgress)
	                    break a;
	                  _type = _type.return;
	                }
	                _type.sibling.return = _type.return;
	                _type = _type.sibling;
	              }
	              workInProgress.stateNode = current;
	              a: switch (
	                (setInitialProperties(current, renderLanes, newProps),
	                renderLanes)
	              ) {
	                case "button":
	                case "input":
	                case "select":
	                case "textarea":
	                  current = !!newProps.autoFocus;
	                  break a;
	                case "img":
	                  current = true;
	                  break a;
	                default:
	                  current = false;
	              }
	              current && markUpdate(workInProgress);
	            }
	          }
	          bubbleProperties(workInProgress);
	          workInProgress.flags &= -16777217;
	          return null;
	        case 6:
	          if (current && null != workInProgress.stateNode)
	            current.memoizedProps !== newProps && markUpdate(workInProgress);
	          else {
	            if (
	              "string" !== typeof newProps &&
	              null === workInProgress.stateNode
	            )
	              throw Error(
	                "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
	              );
	            current = requiredContext(rootInstanceStackCursor.current);
	            renderLanes = getHostContext();
	            if (popHydrationState(workInProgress)) {
	              current = workInProgress.stateNode;
	              newProps = workInProgress.memoizedProps;
	              _type = !didSuspendOrErrorDEV;
	              renderLanes = null;
	              var returnFiber = hydrationParentFiber;
	              if (null !== returnFiber)
	                switch (returnFiber.tag) {
	                  case 3:
	                    _type &&
	                      ((_type = diffHydratedTextForDevWarnings(
	                        current,
	                        newProps,
	                        renderLanes
	                      )),
	                      null !== _type &&
	                        (buildHydrationDiffNode(workInProgress, 0).serverProps =
	                          _type));
	                    break;
	                  case 27:
	                  case 5:
	                    (renderLanes = returnFiber.memoizedProps),
	                      _type &&
	                        ((_type = diffHydratedTextForDevWarnings(
	                          current,
	                          newProps,
	                          renderLanes
	                        )),
	                        null !== _type &&
	                          (buildHydrationDiffNode(
	                            workInProgress,
	                            0
	                          ).serverProps = _type));
	                }
	              current[internalInstanceKey] = workInProgress;
	              current =
	                current.nodeValue === newProps ||
	                (null !== renderLanes &&
	                  true === renderLanes.suppressHydrationWarning) ||
	                checkForUnmatchedText(current.nodeValue, newProps)
	                  ? true
	                  : false;
	              current || throwOnHydrationMismatch(workInProgress);
	            } else
	              (renderLanes = renderLanes.ancestorInfo.current),
	                null != renderLanes &&
	                  validateTextNesting(newProps, renderLanes.tag),
	                (current =
	                  getOwnerDocumentFromRootContainer(current).createTextNode(
	                    newProps
	                  )),
	                (current[internalInstanceKey] = workInProgress),
	                (workInProgress.stateNode = current);
	          }
	          bubbleProperties(workInProgress);
	          return null;
	        case 13:
	          newProps = workInProgress.memoizedState;
	          if (
	            null === current ||
	            (null !== current.memoizedState &&
	              null !== current.memoizedState.dehydrated)
	          ) {
	            _type = popHydrationState(workInProgress);
	            if (null !== newProps && null !== newProps.dehydrated) {
	              if (null === current) {
	                if (!_type)
	                  throw Error(
	                    "A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React."
	                  );
	                _type = workInProgress.memoizedState;
	                _type = null !== _type ? _type.dehydrated : null;
	                if (!_type)
	                  throw Error(
	                    "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
	                  );
	                _type[internalInstanceKey] = workInProgress;
	                bubbleProperties(workInProgress);
	                (workInProgress.mode & ProfileMode) !== NoMode &&
	                  null !== newProps &&
	                  ((_type = workInProgress.child),
	                  null !== _type &&
	                    (workInProgress.treeBaseDuration -=
	                      _type.treeBaseDuration));
	              } else
	                emitPendingHydrationWarnings(),
	                  resetHydrationState(),
	                  0 === (workInProgress.flags & 128) &&
	                    (workInProgress.memoizedState = null),
	                  (workInProgress.flags |= 4),
	                  bubbleProperties(workInProgress),
	                  (workInProgress.mode & ProfileMode) !== NoMode &&
	                    null !== newProps &&
	                    ((_type = workInProgress.child),
	                    null !== _type &&
	                      (workInProgress.treeBaseDuration -=
	                        _type.treeBaseDuration));
	              _type = false;
	            } else
	              null !== hydrationErrors &&
	                (queueRecoverableErrors(hydrationErrors),
	                (hydrationErrors = null)),
	                (_type = true);
	            if (!_type) {
	              if (workInProgress.flags & 256)
	                return popSuspenseHandler(workInProgress), workInProgress;
	              popSuspenseHandler(workInProgress);
	              return null;
	            }
	          }
	          popSuspenseHandler(workInProgress);
	          if (0 !== (workInProgress.flags & 128))
	            return (
	              (workInProgress.lanes = renderLanes),
	              (workInProgress.mode & ProfileMode) !== NoMode &&
	                transferActualDuration(workInProgress),
	              workInProgress
	            );
	          newProps = null !== newProps;
	          current = null !== current && null !== current.memoizedState;
	          newProps &&
	            ((renderLanes = workInProgress.child),
	            (_type = null),
	            null !== renderLanes.alternate &&
	              null !== renderLanes.alternate.memoizedState &&
	              null !== renderLanes.alternate.memoizedState.cachePool &&
	              (_type = renderLanes.alternate.memoizedState.cachePool.pool),
	            (returnFiber = null),
	            null !== renderLanes.memoizedState &&
	              null !== renderLanes.memoizedState.cachePool &&
	              (returnFiber = renderLanes.memoizedState.cachePool.pool),
	            returnFiber !== _type && (renderLanes.flags |= 2048));
	          newProps !== current &&
	            newProps &&
	            (workInProgress.child.flags |= 8192);
	          scheduleRetryEffect(workInProgress, workInProgress.updateQueue);
	          bubbleProperties(workInProgress);
	          (workInProgress.mode & ProfileMode) !== NoMode &&
	            newProps &&
	            ((current = workInProgress.child),
	            null !== current &&
	              (workInProgress.treeBaseDuration -= current.treeBaseDuration));
	          return null;
	        case 4:
	          return (
	            popHostContainer(workInProgress),
	            null === current &&
	              listenToAllSupportedEvents(
	                workInProgress.stateNode.containerInfo
	              ),
	            bubbleProperties(workInProgress),
	            null
	          );
	        case 10:
	          return (
	            popProvider(workInProgress.type, workInProgress),
	            bubbleProperties(workInProgress),
	            null
	          );
	        case 19:
	          pop(suspenseStackCursor, workInProgress);
	          _type = workInProgress.memoizedState;
	          if (null === _type) return bubbleProperties(workInProgress), null;
	          newProps = 0 !== (workInProgress.flags & 128);
	          returnFiber = _type.rendering;
	          if (null === returnFiber)
	            if (newProps) cutOffTailIfNeeded(_type, false);
	            else {
	              if (
	                workInProgressRootExitStatus !== RootInProgress ||
	                (null !== current && 0 !== (current.flags & 128))
	              )
	                for (current = workInProgress.child; null !== current; ) {
	                  returnFiber = findFirstSuspended(current);
	                  if (null !== returnFiber) {
	                    workInProgress.flags |= 128;
	                    cutOffTailIfNeeded(_type, false);
	                    current = returnFiber.updateQueue;
	                    workInProgress.updateQueue = current;
	                    scheduleRetryEffect(workInProgress, current);
	                    workInProgress.subtreeFlags = 0;
	                    current = renderLanes;
	                    for (newProps = workInProgress.child; null !== newProps; )
	                      resetWorkInProgress(newProps, current),
	                        (newProps = newProps.sibling);
	                    push(
	                      suspenseStackCursor,
	                      (suspenseStackCursor.current &
	                        SubtreeSuspenseContextMask) |
	                        ForceSuspenseFallback,
	                      workInProgress
	                    );
	                    return workInProgress.child;
	                  }
	                  current = current.sibling;
	                }
	              null !== _type.tail &&
	                now$1() > workInProgressRootRenderTargetTime &&
	                ((workInProgress.flags |= 128),
	                (newProps = true),
	                cutOffTailIfNeeded(_type, false),
	                (workInProgress.lanes = 4194304));
	            }
	          else {
	            if (!newProps)
	              if (
	                ((current = findFirstSuspended(returnFiber)), null !== current)
	              ) {
	                if (
	                  ((workInProgress.flags |= 128),
	                  (newProps = true),
	                  (current = current.updateQueue),
	                  (workInProgress.updateQueue = current),
	                  scheduleRetryEffect(workInProgress, current),
	                  cutOffTailIfNeeded(_type, true),
	                  null === _type.tail &&
	                    "hidden" === _type.tailMode &&
	                    !returnFiber.alternate &&
	                    !isHydrating)
	                )
	                  return bubbleProperties(workInProgress), null;
	              } else
	                2 * now$1() - _type.renderingStartTime >
	                  workInProgressRootRenderTargetTime &&
	                  536870912 !== renderLanes &&
	                  ((workInProgress.flags |= 128),
	                  (newProps = true),
	                  cutOffTailIfNeeded(_type, false),
	                  (workInProgress.lanes = 4194304));
	            _type.isBackwards
	              ? ((returnFiber.sibling = workInProgress.child),
	                (workInProgress.child = returnFiber))
	              : ((current = _type.last),
	                null !== current
	                  ? (current.sibling = returnFiber)
	                  : (workInProgress.child = returnFiber),
	                (_type.last = returnFiber));
	          }
	          if (null !== _type.tail)
	            return (
	              (current = _type.tail),
	              (_type.rendering = current),
	              (_type.tail = current.sibling),
	              (_type.renderingStartTime = now$1()),
	              (current.sibling = null),
	              (renderLanes = suspenseStackCursor.current),
	              (renderLanes = newProps
	                ? (renderLanes & SubtreeSuspenseContextMask) |
	                  ForceSuspenseFallback
	                : renderLanes & SubtreeSuspenseContextMask),
	              push(suspenseStackCursor, renderLanes, workInProgress),
	              current
	            );
	          bubbleProperties(workInProgress);
	          return null;
	        case 22:
	        case 23:
	          return (
	            popSuspenseHandler(workInProgress),
	            popHiddenContext(workInProgress),
	            (newProps = null !== workInProgress.memoizedState),
	            null !== current
	              ? (null !== current.memoizedState) !== newProps &&
	                (workInProgress.flags |= 8192)
	              : newProps && (workInProgress.flags |= 8192),
	            newProps
	              ? 0 !== (renderLanes & 536870912) &&
	                0 === (workInProgress.flags & 128) &&
	                (bubbleProperties(workInProgress),
	                workInProgress.subtreeFlags & 6 &&
	                  (workInProgress.flags |= 8192))
	              : bubbleProperties(workInProgress),
	            (newProps = workInProgress.updateQueue),
	            null !== newProps &&
	              scheduleRetryEffect(workInProgress, newProps.retryQueue),
	            (newProps = null),
	            null !== current &&
	              null !== current.memoizedState &&
	              null !== current.memoizedState.cachePool &&
	              (newProps = current.memoizedState.cachePool.pool),
	            (renderLanes = null),
	            null !== workInProgress.memoizedState &&
	              null !== workInProgress.memoizedState.cachePool &&
	              (renderLanes = workInProgress.memoizedState.cachePool.pool),
	            renderLanes !== newProps && (workInProgress.flags |= 2048),
	            null !== current && pop(resumedCache, workInProgress),
	            null
	          );
	        case 24:
	          return (
	            (newProps = null),
	            null !== current && (newProps = current.memoizedState.cache),
	            workInProgress.memoizedState.cache !== newProps &&
	              (workInProgress.flags |= 2048),
	            popProvider(CacheContext, workInProgress),
	            bubbleProperties(workInProgress),
	            null
	          );
	        case 25:
	          return null;
	      }
	      throw Error(
	        "Unknown unit of work tag (" +
	          workInProgress.tag +
	          "). This error is likely caused by a bug in React. Please file an issue."
	      );
	    }
	    function unwindWork(current, workInProgress) {
	      popTreeContext(workInProgress);
	      switch (workInProgress.tag) {
	        case 1:
	          return (
	            (current = workInProgress.flags),
	            current & 65536
	              ? ((workInProgress.flags = (current & -65537) | 128),
	                (workInProgress.mode & ProfileMode) !== NoMode &&
	                  transferActualDuration(workInProgress),
	                workInProgress)
	              : null
	          );
	        case 3:
	          return (
	            popProvider(CacheContext, workInProgress),
	            popHostContainer(workInProgress),
	            (current = workInProgress.flags),
	            0 !== (current & 65536) && 0 === (current & 128)
	              ? ((workInProgress.flags = (current & -65537) | 128),
	                workInProgress)
	              : null
	          );
	        case 26:
	        case 27:
	        case 5:
	          return popHostContext(workInProgress), null;
	        case 13:
	          popSuspenseHandler(workInProgress);
	          current = workInProgress.memoizedState;
	          if (null !== current && null !== current.dehydrated) {
	            if (null === workInProgress.alternate)
	              throw Error(
	                "Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue."
	              );
	            resetHydrationState();
	          }
	          current = workInProgress.flags;
	          return current & 65536
	            ? ((workInProgress.flags = (current & -65537) | 128),
	              (workInProgress.mode & ProfileMode) !== NoMode &&
	                transferActualDuration(workInProgress),
	              workInProgress)
	            : null;
	        case 19:
	          return pop(suspenseStackCursor, workInProgress), null;
	        case 4:
	          return popHostContainer(workInProgress), null;
	        case 10:
	          return popProvider(workInProgress.type, workInProgress), null;
	        case 22:
	        case 23:
	          return (
	            popSuspenseHandler(workInProgress),
	            popHiddenContext(workInProgress),
	            null !== current && pop(resumedCache, workInProgress),
	            (current = workInProgress.flags),
	            current & 65536
	              ? ((workInProgress.flags = (current & -65537) | 128),
	                (workInProgress.mode & ProfileMode) !== NoMode &&
	                  transferActualDuration(workInProgress),
	                workInProgress)
	              : null
	          );
	        case 24:
	          return popProvider(CacheContext, workInProgress), null;
	        case 25:
	          return null;
	        default:
	          return null;
	      }
	    }
	    function unwindInterruptedWork(current, interruptedWork) {
	      popTreeContext(interruptedWork);
	      switch (interruptedWork.tag) {
	        case 3:
	          popProvider(CacheContext, interruptedWork);
	          popHostContainer(interruptedWork);
	          break;
	        case 26:
	        case 27:
	        case 5:
	          popHostContext(interruptedWork);
	          break;
	        case 4:
	          popHostContainer(interruptedWork);
	          break;
	        case 13:
	          popSuspenseHandler(interruptedWork);
	          break;
	        case 19:
	          pop(suspenseStackCursor, interruptedWork);
	          break;
	        case 10:
	          popProvider(interruptedWork.type, interruptedWork);
	          break;
	        case 22:
	        case 23:
	          popSuspenseHandler(interruptedWork);
	          popHiddenContext(interruptedWork);
	          null !== current && pop(resumedCache, interruptedWork);
	          break;
	        case 24:
	          popProvider(CacheContext, interruptedWork);
	      }
	    }
	    function onCommitRoot() {
	      commitHooks.forEach(function (commitHook) {
	        return commitHook();
	      });
	    }
	    function isConcurrentActEnvironment() {
	      var isReactActEnvironmentGlobal =
	        "undefined" !== typeof IS_REACT_ACT_ENVIRONMENT
	          ? IS_REACT_ACT_ENVIRONMENT
	          : undefined;
	      isReactActEnvironmentGlobal ||
	        null === ReactSharedInternals.actQueue ||
	        console.error(
	          "The current testing environment is not configured to support act(...)"
	        );
	      return isReactActEnvironmentGlobal;
	    }
	    function requestUpdateLane(fiber) {
	      if (
	        (executionContext & RenderContext) !== NoContext &&
	        0 !== workInProgressRootRenderLanes
	      )
	        return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
	      var transition = ReactSharedInternals.T;
	      return null !== transition
	        ? (transition._updatedFibers || (transition._updatedFibers = new Set()),
	          transition._updatedFibers.add(fiber),
	          (fiber = currentEntangledLane),
	          0 !== fiber ? fiber : requestTransitionLane())
	        : resolveUpdatePriority();
	    }
	    function requestDeferredLane() {
	      0 === workInProgressDeferredLane &&
	        (workInProgressDeferredLane =
	          0 === (workInProgressRootRenderLanes & 536870912) || isHydrating
	            ? claimNextTransitionLane()
	            : 536870912);
	      var suspenseHandler = suspenseHandlerStackCursor.current;
	      null !== suspenseHandler && (suspenseHandler.flags |= 32);
	      return workInProgressDeferredLane;
	    }
	    function scheduleUpdateOnFiber(root, fiber, lane) {
	      isRunningInsertionEffect &&
	        console.error("useInsertionEffect must not schedule updates.");
	      isFlushingPassiveEffects && (didScheduleUpdateDuringPassiveEffects = true);
	      if (
	        (root === workInProgressRoot &&
	          workInProgressSuspendedReason === SuspendedOnData) ||
	        null !== root.cancelPendingCommit
	      )
	        prepareFreshStack(root, 0),
	          markRootSuspended(
	            root,
	            workInProgressRootRenderLanes,
	            workInProgressDeferredLane,
	            false
	          );
	      markRootUpdated$1(root, lane);
	      if (
	        0 !== (executionContext & RenderContext) &&
	        root === workInProgressRoot
	      ) {
	        if (isRendering)
	          switch (fiber.tag) {
	            case 0:
	            case 11:
	            case 15:
	              root =
	                (workInProgress && getComponentNameFromFiber(workInProgress)) ||
	                "Unknown";
	              didWarnAboutUpdateInRenderForAnotherComponent.has(root) ||
	                (didWarnAboutUpdateInRenderForAnotherComponent.add(root),
	                (fiber = getComponentNameFromFiber(fiber) || "Unknown"),
	                console.error(
	                  "Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://react.dev/link/setstate-in-render",
	                  fiber,
	                  root,
	                  root
	                ));
	              break;
	            case 1:
	              didWarnAboutUpdateInRender ||
	                (console.error(
	                  "Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."
	                ),
	                (didWarnAboutUpdateInRender = true));
	          }
	      } else
	        isDevToolsPresent && addFiberToLanesMap(root, fiber, lane),
	          warnIfUpdatesNotWrappedWithActDEV(fiber),
	          root === workInProgressRoot &&
	            ((executionContext & RenderContext) === NoContext &&
	              (workInProgressRootInterleavedUpdatedLanes |= lane),
	            workInProgressRootExitStatus === RootSuspendedWithDelay &&
	              markRootSuspended(
	                root,
	                workInProgressRootRenderLanes,
	                workInProgressDeferredLane,
	                false
	              )),
	          ensureRootIsScheduled(root);
	    }
	    function performWorkOnRoot(root, lanes, forceSync) {
	      if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
	        throw Error("Should not already be working.");
	      var shouldTimeSlice =
	          (!forceSync &&
	            0 === (lanes & 60) &&
	            0 === (lanes & root.expiredLanes)) ||
	          checkIfRootIsPrerendering(root, lanes),
	        exitStatus = shouldTimeSlice
	          ? renderRootConcurrent(root, lanes)
	          : renderRootSync(root, lanes, true),
	        renderWasConcurrent = shouldTimeSlice;
	      do {
	        if (exitStatus === RootInProgress) {
	          workInProgressRootIsPrerendering &&
	            !shouldTimeSlice &&
	            markRootSuspended(root, lanes, 0, false);
	          break;
	        } else if (exitStatus === RootDidNotComplete)
	          markRootSuspended(
	            root,
	            lanes,
	            0,
	            !workInProgressRootDidSkipSuspendedSiblings
	          );
	        else {
	          forceSync = root.current.alternate;
	          if (
	            renderWasConcurrent &&
	            !isRenderConsistentWithExternalStores(forceSync)
	          ) {
	            exitStatus = renderRootSync(root, lanes, false);
	            renderWasConcurrent = false;
	            continue;
	          }
	          if (exitStatus === RootErrored) {
	            renderWasConcurrent = lanes;
	            if (root.errorRecoveryDisabledLanes & renderWasConcurrent)
	              var errorRetryLanes = 0;
	            else
	              (errorRetryLanes = root.pendingLanes & -536870913),
	                (errorRetryLanes =
	                  0 !== errorRetryLanes
	                    ? errorRetryLanes
	                    : errorRetryLanes & 536870912
	                      ? 536870912
	                      : 0);
	            if (0 !== errorRetryLanes) {
	              lanes = errorRetryLanes;
	              a: {
	                exitStatus = root;
	                var errorRetryLanes$jscomp$0 = errorRetryLanes;
	                errorRetryLanes = workInProgressRootConcurrentErrors;
	                var wasRootDehydrated =
	                  exitStatus.current.memoizedState.isDehydrated;
	                wasRootDehydrated &&
	                  (prepareFreshStack(
	                    exitStatus,
	                    errorRetryLanes$jscomp$0
	                  ).flags |= 256);
	                errorRetryLanes$jscomp$0 = renderRootSync(
	                  exitStatus,
	                  errorRetryLanes$jscomp$0,
	                  false
	                );
	                if (errorRetryLanes$jscomp$0 !== RootErrored) {
	                  if (
	                    workInProgressRootDidAttachPingListener &&
	                    !wasRootDehydrated
	                  ) {
	                    exitStatus.errorRecoveryDisabledLanes |=
	                      renderWasConcurrent;
	                    workInProgressRootInterleavedUpdatedLanes |=
	                      renderWasConcurrent;
	                    exitStatus = RootSuspendedWithDelay;
	                    break a;
	                  }
	                  exitStatus = workInProgressRootRecoverableErrors;
	                  workInProgressRootRecoverableErrors = errorRetryLanes;
	                  null !== exitStatus && queueRecoverableErrors(exitStatus);
	                }
	                exitStatus = errorRetryLanes$jscomp$0;
	              }
	              renderWasConcurrent = false;
	              if (exitStatus !== RootErrored) continue;
	            }
	          }
	          if (exitStatus === RootFatalErrored) {
	            prepareFreshStack(root, 0);
	            markRootSuspended(root, lanes, 0, true);
	            break;
	          }
	          a: {
	            shouldTimeSlice = root;
	            switch (exitStatus) {
	              case RootInProgress:
	              case RootFatalErrored:
	                throw Error("Root did not complete. This is a bug in React.");
	              case RootSuspendedWithDelay:
	                if ((lanes & 4194176) === lanes) {
	                  markRootSuspended(
	                    shouldTimeSlice,
	                    lanes,
	                    workInProgressDeferredLane,
	                    !workInProgressRootDidSkipSuspendedSiblings
	                  );
	                  break a;
	                }
	                break;
	              case RootErrored:
	                workInProgressRootRecoverableErrors = null;
	                break;
	              case RootSuspended:
	              case RootCompleted:
	                break;
	              default:
	                throw Error("Unknown root exit status.");
	            }
	            shouldTimeSlice.finishedWork = forceSync;
	            shouldTimeSlice.finishedLanes = lanes;
	            if (null !== ReactSharedInternals.actQueue)
	              commitRoot(
	                shouldTimeSlice,
	                workInProgressRootRecoverableErrors,
	                workInProgressTransitions,
	                workInProgressRootDidIncludeRecursiveRenderUpdate,
	                workInProgressDeferredLane,
	                workInProgressRootInterleavedUpdatedLanes,
	                workInProgressSuspendedRetryLanes,
	                IMMEDIATE_COMMIT,
	                renderStartTime,
	                0
	              );
	            else {
	              if (
	                (lanes & 62914560) === lanes &&
	                ((exitStatus =
	                  globalMostRecentFallbackTime +
	                  FALLBACK_THROTTLE_MS -
	                  now$1()),
	                10 < exitStatus)
	              ) {
	                markRootSuspended(
	                  shouldTimeSlice,
	                  lanes,
	                  workInProgressDeferredLane,
	                  !workInProgressRootDidSkipSuspendedSiblings
	                );
	                if (0 !== getNextLanes(shouldTimeSlice, 0)) break a;
	                shouldTimeSlice.timeoutHandle = scheduleTimeout(
	                  commitRootWhenReady.bind(
	                    null,
	                    shouldTimeSlice,
	                    forceSync,
	                    workInProgressRootRecoverableErrors,
	                    workInProgressTransitions,
	                    workInProgressRootDidIncludeRecursiveRenderUpdate,
	                    lanes,
	                    workInProgressDeferredLane,
	                    workInProgressRootInterleavedUpdatedLanes,
	                    workInProgressSuspendedRetryLanes,
	                    workInProgressRootDidSkipSuspendedSiblings,
	                    THROTTLED_COMMIT,
	                    renderStartTime,
	                    0
	                  ),
	                  exitStatus
	                );
	                break a;
	              }
	              commitRootWhenReady(
	                shouldTimeSlice,
	                forceSync,
	                workInProgressRootRecoverableErrors,
	                workInProgressTransitions,
	                workInProgressRootDidIncludeRecursiveRenderUpdate,
	                lanes,
	                workInProgressDeferredLane,
	                workInProgressRootInterleavedUpdatedLanes,
	                workInProgressSuspendedRetryLanes,
	                workInProgressRootDidSkipSuspendedSiblings,
	                IMMEDIATE_COMMIT,
	                renderStartTime,
	                0
	              );
	            }
	          }
	        }
	        break;
	      } while (1);
	      ensureRootIsScheduled(root);
	    }
	    function queueRecoverableErrors(errors) {
	      null === workInProgressRootRecoverableErrors
	        ? (workInProgressRootRecoverableErrors = errors)
	        : workInProgressRootRecoverableErrors.push.apply(
	            workInProgressRootRecoverableErrors,
	            errors
	          );
	    }
	    function commitRootWhenReady(
	      root,
	      finishedWork,
	      recoverableErrors,
	      transitions,
	      didIncludeRenderPhaseUpdate,
	      lanes,
	      spawnedLane,
	      updatedLanes,
	      suspendedRetryLanes,
	      didSkipSuspendedSiblings,
	      suspendedCommitReason,
	      completedRenderStartTime,
	      completedRenderEndTime
	    ) {
	      var subtreeFlags = finishedWork.subtreeFlags;
	      if (subtreeFlags & 8192 || 16785408 === (subtreeFlags & 16785408))
	        if (
	          ((suspendedState = { stylesheets: null, count: 0, unsuspend: noop }),
	          accumulateSuspenseyCommitOnFiber(finishedWork),
	          (finishedWork = waitForCommitToBeReady()),
	          null !== finishedWork)
	        ) {
	          root.cancelPendingCommit = finishedWork(
	            commitRoot.bind(
	              null,
	              root,
	              recoverableErrors,
	              transitions,
	              didIncludeRenderPhaseUpdate,
	              spawnedLane,
	              updatedLanes,
	              suspendedRetryLanes,
	              SUSPENDED_COMMIT,
	              completedRenderStartTime,
	              completedRenderEndTime
	            )
	          );
	          markRootSuspended(
	            root,
	            lanes,
	            spawnedLane,
	            !didSkipSuspendedSiblings
	          );
	          return;
	        }
	      commitRoot(
	        root,
	        recoverableErrors,
	        transitions,
	        didIncludeRenderPhaseUpdate,
	        spawnedLane,
	        updatedLanes,
	        suspendedRetryLanes,
	        suspendedCommitReason,
	        completedRenderStartTime,
	        completedRenderEndTime
	      );
	    }
	    function isRenderConsistentWithExternalStores(finishedWork) {
	      for (var node = finishedWork; ; ) {
	        var tag = node.tag;
	        if (
	          (0 === tag || 11 === tag || 15 === tag) &&
	          node.flags & 16384 &&
	          ((tag = node.updateQueue),
	          null !== tag && ((tag = tag.stores), null !== tag))
	        )
	          for (var i = 0; i < tag.length; i++) {
	            var check = tag[i],
	              getSnapshot = check.getSnapshot;
	            check = check.value;
	            try {
	              if (!objectIs(getSnapshot(), check)) return !1;
	            } catch (error) {
	              return false;
	            }
	          }
	        tag = node.child;
	        if (node.subtreeFlags & 16384 && null !== tag)
	          (tag.return = node), (node = tag);
	        else {
	          if (node === finishedWork) break;
	          for (; null === node.sibling; ) {
	            if (null === node.return || node.return === finishedWork) return true;
	            node = node.return;
	          }
	          node.sibling.return = node.return;
	          node = node.sibling;
	        }
	      }
	      return true;
	    }
	    function markRootSuspended(
	      root,
	      suspendedLanes,
	      spawnedLane,
	      didAttemptEntireTree
	    ) {
	      suspendedLanes &= ~workInProgressRootPingedLanes;
	      suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
	      root.suspendedLanes |= suspendedLanes;
	      root.pingedLanes &= ~suspendedLanes;
	      didAttemptEntireTree && (root.warmLanes |= suspendedLanes);
	      didAttemptEntireTree = root.expirationTimes;
	      for (var lanes = suspendedLanes; 0 < lanes; ) {
	        var index = 31 - clz32(lanes),
	          lane = 1 << index;
	        didAttemptEntireTree[index] = -1;
	        lanes &= ~lane;
	      }
	      0 !== spawnedLane &&
	        markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);
	    }
	    function flushSyncWork$1() {
	      return (executionContext & (RenderContext | CommitContext)) === NoContext
	        ? (flushSyncWorkAcrossRoots_impl(0), false)
	        : true;
	    }
	    function resetWorkInProgressStack() {
	      if (null !== workInProgress) {
	        if (workInProgressSuspendedReason === NotSuspended)
	          var interruptedWork = workInProgress.return;
	        else
	          (interruptedWork = workInProgress),
	            resetContextDependencies(),
	            resetHooksOnUnwind(interruptedWork),
	            (thenableState$1 = null),
	            (thenableIndexCounter$1 = 0),
	            (interruptedWork = workInProgress);
	        for (; null !== interruptedWork; )
	          unwindInterruptedWork(interruptedWork.alternate, interruptedWork),
	            (interruptedWork = interruptedWork.return);
	        workInProgress = null;
	      }
	    }
	    function prepareFreshStack(root, lanes) {
	      root.finishedWork = null;
	      root.finishedLanes = 0;
	      var timeoutHandle = root.timeoutHandle;
	      timeoutHandle !== noTimeout &&
	        ((root.timeoutHandle = noTimeout), cancelTimeout(timeoutHandle));
	      timeoutHandle = root.cancelPendingCommit;
	      null !== timeoutHandle &&
	        ((root.cancelPendingCommit = null), timeoutHandle());
	      resetWorkInProgressStack();
	      workInProgressRoot = root;
	      workInProgress = timeoutHandle = createWorkInProgress(root.current, null);
	      workInProgressRootRenderLanes = lanes;
	      workInProgressSuspendedReason = NotSuspended;
	      workInProgressThrownValue = null;
	      workInProgressRootDidSkipSuspendedSiblings = false;
	      workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
	      workInProgressRootDidAttachPingListener = false;
	      workInProgressRootExitStatus = RootInProgress;
	      workInProgressSuspendedRetryLanes =
	        workInProgressDeferredLane =
	        workInProgressRootPingedLanes =
	        workInProgressRootInterleavedUpdatedLanes =
	        workInProgressRootSkippedLanes =
	          0;
	      workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors =
	        null;
	      workInProgressRootDidIncludeRecursiveRenderUpdate = false;
	      0 !== (lanes & 8) && (lanes |= lanes & 32);
	      var allEntangledLanes = root.entangledLanes;
	      if (0 !== allEntangledLanes)
	        for (
	          root = root.entanglements, allEntangledLanes &= lanes;
	          0 < allEntangledLanes;

	        ) {
	          var index = 31 - clz32(allEntangledLanes),
	            lane = 1 << index;
	          lanes |= root[index];
	          allEntangledLanes &= ~lane;
	        }
	      entangledRenderLanes = lanes;
	      finishQueueingConcurrentUpdates();
	      ReactStrictModeWarnings.discardPendingWarnings();
	      return timeoutHandle;
	    }
	    function handleThrow(root, thrownValue) {
	      currentlyRenderingFiber$1 = null;
	      ReactSharedInternals.H = ContextOnlyDispatcher;
	      ReactSharedInternals.getCurrentStack = null;
	      isRendering = false;
	      current = null;
	      thrownValue === SuspenseException
	        ? ((thrownValue = getSuspendedThenable()),
	          (workInProgressSuspendedReason = SuspendedOnImmediate))
	        : thrownValue === SuspenseyCommitException
	          ? ((thrownValue = getSuspendedThenable()),
	            (workInProgressSuspendedReason = SuspendedOnInstance))
	          : (workInProgressSuspendedReason =
	              thrownValue === SelectiveHydrationException
	                ? SuspendedOnHydration
	                : null !== thrownValue &&
	                    "object" === typeof thrownValue &&
	                    "function" === typeof thrownValue.then
	                  ? SuspendedOnDeprecatedThrowPromise
	                  : SuspendedOnError);
	      workInProgressThrownValue = thrownValue;
	      var erroredWork = workInProgress;
	      if (null === erroredWork)
	        (workInProgressRootExitStatus = RootFatalErrored),
	          logUncaughtError(
	            root,
	            createCapturedValueAtFiber(thrownValue, root.current)
	          );
	      else
	        switch (
	          (erroredWork.mode & ProfileMode &&
	            stopProfilerTimerIfRunningAndRecordDuration(erroredWork),
	          markComponentRenderStopped(),
	          workInProgressSuspendedReason)
	        ) {
	          case SuspendedOnError:
	            null !== injectedProfilingHooks &&
	              "function" ===
	                typeof injectedProfilingHooks.markComponentErrored &&
	              injectedProfilingHooks.markComponentErrored(
	                erroredWork,
	                thrownValue,
	                workInProgressRootRenderLanes
	              );
	            break;
	          case SuspendedOnData:
	          case SuspendedOnImmediate:
	          case SuspendedOnDeprecatedThrowPromise:
	          case SuspendedAndReadyToContinue:
	            null !== injectedProfilingHooks &&
	              "function" ===
	                typeof injectedProfilingHooks.markComponentSuspended &&
	              injectedProfilingHooks.markComponentSuspended(
	                erroredWork,
	                thrownValue,
	                workInProgressRootRenderLanes
	              );
	        }
	    }
	    function pushDispatcher() {
	      var prevDispatcher = ReactSharedInternals.H;
	      ReactSharedInternals.H = ContextOnlyDispatcher;
	      return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
	    }
	    function pushAsyncDispatcher() {
	      var prevAsyncDispatcher = ReactSharedInternals.A;
	      ReactSharedInternals.A = DefaultAsyncDispatcher;
	      return prevAsyncDispatcher;
	    }
	    function renderDidSuspendDelayIfPossible() {
	      workInProgressRootExitStatus = RootSuspendedWithDelay;
	      workInProgressRootDidSkipSuspendedSiblings ||
	        ((workInProgressRootRenderLanes & 4194176) !==
	          workInProgressRootRenderLanes &&
	          null !== suspenseHandlerStackCursor.current) ||
	        (workInProgressRootIsPrerendering = true);
	      (0 === (workInProgressRootSkippedLanes & 134217727) &&
	        0 === (workInProgressRootInterleavedUpdatedLanes & 134217727)) ||
	        null === workInProgressRoot ||
	        markRootSuspended(
	          workInProgressRoot,
	          workInProgressRootRenderLanes,
	          workInProgressDeferredLane,
	          false
	        );
	    }
	    function renderRootSync(root, lanes, shouldYieldForPrerendering) {
	      var prevExecutionContext = executionContext;
	      executionContext |= RenderContext;
	      var prevDispatcher = pushDispatcher(),
	        prevAsyncDispatcher = pushAsyncDispatcher();
	      if (
	        workInProgressRoot !== root ||
	        workInProgressRootRenderLanes !== lanes
	      ) {
	        if (isDevToolsPresent) {
	          var memoizedUpdaters = root.memoizedUpdaters;
	          0 < memoizedUpdaters.size &&
	            (restorePendingUpdaters(root, workInProgressRootRenderLanes),
	            memoizedUpdaters.clear());
	          movePendingFibersToMemoized(root, lanes);
	        }
	        workInProgressTransitions = null;
	        prepareFreshStack(root, lanes);
	      }
	      markRenderStarted(lanes);
	      lanes = false;
	      memoizedUpdaters = workInProgressRootExitStatus;
	      a: do
	        try {
	          if (
	            workInProgressSuspendedReason !== NotSuspended &&
	            null !== workInProgress
	          ) {
	            var unitOfWork = workInProgress,
	              thrownValue = workInProgressThrownValue;
	            switch (workInProgressSuspendedReason) {
	              case SuspendedOnHydration:
	                resetWorkInProgressStack();
	                memoizedUpdaters = RootDidNotComplete;
	                break a;
	              case SuspendedOnImmediate:
	              case SuspendedOnData:
	              case SuspendedOnDeprecatedThrowPromise:
	                null === suspenseHandlerStackCursor.current && (lanes = !0);
	                var reason = workInProgressSuspendedReason;
	                workInProgressSuspendedReason = NotSuspended;
	                workInProgressThrownValue = null;
	                throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
	                if (
	                  shouldYieldForPrerendering &&
	                  workInProgressRootIsPrerendering
	                ) {
	                  memoizedUpdaters = RootInProgress;
	                  break a;
	                }
	                break;
	              default:
	                (reason = workInProgressSuspendedReason),
	                  (workInProgressSuspendedReason = NotSuspended),
	                  (workInProgressThrownValue = null),
	                  throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
	            }
	          }
	          workLoopSync();
	          memoizedUpdaters = workInProgressRootExitStatus;
	          break;
	        } catch (thrownValue$8) {
	          handleThrow(root, thrownValue$8);
	        }
	      while (1);
	      lanes && root.shellSuspendCounter++;
	      resetContextDependencies();
	      executionContext = prevExecutionContext;
	      ReactSharedInternals.H = prevDispatcher;
	      ReactSharedInternals.A = prevAsyncDispatcher;
	      markRenderStopped();
	      null === workInProgress &&
	        ((workInProgressRoot = null),
	        (workInProgressRootRenderLanes = 0),
	        finishQueueingConcurrentUpdates());
	      return memoizedUpdaters;
	    }
	    function workLoopSync() {
	      for (; null !== workInProgress; ) performUnitOfWork(workInProgress);
	    }
	    function renderRootConcurrent(root, lanes) {
	      var prevExecutionContext = executionContext;
	      executionContext |= RenderContext;
	      var prevDispatcher = pushDispatcher(),
	        prevAsyncDispatcher = pushAsyncDispatcher();
	      if (
	        workInProgressRoot !== root ||
	        workInProgressRootRenderLanes !== lanes
	      ) {
	        if (isDevToolsPresent) {
	          var memoizedUpdaters = root.memoizedUpdaters;
	          0 < memoizedUpdaters.size &&
	            (restorePendingUpdaters(root, workInProgressRootRenderLanes),
	            memoizedUpdaters.clear());
	          movePendingFibersToMemoized(root, lanes);
	        }
	        workInProgressTransitions = null;
	        workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;
	        prepareFreshStack(root, lanes);
	      } else
	        workInProgressRootIsPrerendering = checkIfRootIsPrerendering(
	          root,
	          lanes
	        );
	      markRenderStarted(lanes);
	      a: do
	        try {
	          if (
	            workInProgressSuspendedReason !== NotSuspended &&
	            null !== workInProgress
	          )
	            b: switch (
	              ((lanes = workInProgress),
	              (memoizedUpdaters = workInProgressThrownValue),
	              workInProgressSuspendedReason)
	            ) {
	              case SuspendedOnError:
	                workInProgressSuspendedReason = NotSuspended;
	                workInProgressThrownValue = null;
	                throwAndUnwindWorkLoop(
	                  root,
	                  lanes,
	                  memoizedUpdaters,
	                  SuspendedOnError
	                );
	                break;
	              case SuspendedOnData:
	                if (isThenableResolved(memoizedUpdaters)) {
	                  workInProgressSuspendedReason = NotSuspended;
	                  workInProgressThrownValue = null;
	                  replaySuspendedUnitOfWork(lanes);
	                  break;
	                }
	                lanes = function () {
	                  workInProgressSuspendedReason === SuspendedOnData &&
	                    workInProgressRoot === root &&
	                    (workInProgressSuspendedReason =
	                      SuspendedAndReadyToContinue);
	                  ensureRootIsScheduled(root);
	                };
	                memoizedUpdaters.then(lanes, lanes);
	                break a;
	              case SuspendedOnImmediate:
	                workInProgressSuspendedReason = SuspendedAndReadyToContinue;
	                break a;
	              case SuspendedOnInstance:
	                workInProgressSuspendedReason =
	                  SuspendedOnInstanceAndReadyToContinue;
	                break a;
	              case SuspendedAndReadyToContinue:
	                isThenableResolved(memoizedUpdaters)
	                  ? ((workInProgressSuspendedReason = NotSuspended),
	                    (workInProgressThrownValue = null),
	                    replaySuspendedUnitOfWork(lanes))
	                  : ((workInProgressSuspendedReason = NotSuspended),
	                    (workInProgressThrownValue = null),
	                    throwAndUnwindWorkLoop(
	                      root,
	                      lanes,
	                      memoizedUpdaters,
	                      SuspendedAndReadyToContinue
	                    ));
	                break;
	              case SuspendedOnInstanceAndReadyToContinue:
	                var resource = null;
	                switch (workInProgress.tag) {
	                  case 26:
	                    resource = workInProgress.memoizedState;
	                  case 5:
	                  case 27:
	                    var hostFiber = workInProgress;
	                    if (resource ? preloadResource(resource) : 1) {
	                      workInProgressSuspendedReason = NotSuspended;
	                      workInProgressThrownValue = null;
	                      var sibling = hostFiber.sibling;
	                      if (null !== sibling) workInProgress = sibling;
	                      else {
	                        var returnFiber = hostFiber.return;
	                        null !== returnFiber
	                          ? ((workInProgress = returnFiber),
	                            completeUnitOfWork(returnFiber))
	                          : (workInProgress = null);
	                      }
	                      break b;
	                    }
	                    break;
	                  default:
	                    console.error(
	                      "Unexpected type of fiber triggered a suspensey commit. This is a bug in React."
	                    );
	                }
	                workInProgressSuspendedReason = NotSuspended;
	                workInProgressThrownValue = null;
	                throwAndUnwindWorkLoop(
	                  root,
	                  lanes,
	                  memoizedUpdaters,
	                  SuspendedOnInstanceAndReadyToContinue
	                );
	                break;
	              case SuspendedOnDeprecatedThrowPromise:
	                workInProgressSuspendedReason = NotSuspended;
	                workInProgressThrownValue = null;
	                throwAndUnwindWorkLoop(
	                  root,
	                  lanes,
	                  memoizedUpdaters,
	                  SuspendedOnDeprecatedThrowPromise
	                );
	                break;
	              case SuspendedOnHydration:
	                resetWorkInProgressStack();
	                workInProgressRootExitStatus = RootDidNotComplete;
	                break a;
	              default:
	                throw Error(
	                  "Unexpected SuspendedReason. This is a bug in React."
	                );
	            }
	          null !== ReactSharedInternals.actQueue
	            ? workLoopSync()
	            : workLoopConcurrent();
	          break;
	        } catch (thrownValue$9) {
	          handleThrow(root, thrownValue$9);
	        }
	      while (1);
	      resetContextDependencies();
	      ReactSharedInternals.H = prevDispatcher;
	      ReactSharedInternals.A = prevAsyncDispatcher;
	      executionContext = prevExecutionContext;
	      if (null !== workInProgress)
	        return (
	          null !== injectedProfilingHooks &&
	            "function" === typeof injectedProfilingHooks.markRenderYielded &&
	            injectedProfilingHooks.markRenderYielded(),
	          RootInProgress
	        );
	      markRenderStopped();
	      workInProgressRoot = null;
	      workInProgressRootRenderLanes = 0;
	      finishQueueingConcurrentUpdates();
	      return workInProgressRootExitStatus;
	    }
	    function workLoopConcurrent() {
	      for (; null !== workInProgress && !shouldYield(); )
	        performUnitOfWork(workInProgress);
	    }
	    function performUnitOfWork(unitOfWork) {
	      var current = unitOfWork.alternate;
	      (unitOfWork.mode & ProfileMode) !== NoMode
	        ? (startProfilerTimer(unitOfWork),
	          (current = runWithFiberInDEV(
	            unitOfWork,
	            beginWork,
	            current,
	            unitOfWork,
	            entangledRenderLanes
	          )),
	          stopProfilerTimerIfRunningAndRecordDuration(unitOfWork))
	        : (current = runWithFiberInDEV(
	            unitOfWork,
	            beginWork,
	            current,
	            unitOfWork,
	            entangledRenderLanes
	          ));
	      unitOfWork.memoizedProps = unitOfWork.pendingProps;
	      null === current
	        ? completeUnitOfWork(unitOfWork)
	        : (workInProgress = current);
	    }
	    function replaySuspendedUnitOfWork(unitOfWork) {
	      var next = runWithFiberInDEV(unitOfWork, replayBeginWork, unitOfWork);
	      unitOfWork.memoizedProps = unitOfWork.pendingProps;
	      null === next ? completeUnitOfWork(unitOfWork) : (workInProgress = next);
	    }
	    function replayBeginWork(unitOfWork) {
	      var current = unitOfWork.alternate,
	        isProfilingMode = (unitOfWork.mode & ProfileMode) !== NoMode;
	      isProfilingMode && startProfilerTimer(unitOfWork);
	      switch (unitOfWork.tag) {
	        case 15:
	        case 0:
	          current = replayFunctionComponent(
	            current,
	            unitOfWork,
	            unitOfWork.pendingProps,
	            unitOfWork.type,
	            undefined,
	            workInProgressRootRenderLanes
	          );
	          break;
	        case 11:
	          current = replayFunctionComponent(
	            current,
	            unitOfWork,
	            unitOfWork.pendingProps,
	            unitOfWork.type.render,
	            unitOfWork.ref,
	            workInProgressRootRenderLanes
	          );
	          break;
	        case 5:
	          resetHooksOnUnwind(unitOfWork);
	        default:
	          unwindInterruptedWork(current, unitOfWork),
	            (unitOfWork = workInProgress =
	              resetWorkInProgress(unitOfWork, entangledRenderLanes)),
	            (current = beginWork(current, unitOfWork, entangledRenderLanes));
	      }
	      isProfilingMode &&
	        stopProfilerTimerIfRunningAndRecordDuration(unitOfWork);
	      return current;
	    }
	    function throwAndUnwindWorkLoop(
	      root,
	      unitOfWork,
	      thrownValue,
	      suspendedReason
	    ) {
	      resetContextDependencies();
	      resetHooksOnUnwind(unitOfWork);
	      thenableState$1 = null;
	      thenableIndexCounter$1 = 0;
	      var returnFiber = unitOfWork.return;
	      try {
	        if (
	          throwException(
	            root,
	            returnFiber,
	            unitOfWork,
	            thrownValue,
	            workInProgressRootRenderLanes
	          )
	        ) {
	          workInProgressRootExitStatus = RootFatalErrored;
	          logUncaughtError(
	            root,
	            createCapturedValueAtFiber(thrownValue, root.current)
	          );
	          workInProgress = null;
	          return;
	        }
	      } catch (error) {
	        if (null !== returnFiber) throw ((workInProgress = returnFiber), error);
	        workInProgressRootExitStatus = RootFatalErrored;
	        logUncaughtError(
	          root,
	          createCapturedValueAtFiber(thrownValue, root.current)
	        );
	        workInProgress = null;
	        return;
	      }
	      if (unitOfWork.flags & 32768) {
	        if (isHydrating || suspendedReason === SuspendedOnError) root = true;
	        else if (
	          workInProgressRootIsPrerendering ||
	          0 !== (workInProgressRootRenderLanes & 536870912)
	        )
	          root = false;
	        else if (
	          ((workInProgressRootDidSkipSuspendedSiblings = root = true),
	          suspendedReason === SuspendedOnData ||
	            suspendedReason === SuspendedOnImmediate ||
	            suspendedReason === SuspendedOnDeprecatedThrowPromise)
	        )
	          (suspendedReason = suspenseHandlerStackCursor.current),
	            null !== suspendedReason &&
	              13 === suspendedReason.tag &&
	              (suspendedReason.flags |= 16384);
	        unwindUnitOfWork(unitOfWork, root);
	      } else completeUnitOfWork(unitOfWork);
	    }
	    function completeUnitOfWork(unitOfWork) {
	      var completedWork = unitOfWork;
	      do {
	        if (0 !== (completedWork.flags & 32768)) {
	          unwindUnitOfWork(
	            completedWork,
	            workInProgressRootDidSkipSuspendedSiblings
	          );
	          return;
	        }
	        var current = completedWork.alternate;
	        unitOfWork = completedWork.return;
	        startProfilerTimer(completedWork);
	        current = runWithFiberInDEV(
	          completedWork,
	          completeWork,
	          current,
	          completedWork,
	          entangledRenderLanes
	        );
	        (completedWork.mode & ProfileMode) !== NoMode &&
	          stopProfilerTimerIfRunningAndRecordIncompleteDuration(completedWork);
	        if (null !== current) {
	          workInProgress = current;
	          return;
	        }
	        completedWork = completedWork.sibling;
	        if (null !== completedWork) {
	          workInProgress = completedWork;
	          return;
	        }
	        workInProgress = completedWork = unitOfWork;
	      } while (null !== completedWork);
	      workInProgressRootExitStatus === RootInProgress &&
	        (workInProgressRootExitStatus = RootCompleted);
	    }
	    function unwindUnitOfWork(unitOfWork, skipSiblings) {
	      do {
	        var next = unwindWork(unitOfWork.alternate, unitOfWork);
	        if (null !== next) {
	          next.flags &= 32767;
	          workInProgress = next;
	          return;
	        }
	        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
	          stopProfilerTimerIfRunningAndRecordIncompleteDuration(unitOfWork);
	          next = unitOfWork.actualDuration;
	          for (var child = unitOfWork.child; null !== child; )
	            (next += child.actualDuration), (child = child.sibling);
	          unitOfWork.actualDuration = next;
	        }
	        next = unitOfWork.return;
	        null !== next &&
	          ((next.flags |= 32768),
	          (next.subtreeFlags = 0),
	          (next.deletions = null));
	        if (
	          !skipSiblings &&
	          ((unitOfWork = unitOfWork.sibling), null !== unitOfWork)
	        ) {
	          workInProgress = unitOfWork;
	          return;
	        }
	        workInProgress = unitOfWork = next;
	      } while (null !== unitOfWork);
	      workInProgressRootExitStatus = RootDidNotComplete;
	      workInProgress = null;
	    }
	    function commitRoot(
	      root,
	      recoverableErrors,
	      transitions,
	      didIncludeRenderPhaseUpdate,
	      spawnedLane,
	      updatedLanes,
	      suspendedRetryLanes,
	      suspendedCommitReason,
	      completedRenderStartTime,
	      completedRenderEndTime
	    ) {
	      var prevTransition = ReactSharedInternals.T,
	        previousUpdateLanePriority = ReactDOMSharedInternals.p;
	      try {
	        (ReactDOMSharedInternals.p = DiscreteEventPriority),
	          (ReactSharedInternals.T = null),
	          commitRootImpl(
	            root,
	            recoverableErrors,
	            transitions,
	            didIncludeRenderPhaseUpdate,
	            previousUpdateLanePriority,
	            spawnedLane,
	            updatedLanes,
	            suspendedRetryLanes,
	            suspendedCommitReason,
	            completedRenderStartTime,
	            completedRenderEndTime
	          );
	      } finally {
	        (ReactSharedInternals.T = prevTransition),
	          (ReactDOMSharedInternals.p = previousUpdateLanePriority);
	      }
	    }
	    function commitRootImpl(
	      root,
	      recoverableErrors,
	      transitions,
	      didIncludeRenderPhaseUpdate,
	      renderPriorityLevel,
	      spawnedLane,
	      updatedLanes,
	      suspendedRetryLanes
	    ) {
	      do flushPassiveEffects();
	      while (null !== rootWithPendingPassiveEffects);
	      ReactStrictModeWarnings.flushLegacyContextWarning();
	      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
	      if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
	        throw Error("Should not already be working.");
	      var finishedWork = root.finishedWork;
	      didIncludeRenderPhaseUpdate = root.finishedLanes;
	      null !== injectedProfilingHooks &&
	        "function" === typeof injectedProfilingHooks.markCommitStarted &&
	        injectedProfilingHooks.markCommitStarted(didIncludeRenderPhaseUpdate);
	      if (null === finishedWork) return markCommitStopped(), null;
	      0 === didIncludeRenderPhaseUpdate &&
	        console.error(
	          "root.finishedLanes should not be empty during a commit. This is a bug in React."
	        );
	      root.finishedWork = null;
	      root.finishedLanes = 0;
	      if (finishedWork === root.current)
	        throw Error(
	          "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue."
	        );
	      root.callbackNode = null;
	      root.callbackPriority = 0;
	      root.cancelPendingCommit = null;
	      var remainingLanes = finishedWork.lanes | finishedWork.childLanes;
	      remainingLanes |= concurrentlyUpdatedLanes;
	      markRootFinished(
	        root,
	        didIncludeRenderPhaseUpdate,
	        remainingLanes,
	        spawnedLane,
	        updatedLanes,
	        suspendedRetryLanes
	      );
	      root === workInProgressRoot &&
	        ((workInProgress = workInProgressRoot = null),
	        (workInProgressRootRenderLanes = 0));
	      (0 === (finishedWork.subtreeFlags & 10256) &&
	        0 === (finishedWork.flags & 10256)) ||
	        rootDoesHavePassiveEffects ||
	        ((rootDoesHavePassiveEffects = true),
	        (pendingPassiveEffectsRemainingLanes = remainingLanes),
	        (pendingPassiveTransitions = transitions),
	        scheduleCallback$1(NormalPriority$1, function () {
	          flushPassiveEffects();
	          return null;
	        }));
	      commitStartTime = now();
	      transitions = 0 !== (finishedWork.flags & 15990);
	      0 !== (finishedWork.subtreeFlags & 15990) || transitions
	        ? ((transitions = ReactSharedInternals.T),
	          (ReactSharedInternals.T = null),
	          (spawnedLane = ReactDOMSharedInternals.p),
	          (ReactDOMSharedInternals.p = DiscreteEventPriority),
	          (updatedLanes = executionContext),
	          (executionContext |= CommitContext),
	          commitBeforeMutationEffects(root, finishedWork),
	          commitMutationEffects(
	            root,
	            finishedWork,
	            didIncludeRenderPhaseUpdate
	          ),
	          restoreSelection(selectionInformation, root.containerInfo),
	          (_enabled = !!eventsEnabled),
	          (selectionInformation = eventsEnabled = null),
	          (root.current = finishedWork),
	          null !== injectedProfilingHooks &&
	            "function" ===
	              typeof injectedProfilingHooks.markLayoutEffectsStarted &&
	            injectedProfilingHooks.markLayoutEffectsStarted(
	              didIncludeRenderPhaseUpdate
	            ),
	          commitLayoutEffects(finishedWork, root, didIncludeRenderPhaseUpdate),
	          null !== injectedProfilingHooks &&
	            "function" ===
	              typeof injectedProfilingHooks.markLayoutEffectsStopped &&
	            injectedProfilingHooks.markLayoutEffectsStopped(),
	          requestPaint(),
	          (executionContext = updatedLanes),
	          (ReactDOMSharedInternals.p = spawnedLane),
	          (ReactSharedInternals.T = transitions))
	        : (root.current = finishedWork);
	      (transitions = rootDoesHavePassiveEffects)
	        ? ((rootDoesHavePassiveEffects = false),
	          (rootWithPendingPassiveEffects = root),
	          (pendingPassiveEffectsLanes = didIncludeRenderPhaseUpdate))
	        : (releaseRootPooledCache(root, remainingLanes),
	          (nestedPassiveUpdateCount = 0),
	          (rootWithPassiveNestedUpdates = null));
	      remainingLanes = root.pendingLanes;
	      0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
	      transitions || commitDoubleInvokeEffectsInDEV(root);
	      onCommitRoot$1(finishedWork.stateNode, renderPriorityLevel);
	      isDevToolsPresent && root.memoizedUpdaters.clear();
	      onCommitRoot();
	      ensureRootIsScheduled(root);
	      if (null !== recoverableErrors)
	        for (
	          renderPriorityLevel = root.onRecoverableError, finishedWork = 0;
	          finishedWork < recoverableErrors.length;
	          finishedWork++
	        )
	          (remainingLanes = recoverableErrors[finishedWork]),
	            (transitions = makeErrorInfo(remainingLanes.stack)),
	            runWithFiberInDEV(
	              remainingLanes.source,
	              renderPriorityLevel,
	              remainingLanes.value,
	              transitions
	            );
	      0 !== (pendingPassiveEffectsLanes & 3) && flushPassiveEffects();
	      remainingLanes = root.pendingLanes;
	      0 !== (didIncludeRenderPhaseUpdate & 4194218) &&
	      0 !== (remainingLanes & 42)
	        ? ((nestedUpdateScheduled = true),
	          root === rootWithNestedUpdates
	            ? nestedUpdateCount++
	            : ((nestedUpdateCount = 0), (rootWithNestedUpdates = root)))
	        : (nestedUpdateCount = 0);
	      flushSyncWorkAcrossRoots_impl(0);
	      markCommitStopped();
	      return null;
	    }
	    function makeErrorInfo(componentStack) {
	      componentStack = { componentStack: componentStack };
	      Object.defineProperty(componentStack, "digest", {
	        get: function () {
	          console.error(
	            'You are accessing "digest" from the errorInfo object passed to onRecoverableError. This property is no longer provided as part of errorInfo but can be accessed as a property of the Error instance itself.'
	          );
	        }
	      });
	      return componentStack;
	    }
	    function releaseRootPooledCache(root, remainingLanes) {
	      0 === (root.pooledCacheLanes &= remainingLanes) &&
	        ((remainingLanes = root.pooledCache),
	        null != remainingLanes &&
	          ((root.pooledCache = null), releaseCache(remainingLanes)));
	    }
	    function flushPassiveEffects() {
	      if (null !== rootWithPendingPassiveEffects) {
	        var root = rootWithPendingPassiveEffects,
	          remainingLanes = pendingPassiveEffectsRemainingLanes;
	        pendingPassiveEffectsRemainingLanes = 0;
	        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes),
	          priority =
	            DefaultEventPriority > renderPriority
	              ? DefaultEventPriority
	              : renderPriority;
	        renderPriority = ReactSharedInternals.T;
	        var previousPriority = ReactDOMSharedInternals.p;
	        try {
	          ReactDOMSharedInternals.p = priority;
	          ReactSharedInternals.T = null;
	          if (null === rootWithPendingPassiveEffects)
	            var JSCompiler_inline_result = !1;
	          else {
	            priority = pendingPassiveTransitions;
	            pendingPassiveTransitions = null;
	            var root$jscomp$0 = rootWithPendingPassiveEffects,
	              lanes = pendingPassiveEffectsLanes;
	            rootWithPendingPassiveEffects = null;
	            pendingPassiveEffectsLanes = 0;
	            if (
	              (executionContext & (RenderContext | CommitContext)) !==
	              NoContext
	            )
	              throw Error(
	                "Cannot flush passive effects while already rendering."
	              );
	            isFlushingPassiveEffects = !0;
	            didScheduleUpdateDuringPassiveEffects = !1;
	            null !== injectedProfilingHooks &&
	              "function" ===
	                typeof injectedProfilingHooks.markPassiveEffectsStarted &&
	              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
	            var prevExecutionContext = executionContext;
	            executionContext |= CommitContext;
	            commitPassiveUnmountOnFiber(root$jscomp$0.current);
	            commitPassiveMountOnFiber(
	              root$jscomp$0,
	              root$jscomp$0.current,
	              lanes,
	              priority
	            );
	            null !== injectedProfilingHooks &&
	              "function" ===
	                typeof injectedProfilingHooks.markPassiveEffectsStopped &&
	              injectedProfilingHooks.markPassiveEffectsStopped();
	            commitDoubleInvokeEffectsInDEV(root$jscomp$0);
	            executionContext = prevExecutionContext;
	            flushSyncWorkAcrossRoots_impl(0, !1);
	            didScheduleUpdateDuringPassiveEffects
	              ? root$jscomp$0 === rootWithPassiveNestedUpdates
	                ? nestedPassiveUpdateCount++
	                : ((nestedPassiveUpdateCount = 0),
	                  (rootWithPassiveNestedUpdates = root$jscomp$0))
	              : (nestedPassiveUpdateCount = 0);
	            didScheduleUpdateDuringPassiveEffects = isFlushingPassiveEffects =
	              !1;
	            if (
	              injectedHook &&
	              "function" === typeof injectedHook.onPostCommitFiberRoot
	            )
	              try {
	                injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
	              } catch (err) {
	                hasLoggedError ||
	                  ((hasLoggedError = !0),
	                  console.error(
	                    "React instrumentation encountered an error: %s",
	                    err
	                  ));
	              }
	            var stateNode = root$jscomp$0.current.stateNode;
	            stateNode.effectDuration = 0;
	            stateNode.passiveEffectDuration = 0;
	            JSCompiler_inline_result = !0;
	          }
	          return JSCompiler_inline_result;
	        } finally {
	          (ReactDOMSharedInternals.p = previousPriority),
	            (ReactSharedInternals.T = renderPriority),
	            releaseRootPooledCache(root, remainingLanes);
	        }
	      }
	      return false;
	    }
	    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
	      sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
	      sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
	      rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
	      null !== rootFiber &&
	        (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
	    }
	    function captureCommitPhaseError(
	      sourceFiber,
	      nearestMountedAncestor,
	      error
	    ) {
	      isRunningInsertionEffect = false;
	      if (3 === sourceFiber.tag)
	        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
	      else {
	        for (; null !== nearestMountedAncestor; ) {
	          if (3 === nearestMountedAncestor.tag) {
	            captureCommitPhaseErrorOnRoot(
	              nearestMountedAncestor,
	              sourceFiber,
	              error
	            );
	            return;
	          }
	          if (1 === nearestMountedAncestor.tag) {
	            var instance = nearestMountedAncestor.stateNode;
	            if (
	              "function" ===
	                typeof nearestMountedAncestor.type.getDerivedStateFromError ||
	              ("function" === typeof instance.componentDidCatch &&
	                (null === legacyErrorBoundariesThatAlreadyFailed ||
	                  !legacyErrorBoundariesThatAlreadyFailed.has(instance)))
	            ) {
	              sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
	              error = createClassErrorUpdate(2);
	              instance = enqueueUpdate(nearestMountedAncestor, error, 2);
	              null !== instance &&
	                (initializeClassErrorUpdate(
	                  error,
	                  instance,
	                  nearestMountedAncestor,
	                  sourceFiber
	                ),
	                markRootUpdated$1(instance, 2),
	                ensureRootIsScheduled(instance));
	              return;
	            }
	          }
	          nearestMountedAncestor = nearestMountedAncestor.return;
	        }
	        console.error(
	          "Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Potential causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s",
	          error
	        );
	      }
	    }
	    function attachPingListener(root, wakeable, lanes) {
	      var pingCache = root.pingCache;
	      if (null === pingCache) {
	        pingCache = root.pingCache = new PossiblyWeakMap();
	        var threadIDs = new Set();
	        pingCache.set(wakeable, threadIDs);
	      } else
	        (threadIDs = pingCache.get(wakeable)),
	          undefined === threadIDs &&
	            ((threadIDs = new Set()), pingCache.set(wakeable, threadIDs));
	      threadIDs.has(lanes) ||
	        ((workInProgressRootDidAttachPingListener = true),
	        threadIDs.add(lanes),
	        (pingCache = pingSuspendedRoot.bind(null, root, wakeable, lanes)),
	        isDevToolsPresent && restorePendingUpdaters(root, lanes),
	        wakeable.then(pingCache, pingCache));
	    }
	    function pingSuspendedRoot(root, wakeable, pingedLanes) {
	      var pingCache = root.pingCache;
	      null !== pingCache && pingCache.delete(wakeable);
	      root.pingedLanes |= root.suspendedLanes & pingedLanes;
	      root.warmLanes &= ~pingedLanes;
	      isConcurrentActEnvironment() &&
	        null === ReactSharedInternals.actQueue &&
	        console.error(
	          "A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act"
	        );
	      workInProgressRoot === root &&
	        (workInProgressRootRenderLanes & pingedLanes) === pingedLanes &&
	        (workInProgressRootExitStatus === RootSuspendedWithDelay ||
	        (workInProgressRootExitStatus === RootSuspended &&
	          (workInProgressRootRenderLanes & 62914560) ===
	            workInProgressRootRenderLanes &&
	          now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)
	          ? (executionContext & RenderContext) === NoContext &&
	            prepareFreshStack(root, 0)
	          : (workInProgressRootPingedLanes |= pingedLanes),
	        workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes &&
	          (workInProgressSuspendedRetryLanes = 0));
	      ensureRootIsScheduled(root);
	    }
	    function retryTimedOutBoundary(boundaryFiber, retryLane) {
	      0 === retryLane && (retryLane = claimNextRetryLane());
	      boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
	      null !== boundaryFiber &&
	        (markRootUpdated$1(boundaryFiber, retryLane),
	        ensureRootIsScheduled(boundaryFiber));
	    }
	    function retryDehydratedSuspenseBoundary(boundaryFiber) {
	      var suspenseState = boundaryFiber.memoizedState,
	        retryLane = 0;
	      null !== suspenseState && (retryLane = suspenseState.retryLane);
	      retryTimedOutBoundary(boundaryFiber, retryLane);
	    }
	    function resolveRetryWakeable(boundaryFiber, wakeable) {
	      var retryLane = 0;
	      switch (boundaryFiber.tag) {
	        case 13:
	          var retryCache = boundaryFiber.stateNode;
	          var suspenseState = boundaryFiber.memoizedState;
	          null !== suspenseState && (retryLane = suspenseState.retryLane);
	          break;
	        case 19:
	          retryCache = boundaryFiber.stateNode;
	          break;
	        case 22:
	          retryCache = boundaryFiber.stateNode._retryCache;
	          break;
	        default:
	          throw Error(
	            "Pinged unknown suspense boundary type. This is probably a bug in React."
	          );
	      }
	      null !== retryCache && retryCache.delete(wakeable);
	      retryTimedOutBoundary(boundaryFiber, retryLane);
	    }
	    function recursivelyTraverseAndDoubleInvokeEffectsInDEV(
	      root$jscomp$0,
	      parentFiber,
	      isInStrictMode
	    ) {
	      if (0 !== (parentFiber.subtreeFlags & 33562624))
	        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
	          var root = root$jscomp$0,
	            fiber = parentFiber,
	            isStrictModeFiber = fiber.type === REACT_STRICT_MODE_TYPE;
	          isStrictModeFiber = isInStrictMode || isStrictModeFiber;
	          22 !== fiber.tag
	            ? fiber.flags & 33554432
	              ? isStrictModeFiber &&
	                runWithFiberInDEV(
	                  fiber,
	                  doubleInvokeEffectsOnFiber,
	                  root,
	                  fiber,
	                  (fiber.mode & NoStrictPassiveEffectsMode) === NoMode
	                )
	              : recursivelyTraverseAndDoubleInvokeEffectsInDEV(
	                  root,
	                  fiber,
	                  isStrictModeFiber
	                )
	            : null === fiber.memoizedState &&
	              (isStrictModeFiber && fiber.flags & 8192
	                ? runWithFiberInDEV(
	                    fiber,
	                    doubleInvokeEffectsOnFiber,
	                    root,
	                    fiber
	                  )
	                : fiber.subtreeFlags & 33554432 &&
	                  runWithFiberInDEV(
	                    fiber,
	                    recursivelyTraverseAndDoubleInvokeEffectsInDEV,
	                    root,
	                    fiber,
	                    isStrictModeFiber
	                  ));
	          parentFiber = parentFiber.sibling;
	        }
	    }
	    function doubleInvokeEffectsOnFiber(root, fiber) {
	      var shouldDoubleInvokePassiveEffects =
	        2 < arguments.length && undefined !== arguments[2] ? arguments[2] : true;
	      setIsStrictModeForDevtools(true);
	      try {
	        disappearLayoutEffects(fiber),
	          shouldDoubleInvokePassiveEffects && disconnectPassiveEffect(fiber),
	          reappearLayoutEffects(root, fiber.alternate, fiber, !1),
	          shouldDoubleInvokePassiveEffects &&
	            reconnectPassiveEffects(root, fiber, 0, null, !1);
	      } finally {
	        setIsStrictModeForDevtools(false);
	      }
	    }
	    function commitDoubleInvokeEffectsInDEV(root) {
	      var doubleInvokeEffects = true;
	      root.current.mode & (StrictLegacyMode | StrictEffectsMode) ||
	        (doubleInvokeEffects = false);
	      recursivelyTraverseAndDoubleInvokeEffectsInDEV(
	        root,
	        root.current,
	        doubleInvokeEffects
	      );
	    }
	    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
	      if ((executionContext & RenderContext) === NoContext) {
	        var tag = fiber.tag;
	        if (
	          3 === tag ||
	          1 === tag ||
	          0 === tag ||
	          11 === tag ||
	          14 === tag ||
	          15 === tag
	        ) {
	          tag = getComponentNameFromFiber(fiber) || "ReactComponent";
	          if (null !== didWarnStateUpdateForNotYetMountedComponent) {
	            if (didWarnStateUpdateForNotYetMountedComponent.has(tag)) return;
	            didWarnStateUpdateForNotYetMountedComponent.add(tag);
	          } else didWarnStateUpdateForNotYetMountedComponent = new Set([tag]);
	          runWithFiberInDEV(fiber, function () {
	            console.error(
	              "Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead."
	            );
	          });
	        }
	      }
	    }
	    function restorePendingUpdaters(root, lanes) {
	      isDevToolsPresent &&
	        root.memoizedUpdaters.forEach(function (schedulingFiber) {
	          addFiberToLanesMap(root, schedulingFiber, lanes);
	        });
	    }
	    function scheduleCallback$1(priorityLevel, callback) {
	      var actQueue = ReactSharedInternals.actQueue;
	      return null !== actQueue
	        ? (actQueue.push(callback), fakeActCallbackNode$1)
	        : scheduleCallback$3(priorityLevel, callback);
	    }
	    function warnIfUpdatesNotWrappedWithActDEV(fiber) {
	      isConcurrentActEnvironment() &&
	        null === ReactSharedInternals.actQueue &&
	        runWithFiberInDEV(fiber, function () {
	          console.error(
	            "An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act",
	            getComponentNameFromFiber(fiber)
	          );
	        });
	    }
	    function ensureRootIsScheduled(root) {
	      root !== lastScheduledRoot &&
	        null === root.next &&
	        (null === lastScheduledRoot
	          ? (firstScheduledRoot = lastScheduledRoot = root)
	          : (lastScheduledRoot = lastScheduledRoot.next = root));
	      mightHavePendingSyncWork = true;
	      null !== ReactSharedInternals.actQueue
	        ? didScheduleMicrotask_act ||
	          ((didScheduleMicrotask_act = true),
	          scheduleImmediateTask(processRootScheduleInMicrotask))
	        : didScheduleMicrotask ||
	          ((didScheduleMicrotask = true),
	          scheduleImmediateTask(processRootScheduleInMicrotask));
	    }
	    function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
	      if (!isFlushingWork && mightHavePendingSyncWork) {
	        isFlushingWork = true;
	        do {
	          var didPerformSomeWork = false;
	          for (var root = firstScheduledRoot; null !== root; ) {
	            if (0 !== syncTransitionLanes) {
	                var pendingLanes = root.pendingLanes;
	                if (0 === pendingLanes) var nextLanes = 0;
	                else {
	                  var suspendedLanes = root.suspendedLanes,
	                    pingedLanes = root.pingedLanes;
	                  nextLanes =
	                    (1 << (31 - clz32(42 | syncTransitionLanes) + 1)) - 1;
	                  nextLanes &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
	                  nextLanes =
	                    nextLanes & 201326677
	                      ? (nextLanes & 201326677) | 1
	                      : nextLanes
	                        ? nextLanes | 2
	                        : 0;
	                }
	                0 !== nextLanes &&
	                  ((didPerformSomeWork = true),
	                  performSyncWorkOnRoot(root, nextLanes));
	              } else
	                (nextLanes = workInProgressRootRenderLanes),
	                  (nextLanes = getNextLanes(
	                    root,
	                    root === workInProgressRoot ? nextLanes : 0
	                  )),
	                  0 === (nextLanes & 3) ||
	                    checkIfRootIsPrerendering(root, nextLanes) ||
	                    ((didPerformSomeWork = true),
	                    performSyncWorkOnRoot(root, nextLanes));
	            root = root.next;
	          }
	        } while (didPerformSomeWork);
	        isFlushingWork = false;
	      }
	    }
	    function processRootScheduleInMicrotask() {
	      mightHavePendingSyncWork =
	        didScheduleMicrotask_act =
	        didScheduleMicrotask =
	          false;
	      var syncTransitionLanes = 0;
	      0 !== currentEventTransitionLane &&
	        (shouldAttemptEagerTransition() &&
	          (syncTransitionLanes = currentEventTransitionLane),
	        (currentEventTransitionLane = 0));
	      for (
	        var currentTime = now$1(), prev = null, root = firstScheduledRoot;
	        null !== root;

	      ) {
	        var next = root.next,
	          nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);
	        if (0 === nextLanes)
	          (root.next = null),
	            null === prev ? (firstScheduledRoot = next) : (prev.next = next),
	            null === next && (lastScheduledRoot = prev);
	        else if (
	          ((prev = root), 0 !== syncTransitionLanes || 0 !== (nextLanes & 3))
	        )
	          mightHavePendingSyncWork = true;
	        root = next;
	      }
	      flushSyncWorkAcrossRoots_impl(syncTransitionLanes);
	    }
	    function scheduleTaskForRootDuringMicrotask(root, currentTime) {
	      for (
	        var suspendedLanes = root.suspendedLanes,
	          pingedLanes = root.pingedLanes,
	          expirationTimes = root.expirationTimes,
	          lanes = root.pendingLanes & -62914561;
	        0 < lanes;

	      ) {
	        var index = 31 - clz32(lanes),
	          lane = 1 << index,
	          expirationTime = expirationTimes[index];
	        if (-1 === expirationTime) {
	          if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))
	            expirationTimes[index] = computeExpirationTime(lane, currentTime);
	        } else expirationTime <= currentTime && (root.expiredLanes |= lane);
	        lanes &= ~lane;
	      }
	      currentTime = workInProgressRoot;
	      suspendedLanes = workInProgressRootRenderLanes;
	      suspendedLanes = getNextLanes(
	        root,
	        root === currentTime ? suspendedLanes : 0
	      );
	      pingedLanes = root.callbackNode;
	      if (
	        0 === suspendedLanes ||
	        (root === currentTime &&
	          workInProgressSuspendedReason === SuspendedOnData) ||
	        null !== root.cancelPendingCommit
	      )
	        return (
	          null !== pingedLanes && cancelCallback(pingedLanes),
	          (root.callbackNode = null),
	          (root.callbackPriority = 0)
	        );
	      if (
	        0 === (suspendedLanes & 3) ||
	        checkIfRootIsPrerendering(root, suspendedLanes)
	      ) {
	        currentTime = suspendedLanes & -suspendedLanes;
	        if (
	          currentTime !== root.callbackPriority ||
	          (null !== ReactSharedInternals.actQueue &&
	            pingedLanes !== fakeActCallbackNode)
	        )
	          cancelCallback(pingedLanes);
	        else return currentTime;
	        switch (lanesToEventPriority(suspendedLanes)) {
	          case DiscreteEventPriority:
	          case ContinuousEventPriority:
	            suspendedLanes = UserBlockingPriority;
	            break;
	          case DefaultEventPriority:
	            suspendedLanes = NormalPriority$1;
	            break;
	          case IdleEventPriority:
	            suspendedLanes = IdlePriority;
	            break;
	          default:
	            suspendedLanes = NormalPriority$1;
	        }
	        pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root);
	        null !== ReactSharedInternals.actQueue
	          ? (ReactSharedInternals.actQueue.push(pingedLanes),
	            (suspendedLanes = fakeActCallbackNode))
	          : (suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes));
	        root.callbackPriority = currentTime;
	        root.callbackNode = suspendedLanes;
	        return currentTime;
	      }
	      null !== pingedLanes && cancelCallback(pingedLanes);
	      root.callbackPriority = 2;
	      root.callbackNode = null;
	      return 2;
	    }
	    function performWorkOnRootViaSchedulerTask(root, didTimeout) {
	      nestedUpdateScheduled = currentUpdateIsNested = false;
	      var originalCallbackNode = root.callbackNode;
	      if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode)
	        return null;
	      var workInProgressRootRenderLanes$jscomp$0 =
	        workInProgressRootRenderLanes;
	      workInProgressRootRenderLanes$jscomp$0 = getNextLanes(
	        root,
	        root === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0
	      );
	      if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
	      performWorkOnRoot(
	        root,
	        workInProgressRootRenderLanes$jscomp$0,
	        didTimeout
	      );
	      scheduleTaskForRootDuringMicrotask(root, now$1());
	      return null != root.callbackNode &&
	        root.callbackNode === originalCallbackNode
	        ? performWorkOnRootViaSchedulerTask.bind(null, root)
	        : null;
	    }
	    function performSyncWorkOnRoot(root, lanes) {
	      if (flushPassiveEffects()) return null;
	      currentUpdateIsNested = nestedUpdateScheduled;
	      nestedUpdateScheduled = false;
	      performWorkOnRoot(root, lanes, true);
	    }
	    function cancelCallback(callbackNode) {
	      callbackNode !== fakeActCallbackNode &&
	        null !== callbackNode &&
	        cancelCallback$1(callbackNode);
	    }
	    function scheduleImmediateTask(cb) {
	      null !== ReactSharedInternals.actQueue &&
	        ReactSharedInternals.actQueue.push(function () {
	          cb();
	          return null;
	        });
	      scheduleMicrotask(function () {
	        (executionContext & (RenderContext | CommitContext)) !== NoContext
	          ? scheduleCallback$3(ImmediatePriority, cb)
	          : cb();
	      });
	    }
	    function requestTransitionLane() {
	      0 === currentEventTransitionLane &&
	        (currentEventTransitionLane = claimNextTransitionLane());
	      return currentEventTransitionLane;
	    }
	    function coerceFormActionProp(actionProp) {
	      if (
	        null == actionProp ||
	        "symbol" === typeof actionProp ||
	        "boolean" === typeof actionProp
	      )
	        return null;
	      if ("function" === typeof actionProp) return actionProp;
	      checkAttributeStringCoercion(actionProp, "action");
	      return sanitizeURL("" + actionProp);
	    }
	    function createFormDataWithSubmitter(form, submitter) {
	      var temp = submitter.ownerDocument.createElement("input");
	      temp.name = submitter.name;
	      temp.value = submitter.value;
	      form.id && temp.setAttribute("form", form.id);
	      submitter.parentNode.insertBefore(temp, submitter);
	      form = new FormData(form);
	      temp.parentNode.removeChild(temp);
	      return form;
	    }
	    function extractEvents$1(
	      dispatchQueue,
	      domEventName,
	      maybeTargetInst,
	      nativeEvent,
	      nativeEventTarget
	    ) {
	      if (
	        "submit" === domEventName &&
	        maybeTargetInst &&
	        maybeTargetInst.stateNode === nativeEventTarget
	      ) {
	        var action = coerceFormActionProp(
	            (nativeEventTarget[internalPropsKey] || null).action
	          ),
	          submitter = nativeEvent.submitter;
	        submitter &&
	          ((domEventName = (domEventName = submitter[internalPropsKey] || null)
	            ? coerceFormActionProp(domEventName.formAction)
	            : submitter.getAttribute("formAction")),
	          null !== domEventName &&
	            ((action = domEventName), (submitter = null)));
	        var event = new SyntheticEvent(
	          "action",
	          "action",
	          null,
	          nativeEvent,
	          nativeEventTarget
	        );
	        dispatchQueue.push({
	          event: event,
	          listeners: [
	            {
	              instance: null,
	              listener: function () {
	                if (nativeEvent.defaultPrevented) {
	                  if (0 !== currentEventTransitionLane) {
	                    var formData = submitter
	                        ? createFormDataWithSubmitter(
	                            nativeEventTarget,
	                            submitter
	                          )
	                        : new FormData(nativeEventTarget),
	                      pendingState = {
	                        pending: true,
	                        data: formData,
	                        method: nativeEventTarget.method,
	                        action: action
	                      };
	                    Object.freeze(pendingState);
	                    startHostTransition(
	                      maybeTargetInst,
	                      pendingState,
	                      null,
	                      formData
	                    );
	                  }
	                } else
	                  "function" === typeof action &&
	                    (event.preventDefault(),
	                    (formData = submitter
	                      ? createFormDataWithSubmitter(
	                          nativeEventTarget,
	                          submitter
	                        )
	                      : new FormData(nativeEventTarget)),
	                    (pendingState = {
	                      pending: true,
	                      data: formData,
	                      method: nativeEventTarget.method,
	                      action: action
	                    }),
	                    Object.freeze(pendingState),
	                    startHostTransition(
	                      maybeTargetInst,
	                      pendingState,
	                      action,
	                      formData
	                    ));
	              },
	              currentTarget: nativeEventTarget
	            }
	          ]
	        });
	      }
	    }
	    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
	      eventSystemFlags = 0 !== (eventSystemFlags & 4);
	      for (var i = 0; i < dispatchQueue.length; i++) {
	        var _dispatchQueue$i = dispatchQueue[i];
	        a: {
	          var previousInstance = undefined,
	            event = _dispatchQueue$i.event;
	          _dispatchQueue$i = _dispatchQueue$i.listeners;
	          if (eventSystemFlags)
	            for (
	              var i$jscomp$0 = _dispatchQueue$i.length - 1;
	              0 <= i$jscomp$0;
	              i$jscomp$0--
	            ) {
	              var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0],
	                instance = _dispatchListeners$i.instance,
	                currentTarget = _dispatchListeners$i.currentTarget;
	              _dispatchListeners$i = _dispatchListeners$i.listener;
	              if (instance !== previousInstance && event.isPropagationStopped())
	                break a;
	              previousInstance = event;
	              previousInstance.currentTarget = currentTarget;
	              try {
	                _dispatchListeners$i(previousInstance);
	              } catch (error) {
	                reportGlobalError(error);
	              }
	              previousInstance.currentTarget = null;
	              previousInstance = instance;
	            }
	          else
	            for (
	              i$jscomp$0 = 0;
	              i$jscomp$0 < _dispatchQueue$i.length;
	              i$jscomp$0++
	            ) {
	              _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0];
	              instance = _dispatchListeners$i.instance;
	              currentTarget = _dispatchListeners$i.currentTarget;
	              _dispatchListeners$i = _dispatchListeners$i.listener;
	              if (instance !== previousInstance && event.isPropagationStopped())
	                break a;
	              previousInstance = event;
	              previousInstance.currentTarget = currentTarget;
	              try {
	                _dispatchListeners$i(previousInstance);
	              } catch (error) {
	                reportGlobalError(error);
	              }
	              previousInstance.currentTarget = null;
	              previousInstance = instance;
	            }
	        }
	      }
	    }
	    function listenToNonDelegatedEvent(domEventName, targetElement) {
	      nonDelegatedEvents.has(domEventName) ||
	        console.error(
	          'Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.',
	          domEventName
	        );
	      var listenerSet = targetElement[internalEventHandlersKey];
	      undefined === listenerSet &&
	        (listenerSet = targetElement[internalEventHandlersKey] = new Set());
	      var listenerSetKey = domEventName + "__bubble";
	      listenerSet.has(listenerSetKey) ||
	        (addTrappedEventListener(targetElement, domEventName, 2, false),
	        listenerSet.add(listenerSetKey));
	    }
	    function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
	      nonDelegatedEvents.has(domEventName) &&
	        !isCapturePhaseListener &&
	        console.error(
	          'Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.',
	          domEventName
	        );
	      var eventSystemFlags = 0;
	      isCapturePhaseListener && (eventSystemFlags |= 4);
	      addTrappedEventListener(
	        target,
	        domEventName,
	        eventSystemFlags,
	        isCapturePhaseListener
	      );
	    }
	    function listenToAllSupportedEvents(rootContainerElement) {
	      if (!rootContainerElement[listeningMarker]) {
	        rootContainerElement[listeningMarker] = true;
	        allNativeEvents.forEach(function (domEventName) {
	          "selectionchange" !== domEventName &&
	            (nonDelegatedEvents.has(domEventName) ||
	              listenToNativeEvent(domEventName, false, rootContainerElement),
	            listenToNativeEvent(domEventName, true, rootContainerElement));
	        });
	        var ownerDocument =
	          9 === rootContainerElement.nodeType
	            ? rootContainerElement
	            : rootContainerElement.ownerDocument;
	        null === ownerDocument ||
	          ownerDocument[listeningMarker] ||
	          ((ownerDocument[listeningMarker] = true),
	          listenToNativeEvent("selectionchange", false, ownerDocument));
	      }
	    }
	    function addTrappedEventListener(
	      targetContainer,
	      domEventName,
	      eventSystemFlags,
	      isCapturePhaseListener
	    ) {
	      switch (getEventPriority(domEventName)) {
	        case DiscreteEventPriority:
	          var listenerWrapper = dispatchDiscreteEvent;
	          break;
	        case ContinuousEventPriority:
	          listenerWrapper = dispatchContinuousEvent;
	          break;
	        default:
	          listenerWrapper = dispatchEvent;
	      }
	      eventSystemFlags = listenerWrapper.bind(
	        null,
	        domEventName,
	        eventSystemFlags,
	        targetContainer
	      );
	      listenerWrapper = undefined;
	      !passiveBrowserEventsSupported ||
	        ("touchstart" !== domEventName &&
	          "touchmove" !== domEventName &&
	          "wheel" !== domEventName) ||
	        (listenerWrapper = true);
	      isCapturePhaseListener
	        ? undefined !== listenerWrapper
	          ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
	              capture: true,
	              passive: listenerWrapper
	            })
	          : targetContainer.addEventListener(domEventName, eventSystemFlags, true)
	        : undefined !== listenerWrapper
	          ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
	              passive: listenerWrapper
	            })
	          : targetContainer.addEventListener(
	              domEventName,
	              eventSystemFlags,
	              false
	            );
	    }
	    function dispatchEventForPluginEventSystem(
	      domEventName,
	      eventSystemFlags,
	      nativeEvent,
	      targetInst$jscomp$0,
	      targetContainer
	    ) {
	      var ancestorInst = targetInst$jscomp$0;
	      if (
	        0 === (eventSystemFlags & 1) &&
	        0 === (eventSystemFlags & 2) &&
	        null !== targetInst$jscomp$0
	      )
	        a: for (;;) {
	          if (null === targetInst$jscomp$0) return;
	          var nodeTag = targetInst$jscomp$0.tag;
	          if (3 === nodeTag || 4 === nodeTag) {
	            var container = targetInst$jscomp$0.stateNode.containerInfo;
	            if (
	              container === targetContainer ||
	              (8 === container.nodeType &&
	                container.parentNode === targetContainer)
	            )
	              break;
	            if (4 === nodeTag)
	              for (nodeTag = targetInst$jscomp$0.return; null !== nodeTag; ) {
	                var grandTag = nodeTag.tag;
	                if (3 === grandTag || 4 === grandTag)
	                  if (
	                    ((grandTag = nodeTag.stateNode.containerInfo),
	                    grandTag === targetContainer ||
	                      (8 === grandTag.nodeType &&
	                        grandTag.parentNode === targetContainer))
	                  )
	                    return;
	                nodeTag = nodeTag.return;
	              }
	            for (; null !== container; ) {
	              nodeTag = getClosestInstanceFromNode(container);
	              if (null === nodeTag) return;
	              grandTag = nodeTag.tag;
	              if (
	                5 === grandTag ||
	                6 === grandTag ||
	                26 === grandTag ||
	                27 === grandTag
	              ) {
	                targetInst$jscomp$0 = ancestorInst = nodeTag;
	                continue a;
	              }
	              container = container.parentNode;
	            }
	          }
	          targetInst$jscomp$0 = targetInst$jscomp$0.return;
	        }
	      batchedUpdates$1(function () {
	        var targetInst = ancestorInst,
	          nativeEventTarget = getEventTarget(nativeEvent),
	          dispatchQueue = [];
	        a: {
	          var reactName = topLevelEventsToReactNames.get(domEventName);
	          if (void 0 !== reactName) {
	            var SyntheticEventCtor = SyntheticEvent,
	              reactEventType = domEventName;
	            switch (domEventName) {
	              case "keypress":
	                if (0 === getEventCharCode(nativeEvent)) break a;
	              case "keydown":
	              case "keyup":
	                SyntheticEventCtor = SyntheticKeyboardEvent;
	                break;
	              case "focusin":
	                reactEventType = "focus";
	                SyntheticEventCtor = SyntheticFocusEvent;
	                break;
	              case "focusout":
	                reactEventType = "blur";
	                SyntheticEventCtor = SyntheticFocusEvent;
	                break;
	              case "beforeblur":
	              case "afterblur":
	                SyntheticEventCtor = SyntheticFocusEvent;
	                break;
	              case "click":
	                if (2 === nativeEvent.button) break a;
	              case "auxclick":
	              case "dblclick":
	              case "mousedown":
	              case "mousemove":
	              case "mouseup":
	              case "mouseout":
	              case "mouseover":
	              case "contextmenu":
	                SyntheticEventCtor = SyntheticMouseEvent;
	                break;
	              case "drag":
	              case "dragend":
	              case "dragenter":
	              case "dragexit":
	              case "dragleave":
	              case "dragover":
	              case "dragstart":
	              case "drop":
	                SyntheticEventCtor = SyntheticDragEvent;
	                break;
	              case "touchcancel":
	              case "touchend":
	              case "touchmove":
	              case "touchstart":
	                SyntheticEventCtor = SyntheticTouchEvent;
	                break;
	              case ANIMATION_END:
	              case ANIMATION_ITERATION:
	              case ANIMATION_START:
	                SyntheticEventCtor = SyntheticAnimationEvent;
	                break;
	              case TRANSITION_END:
	                SyntheticEventCtor = SyntheticTransitionEvent;
	                break;
	              case "scroll":
	              case "scrollend":
	                SyntheticEventCtor = SyntheticUIEvent;
	                break;
	              case "wheel":
	                SyntheticEventCtor = SyntheticWheelEvent;
	                break;
	              case "copy":
	              case "cut":
	              case "paste":
	                SyntheticEventCtor = SyntheticClipboardEvent;
	                break;
	              case "gotpointercapture":
	              case "lostpointercapture":
	              case "pointercancel":
	              case "pointerdown":
	              case "pointermove":
	              case "pointerout":
	              case "pointerover":
	              case "pointerup":
	                SyntheticEventCtor = SyntheticPointerEvent;
	                break;
	              case "toggle":
	              case "beforetoggle":
	                SyntheticEventCtor = SyntheticToggleEvent;
	            }
	            var inCapturePhase = 0 !== (eventSystemFlags & 4),
	              accumulateTargetOnly =
	                !inCapturePhase &&
	                ("scroll" === domEventName || "scrollend" === domEventName),
	              reactEventName = inCapturePhase
	                ? null !== reactName
	                  ? reactName + "Capture"
	                  : null
	                : reactName;
	            inCapturePhase = [];
	            for (
	              var instance = targetInst, lastHostComponent;
	              null !== instance;

	            ) {
	              var _instance2 = instance;
	              lastHostComponent = _instance2.stateNode;
	              _instance2 = _instance2.tag;
	              (5 !== _instance2 && 26 !== _instance2 && 27 !== _instance2) ||
	                null === lastHostComponent ||
	                null === reactEventName ||
	                ((_instance2 = getListener(instance, reactEventName)),
	                null != _instance2 &&
	                  inCapturePhase.push(
	                    createDispatchListener(
	                      instance,
	                      _instance2,
	                      lastHostComponent
	                    )
	                  ));
	              if (accumulateTargetOnly) break;
	              instance = instance.return;
	            }
	            0 < inCapturePhase.length &&
	              ((reactName = new SyntheticEventCtor(
	                reactName,
	                reactEventType,
	                null,
	                nativeEvent,
	                nativeEventTarget
	              )),
	              dispatchQueue.push({
	                event: reactName,
	                listeners: inCapturePhase
	              }));
	          }
	        }
	        if (0 === (eventSystemFlags & 7)) {
	          a: {
	            reactName =
	              "mouseover" === domEventName || "pointerover" === domEventName;
	            SyntheticEventCtor =
	              "mouseout" === domEventName || "pointerout" === domEventName;
	            if (
	              reactName &&
	              nativeEvent !== currentReplayingEvent &&
	              (reactEventType =
	                nativeEvent.relatedTarget || nativeEvent.fromElement) &&
	              (getClosestInstanceFromNode(reactEventType) ||
	                reactEventType[internalContainerInstanceKey])
	            )
	              break a;
	            if (SyntheticEventCtor || reactName) {
	              reactName =
	                nativeEventTarget.window === nativeEventTarget
	                  ? nativeEventTarget
	                  : (reactName = nativeEventTarget.ownerDocument)
	                    ? reactName.defaultView || reactName.parentWindow
	                    : window;
	              if (SyntheticEventCtor) {
	                if (
	                  ((reactEventType =
	                    nativeEvent.relatedTarget || nativeEvent.toElement),
	                  (SyntheticEventCtor = targetInst),
	                  (reactEventType = reactEventType
	                    ? getClosestInstanceFromNode(reactEventType)
	                    : null),
	                  null !== reactEventType &&
	                    ((accumulateTargetOnly =
	                      getNearestMountedFiber(reactEventType)),
	                    (inCapturePhase = reactEventType.tag),
	                    reactEventType !== accumulateTargetOnly ||
	                      (5 !== inCapturePhase &&
	                        27 !== inCapturePhase &&
	                        6 !== inCapturePhase)))
	                )
	                  reactEventType = null;
	              } else (SyntheticEventCtor = null), (reactEventType = targetInst);
	              if (SyntheticEventCtor !== reactEventType) {
	                inCapturePhase = SyntheticMouseEvent;
	                _instance2 = "onMouseLeave";
	                reactEventName = "onMouseEnter";
	                instance = "mouse";
	                if (
	                  "pointerout" === domEventName ||
	                  "pointerover" === domEventName
	                )
	                  (inCapturePhase = SyntheticPointerEvent),
	                    (_instance2 = "onPointerLeave"),
	                    (reactEventName = "onPointerEnter"),
	                    (instance = "pointer");
	                accumulateTargetOnly =
	                  null == SyntheticEventCtor
	                    ? reactName
	                    : getNodeFromInstance(SyntheticEventCtor);
	                lastHostComponent =
	                  null == reactEventType
	                    ? reactName
	                    : getNodeFromInstance(reactEventType);
	                reactName = new inCapturePhase(
	                  _instance2,
	                  instance + "leave",
	                  SyntheticEventCtor,
	                  nativeEvent,
	                  nativeEventTarget
	                );
	                reactName.target = accumulateTargetOnly;
	                reactName.relatedTarget = lastHostComponent;
	                _instance2 = null;
	                getClosestInstanceFromNode(nativeEventTarget) === targetInst &&
	                  ((inCapturePhase = new inCapturePhase(
	                    reactEventName,
	                    instance + "enter",
	                    reactEventType,
	                    nativeEvent,
	                    nativeEventTarget
	                  )),
	                  (inCapturePhase.target = lastHostComponent),
	                  (inCapturePhase.relatedTarget = accumulateTargetOnly),
	                  (_instance2 = inCapturePhase));
	                accumulateTargetOnly = _instance2;
	                if (SyntheticEventCtor && reactEventType)
	                  b: {
	                    inCapturePhase = SyntheticEventCtor;
	                    reactEventName = reactEventType;
	                    instance = 0;
	                    for (
	                      lastHostComponent = inCapturePhase;
	                      lastHostComponent;
	                      lastHostComponent = getParent(lastHostComponent)
	                    )
	                      instance++;
	                    lastHostComponent = 0;
	                    for (
	                      _instance2 = reactEventName;
	                      _instance2;
	                      _instance2 = getParent(_instance2)
	                    )
	                      lastHostComponent++;
	                    for (; 0 < instance - lastHostComponent; )
	                      (inCapturePhase = getParent(inCapturePhase)), instance--;
	                    for (; 0 < lastHostComponent - instance; )
	                      (reactEventName = getParent(reactEventName)),
	                        lastHostComponent--;
	                    for (; instance--; ) {
	                      if (
	                        inCapturePhase === reactEventName ||
	                        (null !== reactEventName &&
	                          inCapturePhase === reactEventName.alternate)
	                      )
	                        break b;
	                      inCapturePhase = getParent(inCapturePhase);
	                      reactEventName = getParent(reactEventName);
	                    }
	                    inCapturePhase = null;
	                  }
	                else inCapturePhase = null;
	                null !== SyntheticEventCtor &&
	                  accumulateEnterLeaveListenersForEvent(
	                    dispatchQueue,
	                    reactName,
	                    SyntheticEventCtor,
	                    inCapturePhase,
	                    !1
	                  );
	                null !== reactEventType &&
	                  null !== accumulateTargetOnly &&
	                  accumulateEnterLeaveListenersForEvent(
	                    dispatchQueue,
	                    accumulateTargetOnly,
	                    reactEventType,
	                    inCapturePhase,
	                    !0
	                  );
	              }
	            }
	          }
	          a: {
	            reactName = targetInst ? getNodeFromInstance(targetInst) : window;
	            SyntheticEventCtor =
	              reactName.nodeName && reactName.nodeName.toLowerCase();
	            if (
	              "select" === SyntheticEventCtor ||
	              ("input" === SyntheticEventCtor && "file" === reactName.type)
	            )
	              var getTargetInstFunc = getTargetInstForChangeEvent;
	            else if (isTextInputElement(reactName))
	              if (isInputEventSupported)
	                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
	              else {
	                getTargetInstFunc = getTargetInstForInputEventPolyfill;
	                var handleEventFunc = handleEventsForInputEventPolyfill;
	              }
	            else
	              (SyntheticEventCtor = reactName.nodeName),
	                !SyntheticEventCtor ||
	                "input" !== SyntheticEventCtor.toLowerCase() ||
	                ("checkbox" !== reactName.type && "radio" !== reactName.type)
	                  ? targetInst &&
	                    isCustomElement(targetInst.elementType) &&
	                    (getTargetInstFunc = getTargetInstForChangeEvent)
	                  : (getTargetInstFunc = getTargetInstForClickEvent);
	            if (
	              getTargetInstFunc &&
	              (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))
	            ) {
	              createAndAccumulateChangeEvent(
	                dispatchQueue,
	                getTargetInstFunc,
	                nativeEvent,
	                nativeEventTarget
	              );
	              break a;
	            }
	            handleEventFunc &&
	              handleEventFunc(domEventName, reactName, targetInst);
	            "focusout" === domEventName &&
	              targetInst &&
	              "number" === reactName.type &&
	              null != targetInst.memoizedProps.value &&
	              setDefaultValue(reactName, "number", reactName.value);
	          }
	          handleEventFunc = targetInst
	            ? getNodeFromInstance(targetInst)
	            : window;
	          switch (domEventName) {
	            case "focusin":
	              if (
	                isTextInputElement(handleEventFunc) ||
	                "true" === handleEventFunc.contentEditable
	              )
	                (activeElement = handleEventFunc),
	                  (activeElementInst = targetInst),
	                  (lastSelection = null);
	              break;
	            case "focusout":
	              lastSelection = activeElementInst = activeElement = null;
	              break;
	            case "mousedown":
	              mouseDown = !0;
	              break;
	            case "contextmenu":
	            case "mouseup":
	            case "dragend":
	              mouseDown = !1;
	              constructSelectEvent(
	                dispatchQueue,
	                nativeEvent,
	                nativeEventTarget
	              );
	              break;
	            case "selectionchange":
	              if (skipSelectionChangeEvent) break;
	            case "keydown":
	            case "keyup":
	              constructSelectEvent(
	                dispatchQueue,
	                nativeEvent,
	                nativeEventTarget
	              );
	          }
	          var fallbackData;
	          if (canUseCompositionEvent)
	            b: {
	              switch (domEventName) {
	                case "compositionstart":
	                  var eventType = "onCompositionStart";
	                  break b;
	                case "compositionend":
	                  eventType = "onCompositionEnd";
	                  break b;
	                case "compositionupdate":
	                  eventType = "onCompositionUpdate";
	                  break b;
	              }
	              eventType = void 0;
	            }
	          else
	            isComposing
	              ? isFallbackCompositionEnd(domEventName, nativeEvent) &&
	                (eventType = "onCompositionEnd")
	              : "keydown" === domEventName &&
	                nativeEvent.keyCode === START_KEYCODE &&
	                (eventType = "onCompositionStart");
	          eventType &&
	            (useFallbackCompositionData &&
	              "ko" !== nativeEvent.locale &&
	              (isComposing || "onCompositionStart" !== eventType
	                ? "onCompositionEnd" === eventType &&
	                  isComposing &&
	                  (fallbackData = getData())
	                : ((root = nativeEventTarget),
	                  (startText = "value" in root ? root.value : root.textContent),
	                  (isComposing = !0))),
	            (handleEventFunc = accumulateTwoPhaseListeners(
	              targetInst,
	              eventType
	            )),
	            0 < handleEventFunc.length &&
	              ((eventType = new SyntheticCompositionEvent(
	                eventType,
	                domEventName,
	                null,
	                nativeEvent,
	                nativeEventTarget
	              )),
	              dispatchQueue.push({
	                event: eventType,
	                listeners: handleEventFunc
	              }),
	              fallbackData
	                ? (eventType.data = fallbackData)
	                : ((fallbackData = getDataFromCustomEvent(nativeEvent)),
	                  null !== fallbackData && (eventType.data = fallbackData))));
	          if (
	            (fallbackData = canUseTextInputEvent
	              ? getNativeBeforeInputChars(domEventName, nativeEvent)
	              : getFallbackBeforeInputChars(domEventName, nativeEvent))
	          )
	            (eventType = accumulateTwoPhaseListeners(
	              targetInst,
	              "onBeforeInput"
	            )),
	              0 < eventType.length &&
	                ((handleEventFunc = new SyntheticInputEvent(
	                  "onBeforeInput",
	                  "beforeinput",
	                  null,
	                  nativeEvent,
	                  nativeEventTarget
	                )),
	                dispatchQueue.push({
	                  event: handleEventFunc,
	                  listeners: eventType
	                }),
	                (handleEventFunc.data = fallbackData));
	          extractEvents$1(
	            dispatchQueue,
	            domEventName,
	            targetInst,
	            nativeEvent,
	            nativeEventTarget
	          );
	        }
	        processDispatchQueue(dispatchQueue, eventSystemFlags);
	      });
	    }
	    function createDispatchListener(instance, listener, currentTarget) {
	      return {
	        instance: instance,
	        listener: listener,
	        currentTarget: currentTarget
	      };
	    }
	    function accumulateTwoPhaseListeners(targetFiber, reactName) {
	      for (
	        var captureName = reactName + "Capture", listeners = [];
	        null !== targetFiber;

	      ) {
	        var _instance3 = targetFiber,
	          stateNode = _instance3.stateNode;
	        _instance3 = _instance3.tag;
	        (5 !== _instance3 && 26 !== _instance3 && 27 !== _instance3) ||
	          null === stateNode ||
	          ((_instance3 = getListener(targetFiber, captureName)),
	          null != _instance3 &&
	            listeners.unshift(
	              createDispatchListener(targetFiber, _instance3, stateNode)
	            ),
	          (_instance3 = getListener(targetFiber, reactName)),
	          null != _instance3 &&
	            listeners.push(
	              createDispatchListener(targetFiber, _instance3, stateNode)
	            ));
	        targetFiber = targetFiber.return;
	      }
	      return listeners;
	    }
	    function getParent(inst) {
	      if (null === inst) return null;
	      do inst = inst.return;
	      while (inst && 5 !== inst.tag && 27 !== inst.tag);
	      return inst ? inst : null;
	    }
	    function accumulateEnterLeaveListenersForEvent(
	      dispatchQueue,
	      event,
	      target,
	      common,
	      inCapturePhase
	    ) {
	      for (
	        var registrationName = event._reactName, listeners = [];
	        null !== target && target !== common;

	      ) {
	        var _instance4 = target,
	          alternate = _instance4.alternate,
	          stateNode = _instance4.stateNode;
	        _instance4 = _instance4.tag;
	        if (null !== alternate && alternate === common) break;
	        (5 !== _instance4 && 26 !== _instance4 && 27 !== _instance4) ||
	          null === stateNode ||
	          ((alternate = stateNode),
	          inCapturePhase
	            ? ((stateNode = getListener(target, registrationName)),
	              null != stateNode &&
	                listeners.unshift(
	                  createDispatchListener(target, stateNode, alternate)
	                ))
	            : inCapturePhase ||
	              ((stateNode = getListener(target, registrationName)),
	              null != stateNode &&
	                listeners.push(
	                  createDispatchListener(target, stateNode, alternate)
	                )));
	        target = target.return;
	      }
	      0 !== listeners.length &&
	        dispatchQueue.push({ event: event, listeners: listeners });
	    }
	    function validatePropertiesInDevelopment(type, props) {
	      validateProperties$2(type, props);
	      ("input" !== type && "textarea" !== type && "select" !== type) ||
	        null == props ||
	        null !== props.value ||
	        didWarnValueNull ||
	        ((didWarnValueNull = true),
	        "select" === type && props.multiple
	          ? console.error(
	              "`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.",
	              type
	            )
	          : console.error(
	              "`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.",
	              type
	            ));
	      var eventRegistry = {
	        registrationNameDependencies: registrationNameDependencies,
	        possibleRegistrationNames: possibleRegistrationNames
	      };
	      isCustomElement(type) ||
	        "string" === typeof props.is ||
	        warnUnknownProperties(type, props, eventRegistry);
	      props.contentEditable &&
	        !props.suppressContentEditableWarning &&
	        null != props.children &&
	        console.error(
	          "A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."
	        );
	    }
	    function warnForPropDifference(
	      propName,
	      serverValue,
	      clientValue,
	      serverDifferences
	    ) {
	      serverValue !== clientValue &&
	        ((clientValue = normalizeMarkupForTextOrAttribute(clientValue)),
	        normalizeMarkupForTextOrAttribute(serverValue) !== clientValue &&
	          (serverDifferences[propName] = serverValue));
	    }
	    function warnForExtraAttributes(
	      domElement,
	      attributeNames,
	      serverDifferences
	    ) {
	      attributeNames.forEach(function (attributeName) {
	        serverDifferences[getPropNameFromAttributeName(attributeName)] =
	          "style" === attributeName
	            ? getStylesObjectFromElement(domElement)
	            : domElement.getAttribute(attributeName);
	      });
	    }
	    function warnForInvalidEventListener(registrationName, listener) {
	      false === listener
	        ? console.error(
	            "Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.",
	            registrationName,
	            registrationName,
	            registrationName
	          )
	        : console.error(
	            "Expected `%s` listener to be a function, instead got a value of `%s` type.",
	            registrationName,
	            typeof listener
	          );
	    }
	    function normalizeHTML(parent, html) {
	      parent =
	        parent.namespaceURI === MATH_NAMESPACE ||
	        parent.namespaceURI === SVG_NAMESPACE
	          ? parent.ownerDocument.createElementNS(
	              parent.namespaceURI,
	              parent.tagName
	            )
	          : parent.ownerDocument.createElement(parent.tagName);
	      parent.innerHTML = html;
	      return parent.innerHTML;
	    }
	    function normalizeMarkupForTextOrAttribute(markup) {
	      willCoercionThrow(markup) &&
	        (console.error(
	          "The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before using it here.",
	          typeName(markup)
	        ),
	        testStringCoercion(markup));
	      return ("string" === typeof markup ? markup : "" + markup)
	        .replace(NORMALIZE_NEWLINES_REGEX, "\n")
	        .replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
	    }
	    function checkForUnmatchedText(serverText, clientText) {
	      clientText = normalizeMarkupForTextOrAttribute(clientText);
	      return normalizeMarkupForTextOrAttribute(serverText) === clientText
	        ? true
	        : false;
	    }
	    function noop$1() {}
	    function setProp(domElement, tag, key, value, props, prevValue) {
	      switch (key) {
	        case "children":
	          if ("string" === typeof value)
	            validateTextNesting(value, tag),
	              "body" === tag ||
	                ("textarea" === tag && "" === value) ||
	                setTextContent(domElement, value);
	          else if ("number" === typeof value || "bigint" === typeof value)
	            validateTextNesting("" + value, tag),
	              "body" !== tag && setTextContent(domElement, "" + value);
	          break;
	        case "className":
	          setValueForKnownAttribute(domElement, "class", value);
	          break;
	        case "tabIndex":
	          setValueForKnownAttribute(domElement, "tabindex", value);
	          break;
	        case "dir":
	        case "role":
	        case "viewBox":
	        case "width":
	        case "height":
	          setValueForKnownAttribute(domElement, key, value);
	          break;
	        case "style":
	          setValueForStyles(domElement, value, prevValue);
	          break;
	        case "data":
	          if ("object" !== tag) {
	            setValueForKnownAttribute(domElement, "data", value);
	            break;
	          }
	        case "src":
	        case "href":
	          if ("" === value && ("a" !== tag || "href" !== key)) {
	            "src" === key
	              ? console.error(
	                  'An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
	                  key,
	                  key
	                )
	              : console.error(
	                  'An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
	                  key,
	                  key
	                );
	            domElement.removeAttribute(key);
	            break;
	          }
	          if (
	            null == value ||
	            "function" === typeof value ||
	            "symbol" === typeof value ||
	            "boolean" === typeof value
	          ) {
	            domElement.removeAttribute(key);
	            break;
	          }
	          checkAttributeStringCoercion(value, key);
	          value = sanitizeURL("" + value);
	          domElement.setAttribute(key, value);
	          break;
	        case "action":
	        case "formAction":
	          null != value &&
	            ("form" === tag
	              ? "formAction" === key
	                ? console.error(
	                    "You can only pass the formAction prop to <input> or <button>. Use the action prop on <form>."
	                  )
	                : "function" === typeof value &&
	                  ((null == props.encType && null == props.method) ||
	                    didWarnFormActionMethod ||
	                    ((didWarnFormActionMethod = true),
	                    console.error(
	                      "Cannot specify a encType or method for a form that specifies a function as the action. React provides those automatically. They will get overridden."
	                    )),
	                  null == props.target ||
	                    didWarnFormActionTarget ||
	                    ((didWarnFormActionTarget = true),
	                    console.error(
	                      "Cannot specify a target for a form that specifies a function as the action. The function will always be executed in the same window."
	                    )))
	              : "input" === tag || "button" === tag
	                ? "action" === key
	                  ? console.error(
	                      "You can only pass the action prop to <form>. Use the formAction prop on <input> or <button>."
	                    )
	                  : "input" !== tag ||
	                      "submit" === props.type ||
	                      "image" === props.type ||
	                      didWarnFormActionType
	                    ? "button" !== tag ||
	                      null == props.type ||
	                      "submit" === props.type ||
	                      didWarnFormActionType
	                      ? "function" === typeof value &&
	                        (null == props.name ||
	                          didWarnFormActionName ||
	                          ((didWarnFormActionName = true),
	                          console.error(
	                            'Cannot specify a "name" prop for a button that specifies a function as a formAction. React needs it to encode which action should be invoked. It will get overridden.'
	                          )),
	                        (null == props.formEncType &&
	                          null == props.formMethod) ||
	                          didWarnFormActionMethod ||
	                          ((didWarnFormActionMethod = true),
	                          console.error(
	                            "Cannot specify a formEncType or formMethod for a button that specifies a function as a formAction. React provides those automatically. They will get overridden."
	                          )),
	                        null == props.formTarget ||
	                          didWarnFormActionTarget ||
	                          ((didWarnFormActionTarget = true),
	                          console.error(
	                            "Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window."
	                          )))
	                      : ((didWarnFormActionType = true),
	                        console.error(
	                          'A button can only specify a formAction along with type="submit" or no type.'
	                        ))
	                    : ((didWarnFormActionType = true),
	                      console.error(
	                        'An input can only specify a formAction along with type="submit" or type="image".'
	                      ))
	                : "action" === key
	                  ? console.error(
	                      "You can only pass the action prop to <form>."
	                    )
	                  : console.error(
	                      "You can only pass the formAction prop to <input> or <button>."
	                    ));
	          if ("function" === typeof value) {
	            domElement.setAttribute(
	              key,
	              "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"
	            );
	            break;
	          } else
	            "function" === typeof prevValue &&
	              ("formAction" === key
	                ? ("input" !== tag &&
	                    setProp(domElement, tag, "name", props.name, props, null),
	                  setProp(
	                    domElement,
	                    tag,
	                    "formEncType",
	                    props.formEncType,
	                    props,
	                    null
	                  ),
	                  setProp(
	                    domElement,
	                    tag,
	                    "formMethod",
	                    props.formMethod,
	                    props,
	                    null
	                  ),
	                  setProp(
	                    domElement,
	                    tag,
	                    "formTarget",
	                    props.formTarget,
	                    props,
	                    null
	                  ))
	                : (setProp(
	                    domElement,
	                    tag,
	                    "encType",
	                    props.encType,
	                    props,
	                    null
	                  ),
	                  setProp(domElement, tag, "method", props.method, props, null),
	                  setProp(
	                    domElement,
	                    tag,
	                    "target",
	                    props.target,
	                    props,
	                    null
	                  )));
	          if (
	            null == value ||
	            "symbol" === typeof value ||
	            "boolean" === typeof value
	          ) {
	            domElement.removeAttribute(key);
	            break;
	          }
	          checkAttributeStringCoercion(value, key);
	          value = sanitizeURL("" + value);
	          domElement.setAttribute(key, value);
	          break;
	        case "onClick":
	          null != value &&
	            ("function" !== typeof value &&
	              warnForInvalidEventListener(key, value),
	            (domElement.onclick = noop$1));
	          break;
	        case "onScroll":
	          null != value &&
	            ("function" !== typeof value &&
	              warnForInvalidEventListener(key, value),
	            listenToNonDelegatedEvent("scroll", domElement));
	          break;
	        case "onScrollEnd":
	          null != value &&
	            ("function" !== typeof value &&
	              warnForInvalidEventListener(key, value),
	            listenToNonDelegatedEvent("scrollend", domElement));
	          break;
	        case "dangerouslySetInnerHTML":
	          if (null != value) {
	            if ("object" !== typeof value || !("__html" in value))
	              throw Error(
	                "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information."
	              );
	            key = value.__html;
	            if (null != key) {
	              if (null != props.children)
	                throw Error(
	                  "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
	                );
	              domElement.innerHTML = key;
	            }
	          }
	          break;
	        case "multiple":
	          domElement.multiple =
	            value && "function" !== typeof value && "symbol" !== typeof value;
	          break;
	        case "muted":
	          domElement.muted =
	            value && "function" !== typeof value && "symbol" !== typeof value;
	          break;
	        case "suppressContentEditableWarning":
	        case "suppressHydrationWarning":
	        case "defaultValue":
	        case "defaultChecked":
	        case "innerHTML":
	        case "ref":
	          break;
	        case "autoFocus":
	          break;
	        case "xlinkHref":
	          if (
	            null == value ||
	            "function" === typeof value ||
	            "boolean" === typeof value ||
	            "symbol" === typeof value
	          ) {
	            domElement.removeAttribute("xlink:href");
	            break;
	          }
	          checkAttributeStringCoercion(value, key);
	          key = sanitizeURL("" + value);
	          domElement.setAttributeNS(xlinkNamespace, "xlink:href", key);
	          break;
	        case "contentEditable":
	        case "spellCheck":
	        case "draggable":
	        case "value":
	        case "autoReverse":
	        case "externalResourcesRequired":
	        case "focusable":
	        case "preserveAlpha":
	          null != value &&
	          "function" !== typeof value &&
	          "symbol" !== typeof value
	            ? (checkAttributeStringCoercion(value, key),
	              domElement.setAttribute(key, "" + value))
	            : domElement.removeAttribute(key);
	          break;
	        case "inert":
	          "" !== value ||
	            didWarnForNewBooleanPropsWithEmptyValue[key] ||
	            ((didWarnForNewBooleanPropsWithEmptyValue[key] = true),
	            console.error(
	              "Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",
	              key
	            ));
	        case "allowFullScreen":
	        case "async":
	        case "autoPlay":
	        case "controls":
	        case "default":
	        case "defer":
	        case "disabled":
	        case "disablePictureInPicture":
	        case "disableRemotePlayback":
	        case "formNoValidate":
	        case "hidden":
	        case "loop":
	        case "noModule":
	        case "noValidate":
	        case "open":
	        case "playsInline":
	        case "readOnly":
	        case "required":
	        case "reversed":
	        case "scoped":
	        case "seamless":
	        case "itemScope":
	          value && "function" !== typeof value && "symbol" !== typeof value
	            ? domElement.setAttribute(key, "")
	            : domElement.removeAttribute(key);
	          break;
	        case "capture":
	        case "download":
	          true === value
	            ? domElement.setAttribute(key, "")
	            : false !== value &&
	                null != value &&
	                "function" !== typeof value &&
	                "symbol" !== typeof value
	              ? (checkAttributeStringCoercion(value, key),
	                domElement.setAttribute(key, value))
	              : domElement.removeAttribute(key);
	          break;
	        case "cols":
	        case "rows":
	        case "size":
	        case "span":
	          null != value &&
	          "function" !== typeof value &&
	          "symbol" !== typeof value &&
	          !isNaN(value) &&
	          1 <= value
	            ? (checkAttributeStringCoercion(value, key),
	              domElement.setAttribute(key, value))
	            : domElement.removeAttribute(key);
	          break;
	        case "rowSpan":
	        case "start":
	          null == value ||
	          "function" === typeof value ||
	          "symbol" === typeof value ||
	          isNaN(value)
	            ? domElement.removeAttribute(key)
	            : (checkAttributeStringCoercion(value, key),
	              domElement.setAttribute(key, value));
	          break;
	        case "popover":
	          listenToNonDelegatedEvent("beforetoggle", domElement);
	          listenToNonDelegatedEvent("toggle", domElement);
	          setValueForAttribute(domElement, "popover", value);
	          break;
	        case "xlinkActuate":
	          setValueForNamespacedAttribute(
	            domElement,
	            xlinkNamespace,
	            "xlink:actuate",
	            value
	          );
	          break;
	        case "xlinkArcrole":
	          setValueForNamespacedAttribute(
	            domElement,
	            xlinkNamespace,
	            "xlink:arcrole",
	            value
	          );
	          break;
	        case "xlinkRole":
	          setValueForNamespacedAttribute(
	            domElement,
	            xlinkNamespace,
	            "xlink:role",
	            value
	          );
	          break;
	        case "xlinkShow":
	          setValueForNamespacedAttribute(
	            domElement,
	            xlinkNamespace,
	            "xlink:show",
	            value
	          );
	          break;
	        case "xlinkTitle":
	          setValueForNamespacedAttribute(
	            domElement,
	            xlinkNamespace,
	            "xlink:title",
	            value
	          );
	          break;
	        case "xlinkType":
	          setValueForNamespacedAttribute(
	            domElement,
	            xlinkNamespace,
	            "xlink:type",
	            value
	          );
	          break;
	        case "xmlBase":
	          setValueForNamespacedAttribute(
	            domElement,
	            xmlNamespace,
	            "xml:base",
	            value
	          );
	          break;
	        case "xmlLang":
	          setValueForNamespacedAttribute(
	            domElement,
	            xmlNamespace,
	            "xml:lang",
	            value
	          );
	          break;
	        case "xmlSpace":
	          setValueForNamespacedAttribute(
	            domElement,
	            xmlNamespace,
	            "xml:space",
	            value
	          );
	          break;
	        case "is":
	          null != prevValue &&
	            console.error(
	              'Cannot update the "is" prop after it has been initialized.'
	            );
	          setValueForAttribute(domElement, "is", value);
	          break;
	        case "innerText":
	        case "textContent":
	          break;
	        case "popoverTarget":
	          didWarnPopoverTargetObject ||
	            null == value ||
	            "object" !== typeof value ||
	            ((didWarnPopoverTargetObject = true),
	            console.error(
	              "The `popoverTarget` prop expects the ID of an Element as a string. Received %s instead.",
	              value
	            ));
	        default:
	          !(2 < key.length) ||
	          ("o" !== key[0] && "O" !== key[0]) ||
	          ("n" !== key[1] && "N" !== key[1])
	            ? ((key = getAttributeAlias(key)),
	              setValueForAttribute(domElement, key, value))
	            : registrationNameDependencies.hasOwnProperty(key) &&
	              null != value &&
	              "function" !== typeof value &&
	              warnForInvalidEventListener(key, value);
	      }
	    }
	    function setPropOnCustomElement(
	      domElement,
	      tag,
	      key,
	      value,
	      props,
	      prevValue
	    ) {
	      switch (key) {
	        case "style":
	          setValueForStyles(domElement, value, prevValue);
	          break;
	        case "dangerouslySetInnerHTML":
	          if (null != value) {
	            if ("object" !== typeof value || !("__html" in value))
	              throw Error(
	                "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information."
	              );
	            key = value.__html;
	            if (null != key) {
	              if (null != props.children)
	                throw Error(
	                  "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
	                );
	              domElement.innerHTML = key;
	            }
	          }
	          break;
	        case "children":
	          "string" === typeof value
	            ? setTextContent(domElement, value)
	            : ("number" === typeof value || "bigint" === typeof value) &&
	              setTextContent(domElement, "" + value);
	          break;
	        case "onScroll":
	          null != value &&
	            ("function" !== typeof value &&
	              warnForInvalidEventListener(key, value),
	            listenToNonDelegatedEvent("scroll", domElement));
	          break;
	        case "onScrollEnd":
	          null != value &&
	            ("function" !== typeof value &&
	              warnForInvalidEventListener(key, value),
	            listenToNonDelegatedEvent("scrollend", domElement));
	          break;
	        case "onClick":
	          null != value &&
	            ("function" !== typeof value &&
	              warnForInvalidEventListener(key, value),
	            (domElement.onclick = noop$1));
	          break;
	        case "suppressContentEditableWarning":
	        case "suppressHydrationWarning":
	        case "innerHTML":
	        case "ref":
	          break;
	        case "innerText":
	        case "textContent":
	          break;
	        default:
	          if (registrationNameDependencies.hasOwnProperty(key))
	            null != value &&
	              "function" !== typeof value &&
	              warnForInvalidEventListener(key, value);
	          else
	            a: {
	              if (
	                "o" === key[0] &&
	                "n" === key[1] &&
	                ((props = key.endsWith("Capture")),
	                (tag = key.slice(2, props ? key.length - 7 : undefined)),
	                (prevValue = domElement[internalPropsKey] || null),
	                (prevValue = null != prevValue ? prevValue[key] : null),
	                "function" === typeof prevValue &&
	                  domElement.removeEventListener(tag, prevValue, props),
	                "function" === typeof value)
	              ) {
	                "function" !== typeof prevValue &&
	                  null !== prevValue &&
	                  (key in domElement
	                    ? (domElement[key] = null)
	                    : domElement.hasAttribute(key) &&
	                      domElement.removeAttribute(key));
	                domElement.addEventListener(tag, value, props);
	                break a;
	              }
	              key in domElement
	                ? (domElement[key] = value)
	                : true === value
	                  ? domElement.setAttribute(key, "")
	                  : setValueForAttribute(domElement, key, value);
	            }
	      }
	    }
	    function setInitialProperties(domElement, tag, props) {
	      validatePropertiesInDevelopment(tag, props);
	      switch (tag) {
	        case "div":
	        case "span":
	        case "svg":
	        case "path":
	        case "a":
	        case "g":
	        case "p":
	        case "li":
	          break;
	        case "img":
	          listenToNonDelegatedEvent("error", domElement);
	          listenToNonDelegatedEvent("load", domElement);
	          var hasSrc = false,
	            hasSrcSet = false,
	            propKey;
	          for (propKey in props)
	            if (props.hasOwnProperty(propKey)) {
	              var propValue = props[propKey];
	              if (null != propValue)
	                switch (propKey) {
	                  case "src":
	                    hasSrc = true;
	                    break;
	                  case "srcSet":
	                    hasSrcSet = true;
	                    break;
	                  case "children":
	                  case "dangerouslySetInnerHTML":
	                    throw Error(
	                      tag +
	                        " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
	                    );
	                  default:
	                    setProp(domElement, tag, propKey, propValue, props, null);
	                }
	            }
	          hasSrcSet &&
	            setProp(domElement, tag, "srcSet", props.srcSet, props, null);
	          hasSrc && setProp(domElement, tag, "src", props.src, props, null);
	          return;
	        case "input":
	          checkControlledValueProps("input", props);
	          listenToNonDelegatedEvent("invalid", domElement);
	          var defaultValue = (propKey = propValue = hasSrcSet = null),
	            checked = null,
	            defaultChecked = null;
	          for (hasSrc in props)
	            if (props.hasOwnProperty(hasSrc)) {
	              var _propValue = props[hasSrc];
	              if (null != _propValue)
	                switch (hasSrc) {
	                  case "name":
	                    hasSrcSet = _propValue;
	                    break;
	                  case "type":
	                    propValue = _propValue;
	                    break;
	                  case "checked":
	                    checked = _propValue;
	                    break;
	                  case "defaultChecked":
	                    defaultChecked = _propValue;
	                    break;
	                  case "value":
	                    propKey = _propValue;
	                    break;
	                  case "defaultValue":
	                    defaultValue = _propValue;
	                    break;
	                  case "children":
	                  case "dangerouslySetInnerHTML":
	                    if (null != _propValue)
	                      throw Error(
	                        tag +
	                          " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
	                      );
	                    break;
	                  default:
	                    setProp(domElement, tag, hasSrc, _propValue, props, null);
	                }
	            }
	          validateInputProps(domElement, props);
	          initInput(
	            domElement,
	            propKey,
	            defaultValue,
	            checked,
	            defaultChecked,
	            propValue,
	            hasSrcSet,
	            false
	          );
	          track(domElement);
	          return;
	        case "select":
	          checkControlledValueProps("select", props);
	          listenToNonDelegatedEvent("invalid", domElement);
	          hasSrc = propValue = propKey = null;
	          for (hasSrcSet in props)
	            if (
	              props.hasOwnProperty(hasSrcSet) &&
	              ((defaultValue = props[hasSrcSet]), null != defaultValue)
	            )
	              switch (hasSrcSet) {
	                case "value":
	                  propKey = defaultValue;
	                  break;
	                case "defaultValue":
	                  propValue = defaultValue;
	                  break;
	                case "multiple":
	                  hasSrc = defaultValue;
	                default:
	                  setProp(
	                    domElement,
	                    tag,
	                    hasSrcSet,
	                    defaultValue,
	                    props,
	                    null
	                  );
	              }
	          validateSelectProps(domElement, props);
	          tag = propKey;
	          props = propValue;
	          domElement.multiple = !!hasSrc;
	          null != tag
	            ? updateOptions(domElement, !!hasSrc, tag, false)
	            : null != props && updateOptions(domElement, !!hasSrc, props, true);
	          return;
	        case "textarea":
	          checkControlledValueProps("textarea", props);
	          listenToNonDelegatedEvent("invalid", domElement);
	          propKey = hasSrcSet = hasSrc = null;
	          for (propValue in props)
	            if (
	              props.hasOwnProperty(propValue) &&
	              ((defaultValue = props[propValue]), null != defaultValue)
	            )
	              switch (propValue) {
	                case "value":
	                  hasSrc = defaultValue;
	                  break;
	                case "defaultValue":
	                  hasSrcSet = defaultValue;
	                  break;
	                case "children":
	                  propKey = defaultValue;
	                  break;
	                case "dangerouslySetInnerHTML":
	                  if (null != defaultValue)
	                    throw Error(
	                      "`dangerouslySetInnerHTML` does not make sense on <textarea>."
	                    );
	                  break;
	                default:
	                  setProp(
	                    domElement,
	                    tag,
	                    propValue,
	                    defaultValue,
	                    props,
	                    null
	                  );
	              }
	          validateTextareaProps(domElement, props);
	          initTextarea(domElement, hasSrc, hasSrcSet, propKey);
	          track(domElement);
	          return;
	        case "option":
	          validateOptionProps(domElement, props);
	          for (checked in props)
	            if (
	              props.hasOwnProperty(checked) &&
	              ((hasSrc = props[checked]), null != hasSrc)
	            )
	              switch (checked) {
	                case "selected":
	                  domElement.selected =
	                    hasSrc &&
	                    "function" !== typeof hasSrc &&
	                    "symbol" !== typeof hasSrc;
	                  break;
	                default:
	                  setProp(domElement, tag, checked, hasSrc, props, null);
	              }
	          return;
	        case "dialog":
	          listenToNonDelegatedEvent("cancel", domElement);
	          listenToNonDelegatedEvent("close", domElement);
	          break;
	        case "iframe":
	        case "object":
	          listenToNonDelegatedEvent("load", domElement);
	          break;
	        case "video":
	        case "audio":
	          for (hasSrc = 0; hasSrc < mediaEventTypes.length; hasSrc++)
	            listenToNonDelegatedEvent(mediaEventTypes[hasSrc], domElement);
	          break;
	        case "image":
	          listenToNonDelegatedEvent("error", domElement);
	          listenToNonDelegatedEvent("load", domElement);
	          break;
	        case "details":
	          listenToNonDelegatedEvent("toggle", domElement);
	          break;
	        case "embed":
	        case "source":
	        case "link":
	          listenToNonDelegatedEvent("error", domElement),
	            listenToNonDelegatedEvent("load", domElement);
	        case "area":
	        case "base":
	        case "br":
	        case "col":
	        case "hr":
	        case "keygen":
	        case "meta":
	        case "param":
	        case "track":
	        case "wbr":
	        case "menuitem":
	          for (defaultChecked in props)
	            if (
	              props.hasOwnProperty(defaultChecked) &&
	              ((hasSrc = props[defaultChecked]), null != hasSrc)
	            )
	              switch (defaultChecked) {
	                case "children":
	                case "dangerouslySetInnerHTML":
	                  throw Error(
	                    tag +
	                      " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
	                  );
	                default:
	                  setProp(domElement, tag, defaultChecked, hasSrc, props, null);
	              }
	          return;
	        default:
	          if (isCustomElement(tag)) {
	            for (_propValue in props)
	              props.hasOwnProperty(_propValue) &&
	                ((hasSrc = props[_propValue]),
	                undefined !== hasSrc &&
	                  setPropOnCustomElement(
	                    domElement,
	                    tag,
	                    _propValue,
	                    hasSrc,
	                    props,
	                    undefined
	                  ));
	            return;
	          }
	      }
	      for (defaultValue in props)
	        props.hasOwnProperty(defaultValue) &&
	          ((hasSrc = props[defaultValue]),
	          null != hasSrc &&
	            setProp(domElement, tag, defaultValue, hasSrc, props, null));
	    }
	    function updateProperties(domElement, tag, lastProps, nextProps) {
	      validatePropertiesInDevelopment(tag, nextProps);
	      switch (tag) {
	        case "div":
	        case "span":
	        case "svg":
	        case "path":
	        case "a":
	        case "g":
	        case "p":
	        case "li":
	          break;
	        case "input":
	          var name = null,
	            type = null,
	            value = null,
	            defaultValue = null,
	            lastDefaultValue = null,
	            checked = null,
	            defaultChecked = null;
	          for (propKey in lastProps) {
	            var lastProp = lastProps[propKey];
	            if (lastProps.hasOwnProperty(propKey) && null != lastProp)
	              switch (propKey) {
	                case "checked":
	                  break;
	                case "value":
	                  break;
	                case "defaultValue":
	                  lastDefaultValue = lastProp;
	                default:
	                  nextProps.hasOwnProperty(propKey) ||
	                    setProp(
	                      domElement,
	                      tag,
	                      propKey,
	                      null,
	                      nextProps,
	                      lastProp
	                    );
	              }
	          }
	          for (var _propKey8 in nextProps) {
	            var propKey = nextProps[_propKey8];
	            lastProp = lastProps[_propKey8];
	            if (
	              nextProps.hasOwnProperty(_propKey8) &&
	              (null != propKey || null != lastProp)
	            )
	              switch (_propKey8) {
	                case "type":
	                  type = propKey;
	                  break;
	                case "name":
	                  name = propKey;
	                  break;
	                case "checked":
	                  checked = propKey;
	                  break;
	                case "defaultChecked":
	                  defaultChecked = propKey;
	                  break;
	                case "value":
	                  value = propKey;
	                  break;
	                case "defaultValue":
	                  defaultValue = propKey;
	                  break;
	                case "children":
	                case "dangerouslySetInnerHTML":
	                  if (null != propKey)
	                    throw Error(
	                      tag +
	                        " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
	                    );
	                  break;
	                default:
	                  propKey !== lastProp &&
	                    setProp(
	                      domElement,
	                      tag,
	                      _propKey8,
	                      propKey,
	                      nextProps,
	                      lastProp
	                    );
	              }
	          }
	          tag =
	            "checkbox" === lastProps.type || "radio" === lastProps.type
	              ? null != lastProps.checked
	              : null != lastProps.value;
	          nextProps =
	            "checkbox" === nextProps.type || "radio" === nextProps.type
	              ? null != nextProps.checked
	              : null != nextProps.value;
	          tag ||
	            !nextProps ||
	            didWarnUncontrolledToControlled ||
	            (console.error(
	              "A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"
	            ),
	            (didWarnUncontrolledToControlled = true));
	          !tag ||
	            nextProps ||
	            didWarnControlledToUncontrolled ||
	            (console.error(
	              "A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"
	            ),
	            (didWarnControlledToUncontrolled = true));
	          updateInput(
	            domElement,
	            value,
	            defaultValue,
	            lastDefaultValue,
	            checked,
	            defaultChecked,
	            type,
	            name
	          );
	          return;
	        case "select":
	          propKey = value = defaultValue = _propKey8 = null;
	          for (type in lastProps)
	            if (
	              ((lastDefaultValue = lastProps[type]),
	              lastProps.hasOwnProperty(type) && null != lastDefaultValue)
	            )
	              switch (type) {
	                case "value":
	                  break;
	                case "multiple":
	                  propKey = lastDefaultValue;
	                default:
	                  nextProps.hasOwnProperty(type) ||
	                    setProp(
	                      domElement,
	                      tag,
	                      type,
	                      null,
	                      nextProps,
	                      lastDefaultValue
	                    );
	              }
	          for (name in nextProps)
	            if (
	              ((type = nextProps[name]),
	              (lastDefaultValue = lastProps[name]),
	              nextProps.hasOwnProperty(name) &&
	                (null != type || null != lastDefaultValue))
	            )
	              switch (name) {
	                case "value":
	                  _propKey8 = type;
	                  break;
	                case "defaultValue":
	                  defaultValue = type;
	                  break;
	                case "multiple":
	                  value = type;
	                default:
	                  type !== lastDefaultValue &&
	                    setProp(
	                      domElement,
	                      tag,
	                      name,
	                      type,
	                      nextProps,
	                      lastDefaultValue
	                    );
	              }
	          nextProps = defaultValue;
	          tag = value;
	          lastProps = propKey;
	          null != _propKey8
	            ? updateOptions(domElement, !!tag, _propKey8, false)
	            : !!lastProps !== !!tag &&
	              (null != nextProps
	                ? updateOptions(domElement, !!tag, nextProps, true)
	                : updateOptions(domElement, !!tag, tag ? [] : "", false));
	          return;
	        case "textarea":
	          propKey = _propKey8 = null;
	          for (defaultValue in lastProps)
	            if (
	              ((name = lastProps[defaultValue]),
	              lastProps.hasOwnProperty(defaultValue) &&
	                null != name &&
	                !nextProps.hasOwnProperty(defaultValue))
	            )
	              switch (defaultValue) {
	                case "value":
	                  break;
	                case "children":
	                  break;
	                default:
	                  setProp(domElement, tag, defaultValue, null, nextProps, name);
	              }
	          for (value in nextProps)
	            if (
	              ((name = nextProps[value]),
	              (type = lastProps[value]),
	              nextProps.hasOwnProperty(value) && (null != name || null != type))
	            )
	              switch (value) {
	                case "value":
	                  _propKey8 = name;
	                  break;
	                case "defaultValue":
	                  propKey = name;
	                  break;
	                case "children":
	                  break;
	                case "dangerouslySetInnerHTML":
	                  if (null != name)
	                    throw Error(
	                      "`dangerouslySetInnerHTML` does not make sense on <textarea>."
	                    );
	                  break;
	                default:
	                  name !== type &&
	                    setProp(domElement, tag, value, name, nextProps, type);
	              }
	          updateTextarea(domElement, _propKey8, propKey);
	          return;
	        case "option":
	          for (var _propKey13 in lastProps)
	            if (
	              ((_propKey8 = lastProps[_propKey13]),
	              lastProps.hasOwnProperty(_propKey13) &&
	                null != _propKey8 &&
	                !nextProps.hasOwnProperty(_propKey13))
	            )
	              switch (_propKey13) {
	                case "selected":
	                  domElement.selected = false;
	                  break;
	                default:
	                  setProp(
	                    domElement,
	                    tag,
	                    _propKey13,
	                    null,
	                    nextProps,
	                    _propKey8
	                  );
	              }
	          for (lastDefaultValue in nextProps)
	            if (
	              ((_propKey8 = nextProps[lastDefaultValue]),
	              (propKey = lastProps[lastDefaultValue]),
	              nextProps.hasOwnProperty(lastDefaultValue) &&
	                _propKey8 !== propKey &&
	                (null != _propKey8 || null != propKey))
	            )
	              switch (lastDefaultValue) {
	                case "selected":
	                  domElement.selected =
	                    _propKey8 &&
	                    "function" !== typeof _propKey8 &&
	                    "symbol" !== typeof _propKey8;
	                  break;
	                default:
	                  setProp(
	                    domElement,
	                    tag,
	                    lastDefaultValue,
	                    _propKey8,
	                    nextProps,
	                    propKey
	                  );
	              }
	          return;
	        case "img":
	        case "link":
	        case "area":
	        case "base":
	        case "br":
	        case "col":
	        case "embed":
	        case "hr":
	        case "keygen":
	        case "meta":
	        case "param":
	        case "source":
	        case "track":
	        case "wbr":
	        case "menuitem":
	          for (var _propKey15 in lastProps)
	            (_propKey8 = lastProps[_propKey15]),
	              lastProps.hasOwnProperty(_propKey15) &&
	                null != _propKey8 &&
	                !nextProps.hasOwnProperty(_propKey15) &&
	                setProp(
	                  domElement,
	                  tag,
	                  _propKey15,
	                  null,
	                  nextProps,
	                  _propKey8
	                );
	          for (checked in nextProps)
	            if (
	              ((_propKey8 = nextProps[checked]),
	              (propKey = lastProps[checked]),
	              nextProps.hasOwnProperty(checked) &&
	                _propKey8 !== propKey &&
	                (null != _propKey8 || null != propKey))
	            )
	              switch (checked) {
	                case "children":
	                case "dangerouslySetInnerHTML":
	                  if (null != _propKey8)
	                    throw Error(
	                      tag +
	                        " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
	                    );
	                  break;
	                default:
	                  setProp(
	                    domElement,
	                    tag,
	                    checked,
	                    _propKey8,
	                    nextProps,
	                    propKey
	                  );
	              }
	          return;
	        default:
	          if (isCustomElement(tag)) {
	            for (var _propKey17 in lastProps)
	              (_propKey8 = lastProps[_propKey17]),
	                lastProps.hasOwnProperty(_propKey17) &&
	                  undefined !== _propKey8 &&
	                  !nextProps.hasOwnProperty(_propKey17) &&
	                  setPropOnCustomElement(
	                    domElement,
	                    tag,
	                    _propKey17,
	                    undefined,
	                    nextProps,
	                    _propKey8
	                  );
	            for (defaultChecked in nextProps)
	              (_propKey8 = nextProps[defaultChecked]),
	                (propKey = lastProps[defaultChecked]),
	                !nextProps.hasOwnProperty(defaultChecked) ||
	                  _propKey8 === propKey ||
	                  (undefined === _propKey8 && undefined === propKey) ||
	                  setPropOnCustomElement(
	                    domElement,
	                    tag,
	                    defaultChecked,
	                    _propKey8,
	                    nextProps,
	                    propKey
	                  );
	            return;
	          }
	      }
	      for (var _propKey19 in lastProps)
	        (_propKey8 = lastProps[_propKey19]),
	          lastProps.hasOwnProperty(_propKey19) &&
	            null != _propKey8 &&
	            !nextProps.hasOwnProperty(_propKey19) &&
	            setProp(domElement, tag, _propKey19, null, nextProps, _propKey8);
	      for (lastProp in nextProps)
	        (_propKey8 = nextProps[lastProp]),
	          (propKey = lastProps[lastProp]),
	          !nextProps.hasOwnProperty(lastProp) ||
	            _propKey8 === propKey ||
	            (null == _propKey8 && null == propKey) ||
	            setProp(domElement, tag, lastProp, _propKey8, nextProps, propKey);
	    }
	    function getPropNameFromAttributeName(attrName) {
	      switch (attrName) {
	        case "class":
	          return "className";
	        case "for":
	          return "htmlFor";
	        default:
	          return attrName;
	      }
	    }
	    function getStylesObjectFromElement(domElement) {
	      var serverValueInObjectForm = {};
	      domElement = domElement.style;
	      for (var i = 0; i < domElement.length; i++) {
	        var styleName = domElement[i];
	        serverValueInObjectForm[styleName] =
	          domElement.getPropertyValue(styleName);
	      }
	      return serverValueInObjectForm;
	    }
	    function diffHydratedStyles(domElement, value$jscomp$0, serverDifferences) {
	      if (null != value$jscomp$0 && "object" !== typeof value$jscomp$0)
	        console.error(
	          "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
	        );
	      else {
	        var clientValue;
	        var delimiter = (clientValue = ""),
	          styleName;
	        for (styleName in value$jscomp$0)
	          if (value$jscomp$0.hasOwnProperty(styleName)) {
	            var value = value$jscomp$0[styleName];
	            null != value &&
	              "boolean" !== typeof value &&
	              "" !== value &&
	              (0 === styleName.indexOf("--")
	                ? (checkCSSPropertyStringCoercion(value, styleName),
	                  (clientValue +=
	                    delimiter + styleName + ":" + ("" + value).trim()))
	                : "number" !== typeof value ||
	                    0 === value ||
	                    unitlessNumbers.has(styleName)
	                  ? (checkCSSPropertyStringCoercion(value, styleName),
	                    (clientValue +=
	                      delimiter +
	                      styleName
	                        .replace(uppercasePattern, "-$1")
	                        .toLowerCase()
	                        .replace(msPattern$1, "-ms-") +
	                      ":" +
	                      ("" + value).trim()))
	                  : (clientValue +=
	                      delimiter +
	                      styleName
	                        .replace(uppercasePattern, "-$1")
	                        .toLowerCase()
	                        .replace(msPattern$1, "-ms-") +
	                      ":" +
	                      value +
	                      "px"),
	              (delimiter = ";"));
	          }
	        clientValue = clientValue || null;
	        value$jscomp$0 = domElement.getAttribute("style");
	        value$jscomp$0 !== clientValue &&
	          ((clientValue = normalizeMarkupForTextOrAttribute(clientValue)),
	          normalizeMarkupForTextOrAttribute(value$jscomp$0) !== clientValue &&
	            (serverDifferences.style = getStylesObjectFromElement(domElement)));
	      }
	    }
	    function hydrateAttribute(
	      domElement,
	      propKey,
	      attributeName,
	      value,
	      extraAttributes,
	      serverDifferences
	    ) {
	      extraAttributes.delete(attributeName);
	      domElement = domElement.getAttribute(attributeName);
	      if (null === domElement)
	        switch (typeof value) {
	          case "undefined":
	          case "function":
	          case "symbol":
	          case "boolean":
	            return;
	        }
	      else if (null != value)
	        switch (typeof value) {
	          case "function":
	          case "symbol":
	          case "boolean":
	            break;
	          default:
	            if (
	              (checkAttributeStringCoercion(value, propKey),
	              domElement === "" + value)
	            )
	              return;
	        }
	      warnForPropDifference(propKey, domElement, value, serverDifferences);
	    }
	    function hydrateBooleanAttribute(
	      domElement,
	      propKey,
	      attributeName,
	      value,
	      extraAttributes,
	      serverDifferences
	    ) {
	      extraAttributes.delete(attributeName);
	      domElement = domElement.getAttribute(attributeName);
	      if (null === domElement) {
	        switch (typeof value) {
	          case "function":
	          case "symbol":
	            return;
	        }
	        if (!value) return;
	      } else
	        switch (typeof value) {
	          case "function":
	          case "symbol":
	            break;
	          default:
	            if (value) return;
	        }
	      warnForPropDifference(propKey, domElement, value, serverDifferences);
	    }
	    function hydrateBooleanishAttribute(
	      domElement,
	      propKey,
	      attributeName,
	      value,
	      extraAttributes,
	      serverDifferences
	    ) {
	      extraAttributes.delete(attributeName);
	      domElement = domElement.getAttribute(attributeName);
	      if (null === domElement)
	        switch (typeof value) {
	          case "undefined":
	          case "function":
	          case "symbol":
	            return;
	        }
	      else if (null != value)
	        switch (typeof value) {
	          case "function":
	          case "symbol":
	            break;
	          default:
	            if (
	              (checkAttributeStringCoercion(value, attributeName),
	              domElement === "" + value)
	            )
	              return;
	        }
	      warnForPropDifference(propKey, domElement, value, serverDifferences);
	    }
	    function hydrateNumericAttribute(
	      domElement,
	      propKey,
	      attributeName,
	      value,
	      extraAttributes,
	      serverDifferences
	    ) {
	      extraAttributes.delete(attributeName);
	      domElement = domElement.getAttribute(attributeName);
	      if (null === domElement)
	        switch (typeof value) {
	          case "undefined":
	          case "function":
	          case "symbol":
	          case "boolean":
	            return;
	          default:
	            if (isNaN(value)) return;
	        }
	      else if (null != value)
	        switch (typeof value) {
	          case "function":
	          case "symbol":
	          case "boolean":
	            break;
	          default:
	            if (
	              !isNaN(value) &&
	              (checkAttributeStringCoercion(value, propKey),
	              domElement === "" + value)
	            )
	              return;
	        }
	      warnForPropDifference(propKey, domElement, value, serverDifferences);
	    }
	    function hydrateSanitizedAttribute(
	      domElement,
	      propKey,
	      attributeName,
	      value,
	      extraAttributes,
	      serverDifferences
	    ) {
	      extraAttributes.delete(attributeName);
	      domElement = domElement.getAttribute(attributeName);
	      if (null === domElement)
	        switch (typeof value) {
	          case "undefined":
	          case "function":
	          case "symbol":
	          case "boolean":
	            return;
	        }
	      else if (null != value)
	        switch (typeof value) {
	          case "function":
	          case "symbol":
	          case "boolean":
	            break;
	          default:
	            if (
	              (checkAttributeStringCoercion(value, propKey),
	              (attributeName = sanitizeURL("" + value)),
	              domElement === attributeName)
	            )
	              return;
	        }
	      warnForPropDifference(propKey, domElement, value, serverDifferences);
	    }
	    function diffHydratedProperties(domElement, tag, props, hostContext) {
	      for (
	        var serverDifferences = {},
	          extraAttributes = new Set(),
	          attributes = domElement.attributes,
	          i = 0;
	        i < attributes.length;
	        i++
	      )
	        switch (attributes[i].name.toLowerCase()) {
	          case "value":
	            break;
	          case "checked":
	            break;
	          case "selected":
	            break;
	          default:
	            extraAttributes.add(attributes[i].name);
	        }
	      if (isCustomElement(tag))
	        for (var propKey in props) {
	          if (props.hasOwnProperty(propKey)) {
	            var value = props[propKey];
	            if (null != value)
	              if (registrationNameDependencies.hasOwnProperty(propKey))
	                "function" !== typeof value &&
	                  warnForInvalidEventListener(propKey, value);
	              else if (true !== props.suppressHydrationWarning)
	                switch (propKey) {
	                  case "children":
	                    ("string" !== typeof value && "number" !== typeof value) ||
	                      warnForPropDifference(
	                        "children",
	                        domElement.textContent,
	                        value,
	                        serverDifferences
	                      );
	                    continue;
	                  case "suppressContentEditableWarning":
	                  case "suppressHydrationWarning":
	                  case "defaultValue":
	                  case "defaultChecked":
	                  case "innerHTML":
	                  case "ref":
	                    continue;
	                  case "dangerouslySetInnerHTML":
	                    attributes = domElement.innerHTML;
	                    value = value ? value.__html : undefined;
	                    null != value &&
	                      ((value = normalizeHTML(domElement, value)),
	                      warnForPropDifference(
	                        propKey,
	                        attributes,
	                        value,
	                        serverDifferences
	                      ));
	                    continue;
	                  case "style":
	                    extraAttributes.delete(propKey);
	                    diffHydratedStyles(domElement, value, serverDifferences);
	                    continue;
	                  case "offsetParent":
	                  case "offsetTop":
	                  case "offsetLeft":
	                  case "offsetWidth":
	                  case "offsetHeight":
	                  case "isContentEditable":
	                  case "outerText":
	                  case "outerHTML":
	                    extraAttributes.delete(propKey.toLowerCase());
	                    console.error(
	                      "Assignment to read-only property will result in a no-op: `%s`",
	                      propKey
	                    );
	                    continue;
	                  case "className":
	                    extraAttributes.delete("class");
	                    attributes = getValueForAttributeOnCustomComponent(
	                      domElement,
	                      "class",
	                      value
	                    );
	                    warnForPropDifference(
	                      "className",
	                      attributes,
	                      value,
	                      serverDifferences
	                    );
	                    continue;
	                  default:
	                    hostContext.context === HostContextNamespaceNone &&
	                    "svg" !== tag &&
	                    "math" !== tag
	                      ? extraAttributes.delete(propKey.toLowerCase())
	                      : extraAttributes.delete(propKey),
	                      (attributes = getValueForAttributeOnCustomComponent(
	                        domElement,
	                        propKey,
	                        value
	                      )),
	                      warnForPropDifference(
	                        propKey,
	                        attributes,
	                        value,
	                        serverDifferences
	                      );
	                }
	          }
	        }
	      else
	        for (value in props)
	          if (
	            props.hasOwnProperty(value) &&
	            ((propKey = props[value]), null != propKey)
	          )
	            if (registrationNameDependencies.hasOwnProperty(value))
	              "function" !== typeof propKey &&
	                warnForInvalidEventListener(value, propKey);
	            else if (true !== props.suppressHydrationWarning)
	              switch (value) {
	                case "children":
	                  ("string" !== typeof propKey &&
	                    "number" !== typeof propKey) ||
	                    warnForPropDifference(
	                      "children",
	                      domElement.textContent,
	                      propKey,
	                      serverDifferences
	                    );
	                  continue;
	                case "suppressContentEditableWarning":
	                case "suppressHydrationWarning":
	                case "value":
	                case "checked":
	                case "selected":
	                case "defaultValue":
	                case "defaultChecked":
	                case "innerHTML":
	                case "ref":
	                  continue;
	                case "dangerouslySetInnerHTML":
	                  attributes = domElement.innerHTML;
	                  propKey = propKey ? propKey.__html : undefined;
	                  null != propKey &&
	                    ((propKey = normalizeHTML(domElement, propKey)),
	                    attributes !== propKey &&
	                      (serverDifferences[value] = { __html: attributes }));
	                  continue;
	                case "className":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "class",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "tabIndex":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "tabindex",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "style":
	                  extraAttributes.delete(value);
	                  diffHydratedStyles(domElement, propKey, serverDifferences);
	                  continue;
	                case "multiple":
	                  extraAttributes.delete(value);
	                  warnForPropDifference(
	                    value,
	                    domElement.multiple,
	                    propKey,
	                    serverDifferences
	                  );
	                  continue;
	                case "muted":
	                  extraAttributes.delete(value);
	                  warnForPropDifference(
	                    value,
	                    domElement.muted,
	                    propKey,
	                    serverDifferences
	                  );
	                  continue;
	                case "autoFocus":
	                  extraAttributes.delete("autofocus");
	                  warnForPropDifference(
	                    value,
	                    domElement.autofocus,
	                    propKey,
	                    serverDifferences
	                  );
	                  continue;
	                case "data":
	                  if ("object" !== tag) {
	                    extraAttributes.delete(value);
	                    attributes = domElement.getAttribute("data");
	                    warnForPropDifference(
	                      value,
	                      attributes,
	                      propKey,
	                      serverDifferences
	                    );
	                    continue;
	                  }
	                case "src":
	                case "href":
	                  if (
	                    !(
	                      "" !== propKey ||
	                      ("a" === tag && "href" === value) ||
	                      ("object" === tag && "data" === value)
	                    )
	                  ) {
	                    "src" === value
	                      ? console.error(
	                          'An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
	                          value,
	                          value
	                        )
	                      : console.error(
	                          'An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
	                          value,
	                          value
	                        );
	                    hydrateSanitizedAttribute(
	                      domElement,
	                      value,
	                      value,
	                      null,
	                      extraAttributes,
	                      serverDifferences
	                    );
	                    continue;
	                  }
	                  hydrateSanitizedAttribute(
	                    domElement,
	                    value,
	                    value,
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "action":
	                case "formAction":
	                  attributes = domElement.getAttribute(value);
	                  if ("function" === typeof propKey) {
	                    extraAttributes.delete(value.toLowerCase());
	                    "formAction" === value
	                      ? (extraAttributes.delete("name"),
	                        extraAttributes.delete("formenctype"),
	                        extraAttributes.delete("formmethod"),
	                        extraAttributes.delete("formtarget"))
	                      : (extraAttributes.delete("enctype"),
	                        extraAttributes.delete("method"),
	                        extraAttributes.delete("target"));
	                    continue;
	                  } else if (attributes === EXPECTED_FORM_ACTION_URL) {
	                    extraAttributes.delete(value.toLowerCase());
	                    warnForPropDifference(
	                      value,
	                      "function",
	                      propKey,
	                      serverDifferences
	                    );
	                    continue;
	                  }
	                  hydrateSanitizedAttribute(
	                    domElement,
	                    value,
	                    value.toLowerCase(),
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xlinkHref":
	                  hydrateSanitizedAttribute(
	                    domElement,
	                    value,
	                    "xlink:href",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "contentEditable":
	                  hydrateBooleanishAttribute(
	                    domElement,
	                    value,
	                    "contenteditable",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "spellCheck":
	                  hydrateBooleanishAttribute(
	                    domElement,
	                    value,
	                    "spellcheck",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "draggable":
	                case "autoReverse":
	                case "externalResourcesRequired":
	                case "focusable":
	                case "preserveAlpha":
	                  hydrateBooleanishAttribute(
	                    domElement,
	                    value,
	                    value,
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "allowFullScreen":
	                case "async":
	                case "autoPlay":
	                case "controls":
	                case "default":
	                case "defer":
	                case "disabled":
	                case "disablePictureInPicture":
	                case "disableRemotePlayback":
	                case "formNoValidate":
	                case "hidden":
	                case "loop":
	                case "noModule":
	                case "noValidate":
	                case "open":
	                case "playsInline":
	                case "readOnly":
	                case "required":
	                case "reversed":
	                case "scoped":
	                case "seamless":
	                case "itemScope":
	                  hydrateBooleanAttribute(
	                    domElement,
	                    value,
	                    value.toLowerCase(),
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "capture":
	                case "download":
	                  a: {
	                    i = domElement;
	                    var attributeName = (attributes = value),
	                      serverDifferences$jscomp$0 = serverDifferences;
	                    extraAttributes.delete(attributeName);
	                    i = i.getAttribute(attributeName);
	                    if (null === i)
	                      switch (typeof propKey) {
	                        case "undefined":
	                        case "function":
	                        case "symbol":
	                          break a;
	                        default:
	                          if (false === propKey) break a;
	                      }
	                    else if (null != propKey)
	                      switch (typeof propKey) {
	                        case "function":
	                        case "symbol":
	                          break;
	                        case "boolean":
	                          if (true === propKey && "" === i) break a;
	                          break;
	                        default:
	                          if (
	                            (checkAttributeStringCoercion(propKey, attributes),
	                            i === "" + propKey)
	                          )
	                            break a;
	                      }
	                    warnForPropDifference(
	                      attributes,
	                      i,
	                      propKey,
	                      serverDifferences$jscomp$0
	                    );
	                  }
	                  continue;
	                case "cols":
	                case "rows":
	                case "size":
	                case "span":
	                  a: {
	                    i = domElement;
	                    attributeName = attributes = value;
	                    serverDifferences$jscomp$0 = serverDifferences;
	                    extraAttributes.delete(attributeName);
	                    i = i.getAttribute(attributeName);
	                    if (null === i)
	                      switch (typeof propKey) {
	                        case "undefined":
	                        case "function":
	                        case "symbol":
	                        case "boolean":
	                          break a;
	                        default:
	                          if (isNaN(propKey) || 1 > propKey) break a;
	                      }
	                    else if (null != propKey)
	                      switch (typeof propKey) {
	                        case "function":
	                        case "symbol":
	                        case "boolean":
	                          break;
	                        default:
	                          if (
	                            !(isNaN(propKey) || 1 > propKey) &&
	                            (checkAttributeStringCoercion(propKey, attributes),
	                            i === "" + propKey)
	                          )
	                            break a;
	                      }
	                    warnForPropDifference(
	                      attributes,
	                      i,
	                      propKey,
	                      serverDifferences$jscomp$0
	                    );
	                  }
	                  continue;
	                case "rowSpan":
	                  hydrateNumericAttribute(
	                    domElement,
	                    value,
	                    "rowspan",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "start":
	                  hydrateNumericAttribute(
	                    domElement,
	                    value,
	                    value,
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xHeight":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "x-height",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xlinkActuate":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "xlink:actuate",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xlinkArcrole":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "xlink:arcrole",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xlinkRole":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "xlink:role",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xlinkShow":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "xlink:show",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xlinkTitle":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "xlink:title",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xlinkType":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "xlink:type",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xmlBase":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "xml:base",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xmlLang":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "xml:lang",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xmlSpace":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "xml:space",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "inert":
	                  "" !== propKey ||
	                    didWarnForNewBooleanPropsWithEmptyValue[value] ||
	                    ((didWarnForNewBooleanPropsWithEmptyValue[value] = true),
	                    console.error(
	                      "Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",
	                      value
	                    ));
	                  hydrateBooleanAttribute(
	                    domElement,
	                    value,
	                    value,
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                default:
	                  if (
	                    !(2 < value.length) ||
	                    ("o" !== value[0] && "O" !== value[0]) ||
	                    ("n" !== value[1] && "N" !== value[1])
	                  ) {
	                    i = getAttributeAlias(value);
	                    attributes = false;
	                    hostContext.context === HostContextNamespaceNone &&
	                    "svg" !== tag &&
	                    "math" !== tag
	                      ? extraAttributes.delete(i.toLowerCase())
	                      : ((attributeName = value.toLowerCase()),
	                        (attributeName = possibleStandardNames.hasOwnProperty(
	                          attributeName
	                        )
	                          ? possibleStandardNames[attributeName] || null
	                          : null),
	                        null !== attributeName &&
	                          attributeName !== value &&
	                          ((attributes = true),
	                          extraAttributes.delete(attributeName)),
	                        extraAttributes.delete(i));
	                    a: if (
	                      ((attributeName = domElement),
	                      (serverDifferences$jscomp$0 = i),
	                      (i = propKey),
	                      isAttributeNameSafe(serverDifferences$jscomp$0))
	                    )
	                      if (
	                        attributeName.hasAttribute(serverDifferences$jscomp$0)
	                      )
	                        (attributeName = attributeName.getAttribute(
	                          serverDifferences$jscomp$0
	                        )),
	                          checkAttributeStringCoercion(
	                            i,
	                            serverDifferences$jscomp$0
	                          ),
	                          (i = attributeName === "" + i ? i : attributeName);
	                      else {
	                        switch (typeof i) {
	                          case "function":
	                          case "symbol":
	                            break a;
	                          case "boolean":
	                            if (
	                              ((attributeName = serverDifferences$jscomp$0
	                                .toLowerCase()
	                                .slice(0, 5)),
	                              "data-" !== attributeName &&
	                                "aria-" !== attributeName)
	                            )
	                              break a;
	                        }
	                        i = undefined === i ? undefined : null;
	                      }
	                    else i = undefined;
	                    attributes ||
	                      warnForPropDifference(
	                        value,
	                        i,
	                        propKey,
	                        serverDifferences
	                      );
	                  }
	              }
	      0 < extraAttributes.size &&
	        true !== props.suppressHydrationWarning &&
	        warnForExtraAttributes(domElement, extraAttributes, serverDifferences);
	      return 0 === Object.keys(serverDifferences).length
	        ? null
	        : serverDifferences;
	    }
	    function propNamesListJoin(list, combinator) {
	      switch (list.length) {
	        case 0:
	          return "";
	        case 1:
	          return list[0];
	        case 2:
	          return list[0] + " " + combinator + " " + list[1];
	        default:
	          return (
	            list.slice(0, -1).join(", ") +
	            ", " +
	            combinator +
	            " " +
	            list[list.length - 1]
	          );
	      }
	    }
	    function getOwnerDocumentFromRootContainer(rootContainerElement) {
	      return 9 === rootContainerElement.nodeType
	        ? rootContainerElement
	        : rootContainerElement.ownerDocument;
	    }
	    function getOwnHostContext(namespaceURI) {
	      switch (namespaceURI) {
	        case SVG_NAMESPACE:
	          return HostContextNamespaceSvg;
	        case MATH_NAMESPACE:
	          return HostContextNamespaceMath;
	        default:
	          return HostContextNamespaceNone;
	      }
	    }
	    function getChildHostContextProd(parentNamespace, type) {
	      if (parentNamespace === HostContextNamespaceNone)
	        switch (type) {
	          case "svg":
	            return HostContextNamespaceSvg;
	          case "math":
	            return HostContextNamespaceMath;
	          default:
	            return HostContextNamespaceNone;
	        }
	      return parentNamespace === HostContextNamespaceSvg &&
	        "foreignObject" === type
	        ? HostContextNamespaceNone
	        : parentNamespace;
	    }
	    function shouldSetTextContent(type, props) {
	      return (
	        "textarea" === type ||
	        "noscript" === type ||
	        "string" === typeof props.children ||
	        "number" === typeof props.children ||
	        "bigint" === typeof props.children ||
	        ("object" === typeof props.dangerouslySetInnerHTML &&
	          null !== props.dangerouslySetInnerHTML &&
	          null != props.dangerouslySetInnerHTML.__html)
	      );
	    }
	    function shouldAttemptEagerTransition() {
	      var event = window.event;
	      if (event && "popstate" === event.type) {
	        if (event === currentPopstateTransitionEvent) return false;
	        currentPopstateTransitionEvent = event;
	        return true;
	      }
	      currentPopstateTransitionEvent = null;
	      return false;
	    }
	    function handleErrorInNextTick(error) {
	      setTimeout(function () {
	        throw error;
	      });
	    }
	    function commitMount(domElement, type, newProps) {
	      switch (type) {
	        case "button":
	        case "input":
	        case "select":
	        case "textarea":
	          newProps.autoFocus && domElement.focus();
	          break;
	        case "img":
	          newProps.src
	            ? (domElement.src = newProps.src)
	            : newProps.srcSet && (domElement.srcset = newProps.srcSet);
	      }
	    }
	    function commitUpdate(domElement, type, oldProps, newProps) {
	      updateProperties(domElement, type, oldProps, newProps);
	      domElement[internalPropsKey] = newProps;
	    }
	    function resetTextContent(domElement) {
	      setTextContent(domElement, "");
	    }
	    function commitTextUpdate(textInstance, oldText, newText) {
	      textInstance.nodeValue = newText;
	    }
	    function removeChild(parentInstance, child) {
	      parentInstance.removeChild(child);
	    }
	    function removeChildFromContainer(container, child) {
	      8 === container.nodeType
	        ? container.parentNode.removeChild(child)
	        : container.removeChild(child);
	    }
	    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
	      var node = suspenseInstance,
	        depth = 0;
	      do {
	        var nextNode = node.nextSibling;
	        parentInstance.removeChild(node);
	        if (nextNode && 8 === nextNode.nodeType)
	          if (((node = nextNode.data), node === SUSPENSE_END_DATA)) {
	            if (0 === depth) {
	              parentInstance.removeChild(nextNode);
	              retryIfBlockedOn(suspenseInstance);
	              return;
	            }
	            depth--;
	          } else
	            (node !== SUSPENSE_START_DATA &&
	              node !== SUSPENSE_PENDING_START_DATA &&
	              node !== SUSPENSE_FALLBACK_START_DATA) ||
	              depth++;
	        node = nextNode;
	      } while (node);
	      retryIfBlockedOn(suspenseInstance);
	    }
	    function hideInstance(instance) {
	      instance = instance.style;
	      "function" === typeof instance.setProperty
	        ? instance.setProperty("display", "none", "important")
	        : (instance.display = "none");
	    }
	    function hideTextInstance(textInstance) {
	      textInstance.nodeValue = "";
	    }
	    function unhideInstance(instance, props) {
	      props = props[STYLE];
	      props =
	        undefined !== props && null !== props && props.hasOwnProperty("display")
	          ? props.display
	          : null;
	      instance.style.display =
	        null == props || "boolean" === typeof props ? "" : ("" + props).trim();
	    }
	    function unhideTextInstance(textInstance, text) {
	      textInstance.nodeValue = text;
	    }
	    function clearContainerSparingly(container) {
	      var nextNode = container.firstChild;
	      nextNode && 10 === nextNode.nodeType && (nextNode = nextNode.nextSibling);
	      for (; nextNode; ) {
	        var node = nextNode;
	        nextNode = nextNode.nextSibling;
	        switch (node.nodeName) {
	          case "HTML":
	          case "HEAD":
	          case "BODY":
	            clearContainerSparingly(node);
	            detachDeletedInstance(node);
	            continue;
	          case "SCRIPT":
	          case "STYLE":
	            continue;
	          case "LINK":
	            if ("stylesheet" === node.rel.toLowerCase()) continue;
	        }
	        container.removeChild(node);
	      }
	    }
	    function canHydrateInstance(instance, type, props, inRootOrSingleton) {
	      for (; 1 === instance.nodeType; ) {
	        var anyProps = props;
	        if (instance.nodeName.toLowerCase() !== type.toLowerCase()) {
	          if (
	            !inRootOrSingleton &&
	            ("INPUT" !== instance.nodeName || "hidden" !== instance.type)
	          )
	            break;
	        } else if (!inRootOrSingleton)
	          if ("input" === type && "hidden" === instance.type) {
	            checkAttributeStringCoercion(anyProps.name, "name");
	            var name = null == anyProps.name ? null : "" + anyProps.name;
	            if (
	              "hidden" === anyProps.type &&
	              instance.getAttribute("name") === name
	            )
	              return instance;
	          } else return instance;
	        else if (!instance[internalHoistableMarker])
	          switch (type) {
	            case "meta":
	              if (!instance.hasAttribute("itemprop")) break;
	              return instance;
	            case "link":
	              name = instance.getAttribute("rel");
	              if (
	                "stylesheet" === name &&
	                instance.hasAttribute("data-precedence")
	              )
	                break;
	              else if (
	                name !== anyProps.rel ||
	                instance.getAttribute("href") !==
	                  (null == anyProps.href ? null : anyProps.href) ||
	                instance.getAttribute("crossorigin") !==
	                  (null == anyProps.crossOrigin
	                    ? null
	                    : anyProps.crossOrigin) ||
	                instance.getAttribute("title") !==
	                  (null == anyProps.title ? null : anyProps.title)
	              )
	                break;
	              return instance;
	            case "style":
	              if (instance.hasAttribute("data-precedence")) break;
	              return instance;
	            case "script":
	              name = instance.getAttribute("src");
	              if (
	                (name !== (null == anyProps.src ? null : anyProps.src) ||
	                  instance.getAttribute("type") !==
	                    (null == anyProps.type ? null : anyProps.type) ||
	                  instance.getAttribute("crossorigin") !==
	                    (null == anyProps.crossOrigin
	                      ? null
	                      : anyProps.crossOrigin)) &&
	                name &&
	                instance.hasAttribute("async") &&
	                !instance.hasAttribute("itemprop")
	              )
	                break;
	              return instance;
	            default:
	              return instance;
	          }
	        instance = getNextHydratable(instance.nextSibling);
	        if (null === instance) break;
	      }
	      return null;
	    }
	    function canHydrateTextInstance(instance, text, inRootOrSingleton) {
	      if ("" === text) return null;
	      for (; 3 !== instance.nodeType; ) {
	        if (
	          (1 !== instance.nodeType ||
	            "INPUT" !== instance.nodeName ||
	            "hidden" !== instance.type) &&
	          !inRootOrSingleton
	        )
	          return null;
	        instance = getNextHydratable(instance.nextSibling);
	        if (null === instance) return null;
	      }
	      return instance;
	    }
	    function getNextHydratable(node) {
	      for (; null != node; node = node.nextSibling) {
	        var nodeType = node.nodeType;
	        if (1 === nodeType || 3 === nodeType) break;
	        if (8 === nodeType) {
	          nodeType = node.data;
	          if (
	            nodeType === SUSPENSE_START_DATA ||
	            nodeType === SUSPENSE_FALLBACK_START_DATA ||
	            nodeType === SUSPENSE_PENDING_START_DATA ||
	            nodeType === FORM_STATE_IS_MATCHING ||
	            nodeType === FORM_STATE_IS_NOT_MATCHING
	          )
	            break;
	          if (nodeType === SUSPENSE_END_DATA) return null;
	        }
	      }
	      return node;
	    }
	    function describeHydratableInstanceForDevWarnings(instance) {
	      if (1 === instance.nodeType) {
	        for (
	          var JSCompiler_temp_const = instance.nodeName.toLowerCase(),
	            serverDifferences = {},
	            attributes = instance.attributes,
	            i = 0;
	          i < attributes.length;
	          i++
	        ) {
	          var attr = attributes[i];
	          serverDifferences[getPropNameFromAttributeName(attr.name)] =
	            "style" === attr.name.toLowerCase()
	              ? getStylesObjectFromElement(instance)
	              : attr.value;
	        }
	        return { type: JSCompiler_temp_const, props: serverDifferences };
	      }
	      return 8 === instance.nodeType
	        ? { type: "Suspense", props: {} }
	        : instance.nodeValue;
	    }
	    function diffHydratedTextForDevWarnings(textInstance, text, parentProps) {
	      return null === parentProps ||
	        true !== parentProps[SUPPRESS_HYDRATION_WARNING]
	        ? (textInstance.nodeValue === text
	            ? (textInstance = null)
	            : ((text = normalizeMarkupForTextOrAttribute(text)),
	              (textInstance =
	                normalizeMarkupForTextOrAttribute(textInstance.nodeValue) ===
	                text
	                  ? null
	                  : textInstance.nodeValue)),
	          textInstance)
	        : null;
	    }
	    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
	      suspenseInstance = suspenseInstance.nextSibling;
	      for (var depth = 0; suspenseInstance; ) {
	        if (8 === suspenseInstance.nodeType) {
	          var data = suspenseInstance.data;
	          if (data === SUSPENSE_END_DATA) {
	            if (0 === depth)
	              return getNextHydratable(suspenseInstance.nextSibling);
	            depth--;
	          } else
	            (data !== SUSPENSE_START_DATA &&
	              data !== SUSPENSE_FALLBACK_START_DATA &&
	              data !== SUSPENSE_PENDING_START_DATA) ||
	              depth++;
	        }
	        suspenseInstance = suspenseInstance.nextSibling;
	      }
	      return null;
	    }
	    function getParentSuspenseInstance(targetInstance) {
	      targetInstance = targetInstance.previousSibling;
	      for (var depth = 0; targetInstance; ) {
	        if (8 === targetInstance.nodeType) {
	          var data = targetInstance.data;
	          if (
	            data === SUSPENSE_START_DATA ||
	            data === SUSPENSE_FALLBACK_START_DATA ||
	            data === SUSPENSE_PENDING_START_DATA
	          ) {
	            if (0 === depth) return targetInstance;
	            depth--;
	          } else data === SUSPENSE_END_DATA && depth++;
	        }
	        targetInstance = targetInstance.previousSibling;
	      }
	      return null;
	    }
	    function commitHydratedContainer(container) {
	      retryIfBlockedOn(container);
	    }
	    function commitHydratedSuspenseInstance(suspenseInstance) {
	      retryIfBlockedOn(suspenseInstance);
	    }
	    function resolveSingletonInstance(
	      type,
	      props,
	      rootContainerInstance,
	      hostContext,
	      validateDOMNestingDev
	    ) {
	      validateDOMNestingDev &&
	        validateDOMNesting(type, hostContext.ancestorInfo);
	      props = getOwnerDocumentFromRootContainer(rootContainerInstance);
	      switch (type) {
	        case "html":
	          type = props.documentElement;
	          if (!type)
	            throw Error(
	              "React expected an <html> element (document.documentElement) to exist in the Document but one was not found. React never removes the documentElement for any Document it renders into so the cause is likely in some other script running on this page."
	            );
	          return type;
	        case "head":
	          type = props.head;
	          if (!type)
	            throw Error(
	              "React expected a <head> element (document.head) to exist in the Document but one was not found. React never removes the head for any Document it renders into so the cause is likely in some other script running on this page."
	            );
	          return type;
	        case "body":
	          type = props.body;
	          if (!type)
	            throw Error(
	              "React expected a <body> element (document.body) to exist in the Document but one was not found. React never removes the body for any Document it renders into so the cause is likely in some other script running on this page."
	            );
	          return type;
	        default:
	          throw Error(
	            "resolveSingletonInstance was called with an element type that is not supported. This is a bug in React."
	          );
	      }
	    }
	    function acquireSingletonInstance(
	      type,
	      props,
	      instance,
	      internalInstanceHandle
	    ) {
	      if (getInstanceFromNode(instance)) {
	        var tagName = instance.tagName.toLowerCase();
	        console.error(
	          "You are mounting a new %s component when a previous one has not first unmounted. It is an error to render more than one %s component at a time and attributes and children of these components will likely fail in unpredictable ways. Please only render a single instance of <%s> and if you need to mount a new one, ensure any previous ones have unmounted first.",
	          tagName,
	          tagName,
	          tagName
	        );
	      }
	      switch (type) {
	        case "html":
	        case "head":
	        case "body":
	          break;
	        default:
	          console.error(
	            "acquireSingletonInstance was called with an element type that is not supported. This is a bug in React."
	          );
	      }
	      for (tagName = instance.attributes; tagName.length; )
	        instance.removeAttributeNode(tagName[0]);
	      setInitialProperties(instance, type, props);
	      instance[internalInstanceKey] = internalInstanceHandle;
	      instance[internalPropsKey] = props;
	    }
	    function getHoistableRoot(container) {
	      return "function" === typeof container.getRootNode
	        ? container.getRootNode()
	        : container.ownerDocument;
	    }
	    function preconnectAs(rel, href, crossOrigin) {
	      var ownerDocument = globalDocument;
	      if (ownerDocument && "string" === typeof href && href) {
	        var limitedEscapedHref =
	          escapeSelectorAttributeValueInsideDoubleQuotes(href);
	        limitedEscapedHref =
	          'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]';
	        "string" === typeof crossOrigin &&
	          (limitedEscapedHref += '[crossorigin="' + crossOrigin + '"]');
	        preconnectsSet.has(limitedEscapedHref) ||
	          (preconnectsSet.add(limitedEscapedHref),
	          (rel = { rel: rel, crossOrigin: crossOrigin, href: href }),
	          null === ownerDocument.querySelector(limitedEscapedHref) &&
	            ((href = ownerDocument.createElement("link")),
	            setInitialProperties(href, "link", rel),
	            markNodeAsHoistable(href),
	            ownerDocument.head.appendChild(href)));
	      }
	    }
	    function getResource(type, currentProps, pendingProps, currentResource) {
	      var resourceRoot = (resourceRoot = rootInstanceStackCursor.current)
	        ? getHoistableRoot(resourceRoot)
	        : null;
	      if (!resourceRoot)
	        throw Error(
	          '"resourceRoot" was expected to exist. This is a bug in React.'
	        );
	      switch (type) {
	        case "meta":
	        case "title":
	          return null;
	        case "style":
	          return "string" === typeof pendingProps.precedence &&
	            "string" === typeof pendingProps.href
	            ? ((pendingProps = getStyleKey(pendingProps.href)),
	              (currentProps =
	                getResourcesFromRoot(resourceRoot).hoistableStyles),
	              (currentResource = currentProps.get(pendingProps)),
	              currentResource ||
	                ((currentResource = {
	                  type: "style",
	                  instance: null,
	                  count: 0,
	                  state: null
	                }),
	                currentProps.set(pendingProps, currentResource)),
	              currentResource)
	            : { type: "void", instance: null, count: 0, state: null };
	        case "link":
	          if (
	            "stylesheet" === pendingProps.rel &&
	            "string" === typeof pendingProps.href &&
	            "string" === typeof pendingProps.precedence
	          ) {
	            type = getStyleKey(pendingProps.href);
	            var _styles = getResourcesFromRoot(resourceRoot).hoistableStyles,
	              _resource = _styles.get(type);
	            if (
	              !_resource &&
	              ((resourceRoot = resourceRoot.ownerDocument || resourceRoot),
	              (_resource = {
	                type: "stylesheet",
	                instance: null,
	                count: 0,
	                state: { loading: NotLoaded, preload: null }
	              }),
	              _styles.set(type, _resource),
	              (_styles = resourceRoot.querySelector(
	                getStylesheetSelectorFromKey(type)
	              )) &&
	                !_styles._p &&
	                ((_resource.instance = _styles),
	                (_resource.state.loading = Loaded | Inserted)),
	              !preloadPropsMap.has(type))
	            ) {
	              var preloadProps = {
	                rel: "preload",
	                as: "style",
	                href: pendingProps.href,
	                crossOrigin: pendingProps.crossOrigin,
	                integrity: pendingProps.integrity,
	                media: pendingProps.media,
	                hrefLang: pendingProps.hrefLang,
	                referrerPolicy: pendingProps.referrerPolicy
	              };
	              preloadPropsMap.set(type, preloadProps);
	              _styles ||
	                preloadStylesheet(
	                  resourceRoot,
	                  type,
	                  preloadProps,
	                  _resource.state
	                );
	            }
	            if (currentProps && null === currentResource)
	              throw (
	                ((pendingProps =
	                  "\n\n  - " +
	                  describeLinkForResourceErrorDEV(currentProps) +
	                  "\n  + " +
	                  describeLinkForResourceErrorDEV(pendingProps)),
	                Error(
	                  "Expected <link> not to update to be updated to a stylesheet with precedence. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key." +
	                    pendingProps
	                ))
	              );
	            return _resource;
	          }
	          if (currentProps && null !== currentResource)
	            throw (
	              ((pendingProps =
	                "\n\n  - " +
	                describeLinkForResourceErrorDEV(currentProps) +
	                "\n  + " +
	                describeLinkForResourceErrorDEV(pendingProps)),
	              Error(
	                "Expected stylesheet with precedence to not be updated to a different kind of <link>. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key." +
	                  pendingProps
	              ))
	            );
	          return null;
	        case "script":
	          return (
	            (currentProps = pendingProps.async),
	            (pendingProps = pendingProps.src),
	            "string" === typeof pendingProps &&
	            currentProps &&
	            "function" !== typeof currentProps &&
	            "symbol" !== typeof currentProps
	              ? ((pendingProps = getScriptKey(pendingProps)),
	                (currentProps =
	                  getResourcesFromRoot(resourceRoot).hoistableScripts),
	                (currentResource = currentProps.get(pendingProps)),
	                currentResource ||
	                  ((currentResource = {
	                    type: "script",
	                    instance: null,
	                    count: 0,
	                    state: null
	                  }),
	                  currentProps.set(pendingProps, currentResource)),
	                currentResource)
	              : { type: "void", instance: null, count: 0, state: null }
	          );
	        default:
	          throw Error(
	            'getResource encountered a type it did not expect: "' +
	              type +
	              '". this is a bug in React.'
	          );
	      }
	    }
	    function describeLinkForResourceErrorDEV(props) {
	      var describedProps = 0,
	        description = "<link";
	      "string" === typeof props.rel
	        ? (describedProps++, (description += ' rel="' + props.rel + '"'))
	        : hasOwnProperty.call(props, "rel") &&
	          (describedProps++,
	          (description +=
	            ' rel="' +
	            (null === props.rel ? "null" : "invalid type " + typeof props.rel) +
	            '"'));
	      "string" === typeof props.href
	        ? (describedProps++, (description += ' href="' + props.href + '"'))
	        : hasOwnProperty.call(props, "href") &&
	          (describedProps++,
	          (description +=
	            ' href="' +
	            (null === props.href
	              ? "null"
	              : "invalid type " + typeof props.href) +
	            '"'));
	      "string" === typeof props.precedence
	        ? (describedProps++,
	          (description += ' precedence="' + props.precedence + '"'))
	        : hasOwnProperty.call(props, "precedence") &&
	          (describedProps++,
	          (description +=
	            " precedence={" +
	            (null === props.precedence
	              ? "null"
	              : "invalid type " + typeof props.precedence) +
	            "}"));
	      Object.getOwnPropertyNames(props).length > describedProps &&
	        (description += " ...");
	      return description + " />";
	    }
	    function getStyleKey(href) {
	      return (
	        'href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"'
	      );
	    }
	    function getStylesheetSelectorFromKey(key) {
	      return 'link[rel="stylesheet"][' + key + "]";
	    }
	    function stylesheetPropsFromRawProps(rawProps) {
	      return assign({}, rawProps, {
	        "data-precedence": rawProps.precedence,
	        precedence: null
	      });
	    }
	    function preloadStylesheet(ownerDocument, key, preloadProps, state) {
	      ownerDocument.querySelector(
	        'link[rel="preload"][as="style"][' + key + "]"
	      )
	        ? (state.loading = Loaded)
	        : ((key = ownerDocument.createElement("link")),
	          (state.preload = key),
	          key.addEventListener("load", function () {
	            return (state.loading |= Loaded);
	          }),
	          key.addEventListener("error", function () {
	            return (state.loading |= Errored);
	          }),
	          setInitialProperties(key, "link", preloadProps),
	          markNodeAsHoistable(key),
	          ownerDocument.head.appendChild(key));
	    }
	    function getScriptKey(src) {
	      return (
	        '[src="' + escapeSelectorAttributeValueInsideDoubleQuotes(src) + '"]'
	      );
	    }
	    function getScriptSelectorFromKey(key) {
	      return "script[async]" + key;
	    }
	    function acquireResource(hoistableRoot, resource, props) {
	      resource.count++;
	      if (null === resource.instance)
	        switch (resource.type) {
	          case "style":
	            var instance = hoistableRoot.querySelector(
	              'style[data-href~="' +
	                escapeSelectorAttributeValueInsideDoubleQuotes(props.href) +
	                '"]'
	            );
	            if (instance)
	              return (
	                (resource.instance = instance),
	                markNodeAsHoistable(instance),
	                instance
	              );
	            var styleProps = assign({}, props, {
	              "data-href": props.href,
	              "data-precedence": props.precedence,
	              href: null,
	              precedence: null
	            });
	            instance = (
	              hoistableRoot.ownerDocument || hoistableRoot
	            ).createElement("style");
	            markNodeAsHoistable(instance);
	            setInitialProperties(instance, "style", styleProps);
	            insertStylesheet(instance, props.precedence, hoistableRoot);
	            return (resource.instance = instance);
	          case "stylesheet":
	            styleProps = getStyleKey(props.href);
	            var _instance = hoistableRoot.querySelector(
	              getStylesheetSelectorFromKey(styleProps)
	            );
	            if (_instance)
	              return (
	                (resource.state.loading |= Inserted),
	                (resource.instance = _instance),
	                markNodeAsHoistable(_instance),
	                _instance
	              );
	            instance = stylesheetPropsFromRawProps(props);
	            (styleProps = preloadPropsMap.get(styleProps)) &&
	              adoptPreloadPropsForStylesheet(instance, styleProps);
	            _instance = (
	              hoistableRoot.ownerDocument || hoistableRoot
	            ).createElement("link");
	            markNodeAsHoistable(_instance);
	            var linkInstance = _instance;
	            linkInstance._p = new Promise(function (resolve, reject) {
	              linkInstance.onload = resolve;
	              linkInstance.onerror = reject;
	            });
	            setInitialProperties(_instance, "link", instance);
	            resource.state.loading |= Inserted;
	            insertStylesheet(_instance, props.precedence, hoistableRoot);
	            return (resource.instance = _instance);
	          case "script":
	            _instance = getScriptKey(props.src);
	            if (
	              (styleProps = hoistableRoot.querySelector(
	                getScriptSelectorFromKey(_instance)
	              ))
	            )
	              return (
	                (resource.instance = styleProps),
	                markNodeAsHoistable(styleProps),
	                styleProps
	              );
	            instance = props;
	            if ((styleProps = preloadPropsMap.get(_instance)))
	              (instance = assign({}, props)),
	                adoptPreloadPropsForScript(instance, styleProps);
	            hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
	            styleProps = hoistableRoot.createElement("script");
	            markNodeAsHoistable(styleProps);
	            setInitialProperties(styleProps, "link", instance);
	            hoistableRoot.head.appendChild(styleProps);
	            return (resource.instance = styleProps);
	          case "void":
	            return null;
	          default:
	            throw Error(
	              'acquireResource encountered a resource type it did not expect: "' +
	                resource.type +
	                '". this is a bug in React.'
	            );
	        }
	      else
	        "stylesheet" === resource.type &&
	          (resource.state.loading & Inserted) === NotLoaded &&
	          ((instance = resource.instance),
	          (resource.state.loading |= Inserted),
	          insertStylesheet(instance, props.precedence, hoistableRoot));
	      return resource.instance;
	    }
	    function insertStylesheet(instance, precedence, root) {
	      for (
	        var nodes = root.querySelectorAll(
	            'link[rel="stylesheet"][data-precedence],style[data-precedence]'
	          ),
	          last = nodes.length ? nodes[nodes.length - 1] : null,
	          prior = last,
	          i = 0;
	        i < nodes.length;
	        i++
	      ) {
	        var node = nodes[i];
	        if (node.dataset.precedence === precedence) prior = node;
	        else if (prior !== last) break;
	      }
	      prior
	        ? prior.parentNode.insertBefore(instance, prior.nextSibling)
	        : ((precedence = 9 === root.nodeType ? root.head : root),
	          precedence.insertBefore(instance, precedence.firstChild));
	    }
	    function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
	      null == stylesheetProps.crossOrigin &&
	        (stylesheetProps.crossOrigin = preloadProps.crossOrigin);
	      null == stylesheetProps.referrerPolicy &&
	        (stylesheetProps.referrerPolicy = preloadProps.referrerPolicy);
	      null == stylesheetProps.title &&
	        (stylesheetProps.title = preloadProps.title);
	    }
	    function adoptPreloadPropsForScript(scriptProps, preloadProps) {
	      null == scriptProps.crossOrigin &&
	        (scriptProps.crossOrigin = preloadProps.crossOrigin);
	      null == scriptProps.referrerPolicy &&
	        (scriptProps.referrerPolicy = preloadProps.referrerPolicy);
	      null == scriptProps.integrity &&
	        (scriptProps.integrity = preloadProps.integrity);
	    }
	    function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
	      if (null === tagCaches) {
	        var cache = new Map();
	        var caches = (tagCaches = new Map());
	        caches.set(ownerDocument, cache);
	      } else
	        (caches = tagCaches),
	          (cache = caches.get(ownerDocument)),
	          cache || ((cache = new Map()), caches.set(ownerDocument, cache));
	      if (cache.has(type)) return cache;
	      cache.set(type, null);
	      ownerDocument = ownerDocument.getElementsByTagName(type);
	      for (caches = 0; caches < ownerDocument.length; caches++) {
	        var node = ownerDocument[caches];
	        if (
	          !(
	            node[internalHoistableMarker] ||
	            node[internalInstanceKey] ||
	            ("link" === type && "stylesheet" === node.getAttribute("rel"))
	          ) &&
	          node.namespaceURI !== SVG_NAMESPACE
	        ) {
	          var nodeKey = node.getAttribute(keyAttribute) || "";
	          nodeKey = type + nodeKey;
	          var existing = cache.get(nodeKey);
	          existing ? existing.push(node) : cache.set(nodeKey, [node]);
	        }
	      }
	      return cache;
	    }
	    function mountHoistable(hoistableRoot, type, instance) {
	      hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
	      hoistableRoot.head.insertBefore(
	        instance,
	        "title" === type ? hoistableRoot.querySelector("head > title") : null
	      );
	    }
	    function isHostHoistableType(type, props, hostContext) {
	      var outsideHostContainerContext =
	        !hostContext.ancestorInfo.containerTagInScope;
	      if (
	        hostContext.context === HostContextNamespaceSvg ||
	        null != props.itemProp
	      )
	        return (
	          !outsideHostContainerContext ||
	            null == props.itemProp ||
	            ("meta" !== type &&
	              "title" !== type &&
	              "style" !== type &&
	              "link" !== type &&
	              "script" !== type) ||
	            console.error(
	              "Cannot render a <%s> outside the main document if it has an `itemProp` prop. `itemProp` suggests the tag belongs to an `itemScope` which can appear anywhere in the DOM. If you were intending for React to hoist this <%s> remove the `itemProp` prop. Otherwise, try moving this tag into the <head> or <body> of the Document.",
	              type,
	              type
	            ),
	          false
	        );
	      switch (type) {
	        case "meta":
	        case "title":
	          return true;
	        case "style":
	          if (
	            "string" !== typeof props.precedence ||
	            "string" !== typeof props.href ||
	            "" === props.href
	          ) {
	            outsideHostContainerContext &&
	              console.error(
	                'Cannot render a <style> outside the main document without knowing its precedence and a unique href key. React can hoist and deduplicate <style> tags if you provide a `precedence` prop along with an `href` prop that does not conflic with the `href` values used in any other hoisted <style> or <link rel="stylesheet" ...> tags.  Note that hoisting <style> tags is considered an advanced feature that most will not use directly. Consider moving the <style> tag to the <head> or consider adding a `precedence="default"` and `href="some unique resource identifier"`, or move the <style> to the <style> tag.'
	              );
	            break;
	          }
	          return true;
	        case "link":
	          if (
	            "string" !== typeof props.rel ||
	            "string" !== typeof props.href ||
	            "" === props.href ||
	            props.onLoad ||
	            props.onError
	          ) {
	            if (
	              "stylesheet" === props.rel &&
	              "string" === typeof props.precedence
	            ) {
	              type = props.href;
	              var onError = props.onError,
	                disabled = props.disabled;
	              hostContext = [];
	              props.onLoad && hostContext.push("`onLoad`");
	              onError && hostContext.push("`onError`");
	              null != disabled && hostContext.push("`disabled`");
	              onError = propNamesListJoin(hostContext, "and");
	              onError += 1 === hostContext.length ? " prop" : " props";
	              disabled =
	                1 === hostContext.length ? "an " + onError : "the " + onError;
	              hostContext.length &&
	                console.error(
	                  'React encountered a <link rel="stylesheet" href="%s" ... /> with a `precedence` prop that also included %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.',
	                  type,
	                  disabled,
	                  onError
	                );
	            }
	            outsideHostContainerContext &&
	              ("string" !== typeof props.rel ||
	              "string" !== typeof props.href ||
	              "" === props.href
	                ? console.error(
	                    "Cannot render a <link> outside the main document without a `rel` and `href` prop. Try adding a `rel` and/or `href` prop to this <link> or moving the link into the <head> tag"
	                  )
	                : (props.onError || props.onLoad) &&
	                  console.error(
	                    "Cannot render a <link> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."
	                  ));
	            break;
	          }
	          switch (props.rel) {
	            case "stylesheet":
	              return (
	                (type = props.precedence),
	                (props = props.disabled),
	                "string" !== typeof type &&
	                  outsideHostContainerContext &&
	                  console.error(
	                    'Cannot render a <link rel="stylesheet" /> outside the main document without knowing its precedence. Consider adding precedence="default" or moving it into the root <head> tag.'
	                  ),
	                "string" === typeof type && null == props
	              );
	            default:
	              return true;
	          }
	        case "script":
	          type =
	            props.async &&
	            "function" !== typeof props.async &&
	            "symbol" !== typeof props.async;
	          if (
	            !type ||
	            props.onLoad ||
	            props.onError ||
	            !props.src ||
	            "string" !== typeof props.src
	          ) {
	            outsideHostContainerContext &&
	              (type
	                ? props.onLoad || props.onError
	                  ? console.error(
	                      "Cannot render a <script> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."
	                    )
	                  : console.error(
	                      "Cannot render a <script> outside the main document without `async={true}` and a non-empty `src` prop. Ensure there is a valid `src` and either make the script async or move it into the root <head> tag or somewhere in the <body>."
	                    )
	                : console.error(
	                    'Cannot render a sync or defer <script> outside the main document without knowing its order. Try adding async="" or moving it into the root <head> tag.'
	                  ));
	            break;
	          }
	          return true;
	        case "noscript":
	        case "template":
	          outsideHostContainerContext &&
	            console.error(
	              "Cannot render <%s> outside the main document. Try moving it into the root <head> tag.",
	              type
	            );
	      }
	      return false;
	    }
	    function preloadResource(resource) {
	      return "stylesheet" === resource.type &&
	        (resource.state.loading & Settled) === NotLoaded
	        ? false
	        : true;
	    }
	    function noop() {}
	    function suspendResource(hoistableRoot, resource, props) {
	      if (null === suspendedState)
	        throw Error(
	          "Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug."
	        );
	      var state = suspendedState;
	      if (
	        "stylesheet" === resource.type &&
	        ("string" !== typeof props.media ||
	          false !== matchMedia(props.media).matches) &&
	        (resource.state.loading & Inserted) === NotLoaded
	      ) {
	        if (null === resource.instance) {
	          var key = getStyleKey(props.href),
	            instance = hoistableRoot.querySelector(
	              getStylesheetSelectorFromKey(key)
	            );
	          if (instance) {
	            hoistableRoot = instance._p;
	            null !== hoistableRoot &&
	              "object" === typeof hoistableRoot &&
	              "function" === typeof hoistableRoot.then &&
	              (state.count++,
	              (state = onUnsuspend.bind(state)),
	              hoistableRoot.then(state, state));
	            resource.state.loading |= Inserted;
	            resource.instance = instance;
	            markNodeAsHoistable(instance);
	            return;
	          }
	          instance = hoistableRoot.ownerDocument || hoistableRoot;
	          props = stylesheetPropsFromRawProps(props);
	          (key = preloadPropsMap.get(key)) &&
	            adoptPreloadPropsForStylesheet(props, key);
	          instance = instance.createElement("link");
	          markNodeAsHoistable(instance);
	          var linkInstance = instance;
	          linkInstance._p = new Promise(function (resolve, reject) {
	            linkInstance.onload = resolve;
	            linkInstance.onerror = reject;
	          });
	          setInitialProperties(instance, "link", props);
	          resource.instance = instance;
	        }
	        null === state.stylesheets && (state.stylesheets = new Map());
	        state.stylesheets.set(resource, hoistableRoot);
	        (hoistableRoot = resource.state.preload) &&
	          (resource.state.loading & Settled) === NotLoaded &&
	          (state.count++,
	          (resource = onUnsuspend.bind(state)),
	          hoistableRoot.addEventListener("load", resource),
	          hoistableRoot.addEventListener("error", resource));
	      }
	    }
	    function waitForCommitToBeReady() {
	      if (null === suspendedState)
	        throw Error(
	          "Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug."
	        );
	      var state = suspendedState;
	      state.stylesheets &&
	        0 === state.count &&
	        insertSuspendedStylesheets(state, state.stylesheets);
	      return 0 < state.count
	        ? function (commit) {
	            var stylesheetTimer = setTimeout(function () {
	              state.stylesheets &&
	                insertSuspendedStylesheets(state, state.stylesheets);
	              if (state.unsuspend) {
	                var unsuspend = state.unsuspend;
	                state.unsuspend = null;
	                unsuspend();
	              }
	            }, 6e4);
	            state.unsuspend = commit;
	            return function () {
	              state.unsuspend = null;
	              clearTimeout(stylesheetTimer);
	            };
	          }
	        : null;
	    }
	    function onUnsuspend() {
	      this.count--;
	      if (0 === this.count)
	        if (this.stylesheets)
	          insertSuspendedStylesheets(this, this.stylesheets);
	        else if (this.unsuspend) {
	          var unsuspend = this.unsuspend;
	          this.unsuspend = null;
	          unsuspend();
	        }
	    }
	    function insertSuspendedStylesheets(state, resources) {
	      state.stylesheets = null;
	      null !== state.unsuspend &&
	        (state.count++,
	        (precedencesByRoot = new Map()),
	        resources.forEach(insertStylesheetIntoRoot, state),
	        (precedencesByRoot = null),
	        onUnsuspend.call(state));
	    }
	    function insertStylesheetIntoRoot(root, resource) {
	      if (!(resource.state.loading & Inserted)) {
	        var precedences = precedencesByRoot.get(root);
	        if (precedences) var last = precedences.get(LAST_PRECEDENCE);
	        else {
	          precedences = new Map();
	          precedencesByRoot.set(root, precedences);
	          for (
	            var nodes = root.querySelectorAll(
	                "link[data-precedence],style[data-precedence]"
	              ),
	              i = 0;
	            i < nodes.length;
	            i++
	          ) {
	            var node = nodes[i];
	            if (
	              "LINK" === node.nodeName ||
	              "not all" !== node.getAttribute("media")
	            )
	              precedences.set(node.dataset.precedence, node), (last = node);
	          }
	          last && precedences.set(LAST_PRECEDENCE, last);
	        }
	        nodes = resource.instance;
	        node = nodes.getAttribute("data-precedence");
	        i = precedences.get(node) || last;
	        i === last && precedences.set(LAST_PRECEDENCE, nodes);
	        precedences.set(node, nodes);
	        this.count++;
	        last = onUnsuspend.bind(this);
	        nodes.addEventListener("load", last);
	        nodes.addEventListener("error", last);
	        i
	          ? i.parentNode.insertBefore(nodes, i.nextSibling)
	          : ((root = 9 === root.nodeType ? root.head : root),
	            root.insertBefore(nodes, root.firstChild));
	        resource.state.loading |= Inserted;
	      }
	    }
	    function bindToConsole(methodName, args, badgeName) {
	      var offset = 0;
	      switch (methodName) {
	        case "dir":
	        case "dirxml":
	        case "groupEnd":
	        case "table":
	          return bind.apply(console[methodName], [console].concat(args));
	        case "assert":
	          offset = 1;
	      }
	      args = args.slice(0);
	      "string" === typeof args[offset]
	        ? args.splice(
	            offset,
	            1,
	            badgeFormat + args[offset],
	            badgeStyle,
	            pad + badgeName + pad,
	            resetStyle
	          )
	        : args.splice(
	            offset,
	            0,
	            badgeFormat,
	            badgeStyle,
	            pad + badgeName + pad,
	            resetStyle
	          );
	      args.unshift(console);
	      return bind.apply(console[methodName], args);
	    }
	    function FiberRootNode(
	      containerInfo,
	      tag,
	      hydrate,
	      identifierPrefix,
	      onUncaughtError,
	      onCaughtError,
	      onRecoverableError,
	      formState
	    ) {
	      this.tag = 1;
	      this.containerInfo = containerInfo;
	      this.finishedWork =
	        this.pingCache =
	        this.current =
	        this.pendingChildren =
	          null;
	      this.timeoutHandle = noTimeout;
	      this.callbackNode =
	        this.next =
	        this.pendingContext =
	        this.context =
	        this.cancelPendingCommit =
	          null;
	      this.callbackPriority = 0;
	      this.expirationTimes = createLaneMap(-1);
	      this.entangledLanes =
	        this.shellSuspendCounter =
	        this.errorRecoveryDisabledLanes =
	        this.finishedLanes =
	        this.expiredLanes =
	        this.warmLanes =
	        this.pingedLanes =
	        this.suspendedLanes =
	        this.pendingLanes =
	          0;
	      this.entanglements = createLaneMap(0);
	      this.hiddenUpdates = createLaneMap(null);
	      this.identifierPrefix = identifierPrefix;
	      this.onUncaughtError = onUncaughtError;
	      this.onCaughtError = onCaughtError;
	      this.onRecoverableError = onRecoverableError;
	      this.pooledCache = null;
	      this.pooledCacheLanes = 0;
	      this.formState = formState;
	      this.incompleteTransitions = new Map();
	      this.passiveEffectDuration = this.effectDuration = -0;
	      this.memoizedUpdaters = new Set();
	      containerInfo = this.pendingUpdatersLaneMap = [];
	      for (tag = 0; 31 > tag; tag++) containerInfo.push(new Set());
	      this._debugRootType = hydrate ? "hydrateRoot()" : "createRoot()";
	    }
	    function createFiberRoot(
	      containerInfo,
	      tag,
	      hydrate,
	      initialChildren,
	      hydrationCallbacks,
	      isStrictMode,
	      identifierPrefix,
	      onUncaughtError,
	      onCaughtError,
	      onRecoverableError,
	      transitionCallbacks,
	      formState
	    ) {
	      containerInfo = new FiberRootNode(
	        containerInfo,
	        tag,
	        hydrate,
	        identifierPrefix,
	        onUncaughtError,
	        onCaughtError,
	        onRecoverableError,
	        formState
	      );
	      tag = ConcurrentMode;
	      true === isStrictMode && (tag |= StrictLegacyMode | StrictEffectsMode);
	      isDevToolsPresent && (tag |= ProfileMode);
	      isStrictMode = createFiber(3, null, null, tag);
	      containerInfo.current = isStrictMode;
	      isStrictMode.stateNode = containerInfo;
	      tag = createCache();
	      retainCache(tag);
	      containerInfo.pooledCache = tag;
	      retainCache(tag);
	      isStrictMode.memoizedState = {
	        element: initialChildren,
	        isDehydrated: hydrate,
	        cache: tag
	      };
	      initializeUpdateQueue(isStrictMode);
	      return containerInfo;
	    }
	    function getContextForSubtree(parentComponent) {
	      if (!parentComponent) return emptyContextObject;
	      parentComponent = emptyContextObject;
	      return parentComponent;
	    }
	    function updateContainerSync(
	      element,
	      container,
	      parentComponent,
	      callback
	    ) {
	      0 === container.tag && flushPassiveEffects();
	      updateContainerImpl(
	        container.current,
	        2,
	        element,
	        container,
	        parentComponent,
	        callback
	      );
	      return 2;
	    }
	    function updateContainerImpl(
	      rootFiber,
	      lane,
	      element,
	      container,
	      parentComponent,
	      callback
	    ) {
	      if (
	        injectedHook &&
	        "function" === typeof injectedHook.onScheduleFiberRoot
	      )
	        try {
	          injectedHook.onScheduleFiberRoot(rendererID, container, element);
	        } catch (err) {
	          hasLoggedError ||
	            ((hasLoggedError = true),
	            console.error(
	              "React instrumentation encountered an error: %s",
	              err
	            ));
	        }
	      null !== injectedProfilingHooks &&
	        "function" === typeof injectedProfilingHooks.markRenderScheduled &&
	        injectedProfilingHooks.markRenderScheduled(lane);
	      parentComponent = getContextForSubtree(parentComponent);
	      null === container.context
	        ? (container.context = parentComponent)
	        : (container.pendingContext = parentComponent);
	      isRendering &&
	        null !== current &&
	        !didWarnAboutNestedUpdates &&
	        ((didWarnAboutNestedUpdates = true),
	        console.error(
	          "Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.",
	          getComponentNameFromFiber(current) || "Unknown"
	        ));
	      container = createUpdate(lane);
	      container.payload = { element: element };
	      callback = undefined === callback ? null : callback;
	      null !== callback &&
	        ("function" !== typeof callback &&
	          console.error(
	            "Expected the last optional `callback` argument to be a function. Instead received: %s.",
	            callback
	          ),
	        (container.callback = callback));
	      element = enqueueUpdate(rootFiber, container, lane);
	      null !== element &&
	        (scheduleUpdateOnFiber(element, rootFiber, lane),
	        entangleTransitions(element, rootFiber, lane));
	    }
	    function markRetryLaneImpl(fiber, retryLane) {
	      fiber = fiber.memoizedState;
	      if (null !== fiber && null !== fiber.dehydrated) {
	        var a = fiber.retryLane;
	        fiber.retryLane = 0 !== a && a < retryLane ? a : retryLane;
	      }
	    }
	    function markRetryLaneIfNotHydrated(fiber, retryLane) {
	      markRetryLaneImpl(fiber, retryLane);
	      (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
	    }
	    function attemptContinuousHydration(fiber) {
	      if (13 === fiber.tag) {
	        var root = enqueueConcurrentRenderForLane(fiber, 67108864);
	        null !== root && scheduleUpdateOnFiber(root, fiber, 67108864);
	        markRetryLaneIfNotHydrated(fiber, 67108864);
	      }
	    }
	    function getCurrentFiberForDevTools() {
	      return current;
	    }
	    function getLaneLabelMap() {
	      for (var map = new Map(), lane = 1, index = 0; 31 > index; index++) {
	        var label = getLabelForLane(lane);
	        map.set(lane, label);
	        lane *= 2;
	      }
	      return map;
	    }
	    function dispatchDiscreteEvent(
	      domEventName,
	      eventSystemFlags,
	      container,
	      nativeEvent
	    ) {
	      var prevTransition = ReactSharedInternals.T;
	      ReactSharedInternals.T = null;
	      var previousPriority = ReactDOMSharedInternals.p;
	      try {
	        (ReactDOMSharedInternals.p = DiscreteEventPriority),
	          dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
	      } finally {
	        (ReactDOMSharedInternals.p = previousPriority),
	          (ReactSharedInternals.T = prevTransition);
	      }
	    }
	    function dispatchContinuousEvent(
	      domEventName,
	      eventSystemFlags,
	      container,
	      nativeEvent
	    ) {
	      var prevTransition = ReactSharedInternals.T;
	      ReactSharedInternals.T = null;
	      var previousPriority = ReactDOMSharedInternals.p;
	      try {
	        (ReactDOMSharedInternals.p = ContinuousEventPriority),
	          dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
	      } finally {
	        (ReactDOMSharedInternals.p = previousPriority),
	          (ReactSharedInternals.T = prevTransition);
	      }
	    }
	    function dispatchEvent(
	      domEventName,
	      eventSystemFlags,
	      targetContainer,
	      nativeEvent
	    ) {
	      if (_enabled) {
	        var blockedOn = findInstanceBlockingEvent(nativeEvent);
	        if (null === blockedOn)
	          dispatchEventForPluginEventSystem(
	            domEventName,
	            eventSystemFlags,
	            nativeEvent,
	            return_targetInst,
	            targetContainer
	          ),
	            clearIfContinuousEvent(domEventName, nativeEvent);
	        else if (
	          queueIfContinuousEvent(
	            blockedOn,
	            domEventName,
	            eventSystemFlags,
	            targetContainer,
	            nativeEvent
	          )
	        )
	          nativeEvent.stopPropagation();
	        else if (
	          (clearIfContinuousEvent(domEventName, nativeEvent),
	          eventSystemFlags & 4 &&
	            -1 < discreteReplayableEvents.indexOf(domEventName))
	        ) {
	          for (; null !== blockedOn; ) {
	            var fiber = getInstanceFromNode(blockedOn);
	            if (null !== fiber)
	              switch (fiber.tag) {
	                case 3:
	                  fiber = fiber.stateNode;
	                  if (fiber.current.memoizedState.isDehydrated) {
	                    var lanes = getHighestPriorityLanes(fiber.pendingLanes);
	                    if (0 !== lanes) {
	                      var root = fiber;
	                      root.pendingLanes |= 2;
	                      for (root.entangledLanes |= 2; lanes; ) {
	                        var lane = 1 << (31 - clz32(lanes));
	                        root.entanglements[1] |= lane;
	                        lanes &= ~lane;
	                      }
	                      ensureRootIsScheduled(fiber);
	                      (executionContext & (RenderContext | CommitContext)) ===
	                        NoContext &&
	                        ((workInProgressRootRenderTargetTime =
	                          now$1() + RENDER_TIMEOUT_MS),
	                        flushSyncWorkAcrossRoots_impl(0));
	                    }
	                  }
	                  break;
	                case 13:
	                  (root = enqueueConcurrentRenderForLane(fiber, 2)),
	                    null !== root && scheduleUpdateOnFiber(root, fiber, 2),
	                    flushSyncWork$1(),
	                    markRetryLaneIfNotHydrated(fiber, 2);
	              }
	            fiber = findInstanceBlockingEvent(nativeEvent);
	            null === fiber &&
	              dispatchEventForPluginEventSystem(
	                domEventName,
	                eventSystemFlags,
	                nativeEvent,
	                return_targetInst,
	                targetContainer
	              );
	            if (fiber === blockedOn) break;
	            blockedOn = fiber;
	          }
	          null !== blockedOn && nativeEvent.stopPropagation();
	        } else
	          dispatchEventForPluginEventSystem(
	            domEventName,
	            eventSystemFlags,
	            nativeEvent,
	            null,
	            targetContainer
	          );
	      }
	    }
	    function findInstanceBlockingEvent(nativeEvent) {
	      nativeEvent = getEventTarget(nativeEvent);
	      return findInstanceBlockingTarget(nativeEvent);
	    }
	    function findInstanceBlockingTarget(targetNode) {
	      return_targetInst = null;
	      targetNode = getClosestInstanceFromNode(targetNode);
	      if (null !== targetNode) {
	        var nearestMounted = getNearestMountedFiber(targetNode);
	        if (null === nearestMounted) targetNode = null;
	        else {
	          var tag = nearestMounted.tag;
	          if (13 === tag) {
	            targetNode = getSuspenseInstanceFromFiber(nearestMounted);
	            if (null !== targetNode) return targetNode;
	            targetNode = null;
	          } else if (3 === tag) {
	            if (nearestMounted.stateNode.current.memoizedState.isDehydrated)
	              return 3 === nearestMounted.tag
	                ? nearestMounted.stateNode.containerInfo
	                : null;
	            targetNode = null;
	          } else nearestMounted !== targetNode && (targetNode = null);
	        }
	      }
	      return_targetInst = targetNode;
	      return null;
	    }
	    function getEventPriority(domEventName) {
	      switch (domEventName) {
	        case "beforetoggle":
	        case "cancel":
	        case "click":
	        case "close":
	        case "contextmenu":
	        case "copy":
	        case "cut":
	        case "auxclick":
	        case "dblclick":
	        case "dragend":
	        case "dragstart":
	        case "drop":
	        case "focusin":
	        case "focusout":
	        case "input":
	        case "invalid":
	        case "keydown":
	        case "keypress":
	        case "keyup":
	        case "mousedown":
	        case "mouseup":
	        case "paste":
	        case "pause":
	        case "play":
	        case "pointercancel":
	        case "pointerdown":
	        case "pointerup":
	        case "ratechange":
	        case "reset":
	        case "resize":
	        case "seeked":
	        case "submit":
	        case "toggle":
	        case "touchcancel":
	        case "touchend":
	        case "touchstart":
	        case "volumechange":
	        case "change":
	        case "selectionchange":
	        case "textInput":
	        case "compositionstart":
	        case "compositionend":
	        case "compositionupdate":
	        case "beforeblur":
	        case "afterblur":
	        case "beforeinput":
	        case "blur":
	        case "fullscreenchange":
	        case "focus":
	        case "hashchange":
	        case "popstate":
	        case "select":
	        case "selectstart":
	          return DiscreteEventPriority;
	        case "drag":
	        case "dragenter":
	        case "dragexit":
	        case "dragleave":
	        case "dragover":
	        case "mousemove":
	        case "mouseout":
	        case "mouseover":
	        case "pointermove":
	        case "pointerout":
	        case "pointerover":
	        case "scroll":
	        case "touchmove":
	        case "wheel":
	        case "mouseenter":
	        case "mouseleave":
	        case "pointerenter":
	        case "pointerleave":
	          return ContinuousEventPriority;
	        case "message":
	          switch (getCurrentPriorityLevel()) {
	            case ImmediatePriority:
	              return DiscreteEventPriority;
	            case UserBlockingPriority:
	              return ContinuousEventPriority;
	            case NormalPriority$1:
	            case LowPriority:
	              return DefaultEventPriority;
	            case IdlePriority:
	              return IdleEventPriority;
	            default:
	              return DefaultEventPriority;
	          }
	        default:
	          return DefaultEventPriority;
	      }
	    }
	    function clearIfContinuousEvent(domEventName, nativeEvent) {
	      switch (domEventName) {
	        case "focusin":
	        case "focusout":
	          queuedFocus = null;
	          break;
	        case "dragenter":
	        case "dragleave":
	          queuedDrag = null;
	          break;
	        case "mouseover":
	        case "mouseout":
	          queuedMouse = null;
	          break;
	        case "pointerover":
	        case "pointerout":
	          queuedPointers.delete(nativeEvent.pointerId);
	          break;
	        case "gotpointercapture":
	        case "lostpointercapture":
	          queuedPointerCaptures.delete(nativeEvent.pointerId);
	      }
	    }
	    function accumulateOrCreateContinuousQueuedReplayableEvent(
	      existingQueuedEvent,
	      blockedOn,
	      domEventName,
	      eventSystemFlags,
	      targetContainer,
	      nativeEvent
	    ) {
	      if (
	        null === existingQueuedEvent ||
	        existingQueuedEvent.nativeEvent !== nativeEvent
	      )
	        return (
	          (existingQueuedEvent = {
	            blockedOn: blockedOn,
	            domEventName: domEventName,
	            eventSystemFlags: eventSystemFlags,
	            nativeEvent: nativeEvent,
	            targetContainers: [targetContainer]
	          }),
	          null !== blockedOn &&
	            ((blockedOn = getInstanceFromNode(blockedOn)),
	            null !== blockedOn && attemptContinuousHydration(blockedOn)),
	          existingQueuedEvent
	        );
	      existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
	      blockedOn = existingQueuedEvent.targetContainers;
	      null !== targetContainer &&
	        -1 === blockedOn.indexOf(targetContainer) &&
	        blockedOn.push(targetContainer);
	      return existingQueuedEvent;
	    }
	    function queueIfContinuousEvent(
	      blockedOn,
	      domEventName,
	      eventSystemFlags,
	      targetContainer,
	      nativeEvent
	    ) {
	      switch (domEventName) {
	        case "focusin":
	          return (
	            (queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
	              queuedFocus,
	              blockedOn,
	              domEventName,
	              eventSystemFlags,
	              targetContainer,
	              nativeEvent
	            )),
	            true
	          );
	        case "dragenter":
	          return (
	            (queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
	              queuedDrag,
	              blockedOn,
	              domEventName,
	              eventSystemFlags,
	              targetContainer,
	              nativeEvent
	            )),
	            true
	          );
	        case "mouseover":
	          return (
	            (queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
	              queuedMouse,
	              blockedOn,
	              domEventName,
	              eventSystemFlags,
	              targetContainer,
	              nativeEvent
	            )),
	            true
	          );
	        case "pointerover":
	          var pointerId = nativeEvent.pointerId;
	          queuedPointers.set(
	            pointerId,
	            accumulateOrCreateContinuousQueuedReplayableEvent(
	              queuedPointers.get(pointerId) || null,
	              blockedOn,
	              domEventName,
	              eventSystemFlags,
	              targetContainer,
	              nativeEvent
	            )
	          );
	          return true;
	        case "gotpointercapture":
	          return (
	            (pointerId = nativeEvent.pointerId),
	            queuedPointerCaptures.set(
	              pointerId,
	              accumulateOrCreateContinuousQueuedReplayableEvent(
	                queuedPointerCaptures.get(pointerId) || null,
	                blockedOn,
	                domEventName,
	                eventSystemFlags,
	                targetContainer,
	                nativeEvent
	              )
	            ),
	            true
	          );
	      }
	      return false;
	    }
	    function attemptExplicitHydrationTarget(queuedTarget) {
	      var targetInst = getClosestInstanceFromNode(queuedTarget.target);
	      if (null !== targetInst) {
	        var nearestMounted = getNearestMountedFiber(targetInst);
	        if (null !== nearestMounted)
	          if (((targetInst = nearestMounted.tag), 13 === targetInst)) {
	            if (
	              ((targetInst = getSuspenseInstanceFromFiber(nearestMounted)),
	              null !== targetInst)
	            ) {
	              queuedTarget.blockedOn = targetInst;
	              runWithPriority(queuedTarget.priority, function () {
	                if (13 === nearestMounted.tag) {
	                  var lane = requestUpdateLane(nearestMounted),
	                    root = enqueueConcurrentRenderForLane(nearestMounted, lane);
	                  null !== root &&
	                    scheduleUpdateOnFiber(root, nearestMounted, lane);
	                  markRetryLaneIfNotHydrated(nearestMounted, lane);
	                }
	              });
	              return;
	            }
	          } else if (
	            3 === targetInst &&
	            nearestMounted.stateNode.current.memoizedState.isDehydrated
	          ) {
	            queuedTarget.blockedOn =
	              3 === nearestMounted.tag
	                ? nearestMounted.stateNode.containerInfo
	                : null;
	            return;
	          }
	      }
	      queuedTarget.blockedOn = null;
	    }
	    function attemptReplayContinuousQueuedEvent(queuedEvent) {
	      if (null !== queuedEvent.blockedOn) return false;
	      for (
	        var targetContainers = queuedEvent.targetContainers;
	        0 < targetContainers.length;

	      ) {
	        var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);
	        if (null === nextBlockedOn) {
	          nextBlockedOn = queuedEvent.nativeEvent;
	          var nativeEventClone = new nextBlockedOn.constructor(
	              nextBlockedOn.type,
	              nextBlockedOn
	            ),
	            event = nativeEventClone;
	          null !== currentReplayingEvent &&
	            console.error(
	              "Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue."
	            );
	          currentReplayingEvent = event;
	          nextBlockedOn.target.dispatchEvent(nativeEventClone);
	          null === currentReplayingEvent &&
	            console.error(
	              "Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue."
	            );
	          currentReplayingEvent = null;
	        } else
	          return (
	            (targetContainers = getInstanceFromNode(nextBlockedOn)),
	            null !== targetContainers &&
	              attemptContinuousHydration(targetContainers),
	            (queuedEvent.blockedOn = nextBlockedOn),
	            false
	          );
	        targetContainers.shift();
	      }
	      return true;
	    }
	    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
	      attemptReplayContinuousQueuedEvent(queuedEvent) && map.delete(key);
	    }
	    function replayUnblockedEvents() {
	      hasScheduledReplayAttempt = false;
	      null !== queuedFocus &&
	        attemptReplayContinuousQueuedEvent(queuedFocus) &&
	        (queuedFocus = null);
	      null !== queuedDrag &&
	        attemptReplayContinuousQueuedEvent(queuedDrag) &&
	        (queuedDrag = null);
	      null !== queuedMouse &&
	        attemptReplayContinuousQueuedEvent(queuedMouse) &&
	        (queuedMouse = null);
	      queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
	      queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
	    }
	    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
	      queuedEvent.blockedOn === unblocked &&
	        ((queuedEvent.blockedOn = null),
	        hasScheduledReplayAttempt ||
	          ((hasScheduledReplayAttempt = true),
	          Scheduler.unstable_scheduleCallback(
	            Scheduler.unstable_NormalPriority,
	            replayUnblockedEvents
	          )));
	    }
	    function scheduleReplayQueueIfNeeded(formReplayingQueue) {
	      lastScheduledReplayQueue !== formReplayingQueue &&
	        ((lastScheduledReplayQueue = formReplayingQueue),
	        Scheduler.unstable_scheduleCallback(
	          Scheduler.unstable_NormalPriority,
	          function () {
	            lastScheduledReplayQueue === formReplayingQueue &&
	              (lastScheduledReplayQueue = null);
	            for (var i = 0; i < formReplayingQueue.length; i += 3) {
	              var form = formReplayingQueue[i],
	                submitterOrAction = formReplayingQueue[i + 1],
	                formData = formReplayingQueue[i + 2];
	              if ("function" !== typeof submitterOrAction)
	                if (
	                  null === findInstanceBlockingTarget(submitterOrAction || form)
	                )
	                  continue;
	                else break;
	              var formInst = getInstanceFromNode(form);
	              null !== formInst &&
	                (formReplayingQueue.splice(i, 3),
	                (i -= 3),
	                (form = {
	                  pending: true,
	                  data: formData,
	                  method: form.method,
	                  action: submitterOrAction
	                }),
	                Object.freeze(form),
	                startHostTransition(
	                  formInst,
	                  form,
	                  submitterOrAction,
	                  formData
	                ));
	            }
	          }
	        ));
	    }
	    function retryIfBlockedOn(unblocked) {
	      function unblock(queuedEvent) {
	        return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
	      }
	      null !== queuedFocus &&
	        scheduleCallbackIfUnblocked(queuedFocus, unblocked);
	      null !== queuedDrag && scheduleCallbackIfUnblocked(queuedDrag, unblocked);
	      null !== queuedMouse &&
	        scheduleCallbackIfUnblocked(queuedMouse, unblocked);
	      queuedPointers.forEach(unblock);
	      queuedPointerCaptures.forEach(unblock);
	      for (var i = 0; i < queuedExplicitHydrationTargets.length; i++) {
	        var queuedTarget = queuedExplicitHydrationTargets[i];
	        queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
	      }
	      for (
	        ;
	        0 < queuedExplicitHydrationTargets.length &&
	        ((i = queuedExplicitHydrationTargets[0]), null === i.blockedOn);

	      )
	        attemptExplicitHydrationTarget(i),
	          null === i.blockedOn && queuedExplicitHydrationTargets.shift();
	      i = (unblocked.ownerDocument || unblocked).$$reactFormReplay;
	      if (null != i)
	        for (queuedTarget = 0; queuedTarget < i.length; queuedTarget += 3) {
	          var form = i[queuedTarget],
	            submitterOrAction = i[queuedTarget + 1],
	            formProps = form[internalPropsKey] || null;
	          if ("function" === typeof submitterOrAction)
	            formProps || scheduleReplayQueueIfNeeded(i);
	          else if (formProps) {
	            var action = null;
	            if (
	              submitterOrAction &&
	              submitterOrAction.hasAttribute("formAction")
	            )
	              if (
	                ((form = submitterOrAction),
	                (formProps = submitterOrAction[internalPropsKey] || null))
	              )
	                action = formProps.formAction;
	              else {
	                if (null !== findInstanceBlockingTarget(form)) continue;
	              }
	            else action = formProps.action;
	            "function" === typeof action
	              ? (i[queuedTarget + 1] = action)
	              : (i.splice(queuedTarget, 3), (queuedTarget -= 3));
	            scheduleReplayQueueIfNeeded(i);
	          }
	        }
	    }
	    function ReactDOMRoot(internalRoot) {
	      this._internalRoot = internalRoot;
	    }
	    function ReactDOMHydrationRoot(internalRoot) {
	      this._internalRoot = internalRoot;
	    }
	    function warnIfReactDOMContainerInDEV(container) {
	      container[internalContainerInstanceKey] &&
	        (container._reactRootContainer
	          ? console.error(
	              "You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported."
	            )
	          : console.error(
	              "You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."
	            ));
	    }
	    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
	      "function" ===
	        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
	      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
	    var Scheduler = requireScheduler(),
	      React = requireReact(),
	      ReactDOM = requireReactDom(),
	      REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"),
	      REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
	      REACT_PORTAL_TYPE = Symbol.for("react.portal"),
	      REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
	      REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
	      REACT_PROFILER_TYPE = Symbol.for("react.profiler"),
	      REACT_PROVIDER_TYPE = Symbol.for("react.provider"),
	      REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
	      REACT_CONTEXT_TYPE = Symbol.for("react.context"),
	      REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
	      REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
	      REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
	      REACT_MEMO_TYPE = Symbol.for("react.memo"),
	      REACT_LAZY_TYPE = Symbol.for("react.lazy");
	    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
	    var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel"),
	      MAYBE_ITERATOR_SYMBOL = Symbol.iterator,
	      REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"),
	      ReactSharedInternals =
	        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
	      assign = Object.assign,
	      disabledDepth = 0,
	      prevLog,
	      prevInfo,
	      prevWarn,
	      prevError,
	      prevGroup,
	      prevGroupCollapsed,
	      prevGroupEnd;
	    disabledLog.__reactDisabledLog = true;
	    var prefix,
	      suffix,
	      reentry = false;
	    var componentFrameCache = new (
	      "function" === typeof WeakMap ? WeakMap : Map
	    )();
	    var current = null,
	      isRendering = false,
	      isArrayImpl = Array.isArray,
	      ReactDOMSharedInternals =
	        ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
	      NotPending = Object.freeze({
	        pending: false,
	        data: null,
	        method: null,
	        action: null
	      }),
	      valueStack = [];
	    var fiberStack = [];
	    var index$jscomp$0 = -1,
	      contextStackCursor = createCursor(null),
	      contextFiberStackCursor = createCursor(null),
	      rootInstanceStackCursor = createCursor(null),
	      hostTransitionProviderCursor = createCursor(null),
	      hasOwnProperty = Object.prototype.hasOwnProperty,
	      scheduleCallback$3 = Scheduler.unstable_scheduleCallback,
	      cancelCallback$1 = Scheduler.unstable_cancelCallback,
	      shouldYield = Scheduler.unstable_shouldYield,
	      requestPaint = Scheduler.unstable_requestPaint,
	      now$1 = Scheduler.unstable_now,
	      getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
	      ImmediatePriority = Scheduler.unstable_ImmediatePriority,
	      UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
	      NormalPriority$1 = Scheduler.unstable_NormalPriority,
	      LowPriority = Scheduler.unstable_LowPriority,
	      IdlePriority = Scheduler.unstable_IdlePriority,
	      log$1 = Scheduler.log,
	      unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue,
	      rendererID = null,
	      injectedHook = null,
	      injectedProfilingHooks = null,
	      hasLoggedError = false,
	      isDevToolsPresent = "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__,
	      clz32 = Math.clz32 ? Math.clz32 : clz32Fallback,
	      log = Math.log,
	      LN2 = Math.LN2,
	      nextTransitionLane = 128,
	      nextRetryLane = 4194304,
	      DiscreteEventPriority = 2,
	      ContinuousEventPriority = 8,
	      DefaultEventPriority = 32,
	      IdleEventPriority = 268435456,
	      randomKey = Math.random().toString(36).slice(2),
	      internalInstanceKey = "__reactFiber$" + randomKey,
	      internalPropsKey = "__reactProps$" + randomKey,
	      internalContainerInstanceKey = "__reactContainer$" + randomKey,
	      internalEventHandlersKey = "__reactEvents$" + randomKey,
	      internalEventHandlerListenersKey = "__reactListeners$" + randomKey,
	      internalEventHandlesSetKey = "__reactHandles$" + randomKey,
	      internalRootNodeResourcesKey = "__reactResources$" + randomKey,
	      internalHoistableMarker = "__reactMarker$" + randomKey,
	      allNativeEvents = new Set(),
	      registrationNameDependencies = {},
	      possibleRegistrationNames = {},
	      canUseDOM = !(
	        "undefined" === typeof window ||
	        "undefined" === typeof window.document ||
	        "undefined" === typeof window.document.createElement
	      ),
	      hasReadOnlyValue = {
	        button: true,
	        checkbox: true,
	        image: true,
	        hidden: true,
	        radio: true,
	        reset: true,
	        submit: true
	      },
	      VALID_ATTRIBUTE_NAME_REGEX = RegExp(
	        "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
	      ),
	      illegalAttributeNameCache = {},
	      validatedAttributeNameCache = {},
	      escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n"\\]/g,
	      didWarnValueDefaultValue$1 = false,
	      didWarnCheckedDefaultChecked = false,
	      didWarnSelectedSetOnOption = false,
	      didWarnInvalidChild = false,
	      didWarnInvalidInnerHTML = false;
	    var didWarnValueDefaultValue = false;
	    var valuePropNames = ["value", "defaultValue"],
	      didWarnValDefaultVal = false,
	      needsEscaping = /["'&<>\n\t]|^\s|\s$/,
	      specialTags =
	        "address applet area article aside base basefont bgsound blockquote body br button caption center col colgroup dd details dir div dl dt embed fieldset figcaption figure footer form frame frameset h1 h2 h3 h4 h5 h6 head header hgroup hr html iframe img input isindex li link listing main marquee menu menuitem meta nav noembed noframes noscript object ol p param plaintext pre script section select source style summary table tbody td template textarea tfoot th thead title tr track ul wbr xmp".split(
	          " "
	        ),
	      inScopeTags =
	        "applet caption html table td th marquee object template foreignObject desc title".split(
	          " "
	        ),
	      buttonScopeTags = inScopeTags.concat(["button"]),
	      impliedEndTags = "dd dt li option optgroup p rp rt".split(" "),
	      emptyAncestorInfoDev = {
	        current: null,
	        formTag: null,
	        aTagInScope: null,
	        buttonTagInScope: null,
	        nobrTagInScope: null,
	        pTagInButtonScope: null,
	        listItemTagAutoclosing: null,
	        dlItemTagAutoclosing: null,
	        containerTagInScope: null
	      },
	      didWarn = {},
	      MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML",
	      SVG_NAMESPACE = "http://www.w3.org/2000/svg",
	      shorthandToLonghand = {
	        animation:
	          "animationDelay animationDirection animationDuration animationFillMode animationIterationCount animationName animationPlayState animationTimingFunction".split(
	            " "
	          ),
	        background:
	          "backgroundAttachment backgroundClip backgroundColor backgroundImage backgroundOrigin backgroundPositionX backgroundPositionY backgroundRepeat backgroundSize".split(
	            " "
	          ),
	        backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
	        border:
	          "borderBottomColor borderBottomStyle borderBottomWidth borderImageOutset borderImageRepeat borderImageSlice borderImageSource borderImageWidth borderLeftColor borderLeftStyle borderLeftWidth borderRightColor borderRightStyle borderRightWidth borderTopColor borderTopStyle borderTopWidth".split(
	            " "
	          ),
	        borderBlockEnd: [
	          "borderBlockEndColor",
	          "borderBlockEndStyle",
	          "borderBlockEndWidth"
	        ],
	        borderBlockStart: [
	          "borderBlockStartColor",
	          "borderBlockStartStyle",
	          "borderBlockStartWidth"
	        ],
	        borderBottom: [
	          "borderBottomColor",
	          "borderBottomStyle",
	          "borderBottomWidth"
	        ],
	        borderColor: [
	          "borderBottomColor",
	          "borderLeftColor",
	          "borderRightColor",
	          "borderTopColor"
	        ],
	        borderImage: [
	          "borderImageOutset",
	          "borderImageRepeat",
	          "borderImageSlice",
	          "borderImageSource",
	          "borderImageWidth"
	        ],
	        borderInlineEnd: [
	          "borderInlineEndColor",
	          "borderInlineEndStyle",
	          "borderInlineEndWidth"
	        ],
	        borderInlineStart: [
	          "borderInlineStartColor",
	          "borderInlineStartStyle",
	          "borderInlineStartWidth"
	        ],
	        borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
	        borderRadius: [
	          "borderBottomLeftRadius",
	          "borderBottomRightRadius",
	          "borderTopLeftRadius",
	          "borderTopRightRadius"
	        ],
	        borderRight: [
	          "borderRightColor",
	          "borderRightStyle",
	          "borderRightWidth"
	        ],
	        borderStyle: [
	          "borderBottomStyle",
	          "borderLeftStyle",
	          "borderRightStyle",
	          "borderTopStyle"
	        ],
	        borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
	        borderWidth: [
	          "borderBottomWidth",
	          "borderLeftWidth",
	          "borderRightWidth",
	          "borderTopWidth"
	        ],
	        columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
	        columns: ["columnCount", "columnWidth"],
	        flex: ["flexBasis", "flexGrow", "flexShrink"],
	        flexFlow: ["flexDirection", "flexWrap"],
	        font: "fontFamily fontFeatureSettings fontKerning fontLanguageOverride fontSize fontSizeAdjust fontStretch fontStyle fontVariant fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition fontWeight lineHeight".split(
	          " "
	        ),
	        fontVariant:
	          "fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition".split(
	            " "
	          ),
	        gap: ["columnGap", "rowGap"],
	        grid: "gridAutoColumns gridAutoFlow gridAutoRows gridTemplateAreas gridTemplateColumns gridTemplateRows".split(
	          " "
	        ),
	        gridArea: [
	          "gridColumnEnd",
	          "gridColumnStart",
	          "gridRowEnd",
	          "gridRowStart"
	        ],
	        gridColumn: ["gridColumnEnd", "gridColumnStart"],
	        gridColumnGap: ["columnGap"],
	        gridGap: ["columnGap", "rowGap"],
	        gridRow: ["gridRowEnd", "gridRowStart"],
	        gridRowGap: ["rowGap"],
	        gridTemplate: [
	          "gridTemplateAreas",
	          "gridTemplateColumns",
	          "gridTemplateRows"
	        ],
	        listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
	        margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
	        marker: ["markerEnd", "markerMid", "markerStart"],
	        mask: "maskClip maskComposite maskImage maskMode maskOrigin maskPositionX maskPositionY maskRepeat maskSize".split(
	          " "
	        ),
	        maskPosition: ["maskPositionX", "maskPositionY"],
	        outline: ["outlineColor", "outlineStyle", "outlineWidth"],
	        overflow: ["overflowX", "overflowY"],
	        padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
	        placeContent: ["alignContent", "justifyContent"],
	        placeItems: ["alignItems", "justifyItems"],
	        placeSelf: ["alignSelf", "justifySelf"],
	        textDecoration: [
	          "textDecorationColor",
	          "textDecorationLine",
	          "textDecorationStyle"
	        ],
	        textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
	        transition: [
	          "transitionDelay",
	          "transitionDuration",
	          "transitionProperty",
	          "transitionTimingFunction"
	        ],
	        wordWrap: ["overflowWrap"]
	      },
	      uppercasePattern = /([A-Z])/g,
	      msPattern$1 = /^ms-/,
	      badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/,
	      msPattern = /^-ms-/,
	      hyphenPattern = /-(.)/g,
	      badStyleValueWithSemicolonPattern = /;\s*$/,
	      warnedStyleNames = {},
	      warnedStyleValues = {},
	      warnedForNaNValue = false,
	      warnedForInfinityValue = false,
	      unitlessNumbers = new Set(
	        "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
	          " "
	        )
	      ),
	      aliases = new Map([
	        ["acceptCharset", "accept-charset"],
	        ["htmlFor", "for"],
	        ["httpEquiv", "http-equiv"],
	        ["crossOrigin", "crossorigin"],
	        ["accentHeight", "accent-height"],
	        ["alignmentBaseline", "alignment-baseline"],
	        ["arabicForm", "arabic-form"],
	        ["baselineShift", "baseline-shift"],
	        ["capHeight", "cap-height"],
	        ["clipPath", "clip-path"],
	        ["clipRule", "clip-rule"],
	        ["colorInterpolation", "color-interpolation"],
	        ["colorInterpolationFilters", "color-interpolation-filters"],
	        ["colorProfile", "color-profile"],
	        ["colorRendering", "color-rendering"],
	        ["dominantBaseline", "dominant-baseline"],
	        ["enableBackground", "enable-background"],
	        ["fillOpacity", "fill-opacity"],
	        ["fillRule", "fill-rule"],
	        ["floodColor", "flood-color"],
	        ["floodOpacity", "flood-opacity"],
	        ["fontFamily", "font-family"],
	        ["fontSize", "font-size"],
	        ["fontSizeAdjust", "font-size-adjust"],
	        ["fontStretch", "font-stretch"],
	        ["fontStyle", "font-style"],
	        ["fontVariant", "font-variant"],
	        ["fontWeight", "font-weight"],
	        ["glyphName", "glyph-name"],
	        ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
	        ["glyphOrientationVertical", "glyph-orientation-vertical"],
	        ["horizAdvX", "horiz-adv-x"],
	        ["horizOriginX", "horiz-origin-x"],
	        ["imageRendering", "image-rendering"],
	        ["letterSpacing", "letter-spacing"],
	        ["lightingColor", "lighting-color"],
	        ["markerEnd", "marker-end"],
	        ["markerMid", "marker-mid"],
	        ["markerStart", "marker-start"],
	        ["overlinePosition", "overline-position"],
	        ["overlineThickness", "overline-thickness"],
	        ["paintOrder", "paint-order"],
	        ["panose-1", "panose-1"],
	        ["pointerEvents", "pointer-events"],
	        ["renderingIntent", "rendering-intent"],
	        ["shapeRendering", "shape-rendering"],
	        ["stopColor", "stop-color"],
	        ["stopOpacity", "stop-opacity"],
	        ["strikethroughPosition", "strikethrough-position"],
	        ["strikethroughThickness", "strikethrough-thickness"],
	        ["strokeDasharray", "stroke-dasharray"],
	        ["strokeDashoffset", "stroke-dashoffset"],
	        ["strokeLinecap", "stroke-linecap"],
	        ["strokeLinejoin", "stroke-linejoin"],
	        ["strokeMiterlimit", "stroke-miterlimit"],
	        ["strokeOpacity", "stroke-opacity"],
	        ["strokeWidth", "stroke-width"],
	        ["textAnchor", "text-anchor"],
	        ["textDecoration", "text-decoration"],
	        ["textRendering", "text-rendering"],
	        ["transformOrigin", "transform-origin"],
	        ["underlinePosition", "underline-position"],
	        ["underlineThickness", "underline-thickness"],
	        ["unicodeBidi", "unicode-bidi"],
	        ["unicodeRange", "unicode-range"],
	        ["unitsPerEm", "units-per-em"],
	        ["vAlphabetic", "v-alphabetic"],
	        ["vHanging", "v-hanging"],
	        ["vIdeographic", "v-ideographic"],
	        ["vMathematical", "v-mathematical"],
	        ["vectorEffect", "vector-effect"],
	        ["vertAdvY", "vert-adv-y"],
	        ["vertOriginX", "vert-origin-x"],
	        ["vertOriginY", "vert-origin-y"],
	        ["wordSpacing", "word-spacing"],
	        ["writingMode", "writing-mode"],
	        ["xmlnsXlink", "xmlns:xlink"],
	        ["xHeight", "x-height"]
	      ]),
	      possibleStandardNames = {
	        accept: "accept",
	        acceptcharset: "acceptCharset",
	        "accept-charset": "acceptCharset",
	        accesskey: "accessKey",
	        action: "action",
	        allowfullscreen: "allowFullScreen",
	        alt: "alt",
	        as: "as",
	        async: "async",
	        autocapitalize: "autoCapitalize",
	        autocomplete: "autoComplete",
	        autocorrect: "autoCorrect",
	        autofocus: "autoFocus",
	        autoplay: "autoPlay",
	        autosave: "autoSave",
	        capture: "capture",
	        cellpadding: "cellPadding",
	        cellspacing: "cellSpacing",
	        challenge: "challenge",
	        charset: "charSet",
	        checked: "checked",
	        children: "children",
	        cite: "cite",
	        class: "className",
	        classid: "classID",
	        classname: "className",
	        cols: "cols",
	        colspan: "colSpan",
	        content: "content",
	        contenteditable: "contentEditable",
	        contextmenu: "contextMenu",
	        controls: "controls",
	        controlslist: "controlsList",
	        coords: "coords",
	        crossorigin: "crossOrigin",
	        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
	        data: "data",
	        datetime: "dateTime",
	        default: "default",
	        defaultchecked: "defaultChecked",
	        defaultvalue: "defaultValue",
	        defer: "defer",
	        dir: "dir",
	        disabled: "disabled",
	        disablepictureinpicture: "disablePictureInPicture",
	        disableremoteplayback: "disableRemotePlayback",
	        download: "download",
	        draggable: "draggable",
	        enctype: "encType",
	        enterkeyhint: "enterKeyHint",
	        fetchpriority: "fetchPriority",
	        for: "htmlFor",
	        form: "form",
	        formmethod: "formMethod",
	        formaction: "formAction",
	        formenctype: "formEncType",
	        formnovalidate: "formNoValidate",
	        formtarget: "formTarget",
	        frameborder: "frameBorder",
	        headers: "headers",
	        height: "height",
	        hidden: "hidden",
	        high: "high",
	        href: "href",
	        hreflang: "hrefLang",
	        htmlfor: "htmlFor",
	        httpequiv: "httpEquiv",
	        "http-equiv": "httpEquiv",
	        icon: "icon",
	        id: "id",
	        imagesizes: "imageSizes",
	        imagesrcset: "imageSrcSet",
	        inert: "inert",
	        innerhtml: "innerHTML",
	        inputmode: "inputMode",
	        integrity: "integrity",
	        is: "is",
	        itemid: "itemID",
	        itemprop: "itemProp",
	        itemref: "itemRef",
	        itemscope: "itemScope",
	        itemtype: "itemType",
	        keyparams: "keyParams",
	        keytype: "keyType",
	        kind: "kind",
	        label: "label",
	        lang: "lang",
	        list: "list",
	        loop: "loop",
	        low: "low",
	        manifest: "manifest",
	        marginwidth: "marginWidth",
	        marginheight: "marginHeight",
	        max: "max",
	        maxlength: "maxLength",
	        media: "media",
	        mediagroup: "mediaGroup",
	        method: "method",
	        min: "min",
	        minlength: "minLength",
	        multiple: "multiple",
	        muted: "muted",
	        name: "name",
	        nomodule: "noModule",
	        nonce: "nonce",
	        novalidate: "noValidate",
	        open: "open",
	        optimum: "optimum",
	        pattern: "pattern",
	        placeholder: "placeholder",
	        playsinline: "playsInline",
	        poster: "poster",
	        preload: "preload",
	        profile: "profile",
	        radiogroup: "radioGroup",
	        readonly: "readOnly",
	        referrerpolicy: "referrerPolicy",
	        rel: "rel",
	        required: "required",
	        reversed: "reversed",
	        role: "role",
	        rows: "rows",
	        rowspan: "rowSpan",
	        sandbox: "sandbox",
	        scope: "scope",
	        scoped: "scoped",
	        scrolling: "scrolling",
	        seamless: "seamless",
	        selected: "selected",
	        shape: "shape",
	        size: "size",
	        sizes: "sizes",
	        span: "span",
	        spellcheck: "spellCheck",
	        src: "src",
	        srcdoc: "srcDoc",
	        srclang: "srcLang",
	        srcset: "srcSet",
	        start: "start",
	        step: "step",
	        style: "style",
	        summary: "summary",
	        tabindex: "tabIndex",
	        target: "target",
	        title: "title",
	        type: "type",
	        usemap: "useMap",
	        value: "value",
	        width: "width",
	        wmode: "wmode",
	        wrap: "wrap",
	        about: "about",
	        accentheight: "accentHeight",
	        "accent-height": "accentHeight",
	        accumulate: "accumulate",
	        additive: "additive",
	        alignmentbaseline: "alignmentBaseline",
	        "alignment-baseline": "alignmentBaseline",
	        allowreorder: "allowReorder",
	        alphabetic: "alphabetic",
	        amplitude: "amplitude",
	        arabicform: "arabicForm",
	        "arabic-form": "arabicForm",
	        ascent: "ascent",
	        attributename: "attributeName",
	        attributetype: "attributeType",
	        autoreverse: "autoReverse",
	        azimuth: "azimuth",
	        basefrequency: "baseFrequency",
	        baselineshift: "baselineShift",
	        "baseline-shift": "baselineShift",
	        baseprofile: "baseProfile",
	        bbox: "bbox",
	        begin: "begin",
	        bias: "bias",
	        by: "by",
	        calcmode: "calcMode",
	        capheight: "capHeight",
	        "cap-height": "capHeight",
	        clip: "clip",
	        clippath: "clipPath",
	        "clip-path": "clipPath",
	        clippathunits: "clipPathUnits",
	        cliprule: "clipRule",
	        "clip-rule": "clipRule",
	        color: "color",
	        colorinterpolation: "colorInterpolation",
	        "color-interpolation": "colorInterpolation",
	        colorinterpolationfilters: "colorInterpolationFilters",
	        "color-interpolation-filters": "colorInterpolationFilters",
	        colorprofile: "colorProfile",
	        "color-profile": "colorProfile",
	        colorrendering: "colorRendering",
	        "color-rendering": "colorRendering",
	        contentscripttype: "contentScriptType",
	        contentstyletype: "contentStyleType",
	        cursor: "cursor",
	        cx: "cx",
	        cy: "cy",
	        d: "d",
	        datatype: "datatype",
	        decelerate: "decelerate",
	        descent: "descent",
	        diffuseconstant: "diffuseConstant",
	        direction: "direction",
	        display: "display",
	        divisor: "divisor",
	        dominantbaseline: "dominantBaseline",
	        "dominant-baseline": "dominantBaseline",
	        dur: "dur",
	        dx: "dx",
	        dy: "dy",
	        edgemode: "edgeMode",
	        elevation: "elevation",
	        enablebackground: "enableBackground",
	        "enable-background": "enableBackground",
	        end: "end",
	        exponent: "exponent",
	        externalresourcesrequired: "externalResourcesRequired",
	        fill: "fill",
	        fillopacity: "fillOpacity",
	        "fill-opacity": "fillOpacity",
	        fillrule: "fillRule",
	        "fill-rule": "fillRule",
	        filter: "filter",
	        filterres: "filterRes",
	        filterunits: "filterUnits",
	        floodopacity: "floodOpacity",
	        "flood-opacity": "floodOpacity",
	        floodcolor: "floodColor",
	        "flood-color": "floodColor",
	        focusable: "focusable",
	        fontfamily: "fontFamily",
	        "font-family": "fontFamily",
	        fontsize: "fontSize",
	        "font-size": "fontSize",
	        fontsizeadjust: "fontSizeAdjust",
	        "font-size-adjust": "fontSizeAdjust",
	        fontstretch: "fontStretch",
	        "font-stretch": "fontStretch",
	        fontstyle: "fontStyle",
	        "font-style": "fontStyle",
	        fontvariant: "fontVariant",
	        "font-variant": "fontVariant",
	        fontweight: "fontWeight",
	        "font-weight": "fontWeight",
	        format: "format",
	        from: "from",
	        fx: "fx",
	        fy: "fy",
	        g1: "g1",
	        g2: "g2",
	        glyphname: "glyphName",
	        "glyph-name": "glyphName",
	        glyphorientationhorizontal: "glyphOrientationHorizontal",
	        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
	        glyphorientationvertical: "glyphOrientationVertical",
	        "glyph-orientation-vertical": "glyphOrientationVertical",
	        glyphref: "glyphRef",
	        gradienttransform: "gradientTransform",
	        gradientunits: "gradientUnits",
	        hanging: "hanging",
	        horizadvx: "horizAdvX",
	        "horiz-adv-x": "horizAdvX",
	        horizoriginx: "horizOriginX",
	        "horiz-origin-x": "horizOriginX",
	        ideographic: "ideographic",
	        imagerendering: "imageRendering",
	        "image-rendering": "imageRendering",
	        in2: "in2",
	        in: "in",
	        inlist: "inlist",
	        intercept: "intercept",
	        k1: "k1",
	        k2: "k2",
	        k3: "k3",
	        k4: "k4",
	        k: "k",
	        kernelmatrix: "kernelMatrix",
	        kernelunitlength: "kernelUnitLength",
	        kerning: "kerning",
	        keypoints: "keyPoints",
	        keysplines: "keySplines",
	        keytimes: "keyTimes",
	        lengthadjust: "lengthAdjust",
	        letterspacing: "letterSpacing",
	        "letter-spacing": "letterSpacing",
	        lightingcolor: "lightingColor",
	        "lighting-color": "lightingColor",
	        limitingconeangle: "limitingConeAngle",
	        local: "local",
	        markerend: "markerEnd",
	        "marker-end": "markerEnd",
	        markerheight: "markerHeight",
	        markermid: "markerMid",
	        "marker-mid": "markerMid",
	        markerstart: "markerStart",
	        "marker-start": "markerStart",
	        markerunits: "markerUnits",
	        markerwidth: "markerWidth",
	        mask: "mask",
	        maskcontentunits: "maskContentUnits",
	        maskunits: "maskUnits",
	        mathematical: "mathematical",
	        mode: "mode",
	        numoctaves: "numOctaves",
	        offset: "offset",
	        opacity: "opacity",
	        operator: "operator",
	        order: "order",
	        orient: "orient",
	        orientation: "orientation",
	        origin: "origin",
	        overflow: "overflow",
	        overlineposition: "overlinePosition",
	        "overline-position": "overlinePosition",
	        overlinethickness: "overlineThickness",
	        "overline-thickness": "overlineThickness",
	        paintorder: "paintOrder",
	        "paint-order": "paintOrder",
	        panose1: "panose1",
	        "panose-1": "panose1",
	        pathlength: "pathLength",
	        patterncontentunits: "patternContentUnits",
	        patterntransform: "patternTransform",
	        patternunits: "patternUnits",
	        pointerevents: "pointerEvents",
	        "pointer-events": "pointerEvents",
	        points: "points",
	        pointsatx: "pointsAtX",
	        pointsaty: "pointsAtY",
	        pointsatz: "pointsAtZ",
	        popover: "popover",
	        popovertarget: "popoverTarget",
	        popovertargetaction: "popoverTargetAction",
	        prefix: "prefix",
	        preservealpha: "preserveAlpha",
	        preserveaspectratio: "preserveAspectRatio",
	        primitiveunits: "primitiveUnits",
	        property: "property",
	        r: "r",
	        radius: "radius",
	        refx: "refX",
	        refy: "refY",
	        renderingintent: "renderingIntent",
	        "rendering-intent": "renderingIntent",
	        repeatcount: "repeatCount",
	        repeatdur: "repeatDur",
	        requiredextensions: "requiredExtensions",
	        requiredfeatures: "requiredFeatures",
	        resource: "resource",
	        restart: "restart",
	        result: "result",
	        results: "results",
	        rotate: "rotate",
	        rx: "rx",
	        ry: "ry",
	        scale: "scale",
	        security: "security",
	        seed: "seed",
	        shaperendering: "shapeRendering",
	        "shape-rendering": "shapeRendering",
	        slope: "slope",
	        spacing: "spacing",
	        specularconstant: "specularConstant",
	        specularexponent: "specularExponent",
	        speed: "speed",
	        spreadmethod: "spreadMethod",
	        startoffset: "startOffset",
	        stddeviation: "stdDeviation",
	        stemh: "stemh",
	        stemv: "stemv",
	        stitchtiles: "stitchTiles",
	        stopcolor: "stopColor",
	        "stop-color": "stopColor",
	        stopopacity: "stopOpacity",
	        "stop-opacity": "stopOpacity",
	        strikethroughposition: "strikethroughPosition",
	        "strikethrough-position": "strikethroughPosition",
	        strikethroughthickness: "strikethroughThickness",
	        "strikethrough-thickness": "strikethroughThickness",
	        string: "string",
	        stroke: "stroke",
	        strokedasharray: "strokeDasharray",
	        "stroke-dasharray": "strokeDasharray",
	        strokedashoffset: "strokeDashoffset",
	        "stroke-dashoffset": "strokeDashoffset",
	        strokelinecap: "strokeLinecap",
	        "stroke-linecap": "strokeLinecap",
	        strokelinejoin: "strokeLinejoin",
	        "stroke-linejoin": "strokeLinejoin",
	        strokemiterlimit: "strokeMiterlimit",
	        "stroke-miterlimit": "strokeMiterlimit",
	        strokewidth: "strokeWidth",
	        "stroke-width": "strokeWidth",
	        strokeopacity: "strokeOpacity",
	        "stroke-opacity": "strokeOpacity",
	        suppresscontenteditablewarning: "suppressContentEditableWarning",
	        suppresshydrationwarning: "suppressHydrationWarning",
	        surfacescale: "surfaceScale",
	        systemlanguage: "systemLanguage",
	        tablevalues: "tableValues",
	        targetx: "targetX",
	        targety: "targetY",
	        textanchor: "textAnchor",
	        "text-anchor": "textAnchor",
	        textdecoration: "textDecoration",
	        "text-decoration": "textDecoration",
	        textlength: "textLength",
	        textrendering: "textRendering",
	        "text-rendering": "textRendering",
	        to: "to",
	        transform: "transform",
	        transformorigin: "transformOrigin",
	        "transform-origin": "transformOrigin",
	        typeof: "typeof",
	        u1: "u1",
	        u2: "u2",
	        underlineposition: "underlinePosition",
	        "underline-position": "underlinePosition",
	        underlinethickness: "underlineThickness",
	        "underline-thickness": "underlineThickness",
	        unicode: "unicode",
	        unicodebidi: "unicodeBidi",
	        "unicode-bidi": "unicodeBidi",
	        unicoderange: "unicodeRange",
	        "unicode-range": "unicodeRange",
	        unitsperem: "unitsPerEm",
	        "units-per-em": "unitsPerEm",
	        unselectable: "unselectable",
	        valphabetic: "vAlphabetic",
	        "v-alphabetic": "vAlphabetic",
	        values: "values",
	        vectoreffect: "vectorEffect",
	        "vector-effect": "vectorEffect",
	        version: "version",
	        vertadvy: "vertAdvY",
	        "vert-adv-y": "vertAdvY",
	        vertoriginx: "vertOriginX",
	        "vert-origin-x": "vertOriginX",
	        vertoriginy: "vertOriginY",
	        "vert-origin-y": "vertOriginY",
	        vhanging: "vHanging",
	        "v-hanging": "vHanging",
	        videographic: "vIdeographic",
	        "v-ideographic": "vIdeographic",
	        viewbox: "viewBox",
	        viewtarget: "viewTarget",
	        visibility: "visibility",
	        vmathematical: "vMathematical",
	        "v-mathematical": "vMathematical",
	        vocab: "vocab",
	        widths: "widths",
	        wordspacing: "wordSpacing",
	        "word-spacing": "wordSpacing",
	        writingmode: "writingMode",
	        "writing-mode": "writingMode",
	        x1: "x1",
	        x2: "x2",
	        x: "x",
	        xchannelselector: "xChannelSelector",
	        xheight: "xHeight",
	        "x-height": "xHeight",
	        xlinkactuate: "xlinkActuate",
	        "xlink:actuate": "xlinkActuate",
	        xlinkarcrole: "xlinkArcrole",
	        "xlink:arcrole": "xlinkArcrole",
	        xlinkhref: "xlinkHref",
	        "xlink:href": "xlinkHref",
	        xlinkrole: "xlinkRole",
	        "xlink:role": "xlinkRole",
	        xlinkshow: "xlinkShow",
	        "xlink:show": "xlinkShow",
	        xlinktitle: "xlinkTitle",
	        "xlink:title": "xlinkTitle",
	        xlinktype: "xlinkType",
	        "xlink:type": "xlinkType",
	        xmlbase: "xmlBase",
	        "xml:base": "xmlBase",
	        xmllang: "xmlLang",
	        "xml:lang": "xmlLang",
	        xmlns: "xmlns",
	        "xml:space": "xmlSpace",
	        xmlnsxlink: "xmlnsXlink",
	        "xmlns:xlink": "xmlnsXlink",
	        xmlspace: "xmlSpace",
	        y1: "y1",
	        y2: "y2",
	        y: "y",
	        ychannelselector: "yChannelSelector",
	        z: "z",
	        zoomandpan: "zoomAndPan"
	      },
	      ariaProperties = {
	        "aria-current": 0,
	        "aria-description": 0,
	        "aria-details": 0,
	        "aria-disabled": 0,
	        "aria-hidden": 0,
	        "aria-invalid": 0,
	        "aria-keyshortcuts": 0,
	        "aria-label": 0,
	        "aria-roledescription": 0,
	        "aria-autocomplete": 0,
	        "aria-checked": 0,
	        "aria-expanded": 0,
	        "aria-haspopup": 0,
	        "aria-level": 0,
	        "aria-modal": 0,
	        "aria-multiline": 0,
	        "aria-multiselectable": 0,
	        "aria-orientation": 0,
	        "aria-placeholder": 0,
	        "aria-pressed": 0,
	        "aria-readonly": 0,
	        "aria-required": 0,
	        "aria-selected": 0,
	        "aria-sort": 0,
	        "aria-valuemax": 0,
	        "aria-valuemin": 0,
	        "aria-valuenow": 0,
	        "aria-valuetext": 0,
	        "aria-atomic": 0,
	        "aria-busy": 0,
	        "aria-live": 0,
	        "aria-relevant": 0,
	        "aria-dropeffect": 0,
	        "aria-grabbed": 0,
	        "aria-activedescendant": 0,
	        "aria-colcount": 0,
	        "aria-colindex": 0,
	        "aria-colspan": 0,
	        "aria-controls": 0,
	        "aria-describedby": 0,
	        "aria-errormessage": 0,
	        "aria-flowto": 0,
	        "aria-labelledby": 0,
	        "aria-owns": 0,
	        "aria-posinset": 0,
	        "aria-rowcount": 0,
	        "aria-rowindex": 0,
	        "aria-rowspan": 0,
	        "aria-setsize": 0
	      },
	      warnedProperties$1 = {},
	      rARIA$1 = RegExp(
	        "^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
	      ),
	      rARIACamel$1 = RegExp(
	        "^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
	      ),
	      didWarnValueNull = false,
	      warnedProperties = {},
	      EVENT_NAME_REGEX = /^on./,
	      INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/,
	      rARIA = RegExp(
	        "^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
	      ),
	      rARIACamel = RegExp(
	        "^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
	      ),
	      isJavaScriptProtocol =
	        /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i,
	      currentReplayingEvent = null,
	      restoreTarget = null,
	      restoreQueue = null,
	      isInsideEventHandler = false,
	      passiveBrowserEventsSupported = false;
	    if (canUseDOM)
	      try {
	        var options$jscomp$0 = {};
	        Object.defineProperty(options$jscomp$0, "passive", {
	          get: function () {
	            passiveBrowserEventsSupported = !0;
	          }
	        });
	        window.addEventListener("test", options$jscomp$0, options$jscomp$0);
	        window.removeEventListener("test", options$jscomp$0, options$jscomp$0);
	      } catch (e) {
	        passiveBrowserEventsSupported = false;
	      }
	    var root = null,
	      startText = null,
	      fallbackText = null,
	      EventInterface = {
	        eventPhase: 0,
	        bubbles: 0,
	        cancelable: 0,
	        timeStamp: function (event) {
	          return event.timeStamp || Date.now();
	        },
	        defaultPrevented: 0,
	        isTrusted: 0
	      },
	      SyntheticEvent = createSyntheticEvent(EventInterface),
	      UIEventInterface = assign({}, EventInterface, { view: 0, detail: 0 }),
	      SyntheticUIEvent = createSyntheticEvent(UIEventInterface),
	      lastMovementX,
	      lastMovementY,
	      lastMouseEvent,
	      MouseEventInterface = assign({}, UIEventInterface, {
	        screenX: 0,
	        screenY: 0,
	        clientX: 0,
	        clientY: 0,
	        pageX: 0,
	        pageY: 0,
	        ctrlKey: 0,
	        shiftKey: 0,
	        altKey: 0,
	        metaKey: 0,
	        getModifierState: getEventModifierState,
	        button: 0,
	        buttons: 0,
	        relatedTarget: function (event) {
	          return undefined === event.relatedTarget
	            ? event.fromElement === event.srcElement
	              ? event.toElement
	              : event.fromElement
	            : event.relatedTarget;
	        },
	        movementX: function (event) {
	          if ("movementX" in event) return event.movementX;
	          event !== lastMouseEvent &&
	            (lastMouseEvent && "mousemove" === event.type
	              ? ((lastMovementX = event.screenX - lastMouseEvent.screenX),
	                (lastMovementY = event.screenY - lastMouseEvent.screenY))
	              : (lastMovementY = lastMovementX = 0),
	            (lastMouseEvent = event));
	          return lastMovementX;
	        },
	        movementY: function (event) {
	          return "movementY" in event ? event.movementY : lastMovementY;
	        }
	      }),
	      SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface),
	      DragEventInterface = assign({}, MouseEventInterface, { dataTransfer: 0 }),
	      SyntheticDragEvent = createSyntheticEvent(DragEventInterface),
	      FocusEventInterface = assign({}, UIEventInterface, { relatedTarget: 0 }),
	      SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface),
	      AnimationEventInterface = assign({}, EventInterface, {
	        animationName: 0,
	        elapsedTime: 0,
	        pseudoElement: 0
	      }),
	      SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface),
	      ClipboardEventInterface = assign({}, EventInterface, {
	        clipboardData: function (event) {
	          return "clipboardData" in event
	            ? event.clipboardData
	            : window.clipboardData;
	        }
	      }),
	      SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface),
	      CompositionEventInterface = assign({}, EventInterface, { data: 0 }),
	      SyntheticCompositionEvent = createSyntheticEvent(
	        CompositionEventInterface
	      ),
	      SyntheticInputEvent = SyntheticCompositionEvent,
	      normalizeKey = {
	        Esc: "Escape",
	        Spacebar: " ",
	        Left: "ArrowLeft",
	        Up: "ArrowUp",
	        Right: "ArrowRight",
	        Down: "ArrowDown",
	        Del: "Delete",
	        Win: "OS",
	        Menu: "ContextMenu",
	        Apps: "ContextMenu",
	        Scroll: "ScrollLock",
	        MozPrintableKey: "Unidentified"
	      },
	      translateToKey = {
	        8: "Backspace",
	        9: "Tab",
	        12: "Clear",
	        13: "Enter",
	        16: "Shift",
	        17: "Control",
	        18: "Alt",
	        19: "Pause",
	        20: "CapsLock",
	        27: "Escape",
	        32: " ",
	        33: "PageUp",
	        34: "PageDown",
	        35: "End",
	        36: "Home",
	        37: "ArrowLeft",
	        38: "ArrowUp",
	        39: "ArrowRight",
	        40: "ArrowDown",
	        45: "Insert",
	        46: "Delete",
	        112: "F1",
	        113: "F2",
	        114: "F3",
	        115: "F4",
	        116: "F5",
	        117: "F6",
	        118: "F7",
	        119: "F8",
	        120: "F9",
	        121: "F10",
	        122: "F11",
	        123: "F12",
	        144: "NumLock",
	        145: "ScrollLock",
	        224: "Meta"
	      },
	      modifierKeyToProp = {
	        Alt: "altKey",
	        Control: "ctrlKey",
	        Meta: "metaKey",
	        Shift: "shiftKey"
	      },
	      KeyboardEventInterface = assign({}, UIEventInterface, {
	        key: function (nativeEvent) {
	          if (nativeEvent.key) {
	            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	            if ("Unidentified" !== key) return key;
	          }
	          return "keypress" === nativeEvent.type
	            ? ((nativeEvent = getEventCharCode(nativeEvent)),
	              13 === nativeEvent ? "Enter" : String.fromCharCode(nativeEvent))
	            : "keydown" === nativeEvent.type || "keyup" === nativeEvent.type
	              ? translateToKey[nativeEvent.keyCode] || "Unidentified"
	              : "";
	        },
	        code: 0,
	        location: 0,
	        ctrlKey: 0,
	        shiftKey: 0,
	        altKey: 0,
	        metaKey: 0,
	        repeat: 0,
	        locale: 0,
	        getModifierState: getEventModifierState,
	        charCode: function (event) {
	          return "keypress" === event.type ? getEventCharCode(event) : 0;
	        },
	        keyCode: function (event) {
	          return "keydown" === event.type || "keyup" === event.type
	            ? event.keyCode
	            : 0;
	        },
	        which: function (event) {
	          return "keypress" === event.type
	            ? getEventCharCode(event)
	            : "keydown" === event.type || "keyup" === event.type
	              ? event.keyCode
	              : 0;
	        }
	      }),
	      SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface),
	      PointerEventInterface = assign({}, MouseEventInterface, {
	        pointerId: 0,
	        width: 0,
	        height: 0,
	        pressure: 0,
	        tangentialPressure: 0,
	        tiltX: 0,
	        tiltY: 0,
	        twist: 0,
	        pointerType: 0,
	        isPrimary: 0
	      }),
	      SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface),
	      TouchEventInterface = assign({}, UIEventInterface, {
	        touches: 0,
	        targetTouches: 0,
	        changedTouches: 0,
	        altKey: 0,
	        metaKey: 0,
	        ctrlKey: 0,
	        shiftKey: 0,
	        getModifierState: getEventModifierState
	      }),
	      SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface),
	      TransitionEventInterface = assign({}, EventInterface, {
	        propertyName: 0,
	        elapsedTime: 0,
	        pseudoElement: 0
	      }),
	      SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface),
	      WheelEventInterface = assign({}, MouseEventInterface, {
	        deltaX: function (event) {
	          return "deltaX" in event
	            ? event.deltaX
	            : "wheelDeltaX" in event
	              ? -event.wheelDeltaX
	              : 0;
	        },
	        deltaY: function (event) {
	          return "deltaY" in event
	            ? event.deltaY
	            : "wheelDeltaY" in event
	              ? -event.wheelDeltaY
	              : "wheelDelta" in event
	                ? -event.wheelDelta
	                : 0;
	        },
	        deltaZ: 0,
	        deltaMode: 0
	      }),
	      SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface),
	      ToggleEventInterface = assign({}, EventInterface, {
	        newState: 0,
	        oldState: 0
	      }),
	      SyntheticToggleEvent = createSyntheticEvent(ToggleEventInterface),
	      END_KEYCODES = [9, 13, 27, 32],
	      START_KEYCODE = 229,
	      canUseCompositionEvent = canUseDOM && "CompositionEvent" in window,
	      documentMode = null;
	    canUseDOM &&
	      "documentMode" in document &&
	      (documentMode = document.documentMode);
	    var canUseTextInputEvent =
	        canUseDOM && "TextEvent" in window && !documentMode,
	      useFallbackCompositionData =
	        canUseDOM &&
	        (!canUseCompositionEvent ||
	          (documentMode && 8 < documentMode && 11 >= documentMode)),
	      SPACEBAR_CODE = 32,
	      SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE),
	      hasSpaceKeypress = false,
	      isComposing = false,
	      supportedInputTypes = {
	        color: true,
	        date: true,
	        datetime: true,
	        "datetime-local": true,
	        email: true,
	        month: true,
	        number: true,
	        password: true,
	        range: true,
	        search: true,
	        tel: true,
	        text: true,
	        time: true,
	        url: true,
	        week: true
	      },
	      activeElement$1 = null,
	      activeElementInst$1 = null,
	      isInputEventSupported = false;
	    canUseDOM &&
	      (isInputEventSupported =
	        isEventSupported("input") &&
	        (!document.documentMode || 9 < document.documentMode));
	    var objectIs = "function" === typeof Object.is ? Object.is : is,
	      skipSelectionChangeEvent =
	        canUseDOM && "documentMode" in document && 11 >= document.documentMode,
	      activeElement = null,
	      activeElementInst = null,
	      lastSelection = null,
	      mouseDown = false,
	      vendorPrefixes = {
	        animationend: makePrefixMap("Animation", "AnimationEnd"),
	        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
	        animationstart: makePrefixMap("Animation", "AnimationStart"),
	        transitionrun: makePrefixMap("Transition", "TransitionRun"),
	        transitionstart: makePrefixMap("Transition", "TransitionStart"),
	        transitioncancel: makePrefixMap("Transition", "TransitionCancel"),
	        transitionend: makePrefixMap("Transition", "TransitionEnd")
	      },
	      prefixedEventNames = {},
	      style = {};
	    canUseDOM &&
	      ((style = document.createElement("div").style),
	      "AnimationEvent" in window ||
	        (delete vendorPrefixes.animationend.animation,
	        delete vendorPrefixes.animationiteration.animation,
	        delete vendorPrefixes.animationstart.animation),
	      "TransitionEvent" in window ||
	        delete vendorPrefixes.transitionend.transition);
	    var ANIMATION_END = getVendorPrefixedEventName("animationend"),
	      ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"),
	      ANIMATION_START = getVendorPrefixedEventName("animationstart"),
	      TRANSITION_RUN = getVendorPrefixedEventName("transitionrun"),
	      TRANSITION_START = getVendorPrefixedEventName("transitionstart"),
	      TRANSITION_CANCEL = getVendorPrefixedEventName("transitioncancel"),
	      TRANSITION_END = getVendorPrefixedEventName("transitionend"),
	      topLevelEventsToReactNames = new Map(),
	      simpleEventPluginEvents =
	        "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel".split(
	          " "
	        ),
	      OffscreenVisible = 1,
	      OffscreenDetached = 2,
	      OffscreenPassiveEffectsConnected = 4,
	      concurrentQueues = [],
	      concurrentQueuesIndex = 0,
	      concurrentlyUpdatedLanes = 0,
	      emptyContextObject = {};
	    Object.freeze(emptyContextObject);
	    var resolveFamily = null,
	      failedBoundaries = null,
	      NoMode = 0,
	      ConcurrentMode = 1,
	      ProfileMode = 2,
	      StrictLegacyMode = 8,
	      StrictEffectsMode = 16,
	      NoStrictPassiveEffectsMode = 64,
	      now = Scheduler.unstable_now,
	      renderStartTime = -0,
	      commitStartTime = -0,
	      profilerStartTime = -1.1,
	      profilerEffectDuration = -0,
	      currentUpdateIsNested = false,
	      nestedUpdateScheduled = false,
	      ReactStrictModeWarnings = {
	        recordUnsafeLifecycleWarnings: function () {},
	        flushPendingUnsafeLifecycleWarnings: function () {},
	        recordLegacyContextWarning: function () {},
	        flushLegacyContextWarning: function () {},
	        discardPendingWarnings: function () {}
	      },
	      pendingComponentWillMountWarnings = [],
	      pendingUNSAFE_ComponentWillMountWarnings = [],
	      pendingComponentWillReceivePropsWarnings = [],
	      pendingUNSAFE_ComponentWillReceivePropsWarnings = [],
	      pendingComponentWillUpdateWarnings = [],
	      pendingUNSAFE_ComponentWillUpdateWarnings = [],
	      didWarnAboutUnsafeLifecycles = new Set();
	    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (
	      fiber,
	      instance
	    ) {
	      didWarnAboutUnsafeLifecycles.has(fiber.type) ||
	        ("function" === typeof instance.componentWillMount &&
	          true !== instance.componentWillMount.__suppressDeprecationWarning &&
	          pendingComponentWillMountWarnings.push(fiber),
	        fiber.mode & StrictLegacyMode &&
	          "function" === typeof instance.UNSAFE_componentWillMount &&
	          pendingUNSAFE_ComponentWillMountWarnings.push(fiber),
	        "function" === typeof instance.componentWillReceiveProps &&
	          true !==
	            instance.componentWillReceiveProps.__suppressDeprecationWarning &&
	          pendingComponentWillReceivePropsWarnings.push(fiber),
	        fiber.mode & StrictLegacyMode &&
	          "function" === typeof instance.UNSAFE_componentWillReceiveProps &&
	          pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber),
	        "function" === typeof instance.componentWillUpdate &&
	          true !== instance.componentWillUpdate.__suppressDeprecationWarning &&
	          pendingComponentWillUpdateWarnings.push(fiber),
	        fiber.mode & StrictLegacyMode &&
	          "function" === typeof instance.UNSAFE_componentWillUpdate &&
	          pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber));
	    };
	    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
	      var componentWillMountUniqueNames = new Set();
	      0 < pendingComponentWillMountWarnings.length &&
	        (pendingComponentWillMountWarnings.forEach(function (fiber) {
	          componentWillMountUniqueNames.add(
	            getComponentNameFromFiber(fiber) || "Component"
	          );
	          didWarnAboutUnsafeLifecycles.add(fiber.type);
	        }),
	        (pendingComponentWillMountWarnings = []));
	      var UNSAFE_componentWillMountUniqueNames = new Set();
	      0 < pendingUNSAFE_ComponentWillMountWarnings.length &&
	        (pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
	          UNSAFE_componentWillMountUniqueNames.add(
	            getComponentNameFromFiber(fiber) || "Component"
	          );
	          didWarnAboutUnsafeLifecycles.add(fiber.type);
	        }),
	        (pendingUNSAFE_ComponentWillMountWarnings = []));
	      var componentWillReceivePropsUniqueNames = new Set();
	      0 < pendingComponentWillReceivePropsWarnings.length &&
	        (pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
	          componentWillReceivePropsUniqueNames.add(
	            getComponentNameFromFiber(fiber) || "Component"
	          );
	          didWarnAboutUnsafeLifecycles.add(fiber.type);
	        }),
	        (pendingComponentWillReceivePropsWarnings = []));
	      var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
	      0 < pendingUNSAFE_ComponentWillReceivePropsWarnings.length &&
	        (pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(
	          function (fiber) {
	            UNSAFE_componentWillReceivePropsUniqueNames.add(
	              getComponentNameFromFiber(fiber) || "Component"
	            );
	            didWarnAboutUnsafeLifecycles.add(fiber.type);
	          }
	        ),
	        (pendingUNSAFE_ComponentWillReceivePropsWarnings = []));
	      var componentWillUpdateUniqueNames = new Set();
	      0 < pendingComponentWillUpdateWarnings.length &&
	        (pendingComponentWillUpdateWarnings.forEach(function (fiber) {
	          componentWillUpdateUniqueNames.add(
	            getComponentNameFromFiber(fiber) || "Component"
	          );
	          didWarnAboutUnsafeLifecycles.add(fiber.type);
	        }),
	        (pendingComponentWillUpdateWarnings = []));
	      var UNSAFE_componentWillUpdateUniqueNames = new Set();
	      0 < pendingUNSAFE_ComponentWillUpdateWarnings.length &&
	        (pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
	          UNSAFE_componentWillUpdateUniqueNames.add(
	            getComponentNameFromFiber(fiber) || "Component"
	          );
	          didWarnAboutUnsafeLifecycles.add(fiber.type);
	        }),
	        (pendingUNSAFE_ComponentWillUpdateWarnings = []));
	      if (0 < UNSAFE_componentWillMountUniqueNames.size) {
	        var sortedNames = setToSortedString(
	          UNSAFE_componentWillMountUniqueNames
	        );
	        console.error(
	          "Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s",
	          sortedNames
	        );
	      }
	      0 < UNSAFE_componentWillReceivePropsUniqueNames.size &&
	        ((sortedNames = setToSortedString(
	          UNSAFE_componentWillReceivePropsUniqueNames
	        )),
	        console.error(
	          "Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n\nPlease update the following components: %s",
	          sortedNames
	        ));
	      0 < UNSAFE_componentWillUpdateUniqueNames.size &&
	        ((sortedNames = setToSortedString(
	          UNSAFE_componentWillUpdateUniqueNames
	        )),
	        console.error(
	          "Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s",
	          sortedNames
	        ));
	      0 < componentWillMountUniqueNames.size &&
	        ((sortedNames = setToSortedString(componentWillMountUniqueNames)),
	        console.warn(
	          "componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
	          sortedNames
	        ));
	      0 < componentWillReceivePropsUniqueNames.size &&
	        ((sortedNames = setToSortedString(
	          componentWillReceivePropsUniqueNames
	        )),
	        console.warn(
	          "componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
	          sortedNames
	        ));
	      0 < componentWillUpdateUniqueNames.size &&
	        ((sortedNames = setToSortedString(componentWillUpdateUniqueNames)),
	        console.warn(
	          "componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
	          sortedNames
	        ));
	    };
	    var pendingLegacyContextWarning = new Map(),
	      didWarnAboutLegacyContext = new Set();
	    ReactStrictModeWarnings.recordLegacyContextWarning = function (
	      fiber,
	      instance
	    ) {
	      var strictRoot = null;
	      for (var node = fiber; null !== node; )
	        node.mode & StrictLegacyMode && (strictRoot = node),
	          (node = node.return);
	      null === strictRoot
	        ? console.error(
	            "Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue."
	          )
	        : !didWarnAboutLegacyContext.has(fiber.type) &&
	          ((node = pendingLegacyContextWarning.get(strictRoot)),
	          null != fiber.type.contextTypes ||
	            null != fiber.type.childContextTypes ||
	            (null !== instance &&
	              "function" === typeof instance.getChildContext)) &&
	          (undefined === node &&
	            ((node = []), pendingLegacyContextWarning.set(strictRoot, node)),
	          node.push(fiber));
	    };
	    ReactStrictModeWarnings.flushLegacyContextWarning = function () {
	      pendingLegacyContextWarning.forEach(function (fiberArray) {
	        if (0 !== fiberArray.length) {
	          var firstFiber = fiberArray[0],
	            uniqueNames = new Set();
	          fiberArray.forEach(function (fiber) {
	            uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
	            didWarnAboutLegacyContext.add(fiber.type);
	          });
	          var sortedNames = setToSortedString(uniqueNames);
	          runWithFiberInDEV(firstFiber, function () {
	            console.error(
	              "Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://react.dev/link/legacy-context",
	              sortedNames
	            );
	          });
	        }
	      });
	    };
	    ReactStrictModeWarnings.discardPendingWarnings = function () {
	      pendingComponentWillMountWarnings = [];
	      pendingUNSAFE_ComponentWillMountWarnings = [];
	      pendingComponentWillReceivePropsWarnings = [];
	      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	      pendingComponentWillUpdateWarnings = [];
	      pendingUNSAFE_ComponentWillUpdateWarnings = [];
	      pendingLegacyContextWarning = new Map();
	    };
	    var CapturedStacks = new WeakMap(),
	      forkStack = [],
	      forkStackIndex = 0,
	      treeForkProvider = null,
	      treeForkCount = 0,
	      idStack = [],
	      idStackIndex = 0,
	      treeContextProvider = null,
	      treeContextId = 1,
	      treeContextOverflow = "",
	      hydrationParentFiber = null,
	      nextHydratableInstance = null,
	      isHydrating = false,
	      didSuspendOrErrorDEV = false,
	      hydrationDiffRootDEV = null,
	      hydrationErrors = null,
	      rootOrSingletonContext = false,
	      HydrationMismatchException = Error(
	        "Hydration Mismatch Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."
	      ),
	      SuspenseException = Error(
	        "Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`"
	      ),
	      SuspenseyCommitException = Error(
	        "Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."
	      ),
	      noopSuspenseyCommitThenable = {
	        then: function () {
	          console.error(
	            'Internal React error: A listener was unexpectedly attached to a "noop" thenable. This is a bug in React. Please file an issue.'
	          );
	        }
	      },
	      suspendedThenable = null,
	      needsToResetSuspendedThenableDEV = false,
	      callComponent = {
	        "react-stack-bottom-frame": function (Component, props, secondArg) {
	          var wasRendering = isRendering;
	          isRendering = true;
	          try {
	            return Component(props, secondArg);
	          } finally {
	            isRendering = wasRendering;
	          }
	        }
	      },
	      callComponentInDEV =
	        callComponent["react-stack-bottom-frame"].bind(callComponent),
	      callRender = {
	        "react-stack-bottom-frame": function (instance) {
	          var wasRendering = isRendering;
	          isRendering = true;
	          try {
	            return instance.render();
	          } finally {
	            isRendering = wasRendering;
	          }
	        }
	      },
	      callRenderInDEV = callRender["react-stack-bottom-frame"].bind(callRender),
	      callComponentDidMount = {
	        "react-stack-bottom-frame": function (finishedWork, instance) {
	          try {
	            instance.componentDidMount();
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          }
	        }
	      },
	      callComponentDidMountInDEV = callComponentDidMount[
	        "react-stack-bottom-frame"
	      ].bind(callComponentDidMount),
	      callComponentDidUpdate = {
	        "react-stack-bottom-frame": function (
	          finishedWork,
	          instance,
	          prevProps,
	          prevState,
	          snapshot
	        ) {
	          try {
	            instance.componentDidUpdate(prevProps, prevState, snapshot);
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          }
	        }
	      },
	      callComponentDidUpdateInDEV = callComponentDidUpdate[
	        "react-stack-bottom-frame"
	      ].bind(callComponentDidUpdate),
	      callComponentDidCatch = {
	        "react-stack-bottom-frame": function (instance, errorInfo) {
	          var stack = errorInfo.stack;
	          instance.componentDidCatch(errorInfo.value, {
	            componentStack: null !== stack ? stack : ""
	          });
	        }
	      },
	      callComponentDidCatchInDEV = callComponentDidCatch[
	        "react-stack-bottom-frame"
	      ].bind(callComponentDidCatch),
	      callComponentWillUnmount = {
	        "react-stack-bottom-frame": function (
	          current,
	          nearestMountedAncestor,
	          instance
	        ) {
	          try {
	            instance.componentWillUnmount();
	          } catch (error) {
	            captureCommitPhaseError(current, nearestMountedAncestor, error);
	          }
	        }
	      },
	      callComponentWillUnmountInDEV = callComponentWillUnmount[
	        "react-stack-bottom-frame"
	      ].bind(callComponentWillUnmount),
	      callCreate = {
	        "react-stack-bottom-frame": function (effect) {
	          var create = effect.create;
	          effect = effect.inst;
	          create = create();
	          return (effect.destroy = create);
	        }
	      },
	      callCreateInDEV = callCreate["react-stack-bottom-frame"].bind(callCreate),
	      callDestroy = {
	        "react-stack-bottom-frame": function (
	          current,
	          nearestMountedAncestor,
	          destroy
	        ) {
	          try {
	            destroy();
	          } catch (error) {
	            captureCommitPhaseError(current, nearestMountedAncestor, error);
	          }
	        }
	      },
	      callDestroyInDEV =
	        callDestroy["react-stack-bottom-frame"].bind(callDestroy),
	      callLazyInit = {
	        "react-stack-bottom-frame": function (lazy) {
	          var init = lazy._init;
	          return init(lazy._payload);
	        }
	      },
	      callLazyInitInDEV =
	        callLazyInit["react-stack-bottom-frame"].bind(callLazyInit),
	      thenableState$1 = null,
	      thenableIndexCounter$1 = 0,
	      currentDebugInfo = null,
	      didWarnAboutMaps;
	    var didWarnAboutGenerators = (didWarnAboutMaps = false);
	    var ownerHasKeyUseWarning = {};
	    var ownerHasFunctionTypeWarning = {};
	    var ownerHasSymbolTypeWarning = {};
	    warnForMissingKey = function (returnFiber, workInProgress, child) {
	      if (
	        null !== child &&
	        "object" === typeof child &&
	        child._store &&
	        ((!child._store.validated && null == child.key) ||
	          2 === child._store.validated)
	      ) {
	        if ("object" !== typeof child._store)
	          throw Error(
	            "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue."
	          );
	        child._store.validated = 1;
	        var componentName = getComponentNameFromFiber(returnFiber),
	          componentKey = componentName || "null";
	        if (!ownerHasKeyUseWarning[componentKey]) {
	          ownerHasKeyUseWarning[componentKey] = true;
	          child = child._owner;
	          returnFiber = returnFiber._debugOwner;
	          var currentComponentErrorInfo = "";
	          returnFiber &&
	            "number" === typeof returnFiber.tag &&
	            (componentKey = getComponentNameFromFiber(returnFiber)) &&
	            (currentComponentErrorInfo =
	              "\n\nCheck the render method of `" + componentKey + "`.");
	          currentComponentErrorInfo ||
	            (componentName &&
	              (currentComponentErrorInfo =
	                "\n\nCheck the top-level render call using <" +
	                componentName +
	                ">."));
	          var childOwnerAppendix = "";
	          null != child &&
	            returnFiber !== child &&
	            ((componentName = null),
	            "number" === typeof child.tag
	              ? (componentName = getComponentNameFromFiber(child))
	              : "string" === typeof child.name && (componentName = child.name),
	            componentName &&
	              (childOwnerAppendix =
	                " It was passed a child from " + componentName + "."));
	          runWithFiberInDEV(workInProgress, function () {
	            console.error(
	              'Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.',
	              currentComponentErrorInfo,
	              childOwnerAppendix
	            );
	          });
	        }
	      }
	    };
	    var reconcileChildFibers = createChildReconciler(true),
	      mountChildFibers = createChildReconciler(false),
	      currentTreeHiddenStackCursor = createCursor(null),
	      prevEntangledRenderLanesCursor = createCursor(0),
	      suspenseHandlerStackCursor = createCursor(null),
	      shellBoundary = null,
	      SubtreeSuspenseContextMask = 1,
	      ForceSuspenseFallback = 2,
	      suspenseStackCursor = createCursor(0),
	      NoFlags = 0,
	      HasEffect = 1,
	      Insertion = 2,
	      Layout = 4,
	      Passive = 8,
	      AbortControllerLocal =
	        "undefined" !== typeof AbortController
	          ? AbortController
	          : function () {
	              var listeners = [],
	                signal = (this.signal = {
	                  aborted: false,
	                  addEventListener: function (type, listener) {
	                    listeners.push(listener);
	                  }
	                });
	              this.abort = function () {
	                signal.aborted = true;
	                listeners.forEach(function (listener) {
	                  return listener();
	                });
	              };
	            },
	      scheduleCallback$2 = Scheduler.unstable_scheduleCallback,
	      NormalPriority = Scheduler.unstable_NormalPriority,
	      CacheContext = {
	        $$typeof: REACT_CONTEXT_TYPE,
	        Consumer: null,
	        Provider: null,
	        _currentValue: null,
	        _currentValue2: null,
	        _threadCount: 0,
	        _currentRenderer: null,
	        _currentRenderer2: null
	      },
	      currentEntangledListeners = null,
	      currentEntangledPendingCount = 0,
	      currentEntangledLane = 0,
	      currentEntangledActionThenable = null,
	      prevOnStartTransitionFinish = ReactSharedInternals.S;
	    ReactSharedInternals.S = function (transition, returnValue) {
	      "object" === typeof returnValue &&
	        null !== returnValue &&
	        "function" === typeof returnValue.then &&
	        entangleAsyncAction(transition, returnValue);
	      null !== prevOnStartTransitionFinish &&
	        prevOnStartTransitionFinish(transition, returnValue);
	    };
	    var resumedCache = createCursor(null),
	      didWarnUncachedGetSnapshot;
	    var didWarnAboutMismatchedHooksForComponent = new Set();
	    var didWarnAboutUseWrappedInTryCatch = new Set();
	    var didWarnAboutAsyncClientComponent = new Set();
	    var didWarnAboutUseFormState = new Set();
	    var renderLanes = 0,
	      currentlyRenderingFiber$1 = null,
	      currentHook = null,
	      workInProgressHook = null,
	      didScheduleRenderPhaseUpdate = false,
	      didScheduleRenderPhaseUpdateDuringThisPass = false,
	      shouldDoubleInvokeUserFnsInHooksDEV = false,
	      localIdCounter = 0,
	      thenableIndexCounter = 0,
	      thenableState = null,
	      globalClientIdCounter = 0,
	      RE_RENDER_LIMIT = 25,
	      currentHookNameInDev = null,
	      hookTypesDev = null,
	      hookTypesUpdateIndexDev = -1,
	      ignorePreviousDependencies = false;
	    var createFunctionComponentUpdateQueue = function () {
	      return { lastEffect: null, events: null, stores: null, memoCache: null };
	    };
	    var ContextOnlyDispatcher = {
	      readContext: readContext,
	      use: use,
	      useCallback: throwInvalidHookError,
	      useContext: throwInvalidHookError,
	      useEffect: throwInvalidHookError,
	      useImperativeHandle: throwInvalidHookError,
	      useLayoutEffect: throwInvalidHookError,
	      useInsertionEffect: throwInvalidHookError,
	      useMemo: throwInvalidHookError,
	      useReducer: throwInvalidHookError,
	      useRef: throwInvalidHookError,
	      useState: throwInvalidHookError,
	      useDebugValue: throwInvalidHookError,
	      useDeferredValue: throwInvalidHookError,
	      useTransition: throwInvalidHookError,
	      useSyncExternalStore: throwInvalidHookError,
	      useId: throwInvalidHookError
	    };
	    ContextOnlyDispatcher.useCacheRefresh = throwInvalidHookError;
	    ContextOnlyDispatcher.useMemoCache = throwInvalidHookError;
	    ContextOnlyDispatcher.useHostTransitionStatus = throwInvalidHookError;
	    ContextOnlyDispatcher.useFormState = throwInvalidHookError;
	    ContextOnlyDispatcher.useActionState = throwInvalidHookError;
	    ContextOnlyDispatcher.useOptimistic = throwInvalidHookError;
	    var HooksDispatcherOnMountInDEV = null,
	      HooksDispatcherOnMountWithHookTypesInDEV = null,
	      HooksDispatcherOnUpdateInDEV = null,
	      HooksDispatcherOnRerenderInDEV = null,
	      InvalidNestedHooksDispatcherOnMountInDEV = null,
	      InvalidNestedHooksDispatcherOnUpdateInDEV = null,
	      InvalidNestedHooksDispatcherOnRerenderInDEV = null;
	    HooksDispatcherOnMountInDEV = {
	      readContext: function (context) {
	        return readContext(context);
	      },
	      use: use,
	      useCallback: function (callback, deps) {
	        currentHookNameInDev = "useCallback";
	        mountHookTypesDev();
	        checkDepsAreArrayDev(deps);
	        return mountCallback(callback, deps);
	      },
	      useContext: function (context) {
	        currentHookNameInDev = "useContext";
	        mountHookTypesDev();
	        return readContext(context);
	      },
	      useEffect: function (create, deps) {
	        currentHookNameInDev = "useEffect";
	        mountHookTypesDev();
	        checkDepsAreArrayDev(deps);
	        return mountEffect(create, deps);
	      },
	      useImperativeHandle: function (ref, create, deps) {
	        currentHookNameInDev = "useImperativeHandle";
	        mountHookTypesDev();
	        checkDepsAreArrayDev(deps);
	        return mountImperativeHandle(ref, create, deps);
	      },
	      useInsertionEffect: function (create, deps) {
	        currentHookNameInDev = "useInsertionEffect";
	        mountHookTypesDev();
	        checkDepsAreArrayDev(deps);
	        mountEffectImpl(4, Insertion, create, deps);
	      },
	      useLayoutEffect: function (create, deps) {
	        currentHookNameInDev = "useLayoutEffect";
	        mountHookTypesDev();
	        checkDepsAreArrayDev(deps);
	        return mountLayoutEffect(create, deps);
	      },
	      useMemo: function (create, deps) {
	        currentHookNameInDev = "useMemo";
	        mountHookTypesDev();
	        checkDepsAreArrayDev(deps);
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
	        try {
	          return mountMemo(create, deps);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useReducer: function (reducer, initialArg, init) {
	        currentHookNameInDev = "useReducer";
	        mountHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
	        try {
	          return mountReducer(reducer, initialArg, init);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useRef: function (initialValue) {
	        currentHookNameInDev = "useRef";
	        mountHookTypesDev();
	        return mountRef(initialValue);
	      },
	      useState: function (initialState) {
	        currentHookNameInDev = "useState";
	        mountHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
	        try {
	          return mountState(initialState);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useDebugValue: function () {
	        currentHookNameInDev = "useDebugValue";
	        mountHookTypesDev();
	      },
	      useDeferredValue: function (value, initialValue) {
	        currentHookNameInDev = "useDeferredValue";
	        mountHookTypesDev();
	        return mountDeferredValue(value, initialValue);
	      },
	      useTransition: function () {
	        currentHookNameInDev = "useTransition";
	        mountHookTypesDev();
	        return mountTransition();
	      },
	      useSyncExternalStore: function (
	        subscribe,
	        getSnapshot,
	        getServerSnapshot
	      ) {
	        currentHookNameInDev = "useSyncExternalStore";
	        mountHookTypesDev();
	        return mountSyncExternalStore(
	          subscribe,
	          getSnapshot,
	          getServerSnapshot
	        );
	      },
	      useId: function () {
	        currentHookNameInDev = "useId";
	        mountHookTypesDev();
	        return mountId();
	      },
	      useCacheRefresh: function () {
	        currentHookNameInDev = "useCacheRefresh";
	        mountHookTypesDev();
	        return mountRefresh();
	      }
	    };
	    HooksDispatcherOnMountInDEV.useMemoCache = useMemoCache;
	    HooksDispatcherOnMountInDEV.useHostTransitionStatus =
	      useHostTransitionStatus;
	    HooksDispatcherOnMountInDEV.useFormState = function (action, initialState) {
	      currentHookNameInDev = "useFormState";
	      mountHookTypesDev();
	      warnOnUseFormStateInDev();
	      return mountActionState(action, initialState);
	    };
	    HooksDispatcherOnMountInDEV.useActionState = function (
	      action,
	      initialState
	    ) {
	      currentHookNameInDev = "useActionState";
	      mountHookTypesDev();
	      return mountActionState(action, initialState);
	    };
	    HooksDispatcherOnMountInDEV.useOptimistic = function (passthrough) {
	      currentHookNameInDev = "useOptimistic";
	      mountHookTypesDev();
	      return mountOptimistic(passthrough);
	    };
	    HooksDispatcherOnMountWithHookTypesInDEV = {
	      readContext: function (context) {
	        return readContext(context);
	      },
	      use: use,
	      useCallback: function (callback, deps) {
	        currentHookNameInDev = "useCallback";
	        updateHookTypesDev();
	        return mountCallback(callback, deps);
	      },
	      useContext: function (context) {
	        currentHookNameInDev = "useContext";
	        updateHookTypesDev();
	        return readContext(context);
	      },
	      useEffect: function (create, deps) {
	        currentHookNameInDev = "useEffect";
	        updateHookTypesDev();
	        return mountEffect(create, deps);
	      },
	      useImperativeHandle: function (ref, create, deps) {
	        currentHookNameInDev = "useImperativeHandle";
	        updateHookTypesDev();
	        return mountImperativeHandle(ref, create, deps);
	      },
	      useInsertionEffect: function (create, deps) {
	        currentHookNameInDev = "useInsertionEffect";
	        updateHookTypesDev();
	        mountEffectImpl(4, Insertion, create, deps);
	      },
	      useLayoutEffect: function (create, deps) {
	        currentHookNameInDev = "useLayoutEffect";
	        updateHookTypesDev();
	        return mountLayoutEffect(create, deps);
	      },
	      useMemo: function (create, deps) {
	        currentHookNameInDev = "useMemo";
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
	        try {
	          return mountMemo(create, deps);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useReducer: function (reducer, initialArg, init) {
	        currentHookNameInDev = "useReducer";
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
	        try {
	          return mountReducer(reducer, initialArg, init);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useRef: function (initialValue) {
	        currentHookNameInDev = "useRef";
	        updateHookTypesDev();
	        return mountRef(initialValue);
	      },
	      useState: function (initialState) {
	        currentHookNameInDev = "useState";
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
	        try {
	          return mountState(initialState);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useDebugValue: function () {
	        currentHookNameInDev = "useDebugValue";
	        updateHookTypesDev();
	      },
	      useDeferredValue: function (value, initialValue) {
	        currentHookNameInDev = "useDeferredValue";
	        updateHookTypesDev();
	        return mountDeferredValue(value, initialValue);
	      },
	      useTransition: function () {
	        currentHookNameInDev = "useTransition";
	        updateHookTypesDev();
	        return mountTransition();
	      },
	      useSyncExternalStore: function (
	        subscribe,
	        getSnapshot,
	        getServerSnapshot
	      ) {
	        currentHookNameInDev = "useSyncExternalStore";
	        updateHookTypesDev();
	        return mountSyncExternalStore(
	          subscribe,
	          getSnapshot,
	          getServerSnapshot
	        );
	      },
	      useId: function () {
	        currentHookNameInDev = "useId";
	        updateHookTypesDev();
	        return mountId();
	      },
	      useCacheRefresh: function () {
	        currentHookNameInDev = "useCacheRefresh";
	        updateHookTypesDev();
	        return mountRefresh();
	      }
	    };
	    HooksDispatcherOnMountWithHookTypesInDEV.useMemoCache = useMemoCache;
	    HooksDispatcherOnMountWithHookTypesInDEV.useHostTransitionStatus =
	      useHostTransitionStatus;
	    HooksDispatcherOnMountWithHookTypesInDEV.useFormState = function (
	      action,
	      initialState
	    ) {
	      currentHookNameInDev = "useFormState";
	      updateHookTypesDev();
	      warnOnUseFormStateInDev();
	      return mountActionState(action, initialState);
	    };
	    HooksDispatcherOnMountWithHookTypesInDEV.useActionState = function (
	      action,
	      initialState
	    ) {
	      currentHookNameInDev = "useActionState";
	      updateHookTypesDev();
	      return mountActionState(action, initialState);
	    };
	    HooksDispatcherOnMountWithHookTypesInDEV.useOptimistic = function (
	      passthrough
	    ) {
	      currentHookNameInDev = "useOptimistic";
	      updateHookTypesDev();
	      return mountOptimistic(passthrough);
	    };
	    HooksDispatcherOnUpdateInDEV = {
	      readContext: function (context) {
	        return readContext(context);
	      },
	      use: use,
	      useCallback: function (callback, deps) {
	        currentHookNameInDev = "useCallback";
	        updateHookTypesDev();
	        return updateCallback(callback, deps);
	      },
	      useContext: function (context) {
	        currentHookNameInDev = "useContext";
	        updateHookTypesDev();
	        return readContext(context);
	      },
	      useEffect: function (create, deps) {
	        currentHookNameInDev = "useEffect";
	        updateHookTypesDev();
	        updateEffectImpl(2048, Passive, create, deps);
	      },
	      useImperativeHandle: function (ref, create, deps) {
	        currentHookNameInDev = "useImperativeHandle";
	        updateHookTypesDev();
	        return updateImperativeHandle(ref, create, deps);
	      },
	      useInsertionEffect: function (create, deps) {
	        currentHookNameInDev = "useInsertionEffect";
	        updateHookTypesDev();
	        return updateEffectImpl(4, Insertion, create, deps);
	      },
	      useLayoutEffect: function (create, deps) {
	        currentHookNameInDev = "useLayoutEffect";
	        updateHookTypesDev();
	        return updateEffectImpl(4, Layout, create, deps);
	      },
	      useMemo: function (create, deps) {
	        currentHookNameInDev = "useMemo";
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        try {
	          return updateMemo(create, deps);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useReducer: function (reducer, initialArg, init) {
	        currentHookNameInDev = "useReducer";
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        try {
	          return updateReducer(reducer, initialArg, init);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useRef: function () {
	        currentHookNameInDev = "useRef";
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      },
	      useState: function () {
	        currentHookNameInDev = "useState";
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        try {
	          return updateReducer(basicStateReducer);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useDebugValue: function () {
	        currentHookNameInDev = "useDebugValue";
	        updateHookTypesDev();
	      },
	      useDeferredValue: function (value, initialValue) {
	        currentHookNameInDev = "useDeferredValue";
	        updateHookTypesDev();
	        return updateDeferredValue(value, initialValue);
	      },
	      useTransition: function () {
	        currentHookNameInDev = "useTransition";
	        updateHookTypesDev();
	        return updateTransition();
	      },
	      useSyncExternalStore: function (
	        subscribe,
	        getSnapshot,
	        getServerSnapshot
	      ) {
	        currentHookNameInDev = "useSyncExternalStore";
	        updateHookTypesDev();
	        return updateSyncExternalStore(
	          subscribe,
	          getSnapshot,
	          getServerSnapshot
	        );
	      },
	      useId: function () {
	        currentHookNameInDev = "useId";
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      },
	      useCacheRefresh: function () {
	        currentHookNameInDev = "useCacheRefresh";
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      }
	    };
	    HooksDispatcherOnUpdateInDEV.useMemoCache = useMemoCache;
	    HooksDispatcherOnUpdateInDEV.useHostTransitionStatus =
	      useHostTransitionStatus;
	    HooksDispatcherOnUpdateInDEV.useFormState = function (action) {
	      currentHookNameInDev = "useFormState";
	      updateHookTypesDev();
	      warnOnUseFormStateInDev();
	      return updateActionState(action);
	    };
	    HooksDispatcherOnUpdateInDEV.useActionState = function (action) {
	      currentHookNameInDev = "useActionState";
	      updateHookTypesDev();
	      return updateActionState(action);
	    };
	    HooksDispatcherOnUpdateInDEV.useOptimistic = function (
	      passthrough,
	      reducer
	    ) {
	      currentHookNameInDev = "useOptimistic";
	      updateHookTypesDev();
	      return updateOptimistic(passthrough, reducer);
	    };
	    HooksDispatcherOnRerenderInDEV = {
	      readContext: function (context) {
	        return readContext(context);
	      },
	      use: use,
	      useCallback: function (callback, deps) {
	        currentHookNameInDev = "useCallback";
	        updateHookTypesDev();
	        return updateCallback(callback, deps);
	      },
	      useContext: function (context) {
	        currentHookNameInDev = "useContext";
	        updateHookTypesDev();
	        return readContext(context);
	      },
	      useEffect: function (create, deps) {
	        currentHookNameInDev = "useEffect";
	        updateHookTypesDev();
	        updateEffectImpl(2048, Passive, create, deps);
	      },
	      useImperativeHandle: function (ref, create, deps) {
	        currentHookNameInDev = "useImperativeHandle";
	        updateHookTypesDev();
	        return updateImperativeHandle(ref, create, deps);
	      },
	      useInsertionEffect: function (create, deps) {
	        currentHookNameInDev = "useInsertionEffect";
	        updateHookTypesDev();
	        return updateEffectImpl(4, Insertion, create, deps);
	      },
	      useLayoutEffect: function (create, deps) {
	        currentHookNameInDev = "useLayoutEffect";
	        updateHookTypesDev();
	        return updateEffectImpl(4, Layout, create, deps);
	      },
	      useMemo: function (create, deps) {
	        currentHookNameInDev = "useMemo";
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
	        try {
	          return updateMemo(create, deps);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useReducer: function (reducer, initialArg, init) {
	        currentHookNameInDev = "useReducer";
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
	        try {
	          return rerenderReducer(reducer, initialArg, init);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useRef: function () {
	        currentHookNameInDev = "useRef";
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      },
	      useState: function () {
	        currentHookNameInDev = "useState";
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
	        try {
	          return rerenderReducer(basicStateReducer);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useDebugValue: function () {
	        currentHookNameInDev = "useDebugValue";
	        updateHookTypesDev();
	      },
	      useDeferredValue: function (value, initialValue) {
	        currentHookNameInDev = "useDeferredValue";
	        updateHookTypesDev();
	        return rerenderDeferredValue(value, initialValue);
	      },
	      useTransition: function () {
	        currentHookNameInDev = "useTransition";
	        updateHookTypesDev();
	        return rerenderTransition();
	      },
	      useSyncExternalStore: function (
	        subscribe,
	        getSnapshot,
	        getServerSnapshot
	      ) {
	        currentHookNameInDev = "useSyncExternalStore";
	        updateHookTypesDev();
	        return updateSyncExternalStore(
	          subscribe,
	          getSnapshot,
	          getServerSnapshot
	        );
	      },
	      useId: function () {
	        currentHookNameInDev = "useId";
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      },
	      useCacheRefresh: function () {
	        currentHookNameInDev = "useCacheRefresh";
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      }
	    };
	    HooksDispatcherOnRerenderInDEV.useMemoCache = useMemoCache;
	    HooksDispatcherOnRerenderInDEV.useHostTransitionStatus =
	      useHostTransitionStatus;
	    HooksDispatcherOnRerenderInDEV.useFormState = function (action) {
	      currentHookNameInDev = "useFormState";
	      updateHookTypesDev();
	      warnOnUseFormStateInDev();
	      return rerenderActionState(action);
	    };
	    HooksDispatcherOnRerenderInDEV.useActionState = function (action) {
	      currentHookNameInDev = "useActionState";
	      updateHookTypesDev();
	      return rerenderActionState(action);
	    };
	    HooksDispatcherOnRerenderInDEV.useOptimistic = function (
	      passthrough,
	      reducer
	    ) {
	      currentHookNameInDev = "useOptimistic";
	      updateHookTypesDev();
	      return rerenderOptimistic(passthrough, reducer);
	    };
	    InvalidNestedHooksDispatcherOnMountInDEV = {
	      readContext: function (context) {
	        warnInvalidContextAccess();
	        return readContext(context);
	      },
	      use: function (usable) {
	        warnInvalidHookAccess();
	        return use(usable);
	      },
	      useCallback: function (callback, deps) {
	        currentHookNameInDev = "useCallback";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountCallback(callback, deps);
	      },
	      useContext: function (context) {
	        currentHookNameInDev = "useContext";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return readContext(context);
	      },
	      useEffect: function (create, deps) {
	        currentHookNameInDev = "useEffect";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountEffect(create, deps);
	      },
	      useImperativeHandle: function (ref, create, deps) {
	        currentHookNameInDev = "useImperativeHandle";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountImperativeHandle(ref, create, deps);
	      },
	      useInsertionEffect: function (create, deps) {
	        currentHookNameInDev = "useInsertionEffect";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        mountEffectImpl(4, Insertion, create, deps);
	      },
	      useLayoutEffect: function (create, deps) {
	        currentHookNameInDev = "useLayoutEffect";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountLayoutEffect(create, deps);
	      },
	      useMemo: function (create, deps) {
	        currentHookNameInDev = "useMemo";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
	        try {
	          return mountMemo(create, deps);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useReducer: function (reducer, initialArg, init) {
	        currentHookNameInDev = "useReducer";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
	        try {
	          return mountReducer(reducer, initialArg, init);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useRef: function (initialValue) {
	        currentHookNameInDev = "useRef";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountRef(initialValue);
	      },
	      useState: function (initialState) {
	        currentHookNameInDev = "useState";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
	        try {
	          return mountState(initialState);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useDebugValue: function () {
	        currentHookNameInDev = "useDebugValue";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	      },
	      useDeferredValue: function (value, initialValue) {
	        currentHookNameInDev = "useDeferredValue";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountDeferredValue(value, initialValue);
	      },
	      useTransition: function () {
	        currentHookNameInDev = "useTransition";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountTransition();
	      },
	      useSyncExternalStore: function (
	        subscribe,
	        getSnapshot,
	        getServerSnapshot
	      ) {
	        currentHookNameInDev = "useSyncExternalStore";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountSyncExternalStore(
	          subscribe,
	          getSnapshot,
	          getServerSnapshot
	        );
	      },
	      useId: function () {
	        currentHookNameInDev = "useId";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountId();
	      },
	      useCacheRefresh: function () {
	        currentHookNameInDev = "useCacheRefresh";
	        mountHookTypesDev();
	        return mountRefresh();
	      },
	      useMemoCache: function (size) {
	        warnInvalidHookAccess();
	        return useMemoCache(size);
	      }
	    };
	    InvalidNestedHooksDispatcherOnMountInDEV.useHostTransitionStatus =
	      useHostTransitionStatus;
	    InvalidNestedHooksDispatcherOnMountInDEV.useFormState = function (
	      action,
	      initialState
	    ) {
	      currentHookNameInDev = "useFormState";
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountActionState(action, initialState);
	    };
	    InvalidNestedHooksDispatcherOnMountInDEV.useActionState = function (
	      action,
	      initialState
	    ) {
	      currentHookNameInDev = "useActionState";
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountActionState(action, initialState);
	    };
	    InvalidNestedHooksDispatcherOnMountInDEV.useOptimistic = function (
	      passthrough
	    ) {
	      currentHookNameInDev = "useOptimistic";
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountOptimistic(passthrough);
	    };
	    InvalidNestedHooksDispatcherOnUpdateInDEV = {
	      readContext: function (context) {
	        warnInvalidContextAccess();
	        return readContext(context);
	      },
	      use: function (usable) {
	        warnInvalidHookAccess();
	        return use(usable);
	      },
	      useCallback: function (callback, deps) {
	        currentHookNameInDev = "useCallback";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateCallback(callback, deps);
	      },
	      useContext: function (context) {
	        currentHookNameInDev = "useContext";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return readContext(context);
	      },
	      useEffect: function (create, deps) {
	        currentHookNameInDev = "useEffect";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        updateEffectImpl(2048, Passive, create, deps);
	      },
	      useImperativeHandle: function (ref, create, deps) {
	        currentHookNameInDev = "useImperativeHandle";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateImperativeHandle(ref, create, deps);
	      },
	      useInsertionEffect: function (create, deps) {
	        currentHookNameInDev = "useInsertionEffect";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateEffectImpl(4, Insertion, create, deps);
	      },
	      useLayoutEffect: function (create, deps) {
	        currentHookNameInDev = "useLayoutEffect";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateEffectImpl(4, Layout, create, deps);
	      },
	      useMemo: function (create, deps) {
	        currentHookNameInDev = "useMemo";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        try {
	          return updateMemo(create, deps);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useReducer: function (reducer, initialArg, init) {
	        currentHookNameInDev = "useReducer";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        try {
	          return updateReducer(reducer, initialArg, init);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useRef: function () {
	        currentHookNameInDev = "useRef";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      },
	      useState: function () {
	        currentHookNameInDev = "useState";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        try {
	          return updateReducer(basicStateReducer);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useDebugValue: function () {
	        currentHookNameInDev = "useDebugValue";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	      },
	      useDeferredValue: function (value, initialValue) {
	        currentHookNameInDev = "useDeferredValue";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateDeferredValue(value, initialValue);
	      },
	      useTransition: function () {
	        currentHookNameInDev = "useTransition";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateTransition();
	      },
	      useSyncExternalStore: function (
	        subscribe,
	        getSnapshot,
	        getServerSnapshot
	      ) {
	        currentHookNameInDev = "useSyncExternalStore";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateSyncExternalStore(
	          subscribe,
	          getSnapshot,
	          getServerSnapshot
	        );
	      },
	      useId: function () {
	        currentHookNameInDev = "useId";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      },
	      useCacheRefresh: function () {
	        currentHookNameInDev = "useCacheRefresh";
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      },
	      useMemoCache: function (size) {
	        warnInvalidHookAccess();
	        return useMemoCache(size);
	      }
	    };
	    InvalidNestedHooksDispatcherOnUpdateInDEV.useHostTransitionStatus =
	      useHostTransitionStatus;
	    InvalidNestedHooksDispatcherOnUpdateInDEV.useFormState = function (action) {
	      currentHookNameInDev = "useFormState";
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateActionState(action);
	    };
	    InvalidNestedHooksDispatcherOnUpdateInDEV.useActionState = function (
	      action
	    ) {
	      currentHookNameInDev = "useActionState";
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateActionState(action);
	    };
	    InvalidNestedHooksDispatcherOnUpdateInDEV.useOptimistic = function (
	      passthrough,
	      reducer
	    ) {
	      currentHookNameInDev = "useOptimistic";
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateOptimistic(passthrough, reducer);
	    };
	    InvalidNestedHooksDispatcherOnRerenderInDEV = {
	      readContext: function (context) {
	        warnInvalidContextAccess();
	        return readContext(context);
	      },
	      use: function (usable) {
	        warnInvalidHookAccess();
	        return use(usable);
	      },
	      useCallback: function (callback, deps) {
	        currentHookNameInDev = "useCallback";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateCallback(callback, deps);
	      },
	      useContext: function (context) {
	        currentHookNameInDev = "useContext";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return readContext(context);
	      },
	      useEffect: function (create, deps) {
	        currentHookNameInDev = "useEffect";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        updateEffectImpl(2048, Passive, create, deps);
	      },
	      useImperativeHandle: function (ref, create, deps) {
	        currentHookNameInDev = "useImperativeHandle";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateImperativeHandle(ref, create, deps);
	      },
	      useInsertionEffect: function (create, deps) {
	        currentHookNameInDev = "useInsertionEffect";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateEffectImpl(4, Insertion, create, deps);
	      },
	      useLayoutEffect: function (create, deps) {
	        currentHookNameInDev = "useLayoutEffect";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateEffectImpl(4, Layout, create, deps);
	      },
	      useMemo: function (create, deps) {
	        currentHookNameInDev = "useMemo";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        try {
	          return updateMemo(create, deps);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useReducer: function (reducer, initialArg, init) {
	        currentHookNameInDev = "useReducer";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        try {
	          return rerenderReducer(reducer, initialArg, init);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useRef: function () {
	        currentHookNameInDev = "useRef";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      },
	      useState: function () {
	        currentHookNameInDev = "useState";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        try {
	          return rerenderReducer(basicStateReducer);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useDebugValue: function () {
	        currentHookNameInDev = "useDebugValue";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	      },
	      useDeferredValue: function (value, initialValue) {
	        currentHookNameInDev = "useDeferredValue";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return rerenderDeferredValue(value, initialValue);
	      },
	      useTransition: function () {
	        currentHookNameInDev = "useTransition";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return rerenderTransition();
	      },
	      useSyncExternalStore: function (
	        subscribe,
	        getSnapshot,
	        getServerSnapshot
	      ) {
	        currentHookNameInDev = "useSyncExternalStore";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateSyncExternalStore(
	          subscribe,
	          getSnapshot,
	          getServerSnapshot
	        );
	      },
	      useId: function () {
	        currentHookNameInDev = "useId";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      },
	      useCacheRefresh: function () {
	        currentHookNameInDev = "useCacheRefresh";
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      },
	      useMemoCache: function (size) {
	        warnInvalidHookAccess();
	        return useMemoCache(size);
	      }
	    };
	    InvalidNestedHooksDispatcherOnRerenderInDEV.useHostTransitionStatus =
	      useHostTransitionStatus;
	    InvalidNestedHooksDispatcherOnRerenderInDEV.useFormState = function (
	      action
	    ) {
	      currentHookNameInDev = "useFormState";
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return rerenderActionState(action);
	    };
	    InvalidNestedHooksDispatcherOnRerenderInDEV.useActionState = function (
	      action
	    ) {
	      currentHookNameInDev = "useActionState";
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return rerenderActionState(action);
	    };
	    InvalidNestedHooksDispatcherOnRerenderInDEV.useOptimistic = function (
	      passthrough,
	      reducer
	    ) {
	      currentHookNameInDev = "useOptimistic";
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return rerenderOptimistic(passthrough, reducer);
	    };
	    var fakeInternalInstance = {};
	    var didWarnAboutStateAssignmentForComponent = new Set();
	    var didWarnAboutUninitializedState = new Set();
	    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
	    var didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
	    var didWarnAboutDirectlyAssigningPropsToState = new Set();
	    var didWarnAboutUndefinedDerivedState = new Set();
	    var didWarnAboutContextTypes$1 = new Set();
	    var didWarnAboutChildContextTypes = new Set();
	    var didWarnAboutInvalidateContextType = new Set();
	    var didWarnOnInvalidCallback = new Set();
	    Object.freeze(fakeInternalInstance);
	    var classComponentUpdater = {
	        isMounted: function (component) {
	          var owner = current;
	          if (null !== owner && isRendering && 1 === owner.tag) {
	            var instance = owner.stateNode;
	            instance._warnedAboutRefsInRender ||
	              console.error(
	                "%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",
	                getComponentNameFromFiber(owner) || "A component"
	              );
	            instance._warnedAboutRefsInRender = true;
	          }
	          return (component = component._reactInternals)
	            ? getNearestMountedFiber(component) === component
	            : false;
	        },
	        enqueueSetState: function (inst, payload, callback) {
	          inst = inst._reactInternals;
	          var lane = requestUpdateLane(inst),
	            update = createUpdate(lane);
	          update.payload = payload;
	          undefined !== callback &&
	            null !== callback &&
	            (warnOnInvalidCallback(callback), (update.callback = callback));
	          payload = enqueueUpdate(inst, update, lane);
	          null !== payload &&
	            (scheduleUpdateOnFiber(payload, inst, lane),
	            entangleTransitions(payload, inst, lane));
	          markStateUpdateScheduled(inst, lane);
	        },
	        enqueueReplaceState: function (inst, payload, callback) {
	          inst = inst._reactInternals;
	          var lane = requestUpdateLane(inst),
	            update = createUpdate(lane);
	          update.tag = ReplaceState;
	          update.payload = payload;
	          undefined !== callback &&
	            null !== callback &&
	            (warnOnInvalidCallback(callback), (update.callback = callback));
	          payload = enqueueUpdate(inst, update, lane);
	          null !== payload &&
	            (scheduleUpdateOnFiber(payload, inst, lane),
	            entangleTransitions(payload, inst, lane));
	          markStateUpdateScheduled(inst, lane);
	        },
	        enqueueForceUpdate: function (inst, callback) {
	          inst = inst._reactInternals;
	          var lane = requestUpdateLane(inst),
	            update = createUpdate(lane);
	          update.tag = ForceUpdate;
	          undefined !== callback &&
	            null !== callback &&
	            (warnOnInvalidCallback(callback), (update.callback = callback));
	          callback = enqueueUpdate(inst, update, lane);
	          null !== callback &&
	            (scheduleUpdateOnFiber(callback, inst, lane),
	            entangleTransitions(callback, inst, lane));
	          null !== injectedProfilingHooks &&
	            "function" ===
	              typeof injectedProfilingHooks.markForceUpdateScheduled &&
	            injectedProfilingHooks.markForceUpdateScheduled(inst, lane);
	        }
	      },
	      reportGlobalError =
	        "function" === typeof reportError
	          ? reportError
	          : function (error) {
	              if (
	                "object" === typeof window &&
	                "function" === typeof window.ErrorEvent
	              ) {
	                var event = new window.ErrorEvent("error", {
	                  bubbles: true,
	                  cancelable: true,
	                  message:
	                    "object" === typeof error &&
	                    null !== error &&
	                    "string" === typeof error.message
	                      ? String(error.message)
	                      : String(error),
	                  error: error
	                });
	                if (!window.dispatchEvent(event)) return;
	              } else if (
	                "object" === typeof process &&
	                "function" === typeof process.emit
	              ) {
	                process.emit("uncaughtException", error);
	                return;
	              }
	              console.error(error);
	            },
	      componentName = null,
	      errorBoundaryName = null,
	      SelectiveHydrationException = Error(
	        "This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."
	      ),
	      didReceiveUpdate = false;
	    var didWarnAboutBadClass = {};
	    var didWarnAboutContextTypeOnFunctionComponent = {};
	    var didWarnAboutContextTypes = {};
	    var didWarnAboutGetDerivedStateOnFunctionComponent = {};
	    var didWarnAboutReassigningProps = false;
	    var didWarnAboutRevealOrder = {};
	    var didWarnAboutTailOptions = {};
	    var SUSPENDED_MARKER = {
	        dehydrated: null,
	        treeContext: null,
	        retryLane: 0
	      },
	      hasWarnedAboutUsingNoValuePropOnContextProvider = false,
	      valueCursor = createCursor(null);
	    var rendererCursorDEV = createCursor(null);
	    var rendererSigil = {};
	    var currentlyRenderingFiber = null,
	      lastContextDependency = null,
	      isDisallowedContextReadInDEV = false,
	      UpdateState = 0,
	      ReplaceState = 1,
	      ForceUpdate = 2,
	      CaptureUpdate = 3,
	      hasForceUpdate = false;
	    var didWarnUpdateInsideUpdate = false;
	    var currentlyProcessingQueue = null;
	    var didReadFromEntangledAsyncAction = false,
	      didWarnAboutUndefinedSnapshotBeforeUpdate = null;
	    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
	    var offscreenSubtreeIsHidden = false,
	      offscreenSubtreeWasHidden = false,
	      needsFormReset = false,
	      PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set,
	      nextEffect = null,
	      inProgressLanes = null,
	      inProgressRoot = null,
	      shouldFireAfterActiveInstanceBlur = false,
	      hostParent = null,
	      hostParentIsContainer = false,
	      currentHoistableRoot = null,
	      suspenseyCommitFlag = 8192;
	    var hasBadMapPolyfill = false;
	    try {
	      var nonExtensibleObject = Object.preventExtensions({});
	      new Map([[nonExtensibleObject, null]]);
	      new Set([nonExtensibleObject]);
	    } catch (e$7) {
	      hasBadMapPolyfill = true;
	    }
	    var DefaultAsyncDispatcher = {
	      getCacheForType: function (resourceType) {
	        var cache = readContext(CacheContext),
	          cacheForType = cache.data.get(resourceType);
	        undefined === cacheForType &&
	          ((cacheForType = resourceType()),
	          cache.data.set(resourceType, cacheForType));
	        return cacheForType;
	      },
	      getOwner: function () {
	        return current;
	      }
	    };
	    if ("function" === typeof Symbol && Symbol.for) {
	      var symbolFor = Symbol.for;
	      symbolFor("selector.component");
	      symbolFor("selector.has_pseudo_class");
	      symbolFor("selector.role");
	      symbolFor("selector.test_id");
	      symbolFor("selector.text");
	    }
	    var commitHooks = [],
	      PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map,
	      NoContext = 0,
	      RenderContext = 2,
	      CommitContext = 4,
	      RootInProgress = 0,
	      RootFatalErrored = 1,
	      RootErrored = 2,
	      RootSuspended = 3,
	      RootSuspendedWithDelay = 4,
	      RootCompleted = 5,
	      RootDidNotComplete = 6,
	      executionContext = NoContext,
	      workInProgressRoot = null,
	      workInProgress = null,
	      workInProgressRootRenderLanes = 0,
	      NotSuspended = 0,
	      SuspendedOnError = 1,
	      SuspendedOnData = 2,
	      SuspendedOnImmediate = 3,
	      SuspendedOnInstance = 4,
	      SuspendedOnInstanceAndReadyToContinue = 5,
	      SuspendedOnDeprecatedThrowPromise = 6,
	      SuspendedAndReadyToContinue = 7,
	      SuspendedOnHydration = 8,
	      workInProgressSuspendedReason = NotSuspended,
	      workInProgressThrownValue = null,
	      workInProgressRootDidSkipSuspendedSiblings = false,
	      workInProgressRootIsPrerendering = false,
	      workInProgressRootDidAttachPingListener = false,
	      entangledRenderLanes = 0,
	      workInProgressRootExitStatus = RootInProgress,
	      workInProgressRootSkippedLanes = 0,
	      workInProgressRootInterleavedUpdatedLanes = 0,
	      workInProgressRootPingedLanes = 0,
	      workInProgressDeferredLane = 0,
	      workInProgressSuspendedRetryLanes = 0,
	      workInProgressRootConcurrentErrors = null,
	      workInProgressRootRecoverableErrors = null,
	      workInProgressRootDidIncludeRecursiveRenderUpdate = false,
	      globalMostRecentFallbackTime = 0,
	      FALLBACK_THROTTLE_MS = 300,
	      workInProgressRootRenderTargetTime = Infinity,
	      RENDER_TIMEOUT_MS = 500,
	      workInProgressTransitions = null,
	      legacyErrorBoundariesThatAlreadyFailed = null,
	      rootDoesHavePassiveEffects = false,
	      rootWithPendingPassiveEffects = null,
	      pendingPassiveEffectsLanes = 0,
	      pendingPassiveEffectsRemainingLanes = 0,
	      pendingPassiveTransitions = null,
	      NESTED_UPDATE_LIMIT = 50,
	      nestedUpdateCount = 0,
	      rootWithNestedUpdates = null,
	      isFlushingPassiveEffects = false,
	      didScheduleUpdateDuringPassiveEffects = false,
	      NESTED_PASSIVE_UPDATE_LIMIT = 50,
	      nestedPassiveUpdateCount = 0,
	      rootWithPassiveNestedUpdates = null,
	      isRunningInsertionEffect = false,
	      IMMEDIATE_COMMIT = 0,
	      SUSPENDED_COMMIT = 1,
	      THROTTLED_COMMIT = 2,
	      didWarnStateUpdateForNotYetMountedComponent = null,
	      didWarnAboutUpdateInRender = false;
	    var didWarnAboutUpdateInRenderForAnotherComponent = new Set();
	    var fakeActCallbackNode$1 = {},
	      firstScheduledRoot = null,
	      lastScheduledRoot = null,
	      didScheduleMicrotask = false,
	      didScheduleMicrotask_act = false,
	      mightHavePendingSyncWork = false,
	      isFlushingWork = false,
	      currentEventTransitionLane = 0,
	      fakeActCallbackNode = {};
	    (function () {
	      for (var i = 0; i < simpleEventPluginEvents.length; i++) {
	        var eventName = simpleEventPluginEvents[i],
	          domEventName = eventName.toLowerCase();
	        eventName = eventName[0].toUpperCase() + eventName.slice(1);
	        registerSimpleEvent(domEventName, "on" + eventName);
	      }
	      registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
	      registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
	      registerSimpleEvent(ANIMATION_START, "onAnimationStart");
	      registerSimpleEvent("dblclick", "onDoubleClick");
	      registerSimpleEvent("focusin", "onFocus");
	      registerSimpleEvent("focusout", "onBlur");
	      registerSimpleEvent(TRANSITION_RUN, "onTransitionRun");
	      registerSimpleEvent(TRANSITION_START, "onTransitionStart");
	      registerSimpleEvent(TRANSITION_CANCEL, "onTransitionCancel");
	      registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
	    })();
	    registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
	    registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
	    registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
	    registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
	    registerTwoPhaseEvent(
	      "onChange",
	      "change click focusin focusout input keydown keyup selectionchange".split(
	        " "
	      )
	    );
	    registerTwoPhaseEvent(
	      "onSelect",
	      "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
	        " "
	      )
	    );
	    registerTwoPhaseEvent("onBeforeInput", [
	      "compositionend",
	      "keypress",
	      "textInput",
	      "paste"
	    ]);
	    registerTwoPhaseEvent(
	      "onCompositionEnd",
	      "compositionend focusout keydown keypress keyup mousedown".split(" ")
	    );
	    registerTwoPhaseEvent(
	      "onCompositionStart",
	      "compositionstart focusout keydown keypress keyup mousedown".split(" ")
	    );
	    registerTwoPhaseEvent(
	      "onCompositionUpdate",
	      "compositionupdate focusout keydown keypress keyup mousedown".split(" ")
	    );
	    var mediaEventTypes =
	        "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
	          " "
	        ),
	      nonDelegatedEvents = new Set(
	        "beforetoggle cancel close invalid load scroll scrollend toggle"
	          .split(" ")
	          .concat(mediaEventTypes)
	      ),
	      listeningMarker = "_reactListening" + Math.random().toString(36).slice(2),
	      didWarnControlledToUncontrolled = false,
	      didWarnUncontrolledToControlled = false,
	      didWarnFormActionType = false,
	      didWarnFormActionName = false,
	      didWarnFormActionTarget = false,
	      didWarnFormActionMethod = false,
	      didWarnPopoverTargetObject = false;
	    var didWarnForNewBooleanPropsWithEmptyValue = {};
	    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g,
	      NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g,
	      xlinkNamespace = "http://www.w3.org/1999/xlink",
	      xmlNamespace = "http://www.w3.org/XML/1998/namespace",
	      EXPECTED_FORM_ACTION_URL =
	        "javascript:throw new Error('React form unexpectedly submitted.')",
	      SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning",
	      SUSPENSE_START_DATA = "$",
	      SUSPENSE_END_DATA = "/$",
	      SUSPENSE_PENDING_START_DATA = "$?",
	      SUSPENSE_FALLBACK_START_DATA = "$!",
	      FORM_STATE_IS_MATCHING = "F!",
	      FORM_STATE_IS_NOT_MATCHING = "F",
	      STYLE = "style",
	      HostContextNamespaceNone = 0,
	      HostContextNamespaceSvg = 1,
	      HostContextNamespaceMath = 2,
	      eventsEnabled = null,
	      selectionInformation = null,
	      warnedUnknownTags = { dialog: true, webview: true },
	      currentPopstateTransitionEvent = null,
	      scheduleTimeout = "function" === typeof setTimeout ? setTimeout : undefined,
	      cancelTimeout =
	        "function" === typeof clearTimeout ? clearTimeout : undefined,
	      noTimeout = -1,
	      localPromise = "function" === typeof Promise ? Promise : undefined,
	      scheduleMicrotask =
	        "function" === typeof queueMicrotask
	          ? queueMicrotask
	          : "undefined" !== typeof localPromise
	            ? function (callback) {
	                return localPromise
	                  .resolve(null)
	                  .then(callback)
	                  .catch(handleErrorInNextTick);
	              }
	            : scheduleTimeout,
	      NotLoaded = 0,
	      Loaded = 1,
	      Errored = 2,
	      Settled = 3,
	      Inserted = 4,
	      preloadPropsMap = new Map(),
	      preconnectsSet = new Set(),
	      previousDispatcher = ReactDOMSharedInternals.d;
	    ReactDOMSharedInternals.d = {
	      f: function () {
	        var previousWasRendering = previousDispatcher.f(),
	          wasRendering = flushSyncWork$1();
	        return previousWasRendering || wasRendering;
	      },
	      r: function (form) {
	        var formInst = getInstanceFromNode(form);
	        null !== formInst && 5 === formInst.tag && "form" === formInst.type
	          ? requestFormReset$1(formInst)
	          : previousDispatcher.r(form);
	      },
	      D: function (href) {
	        previousDispatcher.D(href);
	        preconnectAs("dns-prefetch", href, null);
	      },
	      C: function (href, crossOrigin) {
	        previousDispatcher.C(href, crossOrigin);
	        preconnectAs("preconnect", href, crossOrigin);
	      },
	      L: function (href, as, options) {
	        previousDispatcher.L(href, as, options);
	        var ownerDocument = globalDocument;
	        if (ownerDocument && href && as) {
	          var preloadSelector =
	            'link[rel="preload"][as="' +
	            escapeSelectorAttributeValueInsideDoubleQuotes(as) +
	            '"]';
	          "image" === as
	            ? options && options.imageSrcSet
	              ? ((preloadSelector +=
	                  '[imagesrcset="' +
	                  escapeSelectorAttributeValueInsideDoubleQuotes(
	                    options.imageSrcSet
	                  ) +
	                  '"]'),
	                "string" === typeof options.imageSizes &&
	                  (preloadSelector +=
	                    '[imagesizes="' +
	                    escapeSelectorAttributeValueInsideDoubleQuotes(
	                      options.imageSizes
	                    ) +
	                    '"]'))
	              : (preloadSelector +=
	                  '[href="' +
	                  escapeSelectorAttributeValueInsideDoubleQuotes(href) +
	                  '"]')
	            : (preloadSelector +=
	                '[href="' +
	                escapeSelectorAttributeValueInsideDoubleQuotes(href) +
	                '"]');
	          var key = preloadSelector;
	          switch (as) {
	            case "style":
	              key = getStyleKey(href);
	              break;
	            case "script":
	              key = getScriptKey(href);
	          }
	          preloadPropsMap.has(key) ||
	            ((href = assign(
	              {
	                rel: "preload",
	                href:
	                  "image" === as && options && options.imageSrcSet
	                    ? undefined
	                    : href,
	                as: as
	              },
	              options
	            )),
	            preloadPropsMap.set(key, href),
	            null !== ownerDocument.querySelector(preloadSelector) ||
	              ("style" === as &&
	                ownerDocument.querySelector(
	                  getStylesheetSelectorFromKey(key)
	                )) ||
	              ("script" === as &&
	                ownerDocument.querySelector(getScriptSelectorFromKey(key))) ||
	              ((as = ownerDocument.createElement("link")),
	              setInitialProperties(as, "link", href),
	              markNodeAsHoistable(as),
	              ownerDocument.head.appendChild(as)));
	        }
	      },
	      m: function (href, options) {
	        previousDispatcher.m(href, options);
	        var ownerDocument = globalDocument;
	        if (ownerDocument && href) {
	          var as =
	              options && "string" === typeof options.as ? options.as : "script",
	            preloadSelector =
	              'link[rel="modulepreload"][as="' +
	              escapeSelectorAttributeValueInsideDoubleQuotes(as) +
	              '"][href="' +
	              escapeSelectorAttributeValueInsideDoubleQuotes(href) +
	              '"]',
	            key = preloadSelector;
	          switch (as) {
	            case "audioworklet":
	            case "paintworklet":
	            case "serviceworker":
	            case "sharedworker":
	            case "worker":
	            case "script":
	              key = getScriptKey(href);
	          }
	          if (
	            !preloadPropsMap.has(key) &&
	            ((href = assign({ rel: "modulepreload", href: href }, options)),
	            preloadPropsMap.set(key, href),
	            null === ownerDocument.querySelector(preloadSelector))
	          ) {
	            switch (as) {
	              case "audioworklet":
	              case "paintworklet":
	              case "serviceworker":
	              case "sharedworker":
	              case "worker":
	              case "script":
	                if (ownerDocument.querySelector(getScriptSelectorFromKey(key)))
	                  return;
	            }
	            as = ownerDocument.createElement("link");
	            setInitialProperties(as, "link", href);
	            markNodeAsHoistable(as);
	            ownerDocument.head.appendChild(as);
	          }
	        }
	      },
	      X: function (src, options) {
	        previousDispatcher.X(src, options);
	        var ownerDocument = globalDocument;
	        if (ownerDocument && src) {
	          var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts,
	            key = getScriptKey(src),
	            resource = scripts.get(key);
	          resource ||
	            ((resource = ownerDocument.querySelector(
	              getScriptSelectorFromKey(key)
	            )),
	            resource ||
	              ((src = assign({ src: src, async: true }, options)),
	              (options = preloadPropsMap.get(key)) &&
	                adoptPreloadPropsForScript(src, options),
	              (resource = ownerDocument.createElement("script")),
	              markNodeAsHoistable(resource),
	              setInitialProperties(resource, "link", src),
	              ownerDocument.head.appendChild(resource)),
	            (resource = {
	              type: "script",
	              instance: resource,
	              count: 1,
	              state: null
	            }),
	            scripts.set(key, resource));
	        }
	      },
	      S: function (href, precedence, options) {
	        previousDispatcher.S(href, precedence, options);
	        var ownerDocument = globalDocument;
	        if (ownerDocument && href) {
	          var styles = getResourcesFromRoot(ownerDocument).hoistableStyles,
	            key = getStyleKey(href);
	          precedence = precedence || "default";
	          var resource = styles.get(key);
	          if (!resource) {
	            var state = { loading: NotLoaded, preload: null };
	            if (
	              (resource = ownerDocument.querySelector(
	                getStylesheetSelectorFromKey(key)
	              ))
	            )
	              state.loading = Loaded | Inserted;
	            else {
	              href = assign(
	                {
	                  rel: "stylesheet",
	                  href: href,
	                  "data-precedence": precedence
	                },
	                options
	              );
	              (options = preloadPropsMap.get(key)) &&
	                adoptPreloadPropsForStylesheet(href, options);
	              var link = (resource = ownerDocument.createElement("link"));
	              markNodeAsHoistable(link);
	              setInitialProperties(link, "link", href);
	              link._p = new Promise(function (resolve, reject) {
	                link.onload = resolve;
	                link.onerror = reject;
	              });
	              link.addEventListener("load", function () {
	                state.loading |= Loaded;
	              });
	              link.addEventListener("error", function () {
	                state.loading |= Errored;
	              });
	              state.loading |= Inserted;
	              insertStylesheet(resource, precedence, ownerDocument);
	            }
	            resource = {
	              type: "stylesheet",
	              instance: resource,
	              count: 1,
	              state: state
	            };
	            styles.set(key, resource);
	          }
	        }
	      },
	      M: function (src, options) {
	        previousDispatcher.M(src, options);
	        var ownerDocument = globalDocument;
	        if (ownerDocument && src) {
	          var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts,
	            key = getScriptKey(src),
	            resource = scripts.get(key);
	          resource ||
	            ((resource = ownerDocument.querySelector(
	              getScriptSelectorFromKey(key)
	            )),
	            resource ||
	              ((src = assign({ src: src, async: true, type: "module" }, options)),
	              (options = preloadPropsMap.get(key)) &&
	                adoptPreloadPropsForScript(src, options),
	              (resource = ownerDocument.createElement("script")),
	              markNodeAsHoistable(resource),
	              setInitialProperties(resource, "link", src),
	              ownerDocument.head.appendChild(resource)),
	            (resource = {
	              type: "script",
	              instance: resource,
	              count: 1,
	              state: null
	            }),
	            scripts.set(key, resource));
	        }
	      }
	    };
	    var globalDocument = "undefined" === typeof document ? null : document,
	      tagCaches = null,
	      suspendedState = null,
	      LAST_PRECEDENCE = null,
	      precedencesByRoot = null,
	      NotPendingTransition = NotPending,
	      HostTransitionContext = {
	        $$typeof: REACT_CONTEXT_TYPE,
	        Provider: null,
	        Consumer: null,
	        _currentValue: NotPendingTransition,
	        _currentValue2: NotPendingTransition,
	        _threadCount: 0
	      },
	      badgeFormat = "%c%s%c ",
	      badgeStyle =
	        "background: #e6e6e6;background: light-dark(rgba(0,0,0,0.1), rgba(255,255,255,0.25));color: #000000;color: light-dark(#000000, #ffffff);border-radius: 2px",
	      resetStyle = "",
	      pad = " ",
	      bind = Function.prototype.bind;
	    var didWarnAboutNestedUpdates = false;
	    var overrideHookState = null,
	      overrideHookStateDeletePath = null,
	      overrideHookStateRenamePath = null,
	      overrideProps = null,
	      overridePropsDeletePath = null,
	      overridePropsRenamePath = null,
	      scheduleUpdate = null,
	      setErrorHandler = null,
	      setSuspenseHandler = null;
	    overrideHookState = function (fiber, id, path, value) {
	      id = findHook(fiber, id);
	      null !== id &&
	        ((path = copyWithSetImpl(id.memoizedState, path, 0, value)),
	        (id.memoizedState = path),
	        (id.baseState = path),
	        (fiber.memoizedProps = assign({}, fiber.memoizedProps)),
	        (path = enqueueConcurrentRenderForLane(fiber, 2)),
	        null !== path && scheduleUpdateOnFiber(path, fiber, 2));
	    };
	    overrideHookStateDeletePath = function (fiber, id, path) {
	      id = findHook(fiber, id);
	      null !== id &&
	        ((path = copyWithDeleteImpl(id.memoizedState, path, 0)),
	        (id.memoizedState = path),
	        (id.baseState = path),
	        (fiber.memoizedProps = assign({}, fiber.memoizedProps)),
	        (path = enqueueConcurrentRenderForLane(fiber, 2)),
	        null !== path && scheduleUpdateOnFiber(path, fiber, 2));
	    };
	    overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
	      id = findHook(fiber, id);
	      null !== id &&
	        ((oldPath = copyWithRename(id.memoizedState, oldPath, newPath)),
	        (id.memoizedState = oldPath),
	        (id.baseState = oldPath),
	        (fiber.memoizedProps = assign({}, fiber.memoizedProps)),
	        (oldPath = enqueueConcurrentRenderForLane(fiber, 2)),
	        null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, 2));
	    };
	    overrideProps = function (fiber, path, value) {
	      fiber.pendingProps = copyWithSetImpl(fiber.memoizedProps, path, 0, value);
	      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
	      path = enqueueConcurrentRenderForLane(fiber, 2);
	      null !== path && scheduleUpdateOnFiber(path, fiber, 2);
	    };
	    overridePropsDeletePath = function (fiber, path) {
	      fiber.pendingProps = copyWithDeleteImpl(fiber.memoizedProps, path, 0);
	      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
	      path = enqueueConcurrentRenderForLane(fiber, 2);
	      null !== path && scheduleUpdateOnFiber(path, fiber, 2);
	    };
	    overridePropsRenamePath = function (fiber, oldPath, newPath) {
	      fiber.pendingProps = copyWithRename(
	        fiber.memoizedProps,
	        oldPath,
	        newPath
	      );
	      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
	      oldPath = enqueueConcurrentRenderForLane(fiber, 2);
	      null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, 2);
	    };
	    scheduleUpdate = function (fiber) {
	      var root = enqueueConcurrentRenderForLane(fiber, 2);
	      null !== root && scheduleUpdateOnFiber(root, fiber, 2);
	    };
	    setErrorHandler = function (newShouldErrorImpl) {
	      shouldErrorImpl = newShouldErrorImpl;
	    };
	    setSuspenseHandler = function (newShouldSuspendImpl) {
	      shouldSuspendImpl = newShouldSuspendImpl;
	    };
	    var _enabled = true,
	      return_targetInst = null,
	      hasScheduledReplayAttempt = false,
	      queuedFocus = null,
	      queuedDrag = null,
	      queuedMouse = null,
	      queuedPointers = new Map(),
	      queuedPointerCaptures = new Map(),
	      queuedExplicitHydrationTargets = [],
	      discreteReplayableEvents =
	        "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(
	          " "
	        ),
	      lastScheduledReplayQueue = null;
	    ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render =
	      function (children, JSCompiler_OptimizeArgumentsArray_p2) {
	        var root = this._internalRoot;
	        if (null === root) throw Error("Cannot update an unmounted root.");
	        "function" === typeof JSCompiler_OptimizeArgumentsArray_p2
	          ? console.error(
	              "does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."
	            )
	          : isValidContainer(JSCompiler_OptimizeArgumentsArray_p2)
	            ? console.error(
	                "You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root."
	              )
	            : "undefined" !== typeof JSCompiler_OptimizeArgumentsArray_p2 &&
	              console.error(
	                "You passed a second argument to root.render(...) but it only accepts one argument."
	              );
	        JSCompiler_OptimizeArgumentsArray_p2 = root.current;
	        var lane = requestUpdateLane(JSCompiler_OptimizeArgumentsArray_p2);
	        updateContainerImpl(
	          JSCompiler_OptimizeArgumentsArray_p2,
	          lane,
	          children,
	          root,
	          null,
	          null
	        );
	      };
	    ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount =
	      function (JSCompiler_OptimizeArgumentsArray_p3) {
	        "function" === typeof JSCompiler_OptimizeArgumentsArray_p3 &&
	          console.error(
	            "does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."
	          );
	        JSCompiler_OptimizeArgumentsArray_p3 = this._internalRoot;
	        if (null !== JSCompiler_OptimizeArgumentsArray_p3) {
	          this._internalRoot = null;
	          var container = JSCompiler_OptimizeArgumentsArray_p3.containerInfo;
	          (executionContext & (RenderContext | CommitContext)) !== NoContext &&
	            console.error(
	              "Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."
	            );
	          updateContainerSync(
	            null,
	            JSCompiler_OptimizeArgumentsArray_p3,
	            null,
	            null
	          );
	          flushSyncWork$1();
	          container[internalContainerInstanceKey] = null;
	        }
	      };
	    ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (
	      target
	    ) {
	      if (target) {
	        var updatePriority = resolveUpdatePriority();
	        target = { blockedOn: null, target: target, priority: updatePriority };
	        for (
	          var i = 0;
	          i < queuedExplicitHydrationTargets.length &&
	          0 !== updatePriority &&
	          updatePriority < queuedExplicitHydrationTargets[i].priority;
	          i++
	        );
	        queuedExplicitHydrationTargets.splice(i, 0, target);
	        0 === i && attemptExplicitHydrationTarget(target);
	      }
	    };
	    (function () {
	      var isomorphicReactPackageVersion = React.version;
	      if ("19.0.0" !== isomorphicReactPackageVersion)
	        throw Error(
	          'Incompatible React versions: The "react" and "react-dom" packages must have the exact same version. Instead got:\n  - react:      ' +
	            (isomorphicReactPackageVersion +
	              "\n  - react-dom:  19.0.0\nLearn more: https://react.dev/warnings/version-mismatch")
	        );
	    })();
	    ("function" === typeof Map &&
	      null != Map.prototype &&
	      "function" === typeof Map.prototype.forEach &&
	      "function" === typeof Set &&
	      null != Set.prototype &&
	      "function" === typeof Set.prototype.clear &&
	      "function" === typeof Set.prototype.forEach) ||
	      console.error(
	        "React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://react.dev/link/react-polyfills"
	      );
	    ReactDOMSharedInternals.findDOMNode = function (componentOrElement) {
	      var fiber = componentOrElement._reactInternals;
	      if (undefined === fiber) {
	        if ("function" === typeof componentOrElement.render)
	          throw Error("Unable to find node on an unmounted component.");
	        componentOrElement = Object.keys(componentOrElement).join(",");
	        throw Error(
	          "Argument appears to not be a ReactComponent. Keys: " +
	            componentOrElement
	        );
	      }
	      componentOrElement = findCurrentFiberUsingSlowPath(fiber);
	      componentOrElement =
	        null !== componentOrElement
	          ? findCurrentHostFiberImpl(componentOrElement)
	          : null;
	      componentOrElement =
	        null === componentOrElement ? null : componentOrElement.stateNode;
	      return componentOrElement;
	    };
	    if (
	      !(function () {
	        var internals = {
	          bundleType: 1,
	          version: "19.0.0",
	          rendererPackageName: "react-dom",
	          currentDispatcherRef: ReactSharedInternals,
	          findFiberByHostInstance: getClosestInstanceFromNode,
	          reconcilerVersion: "19.0.0"
	        };
	        internals.overrideHookState = overrideHookState;
	        internals.overrideHookStateDeletePath = overrideHookStateDeletePath;
	        internals.overrideHookStateRenamePath = overrideHookStateRenamePath;
	        internals.overrideProps = overrideProps;
	        internals.overridePropsDeletePath = overridePropsDeletePath;
	        internals.overridePropsRenamePath = overridePropsRenamePath;
	        internals.scheduleUpdate = scheduleUpdate;
	        internals.setErrorHandler = setErrorHandler;
	        internals.setSuspenseHandler = setSuspenseHandler;
	        internals.scheduleRefresh = scheduleRefresh;
	        internals.scheduleRoot = scheduleRoot;
	        internals.setRefreshHandler = setRefreshHandler;
	        internals.getCurrentFiber = getCurrentFiberForDevTools;
	        internals.getLaneLabelMap = getLaneLabelMap;
	        internals.injectProfilingHooks = injectProfilingHooks;
	        return injectInternals(internals);
	      })() &&
	      canUseDOM &&
	      window.top === window.self &&
	      ((-1 < navigator.userAgent.indexOf("Chrome") &&
	        -1 === navigator.userAgent.indexOf("Edge")) ||
	        -1 < navigator.userAgent.indexOf("Firefox"))
	    ) {
	      var protocol = window.location.protocol;
	      /^(https?|file):$/.test(protocol) &&
	        console.info(
	          "%cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools" +
	            ("file:" === protocol
	              ? "\nYou might need to use a local HTTP server (instead of file://): https://react.dev/link/react-devtools-faq"
	              : ""),
	          "font-weight:bold"
	        );
	    }
	    reactDomClient_development.createRoot = function (container, options) {
	      if (!isValidContainer(container))
	        throw Error("Target container is not a DOM element.");
	      warnIfReactDOMContainerInDEV(container);
	      var isStrictMode = false,
	        identifierPrefix = "",
	        onUncaughtError = defaultOnUncaughtError,
	        onCaughtError = defaultOnCaughtError,
	        onRecoverableError = defaultOnRecoverableError,
	        transitionCallbacks = null;
	      null !== options &&
	        undefined !== options &&
	        (options.hydrate
	          ? console.warn(
	              "hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead."
	            )
	          : "object" === typeof options &&
	            null !== options &&
	            options.$$typeof === REACT_ELEMENT_TYPE &&
	            console.error(
	              "You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);"
	            ),
	        true === options.unstable_strictMode && (isStrictMode = true),
	        undefined !== options.identifierPrefix &&
	          (identifierPrefix = options.identifierPrefix),
	        undefined !== options.onUncaughtError &&
	          (onUncaughtError = options.onUncaughtError),
	        undefined !== options.onCaughtError &&
	          (onCaughtError = options.onCaughtError),
	        undefined !== options.onRecoverableError &&
	          (onRecoverableError = options.onRecoverableError),
	        undefined !== options.unstable_transitionCallbacks &&
	          (transitionCallbacks = options.unstable_transitionCallbacks));
	      options = createFiberRoot(
	        container,
	        1,
	        false,
	        null,
	        null,
	        isStrictMode,
	        identifierPrefix,
	        onUncaughtError,
	        onCaughtError,
	        onRecoverableError,
	        transitionCallbacks,
	        null
	      );
	      container[internalContainerInstanceKey] = options.current;
	      listenToAllSupportedEvents(
	        8 === container.nodeType ? container.parentNode : container
	      );
	      return new ReactDOMRoot(options);
	    };
	    reactDomClient_development.hydrateRoot = function (container, initialChildren, options) {
	      if (!isValidContainer(container))
	        throw Error("Target container is not a DOM element.");
	      warnIfReactDOMContainerInDEV(container);
	      undefined === initialChildren &&
	        console.error(
	          "Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)"
	        );
	      var isStrictMode = false,
	        identifierPrefix = "",
	        onUncaughtError = defaultOnUncaughtError,
	        onCaughtError = defaultOnCaughtError,
	        onRecoverableError = defaultOnRecoverableError,
	        transitionCallbacks = null,
	        formState = null;
	      null !== options &&
	        undefined !== options &&
	        (true === options.unstable_strictMode && (isStrictMode = true),
	        undefined !== options.identifierPrefix &&
	          (identifierPrefix = options.identifierPrefix),
	        undefined !== options.onUncaughtError &&
	          (onUncaughtError = options.onUncaughtError),
	        undefined !== options.onCaughtError &&
	          (onCaughtError = options.onCaughtError),
	        undefined !== options.onRecoverableError &&
	          (onRecoverableError = options.onRecoverableError),
	        undefined !== options.unstable_transitionCallbacks &&
	          (transitionCallbacks = options.unstable_transitionCallbacks),
	        undefined !== options.formState && (formState = options.formState));
	      initialChildren = createFiberRoot(
	        container,
	        1,
	        true,
	        initialChildren,
	        null != options ? options : null,
	        isStrictMode,
	        identifierPrefix,
	        onUncaughtError,
	        onCaughtError,
	        onRecoverableError,
	        transitionCallbacks,
	        formState
	      );
	      initialChildren.context = getContextForSubtree(null);
	      options = initialChildren.current;
	      isStrictMode = requestUpdateLane(options);
	      identifierPrefix = createUpdate(isStrictMode);
	      identifierPrefix.callback = null;
	      enqueueUpdate(options, identifierPrefix, isStrictMode);
	      initialChildren.current.lanes = isStrictMode;
	      markRootUpdated$1(initialChildren, isStrictMode);
	      ensureRootIsScheduled(initialChildren);
	      container[internalContainerInstanceKey] = initialChildren.current;
	      listenToAllSupportedEvents(container);
	      return new ReactDOMHydrationRoot(initialChildren);
	    };
	    reactDomClient_development.version = "19.0.0";
	    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
	      "function" ===
	        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
	      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
	  })();
	return reactDomClient_development;
}

var hasRequiredClient;

function requireClient () {
	if (hasRequiredClient) return client.exports;
	hasRequiredClient = 1;

	function checkDCE() {
	  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	  if (
	    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
	    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
	  ) {
	    return;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // This branch is unreachable because this function is only called
	    // in production, but the condition is true only in development.
	    // Therefore if the branch is still here, dead code elimination wasn't
	    // properly applied.
	    // Don't change the message. React DevTools relies on it. Also make sure
	    // this message doesn't occur elsewhere in this function, or it will cause
	    // a false positive.
	    throw new Error('^_^');
	  }
	  try {
	    // Verify that the code above has been dead code eliminated (DCE'd).
	    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
	  } catch (err) {
	    // DevTools shouldn't crash React, no matter what.
	    // We should still report in case we break this code.
	    console.error(err);
	  }
	}

	if (process.env.NODE_ENV === 'production') {
	  // DCE check should happen before ReactDOM bundle executes so that
	  // DevTools can report bad minification during injection.
	  checkDCE();
	  client.exports = requireReactDomClient_production();
	} else {
	  client.exports = requireReactDomClient_development();
	}
	return client.exports;
}

var clientExports = requireClient();

var jsxRuntime = {exports: {}};

var reactJsxRuntime_production = {};

/**
 * @license React
 * react-jsx-runtime.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactJsxRuntime_production;

function requireReactJsxRuntime_production () {
	if (hasRequiredReactJsxRuntime_production) return reactJsxRuntime_production;
	hasRequiredReactJsxRuntime_production = 1;
	var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
	  REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
	function jsxProd(type, config, maybeKey) {
	  var key = null;
	  undefined !== maybeKey && (key = "" + maybeKey);
	  undefined !== config.key && (key = "" + config.key);
	  if ("key" in config) {
	    maybeKey = {};
	    for (var propName in config)
	      "key" !== propName && (maybeKey[propName] = config[propName]);
	  } else maybeKey = config;
	  config = maybeKey.ref;
	  return {
	    $$typeof: REACT_ELEMENT_TYPE,
	    type: type,
	    key: key,
	    ref: undefined !== config ? config : null,
	    props: maybeKey
	  };
	}
	reactJsxRuntime_production.Fragment = REACT_FRAGMENT_TYPE;
	reactJsxRuntime_production.jsx = jsxProd;
	reactJsxRuntime_production.jsxs = jsxProd;
	return reactJsxRuntime_production;
}

var reactJsxRuntime_development = {};

/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactJsxRuntime_development;

function requireReactJsxRuntime_development () {
	if (hasRequiredReactJsxRuntime_development) return reactJsxRuntime_development;
	hasRequiredReactJsxRuntime_development = 1;
	"production" !== process.env.NODE_ENV &&
	  (function () {
	    function getComponentNameFromType(type) {
	      if (null == type) return null;
	      if ("function" === typeof type)
	        return type.$$typeof === REACT_CLIENT_REFERENCE$2
	          ? null
	          : type.displayName || type.name || null;
	      if ("string" === typeof type) return type;
	      switch (type) {
	        case REACT_FRAGMENT_TYPE:
	          return "Fragment";
	        case REACT_PORTAL_TYPE:
	          return "Portal";
	        case REACT_PROFILER_TYPE:
	          return "Profiler";
	        case REACT_STRICT_MODE_TYPE:
	          return "StrictMode";
	        case REACT_SUSPENSE_TYPE:
	          return "Suspense";
	        case REACT_SUSPENSE_LIST_TYPE:
	          return "SuspenseList";
	      }
	      if ("object" === typeof type)
	        switch (
	          ("number" === typeof type.tag &&
	            console.error(
	              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
	            ),
	          type.$$typeof)
	        ) {
	          case REACT_CONTEXT_TYPE:
	            return (type.displayName || "Context") + ".Provider";
	          case REACT_CONSUMER_TYPE:
	            return (type._context.displayName || "Context") + ".Consumer";
	          case REACT_FORWARD_REF_TYPE:
	            var innerType = type.render;
	            type = type.displayName;
	            type ||
	              ((type = innerType.displayName || innerType.name || ""),
	              (type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef"));
	            return type;
	          case REACT_MEMO_TYPE:
	            return (
	              (innerType = type.displayName || null),
	              null !== innerType
	                ? innerType
	                : getComponentNameFromType(type.type) || "Memo"
	            );
	          case REACT_LAZY_TYPE:
	            innerType = type._payload;
	            type = type._init;
	            try {
	              return getComponentNameFromType(type(innerType));
	            } catch (x) {}
	        }
	      return null;
	    }
	    function testStringCoercion(value) {
	      return "" + value;
	    }
	    function checkKeyStringCoercion(value) {
	      try {
	        testStringCoercion(value);
	        var JSCompiler_inline_result = !1;
	      } catch (e) {
	        JSCompiler_inline_result = true;
	      }
	      if (JSCompiler_inline_result) {
	        JSCompiler_inline_result = console;
	        var JSCompiler_temp_const = JSCompiler_inline_result.error;
	        var JSCompiler_inline_result$jscomp$0 =
	          ("function" === typeof Symbol &&
	            Symbol.toStringTag &&
	            value[Symbol.toStringTag]) ||
	          value.constructor.name ||
	          "Object";
	        JSCompiler_temp_const.call(
	          JSCompiler_inline_result,
	          "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
	          JSCompiler_inline_result$jscomp$0
	        );
	        return testStringCoercion(value);
	      }
	    }
	    function disabledLog() {}
	    function disableLogs() {
	      if (0 === disabledDepth) {
	        prevLog = console.log;
	        prevInfo = console.info;
	        prevWarn = console.warn;
	        prevError = console.error;
	        prevGroup = console.group;
	        prevGroupCollapsed = console.groupCollapsed;
	        prevGroupEnd = console.groupEnd;
	        var props = {
	          configurable: true,
	          enumerable: true,
	          value: disabledLog,
	          writable: true
	        };
	        Object.defineProperties(console, {
	          info: props,
	          log: props,
	          warn: props,
	          error: props,
	          group: props,
	          groupCollapsed: props,
	          groupEnd: props
	        });
	      }
	      disabledDepth++;
	    }
	    function reenableLogs() {
	      disabledDepth--;
	      if (0 === disabledDepth) {
	        var props = { configurable: true, enumerable: true, writable: true };
	        Object.defineProperties(console, {
	          log: assign({}, props, { value: prevLog }),
	          info: assign({}, props, { value: prevInfo }),
	          warn: assign({}, props, { value: prevWarn }),
	          error: assign({}, props, { value: prevError }),
	          group: assign({}, props, { value: prevGroup }),
	          groupCollapsed: assign({}, props, { value: prevGroupCollapsed }),
	          groupEnd: assign({}, props, { value: prevGroupEnd })
	        });
	      }
	      0 > disabledDepth &&
	        console.error(
	          "disabledDepth fell below zero. This is a bug in React. Please file an issue."
	        );
	    }
	    function describeBuiltInComponentFrame(name) {
	      if (undefined === prefix)
	        try {
	          throw Error();
	        } catch (x) {
	          var match = x.stack.trim().match(/\n( *(at )?)/);
	          prefix = (match && match[1]) || "";
	          suffix =
	            -1 < x.stack.indexOf("\n    at")
	              ? " (<anonymous>)"
	              : -1 < x.stack.indexOf("@")
	                ? "@unknown:0:0"
	                : "";
	        }
	      return "\n" + prefix + name + suffix;
	    }
	    function describeNativeComponentFrame(fn, construct) {
	      if (!fn || reentry) return "";
	      var frame = componentFrameCache.get(fn);
	      if (undefined !== frame) return frame;
	      reentry = true;
	      frame = Error.prepareStackTrace;
	      Error.prepareStackTrace = undefined;
	      var previousDispatcher = null;
	      previousDispatcher = ReactSharedInternals.H;
	      ReactSharedInternals.H = null;
	      disableLogs();
	      try {
	        var RunInRootFrame = {
	          DetermineComponentFrameRoot: function () {
	            try {
	              if (construct) {
	                var Fake = function () {
	                  throw Error();
	                };
	                Object.defineProperty(Fake.prototype, "props", {
	                  set: function () {
	                    throw Error();
	                  }
	                });
	                if ("object" === typeof Reflect && Reflect.construct) {
	                  try {
	                    Reflect.construct(Fake, []);
	                  } catch (x) {
	                    var control = x;
	                  }
	                  Reflect.construct(fn, [], Fake);
	                } else {
	                  try {
	                    Fake.call();
	                  } catch (x$0) {
	                    control = x$0;
	                  }
	                  fn.call(Fake.prototype);
	                }
	              } else {
	                try {
	                  throw Error();
	                } catch (x$1) {
	                  control = x$1;
	                }
	                (Fake = fn()) &&
	                  "function" === typeof Fake.catch &&
	                  Fake.catch(function () {});
	              }
	            } catch (sample) {
	              if (sample && control && "string" === typeof sample.stack)
	                return [sample.stack, control.stack];
	            }
	            return [null, null];
	          }
	        };
	        RunInRootFrame.DetermineComponentFrameRoot.displayName =
	          "DetermineComponentFrameRoot";
	        var namePropDescriptor = Object.getOwnPropertyDescriptor(
	          RunInRootFrame.DetermineComponentFrameRoot,
	          "name"
	        );
	        namePropDescriptor &&
	          namePropDescriptor.configurable &&
	          Object.defineProperty(
	            RunInRootFrame.DetermineComponentFrameRoot,
	            "name",
	            { value: "DetermineComponentFrameRoot" }
	          );
	        var _RunInRootFrame$Deter =
	            RunInRootFrame.DetermineComponentFrameRoot(),
	          sampleStack = _RunInRootFrame$Deter[0],
	          controlStack = _RunInRootFrame$Deter[1];
	        if (sampleStack && controlStack) {
	          var sampleLines = sampleStack.split("\n"),
	            controlLines = controlStack.split("\n");
	          for (
	            _RunInRootFrame$Deter = namePropDescriptor = 0;
	            namePropDescriptor < sampleLines.length &&
	            !sampleLines[namePropDescriptor].includes(
	              "DetermineComponentFrameRoot"
	            );

	          )
	            namePropDescriptor++;
	          for (
	            ;
	            _RunInRootFrame$Deter < controlLines.length &&
	            !controlLines[_RunInRootFrame$Deter].includes(
	              "DetermineComponentFrameRoot"
	            );

	          )
	            _RunInRootFrame$Deter++;
	          if (
	            namePropDescriptor === sampleLines.length ||
	            _RunInRootFrame$Deter === controlLines.length
	          )
	            for (
	              namePropDescriptor = sampleLines.length - 1,
	                _RunInRootFrame$Deter = controlLines.length - 1;
	              1 <= namePropDescriptor &&
	              0 <= _RunInRootFrame$Deter &&
	              sampleLines[namePropDescriptor] !==
	                controlLines[_RunInRootFrame$Deter];

	            )
	              _RunInRootFrame$Deter--;
	          for (
	            ;
	            1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter;
	            namePropDescriptor--, _RunInRootFrame$Deter--
	          )
	            if (
	              sampleLines[namePropDescriptor] !==
	              controlLines[_RunInRootFrame$Deter]
	            ) {
	              if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {
	                do
	                  if (
	                    (namePropDescriptor--,
	                    _RunInRootFrame$Deter--,
	                    0 > _RunInRootFrame$Deter ||
	                      sampleLines[namePropDescriptor] !==
	                        controlLines[_RunInRootFrame$Deter])
	                  ) {
	                    var _frame =
	                      "\n" +
	                      sampleLines[namePropDescriptor].replace(
	                        " at new ",
	                        " at "
	                      );
	                    fn.displayName &&
	                      _frame.includes("<anonymous>") &&
	                      (_frame = _frame.replace("<anonymous>", fn.displayName));
	                    "function" === typeof fn &&
	                      componentFrameCache.set(fn, _frame);
	                    return _frame;
	                  }
	                while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);
	              }
	              break;
	            }
	        }
	      } finally {
	        (reentry = false),
	          (ReactSharedInternals.H = previousDispatcher),
	          reenableLogs(),
	          (Error.prepareStackTrace = frame);
	      }
	      sampleLines = (sampleLines = fn ? fn.displayName || fn.name : "")
	        ? describeBuiltInComponentFrame(sampleLines)
	        : "";
	      "function" === typeof fn && componentFrameCache.set(fn, sampleLines);
	      return sampleLines;
	    }
	    function describeUnknownElementTypeFrameInDEV(type) {
	      if (null == type) return "";
	      if ("function" === typeof type) {
	        var prototype = type.prototype;
	        return describeNativeComponentFrame(
	          type,
	          !(!prototype || !prototype.isReactComponent)
	        );
	      }
	      if ("string" === typeof type) return describeBuiltInComponentFrame(type);
	      switch (type) {
	        case REACT_SUSPENSE_TYPE:
	          return describeBuiltInComponentFrame("Suspense");
	        case REACT_SUSPENSE_LIST_TYPE:
	          return describeBuiltInComponentFrame("SuspenseList");
	      }
	      if ("object" === typeof type)
	        switch (type.$$typeof) {
	          case REACT_FORWARD_REF_TYPE:
	            return (type = describeNativeComponentFrame(type.render, false)), type;
	          case REACT_MEMO_TYPE:
	            return describeUnknownElementTypeFrameInDEV(type.type);
	          case REACT_LAZY_TYPE:
	            prototype = type._payload;
	            type = type._init;
	            try {
	              return describeUnknownElementTypeFrameInDEV(type(prototype));
	            } catch (x) {}
	        }
	      return "";
	    }
	    function getOwner() {
	      var dispatcher = ReactSharedInternals.A;
	      return null === dispatcher ? null : dispatcher.getOwner();
	    }
	    function hasValidKey(config) {
	      if (hasOwnProperty.call(config, "key")) {
	        var getter = Object.getOwnPropertyDescriptor(config, "key").get;
	        if (getter && getter.isReactWarning) return false;
	      }
	      return undefined !== config.key;
	    }
	    function defineKeyPropWarningGetter(props, displayName) {
	      function warnAboutAccessingKey() {
	        specialPropKeyWarningShown ||
	          ((specialPropKeyWarningShown = true),
	          console.error(
	            "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
	            displayName
	          ));
	      }
	      warnAboutAccessingKey.isReactWarning = true;
	      Object.defineProperty(props, "key", {
	        get: warnAboutAccessingKey,
	        configurable: true
	      });
	    }
	    function elementRefGetterWithDeprecationWarning() {
	      var componentName = getComponentNameFromType(this.type);
	      didWarnAboutElementRef[componentName] ||
	        ((didWarnAboutElementRef[componentName] = true),
	        console.error(
	          "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
	        ));
	      componentName = this.props.ref;
	      return undefined !== componentName ? componentName : null;
	    }
	    function ReactElement(type, key, self, source, owner, props) {
	      self = props.ref;
	      type = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type: type,
	        key: key,
	        props: props,
	        _owner: owner
	      };
	      null !== (undefined !== self ? self : null)
	        ? Object.defineProperty(type, "ref", {
	            enumerable: false,
	            get: elementRefGetterWithDeprecationWarning
	          })
	        : Object.defineProperty(type, "ref", { enumerable: false, value: null });
	      type._store = {};
	      Object.defineProperty(type._store, "validated", {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: 0
	      });
	      Object.defineProperty(type, "_debugInfo", {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: null
	      });
	      Object.freeze && (Object.freeze(type.props), Object.freeze(type));
	      return type;
	    }
	    function jsxDEVImpl(
	      type,
	      config,
	      maybeKey,
	      isStaticChildren,
	      source,
	      self
	    ) {
	      if (
	        "string" === typeof type ||
	        "function" === typeof type ||
	        type === REACT_FRAGMENT_TYPE ||
	        type === REACT_PROFILER_TYPE ||
	        type === REACT_STRICT_MODE_TYPE ||
	        type === REACT_SUSPENSE_TYPE ||
	        type === REACT_SUSPENSE_LIST_TYPE ||
	        type === REACT_OFFSCREEN_TYPE ||
	        ("object" === typeof type &&
	          null !== type &&
	          (type.$$typeof === REACT_LAZY_TYPE ||
	            type.$$typeof === REACT_MEMO_TYPE ||
	            type.$$typeof === REACT_CONTEXT_TYPE ||
	            type.$$typeof === REACT_CONSUMER_TYPE ||
	            type.$$typeof === REACT_FORWARD_REF_TYPE ||
	            type.$$typeof === REACT_CLIENT_REFERENCE$1 ||
	            undefined !== type.getModuleId))
	      ) {
	        var children = config.children;
	        if (undefined !== children)
	          if (isStaticChildren)
	            if (isArrayImpl(children)) {
	              for (
	                isStaticChildren = 0;
	                isStaticChildren < children.length;
	                isStaticChildren++
	              )
	                validateChildKeys(children[isStaticChildren], type);
	              Object.freeze && Object.freeze(children);
	            } else
	              console.error(
	                "React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead."
	              );
	          else validateChildKeys(children, type);
	      } else {
	        children = "";
	        if (
	          undefined === type ||
	          ("object" === typeof type &&
	            null !== type &&
	            0 === Object.keys(type).length)
	        )
	          children +=
	            " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
	        null === type
	          ? (isStaticChildren = "null")
	          : isArrayImpl(type)
	            ? (isStaticChildren = "array")
	            : undefined !== type && type.$$typeof === REACT_ELEMENT_TYPE
	              ? ((isStaticChildren =
	                  "<" +
	                  (getComponentNameFromType(type.type) || "Unknown") +
	                  " />"),
	                (children =
	                  " Did you accidentally export a JSX literal instead of a component?"))
	              : (isStaticChildren = typeof type);
	        console.error(
	          "React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",
	          isStaticChildren,
	          children
	        );
	      }
	      if (hasOwnProperty.call(config, "key")) {
	        children = getComponentNameFromType(type);
	        var keys = Object.keys(config).filter(function (k) {
	          return "key" !== k;
	        });
	        isStaticChildren =
	          0 < keys.length
	            ? "{key: someKey, " + keys.join(": ..., ") + ": ...}"
	            : "{key: someKey}";
	        didWarnAboutKeySpread[children + isStaticChildren] ||
	          ((keys =
	            0 < keys.length ? "{" + keys.join(": ..., ") + ": ...}" : "{}"),
	          console.error(
	            'A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />',
	            isStaticChildren,
	            children,
	            keys,
	            children
	          ),
	          (didWarnAboutKeySpread[children + isStaticChildren] = true));
	      }
	      children = null;
	      undefined !== maybeKey &&
	        (checkKeyStringCoercion(maybeKey), (children = "" + maybeKey));
	      hasValidKey(config) &&
	        (checkKeyStringCoercion(config.key), (children = "" + config.key));
	      if ("key" in config) {
	        maybeKey = {};
	        for (var propName in config)
	          "key" !== propName && (maybeKey[propName] = config[propName]);
	      } else maybeKey = config;
	      children &&
	        defineKeyPropWarningGetter(
	          maybeKey,
	          "function" === typeof type
	            ? type.displayName || type.name || "Unknown"
	            : type
	        );
	      return ReactElement(type, children, self, source, getOwner(), maybeKey);
	    }
	    function validateChildKeys(node, parentType) {
	      if (
	        "object" === typeof node &&
	        node &&
	        node.$$typeof !== REACT_CLIENT_REFERENCE
	      )
	        if (isArrayImpl(node))
	          for (var i = 0; i < node.length; i++) {
	            var child = node[i];
	            isValidElement(child) && validateExplicitKey(child, parentType);
	          }
	        else if (isValidElement(node))
	          node._store && (node._store.validated = 1);
	        else if (
	          (null === node || "object" !== typeof node
	            ? (i = null)
	            : ((i =
	                (MAYBE_ITERATOR_SYMBOL && node[MAYBE_ITERATOR_SYMBOL]) ||
	                node["@@iterator"]),
	              (i = "function" === typeof i ? i : null)),
	          "function" === typeof i &&
	            i !== node.entries &&
	            ((i = i.call(node)), i !== node))
	        )
	          for (; !(node = i.next()).done; )
	            isValidElement(node.value) &&
	              validateExplicitKey(node.value, parentType);
	    }
	    function isValidElement(object) {
	      return (
	        "object" === typeof object &&
	        null !== object &&
	        object.$$typeof === REACT_ELEMENT_TYPE
	      );
	    }
	    function validateExplicitKey(element, parentType) {
	      if (
	        element._store &&
	        !element._store.validated &&
	        null == element.key &&
	        ((element._store.validated = 1),
	        (parentType = getCurrentComponentErrorInfo(parentType)),
	        !ownerHasKeyUseWarning[parentType])
	      ) {
	        ownerHasKeyUseWarning[parentType] = true;
	        var childOwner = "";
	        element &&
	          null != element._owner &&
	          element._owner !== getOwner() &&
	          ((childOwner = null),
	          "number" === typeof element._owner.tag
	            ? (childOwner = getComponentNameFromType(element._owner.type))
	            : "string" === typeof element._owner.name &&
	              (childOwner = element._owner.name),
	          (childOwner = " It was passed a child from " + childOwner + "."));
	        var prevGetCurrentStack = ReactSharedInternals.getCurrentStack;
	        ReactSharedInternals.getCurrentStack = function () {
	          var stack = describeUnknownElementTypeFrameInDEV(element.type);
	          prevGetCurrentStack && (stack += prevGetCurrentStack() || "");
	          return stack;
	        };
	        console.error(
	          'Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.',
	          parentType,
	          childOwner
	        );
	        ReactSharedInternals.getCurrentStack = prevGetCurrentStack;
	      }
	    }
	    function getCurrentComponentErrorInfo(parentType) {
	      var info = "",
	        owner = getOwner();
	      owner &&
	        (owner = getComponentNameFromType(owner.type)) &&
	        (info = "\n\nCheck the render method of `" + owner + "`.");
	      info ||
	        ((parentType = getComponentNameFromType(parentType)) &&
	          (info =
	            "\n\nCheck the top-level render call using <" + parentType + ">."));
	      return info;
	    }
	    var React = requireReact(),
	      REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
	      REACT_PORTAL_TYPE = Symbol.for("react.portal"),
	      REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
	      REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
	      REACT_PROFILER_TYPE = Symbol.for("react.profiler");
	    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
	      REACT_CONTEXT_TYPE = Symbol.for("react.context"),
	      REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
	      REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
	      REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
	      REACT_MEMO_TYPE = Symbol.for("react.memo"),
	      REACT_LAZY_TYPE = Symbol.for("react.lazy"),
	      REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"),
	      MAYBE_ITERATOR_SYMBOL = Symbol.iterator,
	      REACT_CLIENT_REFERENCE$2 = Symbol.for("react.client.reference"),
	      ReactSharedInternals =
	        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
	      hasOwnProperty = Object.prototype.hasOwnProperty,
	      assign = Object.assign,
	      REACT_CLIENT_REFERENCE$1 = Symbol.for("react.client.reference"),
	      isArrayImpl = Array.isArray,
	      disabledDepth = 0,
	      prevLog,
	      prevInfo,
	      prevWarn,
	      prevError,
	      prevGroup,
	      prevGroupCollapsed,
	      prevGroupEnd;
	    disabledLog.__reactDisabledLog = true;
	    var prefix,
	      suffix,
	      reentry = false;
	    var componentFrameCache = new (
	      "function" === typeof WeakMap ? WeakMap : Map
	    )();
	    var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"),
	      specialPropKeyWarningShown;
	    var didWarnAboutElementRef = {};
	    var didWarnAboutKeySpread = {},
	      ownerHasKeyUseWarning = {};
	    reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
	    reactJsxRuntime_development.jsx = function (type, config, maybeKey, source, self) {
	      return jsxDEVImpl(type, config, maybeKey, false, source, self);
	    };
	    reactJsxRuntime_development.jsxs = function (type, config, maybeKey, source, self) {
	      return jsxDEVImpl(type, config, maybeKey, true, source, self);
	    };
	  })();
	return reactJsxRuntime_development;
}

var hasRequiredJsxRuntime;

function requireJsxRuntime () {
	if (hasRequiredJsxRuntime) return jsxRuntime.exports;
	hasRequiredJsxRuntime = 1;

	if (process.env.NODE_ENV === 'production') {
	  jsxRuntime.exports = requireReactJsxRuntime_production();
	} else {
	  jsxRuntime.exports = requireReactJsxRuntime_development();
	}
	return jsxRuntime.exports;
}

var jsxRuntimeExports = requireJsxRuntime();

function chainPropTypes(propType1, propType2) {
  if (process.env.NODE_ENV === 'production') {
    return () => null;
  }
  return function validate(...args) {
    return propType1(...args) || propType2(...args);
  };
}

// https://github.com/sindresorhus/is-plain-obj/blob/main/index.js
function isPlainObject(item) {
  if (typeof item !== 'object' || item === null) {
    return false;
  }
  const prototype = Object.getPrototypeOf(item);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);
}
function deepClone(source) {
  if (/*#__PURE__*/reactExports.isValidElement(source) || !isPlainObject(source)) {
    return source;
  }
  const output = {};
  Object.keys(source).forEach(key => {
    output[key] = deepClone(source[key]);
  });
  return output;
}

/**
 * Merge objects deeply.
 * It will shallow copy React elements.
 *
 * If `options.clone` is set to `false` the source object will be merged directly into the target object.
 *
 * @example
 * ```ts
 * deepmerge({ a: { b: 1 }, d: 2 }, { a: { c: 2 }, d: 4 });
 * // => { a: { b: 1, c: 2 }, d: 4 }
 * ````
 *
 * @param target The target object.
 * @param source The source object.
 * @param options The merge options.
 * @param options.clone Set to `false` to merge the source object directly into the target object.
 * @returns The merged object.
 */
function deepmerge(target, source, options = {
  clone: true
}) {
  const output = options.clone ? {
    ...target
  } : target;
  if (isPlainObject(target) && isPlainObject(source)) {
    Object.keys(source).forEach(key => {
      if (/*#__PURE__*/reactExports.isValidElement(source[key])) {
        output[key] = source[key];
      } else if (isPlainObject(source[key]) &&
      // Avoid prototype pollution
      Object.prototype.hasOwnProperty.call(target, key) && isPlainObject(target[key])) {
        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.
        output[key] = deepmerge(target[key], source[key], options);
      } else if (options.clone) {
        output[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];
      } else {
        output[key] = source[key];
      }
    });
  }
  return output;
}

var propTypes = {exports: {}};

var reactIs$1 = {exports: {}};

var reactIs_production_min = {};

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_production_min;

function requireReactIs_production_min () {
	if (hasRequiredReactIs_production_min) return reactIs_production_min;
	hasRequiredReactIs_production_min = 1;
var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
	Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
	function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k;reactIs_production_min.ContextProvider=h;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d;
	reactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A;reactIs_production_min.isContextConsumer=function(a){return z(a)===k};reactIs_production_min.isContextProvider=function(a){return z(a)===h};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};
	reactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};
	reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min.typeOf=z;
	return reactIs_production_min;
}

var reactIs_development$1 = {};

/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_development$1;

function requireReactIs_development$1 () {
	if (hasRequiredReactIs_development$1) return reactIs_development$1;
	hasRequiredReactIs_development$1 = 1;



	if (process.env.NODE_ENV !== "production") {
	  (function() {

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	reactIs_development$1.AsyncMode = AsyncMode;
	reactIs_development$1.ConcurrentMode = ConcurrentMode;
	reactIs_development$1.ContextConsumer = ContextConsumer;
	reactIs_development$1.ContextProvider = ContextProvider;
	reactIs_development$1.Element = Element;
	reactIs_development$1.ForwardRef = ForwardRef;
	reactIs_development$1.Fragment = Fragment;
	reactIs_development$1.Lazy = Lazy;
	reactIs_development$1.Memo = Memo;
	reactIs_development$1.Portal = Portal;
	reactIs_development$1.Profiler = Profiler;
	reactIs_development$1.StrictMode = StrictMode;
	reactIs_development$1.Suspense = Suspense;
	reactIs_development$1.isAsyncMode = isAsyncMode;
	reactIs_development$1.isConcurrentMode = isConcurrentMode;
	reactIs_development$1.isContextConsumer = isContextConsumer;
	reactIs_development$1.isContextProvider = isContextProvider;
	reactIs_development$1.isElement = isElement;
	reactIs_development$1.isForwardRef = isForwardRef;
	reactIs_development$1.isFragment = isFragment;
	reactIs_development$1.isLazy = isLazy;
	reactIs_development$1.isMemo = isMemo;
	reactIs_development$1.isPortal = isPortal;
	reactIs_development$1.isProfiler = isProfiler;
	reactIs_development$1.isStrictMode = isStrictMode;
	reactIs_development$1.isSuspense = isSuspense;
	reactIs_development$1.isValidElementType = isValidElementType;
	reactIs_development$1.typeOf = typeOf;
	  })();
	}
	return reactIs_development$1;
}

var hasRequiredReactIs$1;

function requireReactIs$1 () {
	if (hasRequiredReactIs$1) return reactIs$1.exports;
	hasRequiredReactIs$1 = 1;

	if (process.env.NODE_ENV === 'production') {
	  reactIs$1.exports = requireReactIs_production_min();
	} else {
	  reactIs$1.exports = requireReactIs_development$1();
	}
	return reactIs$1.exports;
}

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

var objectAssign;
var hasRequiredObjectAssign;

function requireObjectAssign () {
	if (hasRequiredObjectAssign) return objectAssign;
	hasRequiredObjectAssign = 1;
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};
	return objectAssign;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret_1;
var hasRequiredReactPropTypesSecret;

function requireReactPropTypesSecret () {
	if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
	hasRequiredReactPropTypesSecret = 1;

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	ReactPropTypesSecret_1 = ReactPropTypesSecret;
	return ReactPropTypesSecret_1;
}

var has;
var hasRequiredHas;

function requireHas () {
	if (hasRequiredHas) return has;
	hasRequiredHas = 1;
	has = Function.call.bind(Object.prototype.hasOwnProperty);
	return has;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var checkPropTypes_1;
var hasRequiredCheckPropTypes;

function requireCheckPropTypes () {
	if (hasRequiredCheckPropTypes) return checkPropTypes_1;
	hasRequiredCheckPropTypes = 1;

	var printWarning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  var ReactPropTypesSecret = /*@__PURE__*/ requireReactPropTypesSecret();
	  var loggedTypeFailures = {};
	  var has = /*@__PURE__*/ requireHas();

	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) { /**/ }
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +
	              'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          );
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes.resetWarningCache = function() {
	  if (process.env.NODE_ENV !== 'production') {
	    loggedTypeFailures = {};
	  }
	};

	checkPropTypes_1 = checkPropTypes;
	return checkPropTypes_1;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var factoryWithTypeCheckers;
var hasRequiredFactoryWithTypeCheckers;

function requireFactoryWithTypeCheckers () {
	if (hasRequiredFactoryWithTypeCheckers) return factoryWithTypeCheckers;
	hasRequiredFactoryWithTypeCheckers = 1;

	var ReactIs = requireReactIs$1();
	var assign = requireObjectAssign();

	var ReactPropTypesSecret = /*@__PURE__*/ requireReactPropTypesSecret();
	var has = /*@__PURE__*/ requireHas();
	var checkPropTypes = /*@__PURE__*/ requireCheckPropTypes();

	var printWarning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bigint: createPrimitiveTypeChecker('bigint'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message, data) {
	    this.message = message;
	    this.data = data && typeof data === 'object' ? data: {};
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError(
	          'Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'),
	          {expectedType: expectedType}
	        );
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!ReactIs.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (arguments.length > 1) {
	          printWarning(
	            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
	            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
	          );
	        } else {
	          printWarning('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : undefined;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var expectedTypes = [];
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
	        if (checkerResult == null) {
	          return null;
	        }
	        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
	          expectedTypes.push(checkerResult.data.expectedType);
	        }
	      }
	      var expectedTypesMessage = (expectedTypes.length > 0) ? ', expected one of type [' + expectedTypes.join(', ') + ']': '';
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function invalidValidatorError(componentName, location, propFullName, key, type) {
	    return new PropTypeError(
	      (componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' +
	      'it must be a function, usually from the `prop-types` package, but received `' + type + '`.'
	    );
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from props.
	      var allKeys = assign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (has(shapeTypes, key) && typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};
	return factoryWithTypeCheckers;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var factoryWithThrowingShims;
var hasRequiredFactoryWithThrowingShims;

function requireFactoryWithThrowingShims () {
	if (hasRequiredFactoryWithThrowingShims) return factoryWithThrowingShims;
	hasRequiredFactoryWithThrowingShims = 1;

	var ReactPropTypesSecret = /*@__PURE__*/ requireReactPropTypesSecret();

	function emptyFunction() {}
	function emptyFunctionWithReset() {}
	emptyFunctionWithReset.resetWarningCache = emptyFunction;

	factoryWithThrowingShims = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  }	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  }	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bigint: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,

	    checkPropTypes: emptyFunctionWithReset,
	    resetWarningCache: emptyFunction
	  };

	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};
	return factoryWithThrowingShims;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredPropTypes;

function requirePropTypes () {
	if (hasRequiredPropTypes) return propTypes.exports;
	hasRequiredPropTypes = 1;
	if (process.env.NODE_ENV !== 'production') {
	  var ReactIs = requireReactIs$1();

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  propTypes.exports = /*@__PURE__*/ requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  propTypes.exports = /*@__PURE__*/ requireFactoryWithThrowingShims()();
	}
	return propTypes.exports;
}

var propTypesExports = /*@__PURE__*/ requirePropTypes();
var PropTypes = /*@__PURE__*/getDefaultExportFromCjs(propTypesExports);

/**
 * WARNING: Don't import this directly. It's imported by the code generated by
 * `@mui/interal-babel-plugin-minify-errors`. Make sure to always use string literals in `Error`
 * constructors to ensure the plugin works as expected. Supported patterns include:
 *   throw new Error('My message');
 *   throw new Error(`My message: ${foo}`);
 *   throw new Error(`My message: ${foo}` + 'another string');
 *   ...
 * @param {number} code
 */
function formatMuiErrorMessage(code, ...args) {
  const url = new URL(`https://mui.com/production-error/?code=${code}`);
  args.forEach(arg => url.searchParams.append('args[]', arg));
  return `Minified MUI error #${code}; visit ${url} for the full message.`;
}

var reactIs = {exports: {}};

var reactIs_production = {};

/**
 * @license React
 * react-is.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_production;

function requireReactIs_production () {
	if (hasRequiredReactIs_production) return reactIs_production;
	hasRequiredReactIs_production = 1;
	var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
	  REACT_PORTAL_TYPE = Symbol.for("react.portal"),
	  REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
	  REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
	  REACT_PROFILER_TYPE = Symbol.for("react.profiler");
	var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
	  REACT_CONTEXT_TYPE = Symbol.for("react.context"),
	  REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
	  REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
	  REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
	  REACT_MEMO_TYPE = Symbol.for("react.memo"),
	  REACT_LAZY_TYPE = Symbol.for("react.lazy"),
	  REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"),
	  REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
	function typeOf(object) {
	  if ("object" === typeof object && null !== object) {
	    var $$typeof = object.$$typeof;
	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        switch (((object = object.type), object)) {
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	          case REACT_SUSPENSE_LIST_TYPE:
	            return object;
	          default:
	            switch (((object = object && object.$$typeof), object)) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	                return object;
	              case REACT_CONSUMER_TYPE:
	                return object;
	              default:
	                return $$typeof;
	            }
	        }
	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }
	}
	reactIs_production.ContextConsumer = REACT_CONSUMER_TYPE;
	reactIs_production.ContextProvider = REACT_CONTEXT_TYPE;
	reactIs_production.Element = REACT_ELEMENT_TYPE;
	reactIs_production.ForwardRef = REACT_FORWARD_REF_TYPE;
	reactIs_production.Fragment = REACT_FRAGMENT_TYPE;
	reactIs_production.Lazy = REACT_LAZY_TYPE;
	reactIs_production.Memo = REACT_MEMO_TYPE;
	reactIs_production.Portal = REACT_PORTAL_TYPE;
	reactIs_production.Profiler = REACT_PROFILER_TYPE;
	reactIs_production.StrictMode = REACT_STRICT_MODE_TYPE;
	reactIs_production.Suspense = REACT_SUSPENSE_TYPE;
	reactIs_production.SuspenseList = REACT_SUSPENSE_LIST_TYPE;
	reactIs_production.isContextConsumer = function (object) {
	  return typeOf(object) === REACT_CONSUMER_TYPE;
	};
	reactIs_production.isContextProvider = function (object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	};
	reactIs_production.isElement = function (object) {
	  return (
	    "object" === typeof object &&
	    null !== object &&
	    object.$$typeof === REACT_ELEMENT_TYPE
	  );
	};
	reactIs_production.isForwardRef = function (object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	};
	reactIs_production.isFragment = function (object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	};
	reactIs_production.isLazy = function (object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	};
	reactIs_production.isMemo = function (object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	};
	reactIs_production.isPortal = function (object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	};
	reactIs_production.isProfiler = function (object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	};
	reactIs_production.isStrictMode = function (object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	};
	reactIs_production.isSuspense = function (object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	};
	reactIs_production.isSuspenseList = function (object) {
	  return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
	};
	reactIs_production.isValidElementType = function (type) {
	  return "string" === typeof type ||
	    "function" === typeof type ||
	    type === REACT_FRAGMENT_TYPE ||
	    type === REACT_PROFILER_TYPE ||
	    type === REACT_STRICT_MODE_TYPE ||
	    type === REACT_SUSPENSE_TYPE ||
	    type === REACT_SUSPENSE_LIST_TYPE ||
	    type === REACT_OFFSCREEN_TYPE ||
	    ("object" === typeof type &&
	      null !== type &&
	      (type.$$typeof === REACT_LAZY_TYPE ||
	        type.$$typeof === REACT_MEMO_TYPE ||
	        type.$$typeof === REACT_CONTEXT_TYPE ||
	        type.$$typeof === REACT_CONSUMER_TYPE ||
	        type.$$typeof === REACT_FORWARD_REF_TYPE ||
	        type.$$typeof === REACT_CLIENT_REFERENCE ||
	        undefined !== type.getModuleId))
	    ? true
	    : false;
	};
	reactIs_production.typeOf = typeOf;
	return reactIs_production;
}

var reactIs_development = {};

/**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_development;

function requireReactIs_development () {
	if (hasRequiredReactIs_development) return reactIs_development;
	hasRequiredReactIs_development = 1;
	"production" !== process.env.NODE_ENV &&
	  (function () {
	    function typeOf(object) {
	      if ("object" === typeof object && null !== object) {
	        var $$typeof = object.$$typeof;
	        switch ($$typeof) {
	          case REACT_ELEMENT_TYPE:
	            switch (((object = object.type), object)) {
	              case REACT_FRAGMENT_TYPE:
	              case REACT_PROFILER_TYPE:
	              case REACT_STRICT_MODE_TYPE:
	              case REACT_SUSPENSE_TYPE:
	              case REACT_SUSPENSE_LIST_TYPE:
	                return object;
	              default:
	                switch (((object = object && object.$$typeof), object)) {
	                  case REACT_CONTEXT_TYPE:
	                  case REACT_FORWARD_REF_TYPE:
	                  case REACT_LAZY_TYPE:
	                  case REACT_MEMO_TYPE:
	                    return object;
	                  case REACT_CONSUMER_TYPE:
	                    return object;
	                  default:
	                    return $$typeof;
	                }
	            }
	          case REACT_PORTAL_TYPE:
	            return $$typeof;
	        }
	      }
	    }
	    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
	      REACT_PORTAL_TYPE = Symbol.for("react.portal"),
	      REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
	      REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
	      REACT_PROFILER_TYPE = Symbol.for("react.profiler");
	    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
	      REACT_CONTEXT_TYPE = Symbol.for("react.context"),
	      REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
	      REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
	      REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
	      REACT_MEMO_TYPE = Symbol.for("react.memo"),
	      REACT_LAZY_TYPE = Symbol.for("react.lazy"),
	      REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"),
	      REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
	    reactIs_development.ContextConsumer = REACT_CONSUMER_TYPE;
	    reactIs_development.ContextProvider = REACT_CONTEXT_TYPE;
	    reactIs_development.Element = REACT_ELEMENT_TYPE;
	    reactIs_development.ForwardRef = REACT_FORWARD_REF_TYPE;
	    reactIs_development.Fragment = REACT_FRAGMENT_TYPE;
	    reactIs_development.Lazy = REACT_LAZY_TYPE;
	    reactIs_development.Memo = REACT_MEMO_TYPE;
	    reactIs_development.Portal = REACT_PORTAL_TYPE;
	    reactIs_development.Profiler = REACT_PROFILER_TYPE;
	    reactIs_development.StrictMode = REACT_STRICT_MODE_TYPE;
	    reactIs_development.Suspense = REACT_SUSPENSE_TYPE;
	    reactIs_development.SuspenseList = REACT_SUSPENSE_LIST_TYPE;
	    reactIs_development.isContextConsumer = function (object) {
	      return typeOf(object) === REACT_CONSUMER_TYPE;
	    };
	    reactIs_development.isContextProvider = function (object) {
	      return typeOf(object) === REACT_CONTEXT_TYPE;
	    };
	    reactIs_development.isElement = function (object) {
	      return (
	        "object" === typeof object &&
	        null !== object &&
	        object.$$typeof === REACT_ELEMENT_TYPE
	      );
	    };
	    reactIs_development.isForwardRef = function (object) {
	      return typeOf(object) === REACT_FORWARD_REF_TYPE;
	    };
	    reactIs_development.isFragment = function (object) {
	      return typeOf(object) === REACT_FRAGMENT_TYPE;
	    };
	    reactIs_development.isLazy = function (object) {
	      return typeOf(object) === REACT_LAZY_TYPE;
	    };
	    reactIs_development.isMemo = function (object) {
	      return typeOf(object) === REACT_MEMO_TYPE;
	    };
	    reactIs_development.isPortal = function (object) {
	      return typeOf(object) === REACT_PORTAL_TYPE;
	    };
	    reactIs_development.isProfiler = function (object) {
	      return typeOf(object) === REACT_PROFILER_TYPE;
	    };
	    reactIs_development.isStrictMode = function (object) {
	      return typeOf(object) === REACT_STRICT_MODE_TYPE;
	    };
	    reactIs_development.isSuspense = function (object) {
	      return typeOf(object) === REACT_SUSPENSE_TYPE;
	    };
	    reactIs_development.isSuspenseList = function (object) {
	      return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
	    };
	    reactIs_development.isValidElementType = function (type) {
	      return "string" === typeof type ||
	        "function" === typeof type ||
	        type === REACT_FRAGMENT_TYPE ||
	        type === REACT_PROFILER_TYPE ||
	        type === REACT_STRICT_MODE_TYPE ||
	        type === REACT_SUSPENSE_TYPE ||
	        type === REACT_SUSPENSE_LIST_TYPE ||
	        type === REACT_OFFSCREEN_TYPE ||
	        ("object" === typeof type &&
	          null !== type &&
	          (type.$$typeof === REACT_LAZY_TYPE ||
	            type.$$typeof === REACT_MEMO_TYPE ||
	            type.$$typeof === REACT_CONTEXT_TYPE ||
	            type.$$typeof === REACT_CONSUMER_TYPE ||
	            type.$$typeof === REACT_FORWARD_REF_TYPE ||
	            type.$$typeof === REACT_CLIENT_REFERENCE ||
	            undefined !== type.getModuleId))
	        ? true
	        : false;
	    };
	    reactIs_development.typeOf = typeOf;
	  })();
	return reactIs_development;
}

var hasRequiredReactIs;

function requireReactIs () {
	if (hasRequiredReactIs) return reactIs.exports;
	hasRequiredReactIs = 1;

	if (process.env.NODE_ENV === 'production') {
	  reactIs.exports = /*@__PURE__*/ requireReactIs_production();
	} else {
	  reactIs.exports = /*@__PURE__*/ requireReactIs_development();
	}
	return reactIs.exports;
}

var reactIsExports = /*@__PURE__*/ requireReactIs();

function getFunctionComponentName(Component, fallback = '') {
  return Component.displayName || Component.name || fallback;
}
function getWrappedName(outerType, innerType, wrapperName) {
  const functionName = getFunctionComponentName(innerType);
  return outerType.displayName || (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName);
}

/**
 * cherry-pick from
 * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js
 * originally forked from recompose/getDisplayName
 */
function getDisplayName(Component) {
  if (Component == null) {
    return undefined;
  }
  if (typeof Component === 'string') {
    return Component;
  }
  if (typeof Component === 'function') {
    return getFunctionComponentName(Component, 'Component');
  }

  // TypeScript can't have components as objects but they exist in the form of `memo` or `Suspense`
  if (typeof Component === 'object') {
    switch (Component.$$typeof) {
      case reactIsExports.ForwardRef:
        return getWrappedName(Component, Component.render, 'ForwardRef');
      case reactIsExports.Memo:
        return getWrappedName(Component, Component.type, 'memo');
      default:
        return undefined;
    }
  }
  return undefined;
}

// It should to be noted that this function isn't equivalent to `text-transform: capitalize`.
//
// A strict capitalization should uppercase the first letter of each word in the sentence.
// We only handle the first word.
function capitalize(string) {
  if (typeof string !== 'string') {
    throw new Error(process.env.NODE_ENV !== "production" ? 'MUI: `capitalize(string)` expects a string argument.' : formatMuiErrorMessage(7));
  }
  return string.charAt(0).toUpperCase() + string.slice(1);
}

/**
 * Add keys, values of `defaultProps` that does not exist in `props`
 * @param defaultProps
 * @param props
 * @returns resolved props
 */
function resolveProps(defaultProps, props) {
  const output = {
    ...props
  };
  for (const key in defaultProps) {
    if (Object.prototype.hasOwnProperty.call(defaultProps, key)) {
      const propName = key;
      if (propName === 'components' || propName === 'slots') {
        output[propName] = {
          ...defaultProps[propName],
          ...output[propName]
        };
      } else if (propName === 'componentsProps' || propName === 'slotProps') {
        const defaultSlotProps = defaultProps[propName];
        const slotProps = props[propName];
        if (!slotProps) {
          output[propName] = defaultSlotProps || {};
        } else if (!defaultSlotProps) {
          output[propName] = slotProps;
        } else {
          output[propName] = {
            ...slotProps
          };
          for (const slotKey in defaultSlotProps) {
            if (Object.prototype.hasOwnProperty.call(defaultSlotProps, slotKey)) {
              const slotPropName = slotKey;
              output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
            }
          }
        }
      } else if (output[propName] === undefined) {
        output[propName] = defaultProps[propName];
      }
    }
  }
  return output;
}

/* eslint no-restricted-syntax: 0, prefer-template: 0, guard-for-in: 0
   ---
   These rules are preventing the performance optimizations below.
 */

/**
 * Compose classes from multiple sources.
 *
 * @example
 * ```tsx
 * const slots = {
 *  root: ['root', 'primary'],
 *  label: ['label'],
 * };
 *
 * const getUtilityClass = (slot) => `MuiButton-${slot}`;
 *
 * const classes = {
 *   root: 'my-root-class',
 * };
 *
 * const output = composeClasses(slots, getUtilityClass, classes);
 * // {
 * //   root: 'MuiButton-root MuiButton-primary my-root-class',
 * //   label: 'MuiButton-label',
 * // }
 * ```
 *
 * @param slots a list of classes for each possible slot
 * @param getUtilityClass a function to resolve the class based on the slot name
 * @param classes the input classes from props
 * @returns the resolved classes for all slots
 */
function composeClasses(slots, getUtilityClass, classes = undefined) {
  const output = {};
  for (const slotName in slots) {
    const slot = slots[slotName];
    let buffer = '';
    let start = true;
    for (let i = 0; i < slot.length; i += 1) {
      const value = slot[i];
      if (value) {
        buffer += (start === true ? '' : ' ') + getUtilityClass(value);
        start = false;
        if (classes && classes[value]) {
          buffer += ' ' + classes[value];
        }
      }
    }
    output[slotName] = buffer;
  }
  return output;
}

const defaultGenerator = componentName => componentName;
const createClassNameGenerator = () => {
  let generate = defaultGenerator;
  return {
    configure(generator) {
      generate = generator;
    },
    generate(componentName) {
      return generate(componentName);
    },
    reset() {
      generate = defaultGenerator;
    }
  };
};
const ClassNameGenerator = createClassNameGenerator();

const globalStateClasses = {
  active: 'active',
  checked: 'checked',
  completed: 'completed',
  disabled: 'disabled',
  error: 'error',
  expanded: 'expanded',
  focused: 'focused',
  focusVisible: 'focusVisible',
  open: 'open',
  readOnly: 'readOnly',
  required: 'required',
  selected: 'selected'
};
function generateUtilityClass(componentName, slot, globalStatePrefix = 'Mui') {
  const globalStateClass = globalStateClasses[slot];
  return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator.generate(componentName)}-${slot}`;
}

function generateUtilityClasses(componentName, slots, globalStatePrefix = 'Mui') {
  const result = {};
  slots.forEach(slot => {
    result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
  });
  return result;
}

function clamp(val, min = Number.MIN_SAFE_INTEGER, max = Number.MAX_SAFE_INTEGER) {
  return Math.max(min, Math.min(val, max));
}

function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);}else for(f in e)e[f]&&(n&&(n+=" "),n+=f);return n}function clsx(){for(var e,t,f=0,n="",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}

function merge(acc, item) {
  if (!item) {
    return acc;
  }
  return deepmerge(acc, item, {
    clone: false // No need to clone deep, it's way faster.
  });
}

const responsivePropType = process.env.NODE_ENV !== 'production' ? PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.object, PropTypes.array]) : {};

/**
 * For using in `sx` prop to sort the breakpoint from low to high.
 * Note: this function does not work and will not support multiple units.
 *       e.g. input: { '@container (min-width:300px)': '1rem', '@container (min-width:40rem)': '2rem' }
 *            output: { '@container (min-width:40rem)': '2rem', '@container (min-width:300px)': '1rem' } // since 40 < 300 eventhough 40rem > 300px
 */
function sortContainerQueries(theme, css) {
  if (!theme.containerQueries) {
    return css;
  }
  const sorted = Object.keys(css).filter(key => key.startsWith('@container')).sort((a, b) => {
    const regex = /min-width:\s*([0-9.]+)/;
    return +(a.match(regex)?.[1] || 0) - +(b.match(regex)?.[1] || 0);
  });
  if (!sorted.length) {
    return css;
  }
  return sorted.reduce((acc, key) => {
    const value = css[key];
    delete acc[key];
    acc[key] = value;
    return acc;
  }, {
    ...css
  });
}
function isCqShorthand(breakpointKeys, value) {
  return value === '@' || value.startsWith('@') && (breakpointKeys.some(key => value.startsWith(`@${key}`)) || !!value.match(/^@\d/));
}
function getContainerQuery(theme, shorthand) {
  const matches = shorthand.match(/^@([^/]+)?\/?(.+)?$/);
  if (!matches) {
    if (process.env.NODE_ENV !== 'production') {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The provided shorthand ${`(${shorthand})`} is invalid. The format should be \`@<breakpoint | number>\` or \`@<breakpoint | number>/<container>\`.\n` + 'For example, `@sm` or `@600` or `@40rem/sidebar`.' : formatMuiErrorMessage(18, `(${shorthand})`));
    }
    return null;
  }
  const [, containerQuery, containerName] = matches;
  const value = Number.isNaN(+containerQuery) ? containerQuery || 0 : +containerQuery;
  return theme.containerQueries(containerName).up(value);
}
function cssContainerQueries(themeInput) {
  const toContainerQuery = (mediaQuery, name) => mediaQuery.replace('@media', name ? `@container ${name}` : '@container');
  function attachCq(node, name) {
    node.up = (...args) => toContainerQuery(themeInput.breakpoints.up(...args), name);
    node.down = (...args) => toContainerQuery(themeInput.breakpoints.down(...args), name);
    node.between = (...args) => toContainerQuery(themeInput.breakpoints.between(...args), name);
    node.only = (...args) => toContainerQuery(themeInput.breakpoints.only(...args), name);
    node.not = (...args) => {
      const result = toContainerQuery(themeInput.breakpoints.not(...args), name);
      if (result.includes('not all and')) {
        // `@container` does not work with `not all and`, so need to invert the logic
        return result.replace('not all and ', '').replace('min-width:', 'width<').replace('max-width:', 'width>').replace('and', 'or');
      }
      return result;
    };
  }
  const node = {};
  const containerQueries = name => {
    attachCq(node, name);
    return node;
  };
  attachCq(containerQueries);
  return {
    ...themeInput,
    containerQueries
  };
}

// The breakpoint **start** at this value.
// For instance with the first breakpoint xs: [xs, sm[.
const values = {
  xs: 0,
  // phone
  sm: 600,
  // tablet
  md: 900,
  // small laptop
  lg: 1200,
  // desktop
  xl: 1536 // large screen
};
const defaultBreakpoints = {
  // Sorted ASC by size. That's important.
  // It can't be configured as it's used statically for propTypes.
  keys: ['xs', 'sm', 'md', 'lg', 'xl'],
  up: key => `@media (min-width:${values[key]}px)`
};
const defaultContainerQueries = {
  containerQueries: containerName => ({
    up: key => {
      let result = typeof key === 'number' ? key : values[key] || key;
      if (typeof result === 'number') {
        result = `${result}px`;
      }
      return containerName ? `@container ${containerName} (min-width:${result})` : `@container (min-width:${result})`;
    }
  })
};
function handleBreakpoints(props, propValue, styleFromPropValue) {
  const theme = props.theme || {};
  if (Array.isArray(propValue)) {
    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
    return propValue.reduce((acc, item, index) => {
      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
      return acc;
    }, {});
  }
  if (typeof propValue === 'object') {
    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
    return Object.keys(propValue).reduce((acc, breakpoint) => {
      if (isCqShorthand(themeBreakpoints.keys, breakpoint)) {
        const containerKey = getContainerQuery(theme.containerQueries ? theme : defaultContainerQueries, breakpoint);
        if (containerKey) {
          acc[containerKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
        }
      }
      // key is breakpoint
      else if (Object.keys(themeBreakpoints.values || values).includes(breakpoint)) {
        const mediaKey = themeBreakpoints.up(breakpoint);
        acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
      } else {
        const cssKey = breakpoint;
        acc[cssKey] = propValue[cssKey];
      }
      return acc;
    }, {});
  }
  const output = styleFromPropValue(propValue);
  return output;
}
function createEmptyBreakpointObject(breakpointsInput = {}) {
  const breakpointsInOrder = breakpointsInput.keys?.reduce((acc, key) => {
    const breakpointStyleKey = breakpointsInput.up(key);
    acc[breakpointStyleKey] = {};
    return acc;
  }, {});
  return breakpointsInOrder || {};
}
function removeUnusedBreakpoints(breakpointKeys, style) {
  return breakpointKeys.reduce((acc, key) => {
    const breakpointOutput = acc[key];
    const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
    if (isBreakpointUnused) {
      delete acc[key];
    }
    return acc;
  }, style);
}

function getPath(obj, path, checkVars = true) {
  if (!path || typeof path !== 'string') {
    return null;
  }

  // Check if CSS variables are used
  if (obj && obj.vars && checkVars) {
    const val = `vars.${path}`.split('.').reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
    if (val != null) {
      return val;
    }
  }
  return path.split('.').reduce((acc, item) => {
    if (acc && acc[item] != null) {
      return acc[item];
    }
    return null;
  }, obj);
}
function getStyleValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
  let value;
  if (typeof themeMapping === 'function') {
    value = themeMapping(propValueFinal);
  } else if (Array.isArray(themeMapping)) {
    value = themeMapping[propValueFinal] || userValue;
  } else {
    value = getPath(themeMapping, propValueFinal) || userValue;
  }
  if (transform) {
    value = transform(value, userValue, themeMapping);
  }
  return value;
}
function style$1(options) {
  const {
    prop,
    cssProperty = options.prop,
    themeKey,
    transform
  } = options;

  // false positive
  // eslint-disable-next-line react/function-component-definition
  const fn = props => {
    if (props[prop] == null) {
      return null;
    }
    const propValue = props[prop];
    const theme = props.theme;
    const themeMapping = getPath(theme, themeKey) || {};
    const styleFromPropValue = propValueFinal => {
      let value = getStyleValue(themeMapping, transform, propValueFinal);
      if (propValueFinal === value && typeof propValueFinal === 'string') {
        // Haven't found value
        value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : capitalize(propValueFinal)}`, propValueFinal);
      }
      if (cssProperty === false) {
        return value;
      }
      return {
        [cssProperty]: value
      };
    };
    return handleBreakpoints(props, propValue, styleFromPropValue);
  };
  fn.propTypes = process.env.NODE_ENV !== 'production' ? {
    [prop]: responsivePropType
  } : {};
  fn.filterProps = [prop];
  return fn;
}

function memoize$1(fn) {
  const cache = {};
  return arg => {
    if (cache[arg] === undefined) {
      cache[arg] = fn(arg);
    }
    return cache[arg];
  };
}

const properties = {
  m: 'margin',
  p: 'padding'
};
const directions = {
  t: 'Top',
  r: 'Right',
  b: 'Bottom',
  l: 'Left',
  x: ['Left', 'Right'],
  y: ['Top', 'Bottom']
};
const aliases = {
  marginX: 'mx',
  marginY: 'my',
  paddingX: 'px',
  paddingY: 'py'
};

// memoize() impact:
// From 300,000 ops/sec
// To 350,000 ops/sec
const getCssProperties = memoize$1(prop => {
  // It's not a shorthand notation.
  if (prop.length > 2) {
    if (aliases[prop]) {
      prop = aliases[prop];
    } else {
      return [prop];
    }
  }
  const [a, b] = prop.split('');
  const property = properties[a];
  const direction = directions[b] || '';
  return Array.isArray(direction) ? direction.map(dir => property + dir) : [property + direction];
});
const marginKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'marginInline', 'marginInlineStart', 'marginInlineEnd', 'marginBlock', 'marginBlockStart', 'marginBlockEnd'];
const paddingKeys = ['p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY', 'paddingInline', 'paddingInlineStart', 'paddingInlineEnd', 'paddingBlock', 'paddingBlockStart', 'paddingBlockEnd'];
const spacingKeys = [...marginKeys, ...paddingKeys];
function createUnaryUnit(theme, themeKey, defaultValue, propName) {
  const themeSpacing = getPath(theme, themeKey, true) ?? defaultValue;
  if (typeof themeSpacing === 'number' || typeof themeSpacing === 'string') {
    return val => {
      if (typeof val === 'string') {
        return val;
      }
      if (process.env.NODE_ENV !== 'production') {
        if (typeof val !== 'number') {
          console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${val}.`);
        }
      }
      if (typeof themeSpacing === 'string') {
        return `calc(${val} * ${themeSpacing})`;
      }
      return themeSpacing * val;
    };
  }
  if (Array.isArray(themeSpacing)) {
    return val => {
      if (typeof val === 'string') {
        return val;
      }
      const abs = Math.abs(val);
      if (process.env.NODE_ENV !== 'production') {
        if (!Number.isInteger(abs)) {
          console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.` + `You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join('\n'));
        } else if (abs > themeSpacing.length - 1) {
          console.error([`MUI: The value provided (${abs}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs} > ${themeSpacing.length - 1}, you need to add the missing values.`].join('\n'));
        }
      }
      const transformed = themeSpacing[abs];
      if (val >= 0) {
        return transformed;
      }
      if (typeof transformed === 'number') {
        return -transformed;
      }
      return `-${transformed}`;
    };
  }
  if (typeof themeSpacing === 'function') {
    return themeSpacing;
  }
  if (process.env.NODE_ENV !== 'production') {
    console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, 'It should be a number, an array or a function.'].join('\n'));
  }
  return () => undefined;
}
function createUnarySpacing(theme) {
  return createUnaryUnit(theme, 'spacing', 8, 'spacing');
}
function getValue(transformer, propValue) {
  if (typeof propValue === 'string' || propValue == null) {
    return propValue;
  }
  return transformer(propValue);
}
function getStyleFromPropValue(cssProperties, transformer) {
  return propValue => cssProperties.reduce((acc, cssProperty) => {
    acc[cssProperty] = getValue(transformer, propValue);
    return acc;
  }, {});
}
function resolveCssProperty(props, keys, prop, transformer) {
  // Using a hash computation over an array iteration could be faster, but with only 28 items,
  // it's doesn't worth the bundle size.
  if (!keys.includes(prop)) {
    return null;
  }
  const cssProperties = getCssProperties(prop);
  const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
  const propValue = props[prop];
  return handleBreakpoints(props, propValue, styleFromPropValue);
}
function style(props, keys) {
  const transformer = createUnarySpacing(props.theme);
  return Object.keys(props).map(prop => resolveCssProperty(props, keys, prop, transformer)).reduce(merge, {});
}
function margin(props) {
  return style(props, marginKeys);
}
margin.propTypes = process.env.NODE_ENV !== 'production' ? marginKeys.reduce((obj, key) => {
  obj[key] = responsivePropType;
  return obj;
}, {}) : {};
margin.filterProps = marginKeys;
function padding(props) {
  return style(props, paddingKeys);
}
padding.propTypes = process.env.NODE_ENV !== 'production' ? paddingKeys.reduce((obj, key) => {
  obj[key] = responsivePropType;
  return obj;
}, {}) : {};
padding.filterProps = paddingKeys;
process.env.NODE_ENV !== 'production' ? spacingKeys.reduce((obj, key) => {
  obj[key] = responsivePropType;
  return obj;
}, {}) : {};

function compose(...styles) {
  const handlers = styles.reduce((acc, style) => {
    style.filterProps.forEach(prop => {
      acc[prop] = style;
    });
    return acc;
  }, {});

  // false positive
  // eslint-disable-next-line react/function-component-definition
  const fn = props => {
    return Object.keys(props).reduce((acc, prop) => {
      if (handlers[prop]) {
        return merge(acc, handlers[prop](props));
      }
      return acc;
    }, {});
  };
  fn.propTypes = process.env.NODE_ENV !== 'production' ? styles.reduce((acc, style) => Object.assign(acc, style.propTypes), {}) : {};
  fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);
  return fn;
}

function borderTransform(value) {
  if (typeof value !== 'number') {
    return value;
  }
  return `${value}px solid`;
}
function createBorderStyle(prop, transform) {
  return style$1({
    prop,
    themeKey: 'borders',
    transform
  });
}
const border = createBorderStyle('border', borderTransform);
const borderTop = createBorderStyle('borderTop', borderTransform);
const borderRight = createBorderStyle('borderRight', borderTransform);
const borderBottom = createBorderStyle('borderBottom', borderTransform);
const borderLeft = createBorderStyle('borderLeft', borderTransform);
const borderColor = createBorderStyle('borderColor');
const borderTopColor = createBorderStyle('borderTopColor');
const borderRightColor = createBorderStyle('borderRightColor');
const borderBottomColor = createBorderStyle('borderBottomColor');
const borderLeftColor = createBorderStyle('borderLeftColor');
const outline = createBorderStyle('outline', borderTransform);
const outlineColor = createBorderStyle('outlineColor');

// false positive
// eslint-disable-next-line react/function-component-definition
const borderRadius = props => {
  if (props.borderRadius !== undefined && props.borderRadius !== null) {
    const transformer = createUnaryUnit(props.theme, 'shape.borderRadius', 4, 'borderRadius');
    const styleFromPropValue = propValue => ({
      borderRadius: getValue(transformer, propValue)
    });
    return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
  }
  return null;
};
borderRadius.propTypes = process.env.NODE_ENV !== 'production' ? {
  borderRadius: responsivePropType
} : {};
borderRadius.filterProps = ['borderRadius'];
compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius, outline, outlineColor);

// false positive
// eslint-disable-next-line react/function-component-definition
const gap = props => {
  if (props.gap !== undefined && props.gap !== null) {
    const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'gap');
    const styleFromPropValue = propValue => ({
      gap: getValue(transformer, propValue)
    });
    return handleBreakpoints(props, props.gap, styleFromPropValue);
  }
  return null;
};
gap.propTypes = process.env.NODE_ENV !== 'production' ? {
  gap: responsivePropType
} : {};
gap.filterProps = ['gap'];

// false positive
// eslint-disable-next-line react/function-component-definition
const columnGap = props => {
  if (props.columnGap !== undefined && props.columnGap !== null) {
    const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'columnGap');
    const styleFromPropValue = propValue => ({
      columnGap: getValue(transformer, propValue)
    });
    return handleBreakpoints(props, props.columnGap, styleFromPropValue);
  }
  return null;
};
columnGap.propTypes = process.env.NODE_ENV !== 'production' ? {
  columnGap: responsivePropType
} : {};
columnGap.filterProps = ['columnGap'];

// false positive
// eslint-disable-next-line react/function-component-definition
const rowGap = props => {
  if (props.rowGap !== undefined && props.rowGap !== null) {
    const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'rowGap');
    const styleFromPropValue = propValue => ({
      rowGap: getValue(transformer, propValue)
    });
    return handleBreakpoints(props, props.rowGap, styleFromPropValue);
  }
  return null;
};
rowGap.propTypes = process.env.NODE_ENV !== 'production' ? {
  rowGap: responsivePropType
} : {};
rowGap.filterProps = ['rowGap'];
const gridColumn = style$1({
  prop: 'gridColumn'
});
const gridRow = style$1({
  prop: 'gridRow'
});
const gridAutoFlow = style$1({
  prop: 'gridAutoFlow'
});
const gridAutoColumns = style$1({
  prop: 'gridAutoColumns'
});
const gridAutoRows = style$1({
  prop: 'gridAutoRows'
});
const gridTemplateColumns = style$1({
  prop: 'gridTemplateColumns'
});
const gridTemplateRows = style$1({
  prop: 'gridTemplateRows'
});
const gridTemplateAreas = style$1({
  prop: 'gridTemplateAreas'
});
const gridArea = style$1({
  prop: 'gridArea'
});
compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);

function paletteTransform(value, userValue) {
  if (userValue === 'grey') {
    return userValue;
  }
  return value;
}
const color = style$1({
  prop: 'color',
  themeKey: 'palette',
  transform: paletteTransform
});
const bgcolor = style$1({
  prop: 'bgcolor',
  cssProperty: 'backgroundColor',
  themeKey: 'palette',
  transform: paletteTransform
});
const backgroundColor = style$1({
  prop: 'backgroundColor',
  themeKey: 'palette',
  transform: paletteTransform
});
compose(color, bgcolor, backgroundColor);

function sizingTransform(value) {
  return value <= 1 && value !== 0 ? `${value * 100}%` : value;
}
const width = style$1({
  prop: 'width',
  transform: sizingTransform
});
const maxWidth = props => {
  if (props.maxWidth !== undefined && props.maxWidth !== null) {
    const styleFromPropValue = propValue => {
      const breakpoint = props.theme?.breakpoints?.values?.[propValue] || values[propValue];
      if (!breakpoint) {
        return {
          maxWidth: sizingTransform(propValue)
        };
      }
      if (props.theme?.breakpoints?.unit !== 'px') {
        return {
          maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
        };
      }
      return {
        maxWidth: breakpoint
      };
    };
    return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
  }
  return null;
};
maxWidth.filterProps = ['maxWidth'];
const minWidth = style$1({
  prop: 'minWidth',
  transform: sizingTransform
});
const height = style$1({
  prop: 'height',
  transform: sizingTransform
});
const maxHeight = style$1({
  prop: 'maxHeight',
  transform: sizingTransform
});
const minHeight = style$1({
  prop: 'minHeight',
  transform: sizingTransform
});
style$1({
  prop: 'size',
  cssProperty: 'width',
  transform: sizingTransform
});
style$1({
  prop: 'size',
  cssProperty: 'height',
  transform: sizingTransform
});
const boxSizing = style$1({
  prop: 'boxSizing'
});
compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);

const defaultSxConfig = {
  // borders
  border: {
    themeKey: 'borders',
    transform: borderTransform
  },
  borderTop: {
    themeKey: 'borders',
    transform: borderTransform
  },
  borderRight: {
    themeKey: 'borders',
    transform: borderTransform
  },
  borderBottom: {
    themeKey: 'borders',
    transform: borderTransform
  },
  borderLeft: {
    themeKey: 'borders',
    transform: borderTransform
  },
  borderColor: {
    themeKey: 'palette'
  },
  borderTopColor: {
    themeKey: 'palette'
  },
  borderRightColor: {
    themeKey: 'palette'
  },
  borderBottomColor: {
    themeKey: 'palette'
  },
  borderLeftColor: {
    themeKey: 'palette'
  },
  outline: {
    themeKey: 'borders',
    transform: borderTransform
  },
  outlineColor: {
    themeKey: 'palette'
  },
  borderRadius: {
    themeKey: 'shape.borderRadius',
    style: borderRadius
  },
  // palette
  color: {
    themeKey: 'palette',
    transform: paletteTransform
  },
  bgcolor: {
    themeKey: 'palette',
    cssProperty: 'backgroundColor',
    transform: paletteTransform
  },
  backgroundColor: {
    themeKey: 'palette',
    transform: paletteTransform
  },
  // spacing
  p: {
    style: padding
  },
  pt: {
    style: padding
  },
  pr: {
    style: padding
  },
  pb: {
    style: padding
  },
  pl: {
    style: padding
  },
  px: {
    style: padding
  },
  py: {
    style: padding
  },
  padding: {
    style: padding
  },
  paddingTop: {
    style: padding
  },
  paddingRight: {
    style: padding
  },
  paddingBottom: {
    style: padding
  },
  paddingLeft: {
    style: padding
  },
  paddingX: {
    style: padding
  },
  paddingY: {
    style: padding
  },
  paddingInline: {
    style: padding
  },
  paddingInlineStart: {
    style: padding
  },
  paddingInlineEnd: {
    style: padding
  },
  paddingBlock: {
    style: padding
  },
  paddingBlockStart: {
    style: padding
  },
  paddingBlockEnd: {
    style: padding
  },
  m: {
    style: margin
  },
  mt: {
    style: margin
  },
  mr: {
    style: margin
  },
  mb: {
    style: margin
  },
  ml: {
    style: margin
  },
  mx: {
    style: margin
  },
  my: {
    style: margin
  },
  margin: {
    style: margin
  },
  marginTop: {
    style: margin
  },
  marginRight: {
    style: margin
  },
  marginBottom: {
    style: margin
  },
  marginLeft: {
    style: margin
  },
  marginX: {
    style: margin
  },
  marginY: {
    style: margin
  },
  marginInline: {
    style: margin
  },
  marginInlineStart: {
    style: margin
  },
  marginInlineEnd: {
    style: margin
  },
  marginBlock: {
    style: margin
  },
  marginBlockStart: {
    style: margin
  },
  marginBlockEnd: {
    style: margin
  },
  // display
  displayPrint: {
    cssProperty: false,
    transform: value => ({
      '@media print': {
        display: value
      }
    })
  },
  display: {},
  overflow: {},
  textOverflow: {},
  visibility: {},
  whiteSpace: {},
  // flexbox
  flexBasis: {},
  flexDirection: {},
  flexWrap: {},
  justifyContent: {},
  alignItems: {},
  alignContent: {},
  order: {},
  flex: {},
  flexGrow: {},
  flexShrink: {},
  alignSelf: {},
  justifyItems: {},
  justifySelf: {},
  // grid
  gap: {
    style: gap
  },
  rowGap: {
    style: rowGap
  },
  columnGap: {
    style: columnGap
  },
  gridColumn: {},
  gridRow: {},
  gridAutoFlow: {},
  gridAutoColumns: {},
  gridAutoRows: {},
  gridTemplateColumns: {},
  gridTemplateRows: {},
  gridTemplateAreas: {},
  gridArea: {},
  // positions
  position: {},
  zIndex: {
    themeKey: 'zIndex'
  },
  top: {},
  right: {},
  bottom: {},
  left: {},
  // shadows
  boxShadow: {
    themeKey: 'shadows'
  },
  // sizing
  width: {
    transform: sizingTransform
  },
  maxWidth: {
    style: maxWidth
  },
  minWidth: {
    transform: sizingTransform
  },
  height: {
    transform: sizingTransform
  },
  maxHeight: {
    transform: sizingTransform
  },
  minHeight: {
    transform: sizingTransform
  },
  boxSizing: {},
  // typography
  font: {
    themeKey: 'font'
  },
  fontFamily: {
    themeKey: 'typography'
  },
  fontSize: {
    themeKey: 'typography'
  },
  fontStyle: {
    themeKey: 'typography'
  },
  fontWeight: {
    themeKey: 'typography'
  },
  letterSpacing: {},
  textTransform: {},
  lineHeight: {},
  textAlign: {},
  typography: {
    cssProperty: false,
    themeKey: 'typography'
  }
};

function objectsHaveSameKeys(...objects) {
  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
  const union = new Set(allKeys);
  return objects.every(object => union.size === Object.keys(object).length);
}
function callIfFn(maybeFn, arg) {
  return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;
}

// eslint-disable-next-line @typescript-eslint/naming-convention
function unstable_createStyleFunctionSx() {
  function getThemeValue(prop, val, theme, config) {
    const props = {
      [prop]: val,
      theme
    };
    const options = config[prop];
    if (!options) {
      return {
        [prop]: val
      };
    }
    const {
      cssProperty = prop,
      themeKey,
      transform,
      style
    } = options;
    if (val == null) {
      return null;
    }

    // TODO v6: remove, see https://github.com/mui/material-ui/pull/38123
    if (themeKey === 'typography' && val === 'inherit') {
      return {
        [prop]: val
      };
    }
    const themeMapping = getPath(theme, themeKey) || {};
    if (style) {
      return style(props);
    }
    const styleFromPropValue = propValueFinal => {
      let value = getStyleValue(themeMapping, transform, propValueFinal);
      if (propValueFinal === value && typeof propValueFinal === 'string') {
        // Haven't found value
        value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : capitalize(propValueFinal)}`, propValueFinal);
      }
      if (cssProperty === false) {
        return value;
      }
      return {
        [cssProperty]: value
      };
    };
    return handleBreakpoints(props, val, styleFromPropValue);
  }
  function styleFunctionSx(props) {
    const {
      sx,
      theme = {}
    } = props || {};
    if (!sx) {
      return null; // Emotion & styled-components will neglect null
    }
    const config = theme.unstable_sxConfig ?? defaultSxConfig;

    /*
     * Receive `sxInput` as object or callback
     * and then recursively check keys & values to create media query object styles.
     * (the result will be used in `styled`)
     */
    function traverse(sxInput) {
      let sxObject = sxInput;
      if (typeof sxInput === 'function') {
        sxObject = sxInput(theme);
      } else if (typeof sxInput !== 'object') {
        // value
        return sxInput;
      }
      if (!sxObject) {
        return null;
      }
      const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
      const breakpointsKeys = Object.keys(emptyBreakpoints);
      let css = emptyBreakpoints;
      Object.keys(sxObject).forEach(styleKey => {
        const value = callIfFn(sxObject[styleKey], theme);
        if (value !== null && value !== undefined) {
          if (typeof value === 'object') {
            if (config[styleKey]) {
              css = merge(css, getThemeValue(styleKey, value, theme, config));
            } else {
              const breakpointsValues = handleBreakpoints({
                theme
              }, value, x => ({
                [styleKey]: x
              }));
              if (objectsHaveSameKeys(breakpointsValues, value)) {
                css[styleKey] = styleFunctionSx({
                  sx: value,
                  theme
                });
              } else {
                css = merge(css, breakpointsValues);
              }
            }
          } else {
            css = merge(css, getThemeValue(styleKey, value, theme, config));
          }
        }
      });
      return sortContainerQueries(theme, removeUnusedBreakpoints(breakpointsKeys, css));
    }
    return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
  }
  return styleFunctionSx;
}
const styleFunctionSx = unstable_createStyleFunctionSx();
styleFunctionSx.filterProps = ['sx'];

function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}

/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/

function sheetForTag(tag) {
  if (tag.sheet) {
    return tag.sheet;
  } // this weirdness brought to you by firefox

  /* istanbul ignore next */


  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      return document.styleSheets[i];
    }
  } // this function should always return with a value
  // TS can't understand it though so we make it stop complaining here


  return undefined;
}

function createStyleElement(options) {
  var tag = document.createElement('style');
  tag.setAttribute('data-emotion', options.key);

  if (options.nonce !== undefined) {
    tag.setAttribute('nonce', options.nonce);
  }

  tag.appendChild(document.createTextNode(''));
  tag.setAttribute('data-s', '');
  return tag;
}

var StyleSheet = /*#__PURE__*/function () {
  // Using Node instead of HTMLElement since container may be a ShadowRoot
  function StyleSheet(options) {
    var _this = this;

    this._insertTag = function (tag) {
      var before;

      if (_this.tags.length === 0) {
        if (_this.insertionPoint) {
          before = _this.insertionPoint.nextSibling;
        } else if (_this.prepend) {
          before = _this.container.firstChild;
        } else {
          before = _this.before;
        }
      } else {
        before = _this.tags[_this.tags.length - 1].nextSibling;
      }

      _this.container.insertBefore(tag, before);

      _this.tags.push(tag);
    };

    this.isSpeedy = options.speedy === undefined ? true : options.speedy;
    this.tags = [];
    this.ctr = 0;
    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

    this.key = options.key;
    this.container = options.container;
    this.prepend = options.prepend;
    this.insertionPoint = options.insertionPoint;
    this.before = null;
  }

  var _proto = StyleSheet.prototype;

  _proto.hydrate = function hydrate(nodes) {
    nodes.forEach(this._insertTag);
  };

  _proto.insert = function insert(rule) {
    // the max length is how many rules we have per style tag, it's 65000 in speedy mode
    // it's 1 in dev because we insert source maps that map a single rule to a location
    // and you can only have one source map per style tag
    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
      this._insertTag(createStyleElement(this));
    }

    var tag = this.tags[this.tags.length - 1];

    if (this.isSpeedy) {
      var sheet = sheetForTag(tag);

      try {
        // this is the ultrafast version, works across browsers
        // the big drawback is that the css won't be editable in devtools
        sheet.insertRule(rule, sheet.cssRules.length);
      } catch (e) {
      }
    } else {
      tag.appendChild(document.createTextNode(rule));
    }

    this.ctr++;
  };

  _proto.flush = function flush() {
    this.tags.forEach(function (tag) {
      var _tag$parentNode;

      return (_tag$parentNode = tag.parentNode) == null ? undefined : _tag$parentNode.removeChild(tag);
    });
    this.tags = [];
    this.ctr = 0;
  };

  return StyleSheet;
}();

var MS = '-ms-';
var MOZ = '-moz-';
var WEBKIT = '-webkit-';

var COMMENT = 'comm';
var RULESET = 'rule';
var DECLARATION = 'decl';
var IMPORT = '@import';
var KEYFRAMES = '@keyframes';
var LAYER = '@layer';

/**
 * @param {number}
 * @return {number}
 */
var abs = Math.abs;

/**
 * @param {number}
 * @return {string}
 */
var from = String.fromCharCode;

/**
 * @param {object}
 * @return {object}
 */
var assign = Object.assign;

/**
 * @param {string} value
 * @param {number} length
 * @return {number}
 */
function hash (value, length) {
	return charat(value, 0) ^ 45 ? (((((((length << 2) ^ charat(value, 0)) << 2) ^ charat(value, 1)) << 2) ^ charat(value, 2)) << 2) ^ charat(value, 3) : 0
}

/**
 * @param {string} value
 * @return {string}
 */
function trim (value) {
	return value.trim()
}

/**
 * @param {string} value
 * @param {RegExp} pattern
 * @return {string?}
 */
function match$1 (value, pattern) {
	return (value = pattern.exec(value)) ? value[0] : value
}

/**
 * @param {string} value
 * @param {(string|RegExp)} pattern
 * @param {string} replacement
 * @return {string}
 */
function replace (value, pattern, replacement) {
	return value.replace(pattern, replacement)
}

/**
 * @param {string} value
 * @param {string} search
 * @return {number}
 */
function indexof (value, search) {
	return value.indexOf(search)
}

/**
 * @param {string} value
 * @param {number} index
 * @return {number}
 */
function charat (value, index) {
	return value.charCodeAt(index) | 0
}

/**
 * @param {string} value
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */
function substr (value, begin, end) {
	return value.slice(begin, end)
}

/**
 * @param {string} value
 * @return {number}
 */
function strlen (value) {
	return value.length
}

/**
 * @param {any[]} value
 * @return {number}
 */
function sizeof (value) {
	return value.length
}

/**
 * @param {any} value
 * @param {any[]} array
 * @return {any}
 */
function append (value, array) {
	return array.push(value), value
}

/**
 * @param {string[]} array
 * @param {function} callback
 * @return {string}
 */
function combine (array, callback) {
	return array.map(callback).join('')
}

var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = '';

/**
 * @param {string} value
 * @param {object | null} root
 * @param {object | null} parent
 * @param {string} type
 * @param {string[] | string} props
 * @param {object[] | string} children
 * @param {number} length
 */
function node (value, root, parent, type, props, children, length) {
	return {value: value, root: root, parent: parent, type: type, props: props, children: children, line: line, column: column, length: length, return: ''}
}

/**
 * @param {object} root
 * @param {object} props
 * @return {object}
 */
function copy (root, props) {
	return assign(node('', null, null, '', null, null, 0), root, {length: -root.length}, props)
}

/**
 * @return {number}
 */
function char () {
	return character
}

/**
 * @return {number}
 */
function prev () {
	character = position > 0 ? charat(characters, --position) : 0;

	if (column--, character === 10)
		column = 1, line--;

	return character
}

/**
 * @return {number}
 */
function next () {
	character = position < length ? charat(characters, position++) : 0;

	if (column++, character === 10)
		column = 1, line++;

	return character
}

/**
 * @return {number}
 */
function peek () {
	return charat(characters, position)
}

/**
 * @return {number}
 */
function caret () {
	return position
}

/**
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */
function slice (begin, end) {
	return substr(characters, begin, end)
}

/**
 * @param {number} type
 * @return {number}
 */
function token (type) {
	switch (type) {
		// \0 \t \n \r \s whitespace token
		case 0: case 9: case 10: case 13: case 32:
			return 5
		// ! + , / > @ ~ isolate token
		case 33: case 43: case 44: case 47: case 62: case 64: case 126:
		// ; { } breakpoint token
		case 59: case 123: case 125:
			return 4
		// : accompanied token
		case 58:
			return 3
		// " ' ( [ opening delimit token
		case 34: case 39: case 40: case 91:
			return 2
		// ) ] closing delimit token
		case 41: case 93:
			return 1
	}

	return 0
}

/**
 * @param {string} value
 * @return {any[]}
 */
function alloc (value) {
	return line = column = 1, length = strlen(characters = value), position = 0, []
}

/**
 * @param {any} value
 * @return {any}
 */
function dealloc (value) {
	return characters = '', value
}

/**
 * @param {number} type
 * @return {string}
 */
function delimit (type) {
	return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)))
}

/**
 * @param {number} type
 * @return {string}
 */
function whitespace (type) {
	while (character = peek())
		if (character < 33)
			next();
		else
			break

	return token(type) > 2 || token(character) > 3 ? '' : ' '
}

/**
 * @param {number} index
 * @param {number} count
 * @return {string}
 */
function escaping (index, count) {
	while (--count && next())
		// not 0-9 A-F a-f
		if (character < 48 || character > 102 || (character > 57 && character < 65) || (character > 70 && character < 97))
			break

	return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32))
}

/**
 * @param {number} type
 * @return {number}
 */
function delimiter (type) {
	while (next())
		switch (character) {
			// ] ) " '
			case type:
				return position
			// " '
			case 34: case 39:
				if (type !== 34 && type !== 39)
					delimiter(character);
				break
			// (
			case 40:
				if (type === 41)
					delimiter(type);
				break
			// \
			case 92:
				next();
				break
		}

	return position
}

/**
 * @param {number} type
 * @param {number} index
 * @return {number}
 */
function commenter (type, index) {
	while (next())
		// //
		if (type + character === 47 + 10)
			break
		// /*
		else if (type + character === 42 + 42 && peek() === 47)
			break

	return '/*' + slice(index, position - 1) + '*' + from(type === 47 ? type : next())
}

/**
 * @param {number} index
 * @return {string}
 */
function identifier (index) {
	while (!token(peek()))
		next();

	return slice(index, position)
}

/**
 * @param {string} value
 * @return {object[]}
 */
function compile (value) {
	return dealloc(parse('', null, null, null, [''], value = alloc(value), 0, [0], value))
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {string[]} rule
 * @param {string[]} rules
 * @param {string[]} rulesets
 * @param {number[]} pseudo
 * @param {number[]} points
 * @param {string[]} declarations
 * @return {object}
 */
function parse (value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
	var index = 0;
	var offset = 0;
	var length = pseudo;
	var atrule = 0;
	var property = 0;
	var previous = 0;
	var variable = 1;
	var scanning = 1;
	var ampersand = 1;
	var character = 0;
	var type = '';
	var props = rules;
	var children = rulesets;
	var reference = rule;
	var characters = type;

	while (scanning)
		switch (previous = character, character = next()) {
			// (
			case 40:
				if (previous != 108 && charat(characters, length - 1) == 58) {
					if (indexof(characters += replace(delimit(character), '&', '&\f'), '&\f') != -1)
						ampersand = -1;
					break
				}
			// " ' [
			case 34: case 39: case 91:
				characters += delimit(character);
				break
			// \t \n \r \s
			case 9: case 10: case 13: case 32:
				characters += whitespace(previous);
				break
			// \
			case 92:
				characters += escaping(caret() - 1, 7);
				continue
			// /
			case 47:
				switch (peek()) {
					case 42: case 47:
						append(comment(commenter(next(), caret()), root, parent), declarations);
						break
					default:
						characters += '/';
				}
				break
			// {
			case 123 * variable:
				points[index++] = strlen(characters) * ampersand;
			// } ; \0
			case 125 * variable: case 59: case 0:
				switch (character) {
					// \0 }
					case 0: case 125: scanning = 0;
					// ;
					case 59 + offset: if (ampersand == -1) characters = replace(characters, /\f/g, '');
						if (property > 0 && (strlen(characters) - length))
							append(property > 32 ? declaration(characters + ';', rule, parent, length - 1) : declaration(replace(characters, ' ', '') + ';', rule, parent, length - 2), declarations);
						break
					// @ ;
					case 59: characters += ';';
					// { rule/at-rule
					default:
						append(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets);

						if (character === 123)
							if (offset === 0)
								parse(characters, root, reference, reference, props, rulesets, length, points, children);
							else
								switch (atrule === 99 && charat(characters, 3) === 110 ? 100 : atrule) {
									// d l m s
									case 100: case 108: case 109: case 115:
										parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children);
										break
									default:
										parse(characters, reference, reference, reference, [''], children, 0, points, children);
								}
				}

				index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo;
				break
			// :
			case 58:
				length = 1 + strlen(characters), property = previous;
			default:
				if (variable < 1)
					if (character == 123)
						--variable;
					else if (character == 125 && variable++ == 0 && prev() == 125)
						continue

				switch (characters += from(character), character * variable) {
					// &
					case 38:
						ampersand = offset > 0 ? 1 : (characters += '\f', -1);
						break
					// ,
					case 44:
						points[index++] = (strlen(characters) - 1) * ampersand, ampersand = 1;
						break
					// @
					case 64:
						// -
						if (peek() === 45)
							characters += delimit(next());

						atrule = peek(), offset = length = strlen(type = characters += identifier(caret())), character++;
						break
					// -
					case 45:
						if (previous === 45 && strlen(characters) == 2)
							variable = 0;
				}
		}

	return rulesets
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {number} index
 * @param {number} offset
 * @param {string[]} rules
 * @param {number[]} points
 * @param {string} type
 * @param {string[]} props
 * @param {string[]} children
 * @param {number} length
 * @return {object}
 */
function ruleset (value, root, parent, index, offset, rules, points, type, props, children, length) {
	var post = offset - 1;
	var rule = offset === 0 ? rules : [''];
	var size = sizeof(rule);

	for (var i = 0, j = 0, k = 0; i < index; ++i)
		for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
			if (z = trim(j > 0 ? rule[x] + ' ' + y : replace(y, /&\f/g, rule[x])))
				props[k++] = z;

	return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length)
}

/**
 * @param {number} value
 * @param {object} root
 * @param {object?} parent
 * @return {object}
 */
function comment (value, root, parent) {
	return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0)
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {number} length
 * @return {object}
 */
function declaration (value, root, parent, length) {
	return node(value, root, parent, DECLARATION, substr(value, 0, length), substr(value, length + 1, -1), length)
}

/**
 * @param {object[]} children
 * @param {function} callback
 * @return {string}
 */
function serialize (children, callback) {
	var output = '';
	var length = sizeof(children);

	for (var i = 0; i < length; i++)
		output += callback(children[i], i, children, callback) || '';

	return output
}

/**
 * @param {object} element
 * @param {number} index
 * @param {object[]} children
 * @param {function} callback
 * @return {string}
 */
function stringify (element, index, children, callback) {
	switch (element.type) {
		case LAYER: if (element.children.length) break
		case IMPORT: case DECLARATION: return element.return = element.return || element.value
		case COMMENT: return ''
		case KEYFRAMES: return element.return = element.value + '{' + serialize(element.children, callback) + '}'
		case RULESET: element.value = element.props.join(',');
	}

	return strlen(children = serialize(element.children, callback)) ? element.return = element.value + '{' + children + '}' : ''
}

/**
 * @param {function[]} collection
 * @return {function}
 */
function middleware (collection) {
	var length = sizeof(collection);

	return function (element, index, children, callback) {
		var output = '';

		for (var i = 0; i < length; i++)
			output += collection[i](element, index, children, callback) || '';

		return output
	}
}

/**
 * @param {function} callback
 * @return {function}
 */
function rulesheet (callback) {
	return function (element) {
		if (!element.root)
			if (element = element.return)
				callback(element);
	}
}

var weakMemoize = function weakMemoize(func) {
  var cache = new WeakMap();
  return function (arg) {
    if (cache.has(arg)) {
      // Use non-null assertion because we just checked that the cache `has` it
      // This allows us to remove `undefined` from the return value
      return cache.get(arg);
    }

    var ret = func(arg);
    cache.set(arg, ret);
    return ret;
  };
};

function memoize(fn) {
  var cache = Object.create(null);
  return function (arg) {
    if (cache[arg] === undefined) cache[arg] = fn(arg);
    return cache[arg];
  };
}

var isBrowser$4 = typeof document !== 'undefined';

var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
  var previous = 0;
  var character = 0;

  while (true) {
    previous = character;
    character = peek(); // &\f

    if (previous === 38 && character === 12) {
      points[index] = 1;
    }

    if (token(character)) {
      break;
    }

    next();
  }

  return slice(begin, position);
};

var toRules = function toRules(parsed, points) {
  // pretend we've started with a comma
  var index = -1;
  var character = 44;

  do {
    switch (token(character)) {
      case 0:
        // &\f
        if (character === 38 && peek() === 12) {
          // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
          // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
          // and when it should just concatenate the outer and inner selectors
          // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
          points[index] = 1;
        }

        parsed[index] += identifierWithPointTracking(position - 1, points, index);
        break;

      case 2:
        parsed[index] += delimit(character);
        break;

      case 4:
        // comma
        if (character === 44) {
          // colon
          parsed[++index] = peek() === 58 ? '&\f' : '';
          points[index] = parsed[index].length;
          break;
        }

      // fallthrough

      default:
        parsed[index] += from(character);
    }
  } while (character = next());

  return parsed;
};

var getRules = function getRules(value, points) {
  return dealloc(toRules(alloc(value), points));
}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11


var fixedElements = /* #__PURE__ */new WeakMap();
var compat = function compat(element) {
  if (element.type !== 'rule' || !element.parent || // positive .length indicates that this rule contains pseudo
  // negative .length indicates that this rule has been already prefixed
  element.length < 1) {
    return;
  }

  var value = element.value;
  var parent = element.parent;
  var isImplicitRule = element.column === parent.column && element.line === parent.line;

  while (parent.type !== 'rule') {
    parent = parent.parent;
    if (!parent) return;
  } // short-circuit for the simplest case


  if (element.props.length === 1 && value.charCodeAt(0) !== 58
  /* colon */
  && !fixedElements.get(parent)) {
    return;
  } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
  // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"


  if (isImplicitRule) {
    return;
  }

  fixedElements.set(element, true);
  var points = [];
  var rules = getRules(value, points);
  var parentRules = parent.props;

  for (var i = 0, k = 0; i < rules.length; i++) {
    for (var j = 0; j < parentRules.length; j++, k++) {
      element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
    }
  }
};
var removeLabel = function removeLabel(element) {
  if (element.type === 'decl') {
    var value = element.value;

    if ( // charcode for l
    value.charCodeAt(0) === 108 && // charcode for b
    value.charCodeAt(2) === 98) {
      // this ignores label
      element["return"] = '';
      element.value = '';
    }
  }
};

/* eslint-disable no-fallthrough */

function prefix(value, length) {
  switch (hash(value, length)) {
    // color-adjust
    case 5103:
      return WEBKIT + 'print-' + value + value;
    // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)

    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921: // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break

    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005: // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,

    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855: // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)

    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value + value;
    // appearance, user-select, transform, hyphens, text-size-adjust

    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value + MOZ + value + MS + value + value;
    // flex, flex-direction

    case 6828:
    case 4268:
      return WEBKIT + value + MS + value + value;
    // order

    case 6165:
      return WEBKIT + value + MS + 'flex-' + value + value;
    // align-items

    case 5187:
      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + 'box-$1$2' + MS + 'flex-$1$2') + value;
    // align-self

    case 5443:
      return WEBKIT + value + MS + 'flex-item-' + replace(value, /flex-|-self/, '') + value;
    // align-content

    case 4675:
      return WEBKIT + value + MS + 'flex-line-pack' + replace(value, /align-content|flex-|-self/, '') + value;
    // flex-shrink

    case 5548:
      return WEBKIT + value + MS + replace(value, 'shrink', 'negative') + value;
    // flex-basis

    case 5292:
      return WEBKIT + value + MS + replace(value, 'basis', 'preferred-size') + value;
    // flex-grow

    case 6060:
      return WEBKIT + 'box-' + replace(value, '-grow', '') + WEBKIT + value + MS + replace(value, 'grow', 'positive') + value;
    // transition

    case 4554:
      return WEBKIT + replace(value, /([^-])(transform)/g, '$1' + WEBKIT + '$2') + value;
    // cursor

    case 6187:
      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + '$1'), /(image-set)/, WEBKIT + '$1'), value, '') + value;
    // background, background-image

    case 5495:
    case 3959:
      return replace(value, /(image-set\([^]*)/, WEBKIT + '$1' + '$`$1');
    // justify-content

    case 4968:
      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + 'box-pack:$3' + MS + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + WEBKIT + value + value;
    // (margin|padding)-inline-(start|end)

    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace(value, /(.+)-inline(.+)/, WEBKIT + '$1$2') + value;
    // (min|max)?(width|height|inline-size|block-size)

    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      // stretch, max-content, min-content, fill-available
      if (strlen(value) - 1 - length > 6) switch (charat(value, length + 1)) {
        // (m)ax-content, (m)in-content
        case 109:
          // -
          if (charat(value, length + 4) !== 45) break;
        // (f)ill-available, (f)it-content

        case 102:
          return replace(value, /(.+:)(.+)-([^]+)/, '$1' + WEBKIT + '$2-$3' + '$1' + MOZ + (charat(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;
        // (s)tretch

        case 115:
          return ~indexof(value, 'stretch') ? prefix(replace(value, 'stretch', 'fill-available'), length) + value : value;
      }
      break;
    // position: sticky

    case 4949:
      // (s)ticky?
      if (charat(value, length + 1) !== 115) break;
    // display: (flex|inline-flex)

    case 6444:
      switch (charat(value, strlen(value) - 3 - (~indexof(value, '!important') && 10))) {
        // stic(k)y
        case 107:
          return replace(value, ':', ':' + WEBKIT) + value;
        // (inline-)?fl(e)x

        case 101:
          return replace(value, /(.+:)([^;!]+)(;|!.+)?/, '$1' + WEBKIT + (charat(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + WEBKIT + '$2$3' + '$1' + MS + '$2box$3') + value;
      }

      break;
    // writing-mode

    case 5936:
      switch (charat(value, length + 11)) {
        // vertical-l(r)
        case 114:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb') + value;
        // vertical-r(l)

        case 108:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value;
        // horizontal(-)tb

        case 45:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'lr') + value;
      }

      return WEBKIT + value + MS + value + value;
  }

  return value;
}

var prefixer = function prefixer(element, index, children, callback) {
  if (element.length > -1) if (!element["return"]) switch (element.type) {
    case DECLARATION:
      element["return"] = prefix(element.value, element.length);
      break;

    case KEYFRAMES:
      return serialize([copy(element, {
        value: replace(element.value, '@', '@' + WEBKIT)
      })], callback);

    case RULESET:
      if (element.length) return combine(element.props, function (value) {
        switch (match$1(value, /(::plac\w+|:read-\w+)/)) {
          // :read-(only|write)
          case ':read-only':
          case ':read-write':
            return serialize([copy(element, {
              props: [replace(value, /:(read-\w+)/, ':' + MOZ + '$1')]
            })], callback);
          // :placeholder

          case '::placeholder':
            return serialize([copy(element, {
              props: [replace(value, /:(plac\w+)/, ':' + WEBKIT + 'input-$1')]
            }), copy(element, {
              props: [replace(value, /:(plac\w+)/, ':' + MOZ + '$1')]
            }), copy(element, {
              props: [replace(value, /:(plac\w+)/, MS + 'input-$1')]
            })], callback);
        }

        return '';
      });
  }
};

var getServerStylisCache = isBrowser$4 ? undefined : weakMemoize(function () {
  return memoize(function () {
    return {};
  });
});
var defaultStylisPlugins = [prefixer];

var createCache = function createCache(options) {
  var key = options.key;

  if (isBrowser$4 && key === 'css') {
    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
    // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
    // note this very very intentionally targets all style elements regardless of the key to ensure
    // that creating a cache works inside of render of a React component

    Array.prototype.forEach.call(ssrStyles, function (node) {
      // we want to only move elements which have a space in the data-emotion attribute value
      // because that indicates that it is an Emotion 11 server-side rendered style elements
      // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
      // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
      // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
      // will not result in the Emotion 10 styles being destroyed
      var dataEmotionAttribute = node.getAttribute('data-emotion');

      if (dataEmotionAttribute.indexOf(' ') === -1) {
        return;
      }

      document.head.appendChild(node);
      node.setAttribute('data-s', '');
    });
  }

  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;

  var inserted = {};
  var container;
  var nodesToHydrate = [];

  if (isBrowser$4) {
    container = options.container || document.head;
    Array.prototype.forEach.call( // this means we will ignore elements which don't have a space in them which
    // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
    document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node) {
      var attrib = node.getAttribute("data-emotion").split(' ');

      for (var i = 1; i < attrib.length; i++) {
        inserted[attrib[i]] = true;
      }

      nodesToHydrate.push(node);
    });
  }

  var _insert;

  var omnipresentPlugins = [compat, removeLabel];

  if (!getServerStylisCache) {
    var currentSheet;
    var finalizingPlugins = [stringify, rulesheet(function (rule) {
      currentSheet.insert(rule);
    })];
    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));

    var stylis = function stylis(styles) {
      return serialize(compile(styles), serializer);
    };

    _insert = function insert(selector, serialized, sheet, shouldCache) {
      currentSheet = sheet;

      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);

      if (shouldCache) {
        cache.inserted[serialized.name] = true;
      }
    };
  } else {
    var _finalizingPlugins = [stringify];

    var _serializer = middleware(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));

    var _stylis = function _stylis(styles) {
      return serialize(compile(styles), _serializer);
    };

    var serverStylisCache = getServerStylisCache(stylisPlugins)(key);

    var getRules = function getRules(selector, serialized) {
      var name = serialized.name;

      if (serverStylisCache[name] === undefined) {
        serverStylisCache[name] = _stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
      }

      return serverStylisCache[name];
    };

    _insert = function _insert(selector, serialized, sheet, shouldCache) {
      var name = serialized.name;
      var rules = getRules(selector, serialized);

      if (cache.compat === undefined) {
        // in regular mode, we don't set the styles on the inserted cache
        // since we don't need to and that would be wasting memory
        // we return them so that they are rendered in a style tag
        if (shouldCache) {
          cache.inserted[name] = true;
        }

        return rules;
      } else {
        // in compat mode, we put the styles on the inserted cache so
        // that emotion-server can pull out the styles
        // except when we don't want to cache it which was in Global but now
        // is nowhere but we don't want to do a major right now
        // and just in case we're going to leave the case here
        // it's also not affecting client side bundle size
        // so it's really not a big deal
        if (shouldCache) {
          cache.inserted[name] = rules;
        } else {
          return rules;
        }
      }
    };
  }

  var cache = {
    key: key,
    sheet: new StyleSheet({
      key: key,
      container: container,
      nonce: options.nonce,
      speedy: options.speedy,
      prepend: options.prepend,
      insertionPoint: options.insertionPoint
    }),
    nonce: options.nonce,
    inserted: inserted,
    registered: {},
    insert: _insert
  };
  cache.sheet.hydrate(nodesToHydrate);
  return cache;
};

var hoistNonReactStatics_cjs;
var hasRequiredHoistNonReactStatics_cjs;

function requireHoistNonReactStatics_cjs () {
	if (hasRequiredHoistNonReactStatics_cjs) return hoistNonReactStatics_cjs;
	hasRequiredHoistNonReactStatics_cjs = 1;

	var reactIs = requireReactIs$1();

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	var REACT_STATICS = {
	  childContextTypes: true,
	  contextType: true,
	  contextTypes: true,
	  defaultProps: true,
	  displayName: true,
	  getDefaultProps: true,
	  getDerivedStateFromError: true,
	  getDerivedStateFromProps: true,
	  mixins: true,
	  propTypes: true,
	  type: true
	};
	var KNOWN_STATICS = {
	  name: true,
	  length: true,
	  prototype: true,
	  caller: true,
	  callee: true,
	  arguments: true,
	  arity: true
	};
	var FORWARD_REF_STATICS = {
	  '$$typeof': true,
	  render: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true
	};
	var MEMO_STATICS = {
	  '$$typeof': true,
	  compare: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true,
	  type: true
	};
	var TYPE_STATICS = {};
	TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
	TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

	function getStatics(component) {
	  // React v16.11 and below
	  if (reactIs.isMemo(component)) {
	    return MEMO_STATICS;
	  } // React v16.12 and above


	  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
	}

	var defineProperty = Object.defineProperty;
	var getOwnPropertyNames = Object.getOwnPropertyNames;
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var getPrototypeOf = Object.getPrototypeOf;
	var objectPrototype = Object.prototype;
	function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
	  if (typeof sourceComponent !== 'string') {
	    // don't hoist over string (html) components
	    if (objectPrototype) {
	      var inheritedComponent = getPrototypeOf(sourceComponent);

	      if (inheritedComponent && inheritedComponent !== objectPrototype) {
	        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
	      }
	    }

	    var keys = getOwnPropertyNames(sourceComponent);

	    if (getOwnPropertySymbols) {
	      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
	    }

	    var targetStatics = getStatics(targetComponent);
	    var sourceStatics = getStatics(sourceComponent);

	    for (var i = 0; i < keys.length; ++i) {
	      var key = keys[i];

	      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
	        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

	        try {
	          // Avoid failures from read-only properties
	          defineProperty(targetComponent, key, descriptor);
	        } catch (e) {}
	      }
	    }
	  }

	  return targetComponent;
	}

	hoistNonReactStatics_cjs = hoistNonReactStatics;
	return hoistNonReactStatics_cjs;
}

requireHoistNonReactStatics_cjs();

var isBrowser$3 = typeof document !== 'undefined';

function getRegisteredStyles(registered, registeredStyles, classNames) {
  var rawClassName = '';
  classNames.split(' ').forEach(function (className) {
    if (registered[className] !== undefined) {
      registeredStyles.push(registered[className] + ";");
    } else if (className) {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var registerStyles = function registerStyles(cache, serialized, isStringTag) {
  var className = cache.key + "-" + serialized.name;

  if ( // we only need to add the styles to the registered cache if the
  // class name could be used further down
  // the tree but if it's a string tag, we know it won't
  // so we don't have to add it to registered cache.
  // this improves memory usage since we can avoid storing the whole style string
  (isStringTag === false || // we need to always store it if we're in compat mode and
  // in node since emotion-server relies on whether a style is in
  // the registered cache to know whether a style is global or not
  // also, note that this check will be dead code eliminated in the browser
  isBrowser$3 === false && cache.compat !== undefined) && cache.registered[className] === undefined) {
    cache.registered[className] = serialized.styles;
  }
};
var insertStyles = function insertStyles(cache, serialized, isStringTag) {
  registerStyles(cache, serialized, isStringTag);
  var className = cache.key + "-" + serialized.name;

  if (cache.inserted[serialized.name] === undefined) {
    var stylesForSSR = '';
    var current = serialized;

    do {
      var maybeStyles = cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);

      if (!isBrowser$3 && maybeStyles !== undefined) {
        stylesForSSR += maybeStyles;
      }

      current = current.next;
    } while (current !== undefined);

    if (!isBrowser$3 && stylesForSSR.length !== 0) {
      return stylesForSSR;
    }
  }
};

/* eslint-disable */
// Inspired by https://github.com/garycourt/murmurhash-js
// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
function murmur2(str) {
  // 'm' and 'r' are mixing constants generated offline.
  // They're not really 'magic', they just happen to work well.
  // const m = 0x5bd1e995;
  // const r = 24;
  // Initialize the hash
  var h = 0; // Mix 4 bytes at a time into the hash

  var k,
      i = 0,
      len = str.length;

  for (; len >= 4; ++i, len -= 4) {
    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
    k =
    /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
    k ^=
    /* k >>> r: */
    k >>> 24;
    h =
    /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
    /* Math.imul(h, m): */
    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Handle the last few bytes of the input array


  switch (len) {
    case 3:
      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

    case 2:
      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

    case 1:
      h ^= str.charCodeAt(i) & 0xff;
      h =
      /* Math.imul(h, m): */
      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Do a few final mixes of the hash to ensure the last few
  // bytes are well-incorporated.


  h ^= h >>> 13;
  h =
  /* Math.imul(h, m): */
  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  return ((h ^ h >>> 15) >>> 0).toString(36);
}

var unitlessKeys = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  scale: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};

var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

var isCustomProperty = function isCustomProperty(property) {
  return property.charCodeAt(1) === 45;
};

var isProcessableValue = function isProcessableValue(value) {
  return value != null && typeof value !== 'boolean';
};

var processStyleName = /* #__PURE__ */memoize(function (styleName) {
  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
});

var processStyleValue = function processStyleValue(key, value) {
  switch (key) {
    case 'animation':
    case 'animationName':
      {
        if (typeof value === 'string') {
          return value.replace(animationRegex, function (match, p1, p2) {
            cursor = {
              name: p1,
              styles: p2,
              next: cursor
            };
            return p1;
          });
        }
      }
  }

  if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
    return value + 'px';
  }

  return value;
};

function handleInterpolation(mergedProps, registered, interpolation) {
  if (interpolation == null) {
    return '';
  }

  var componentSelector = interpolation;

  if (componentSelector.__emotion_styles !== undefined) {

    return componentSelector;
  }

  switch (typeof interpolation) {
    case 'boolean':
      {
        return '';
      }

    case 'object':
      {
        var keyframes = interpolation;

        if (keyframes.anim === 1) {
          cursor = {
            name: keyframes.name,
            styles: keyframes.styles,
            next: cursor
          };
          return keyframes.name;
        }

        var serializedStyles = interpolation;

        if (serializedStyles.styles !== undefined) {
          var next = serializedStyles.next;

          if (next !== undefined) {
            // not the most efficient thing ever but this is a pretty rare case
            // and there will be very few iterations of this generally
            while (next !== undefined) {
              cursor = {
                name: next.name,
                styles: next.styles,
                next: cursor
              };
              next = next.next;
            }
          }

          var styles = serializedStyles.styles + ";";
          return styles;
        }

        return createStringFromObject(mergedProps, registered, interpolation);
      }

    case 'function':
      {
        if (mergedProps !== undefined) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        }

        break;
      }
  } // finalize string values (regular strings and functions interpolated into css calls)


  var asString = interpolation;

  if (registered == null) {
    return asString;
  }

  var cached = registered[asString];
  return cached !== undefined ? cached : asString;
}

function createStringFromObject(mergedProps, registered, obj) {
  var string = '';

  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    }
  } else {
    for (var key in obj) {
      var value = obj[key];

      if (typeof value !== 'object') {
        var asString = value;

        if (registered != null && registered[asString] !== undefined) {
          string += key + "{" + registered[asString] + "}";
        } else if (isProcessableValue(asString)) {
          string += processStyleName(key) + ":" + processStyleValue(key, asString) + ";";
        }
      } else {

        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
          for (var _i = 0; _i < value.length; _i++) {
            if (isProcessableValue(value[_i])) {
              string += processStyleName(key) + ":" + processStyleValue(key, value[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value);

          switch (key) {
            case 'animation':
            case 'animationName':
              {
                string += processStyleName(key) + ":" + interpolated + ";";
                break;
              }

            default:
              {

                string += key + "{" + interpolated + "}";
              }
          }
        }
      }
    }
  }

  return string;
}

var labelPattern = /label:\s*([^\s;{]+)\s*(;|$)/g; // this is the cursor for keyframes
// keyframes are stored on the SerializedStyles object as a linked list

var cursor;
function serializeStyles(args, registered, mergedProps) {
  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
    return args[0];
  }

  var stringMode = true;
  var styles = '';
  cursor = undefined;
  var strings = args[0];

  if (strings == null || strings.raw === undefined) {
    stringMode = false;
    styles += handleInterpolation(mergedProps, registered, strings);
  } else {
    var asTemplateStringsArr = strings;

    styles += asTemplateStringsArr[0];
  } // we start at 1 since we've already handled the first arg


  for (var i = 1; i < args.length; i++) {
    styles += handleInterpolation(mergedProps, registered, args[i]);

    if (stringMode) {
      var templateStringsArr = strings;

      styles += templateStringsArr[i];
    }
  } // using a global regex with .exec is stateful so lastIndex has to be reset each time


  labelPattern.lastIndex = 0;
  var identifierName = '';
  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

  while ((match = labelPattern.exec(styles)) !== null) {
    identifierName += '-' + match[1];
  }

  var name = murmur2(styles) + identifierName;

  return {
    name: name,
    styles: styles,
    next: cursor
  };
}

var isBrowser$2 = typeof document !== 'undefined';

var syncFallback = function syncFallback(create) {
  return create();
};

var useInsertionEffect = React$1['useInsertion' + 'Effect'] ? React$1['useInsertion' + 'Effect'] : false;
var useInsertionEffectAlwaysWithSyncFallback = !isBrowser$2 ? syncFallback : useInsertionEffect || syncFallback;

var isBrowser$1 = typeof document !== 'undefined';

var EmotionCacheContext = /* #__PURE__ */reactExports.createContext( // we're doing this to avoid preconstruct's dead code elimination in this one case
// because this module is primarily intended for the browser and node
// but it's also required in react native and similar environments sometimes
// and we could have a special build just for that
// but this is much easier and the native packages
// might use a different theme context in the future anyway
typeof HTMLElement !== 'undefined' ? /* #__PURE__ */createCache({
  key: 'css'
}) : null);

EmotionCacheContext.Provider;

var withEmotionCache = function withEmotionCache(func) {
  return /*#__PURE__*/reactExports.forwardRef(function (props, ref) {
    // the cache will never be null in the browser
    var cache = reactExports.useContext(EmotionCacheContext);
    return func(props, cache, ref);
  });
};

if (!isBrowser$1) {
  withEmotionCache = function withEmotionCache(func) {
    return function (props) {
      var cache = reactExports.useContext(EmotionCacheContext);

      if (cache === null) {
        // yes, we're potentially creating this on every render
        // it doesn't actually matter though since it's only on the server
        // so there will only every be a single render
        // that could change in the future because of suspense and etc. but for now,
        // this works and i don't want to optimise for a future thing that we aren't sure about
        cache = createCache({
          key: 'css'
        });
        return /*#__PURE__*/reactExports.createElement(EmotionCacheContext.Provider, {
          value: cache
        }, func(props, cache));
      } else {
        return func(props, cache);
      }
    };
  };
}

var ThemeContext = /* #__PURE__ */reactExports.createContext({});

var hasOwn = {}.hasOwnProperty;

var typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';
var createEmotionProps = function createEmotionProps(type, props) {

  var newProps = {};

  for (var _key in props) {
    if (hasOwn.call(props, _key)) {
      newProps[_key] = props[_key];
    }
  }

  newProps[typePropName] = type; // Runtime labeling is an opt-in feature because:

  return newProps;
};

var Insertion$1 = function Insertion(_ref) {
  var cache = _ref.cache,
      serialized = _ref.serialized,
      isStringTag = _ref.isStringTag;
  registerStyles(cache, serialized, isStringTag);
  var rules = useInsertionEffectAlwaysWithSyncFallback(function () {
    return insertStyles(cache, serialized, isStringTag);
  });

  if (!isBrowser$1 && rules !== undefined) {
    var _ref2;

    var serializedNames = serialized.name;
    var next = serialized.next;

    while (next !== undefined) {
      serializedNames += ' ' + next.name;
      next = next.next;
    }

    return /*#__PURE__*/reactExports.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
      __html: rules
    }, _ref2.nonce = cache.sheet.nonce, _ref2));
  }

  return null;
};

var Emotion = /* #__PURE__ */withEmotionCache(function (props, cache, ref) {
  var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works
  // not passing the registered cache to serializeStyles because it would
  // make certain babel optimisations not possible

  if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) {
    cssProp = cache.registered[cssProp];
  }

  var WrappedComponent = props[typePropName];
  var registeredStyles = [cssProp];
  var className = '';

  if (typeof props.className === 'string') {
    className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
  } else if (props.className != null) {
    className = props.className + " ";
  }

  var serialized = serializeStyles(registeredStyles, undefined, reactExports.useContext(ThemeContext));

  className += cache.key + "-" + serialized.name;
  var newProps = {};

  for (var _key2 in props) {
    if (hasOwn.call(props, _key2) && _key2 !== 'css' && _key2 !== typePropName && (true )) {
      newProps[_key2] = props[_key2];
    }
  }

  newProps.className = className;

  if (ref) {
    newProps.ref = ref;
  }

  return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement(Insertion$1, {
    cache: cache,
    serialized: serialized,
    isStringTag: typeof WrappedComponent === 'string'
  }), /*#__PURE__*/reactExports.createElement(WrappedComponent, newProps));
});

var Emotion$1 = Emotion;

var jsx = function jsx(type, props) {
  // eslint-disable-next-line prefer-rest-params
  var args = arguments;

  if (props == null || !hasOwn.call(props, 'css')) {
    return reactExports.createElement.apply(undefined, args);
  }

  var argsLength = args.length;
  var createElementArgArray = new Array(argsLength);
  createElementArgArray[0] = Emotion$1;
  createElementArgArray[1] = createEmotionProps(type, props);

  for (var i = 2; i < argsLength; i++) {
    createElementArgArray[i] = args[i];
  }

  return reactExports.createElement.apply(null, createElementArgArray);
};

(function (_jsx) {
  var JSX;

  (function (_JSX) {})(JSX || (JSX = _jsx.JSX || (_jsx.JSX = {})));
})(jsx);

function css() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return serializeStyles(args);
}

function keyframes() {
  var insertable = css.apply(undefined, arguments);
  var name = "animation-" + insertable.name;
  return {
    name: name,
    styles: "@keyframes " + name + "{" + insertable.styles + "}",
    anim: 1,
    toString: function toString() {
      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
    }
  };
}

// eslint-disable-next-line no-undef
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

var isPropValid = /* #__PURE__ */memoize(function (prop) {
  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
  /* o */
  && prop.charCodeAt(1) === 110
  /* n */
  && prop.charCodeAt(2) < 91;
}
/* Z+1 */
);

var isBrowser = typeof document !== 'undefined';

var testOmitPropsOnStringTag = isPropValid;

var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
  return key !== 'theme';
};

var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
  return typeof tag === 'string' && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
};
var composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {
  var shouldForwardProp;

  if (options) {
    var optionsShouldForwardProp = options.shouldForwardProp;
    shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function (propName) {
      return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
    } : optionsShouldForwardProp;
  }

  if (typeof shouldForwardProp !== 'function' && isReal) {
    shouldForwardProp = tag.__emotion_forwardProp;
  }

  return shouldForwardProp;
};

var Insertion = function Insertion(_ref) {
  var cache = _ref.cache,
      serialized = _ref.serialized,
      isStringTag = _ref.isStringTag;
  registerStyles(cache, serialized, isStringTag);
  var rules = useInsertionEffectAlwaysWithSyncFallback(function () {
    return insertStyles(cache, serialized, isStringTag);
  });

  if (!isBrowser && rules !== undefined) {
    var _ref2;

    var serializedNames = serialized.name;
    var next = serialized.next;

    while (next !== undefined) {
      serializedNames += ' ' + next.name;
      next = next.next;
    }

    return /*#__PURE__*/reactExports.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
      __html: rules
    }, _ref2.nonce = cache.sheet.nonce, _ref2));
  }

  return null;
};

var createStyled$1 = function createStyled(tag, options) {

  var isReal = tag.__emotion_real === tag;
  var baseTag = isReal && tag.__emotion_base || tag;
  var identifierName;
  var targetClassName;

  if (options !== undefined) {
    identifierName = options.label;
    targetClassName = options.target;
  }

  var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
  var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
  var shouldUseAs = !defaultShouldForwardProp('as');
  return function () {
    // eslint-disable-next-line prefer-rest-params
    var args = arguments;
    var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];

    if (identifierName !== undefined) {
      styles.push("label:" + identifierName + ";");
    }

    if (args[0] == null || args[0].raw === undefined) {
      // eslint-disable-next-line prefer-spread
      styles.push.apply(styles, args);
    } else {
      var templateStringsArr = args[0];

      styles.push(templateStringsArr[0]);
      var len = args.length;
      var i = 1;

      for (; i < len; i++) {

        styles.push(args[i], templateStringsArr[i]);
      }
    }

    var Styled = withEmotionCache(function (props, cache, ref) {
      var FinalTag = shouldUseAs && props.as || baseTag;
      var className = '';
      var classInterpolations = [];
      var mergedProps = props;

      if (props.theme == null) {
        mergedProps = {};

        for (var key in props) {
          mergedProps[key] = props[key];
        }

        mergedProps.theme = reactExports.useContext(ThemeContext);
      }

      if (typeof props.className === 'string') {
        className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
      } else if (props.className != null) {
        className = props.className + " ";
      }

      var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
      className += cache.key + "-" + serialized.name;

      if (targetClassName !== undefined) {
        className += " " + targetClassName;
      }

      var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
      var newProps = {};

      for (var _key in props) {
        if (shouldUseAs && _key === 'as') continue;

        if (finalShouldForwardProp(_key)) {
          newProps[_key] = props[_key];
        }
      }

      newProps.className = className;

      if (ref) {
        newProps.ref = ref;
      }

      return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement(Insertion, {
        cache: cache,
        serialized: serialized,
        isStringTag: typeof FinalTag === 'string'
      }), /*#__PURE__*/reactExports.createElement(FinalTag, newProps));
    });
    Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
    Styled.defaultProps = tag.defaultProps;
    Styled.__emotion_real = Styled;
    Styled.__emotion_base = baseTag;
    Styled.__emotion_styles = styles;
    Styled.__emotion_forwardProp = shouldForwardProp;
    Object.defineProperty(Styled, 'toString', {
      value: function value() {

        return "." + targetClassName;
      }
    });

    Styled.withComponent = function (nextTag, nextOptions) {
      var newStyled = createStyled(nextTag, _extends({}, options, nextOptions, {
        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
      }));
      return newStyled.apply(undefined, styles);
    };

    return Styled;
  };
};

var tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG
'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];

// bind it to avoid mutating the original function
var newStyled = createStyled$1.bind(null);
tags.forEach(function (tagName) {
  newStyled[tagName] = newStyled(tagName);
});

/**
 * @mui/styled-engine v6.3.0
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/* eslint-disable no-underscore-dangle */
function styled$1(tag, options) {
  const stylesFactory = newStyled(tag, options);
  if (process.env.NODE_ENV !== 'production') {
    return (...styles) => {
      const component = typeof tag === 'string' ? `"${tag}"` : 'component';
      if (styles.length === 0) {
        console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join('\n'));
      } else if (styles.some(style => style === undefined)) {
        console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
      }
      return stylesFactory(...styles);
    };
  }
  return stylesFactory;
}

// eslint-disable-next-line @typescript-eslint/naming-convention
function internal_mutateStyles(tag, processor) {
  // Emotion attaches all the styles as `__emotion_styles`.
  // Ref: https://github.com/emotion-js/emotion/blob/16d971d0da229596d6bcc39d282ba9753c9ee7cf/packages/styled/src/base.js#L186
  if (Array.isArray(tag.__emotion_styles)) {
    tag.__emotion_styles = processor(tag.__emotion_styles);
  }
}

// Emotion only accepts an array, but we want to avoid allocations
const wrapper = [];
// eslint-disable-next-line @typescript-eslint/naming-convention
function internal_serializeStyles(styles) {
  wrapper[0] = styles;
  return serializeStyles(wrapper);
}

// Sorted ASC by size. That's important.
// It can't be configured as it's used statically for propTypes.
const sortBreakpointsValues = values => {
  const breakpointsAsArray = Object.keys(values).map(key => ({
    key,
    val: values[key]
  })) || [];
  // Sort in ascending order
  breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
  return breakpointsAsArray.reduce((acc, obj) => {
    return {
      ...acc,
      [obj.key]: obj.val
    };
  }, {});
};

// Keep in mind that @media is inclusive by the CSS specification.
function createBreakpoints(breakpoints) {
  const {
    // The breakpoint **start** at this value.
    // For instance with the first breakpoint xs: [xs, sm).
    values = {
      xs: 0,
      // phone
      sm: 600,
      // tablet
      md: 900,
      // small laptop
      lg: 1200,
      // desktop
      xl: 1536 // large screen
    },
    unit = 'px',
    step = 5,
    ...other
  } = breakpoints;
  const sortedValues = sortBreakpointsValues(values);
  const keys = Object.keys(sortedValues);
  function up(key) {
    const value = typeof values[key] === 'number' ? values[key] : key;
    return `@media (min-width:${value}${unit})`;
  }
  function down(key) {
    const value = typeof values[key] === 'number' ? values[key] : key;
    return `@media (max-width:${value - step / 100}${unit})`;
  }
  function between(start, end) {
    const endIndex = keys.indexOf(end);
    return `@media (min-width:${typeof values[start] === 'number' ? values[start] : start}${unit}) and ` + `(max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100}${unit})`;
  }
  function only(key) {
    if (keys.indexOf(key) + 1 < keys.length) {
      return between(key, keys[keys.indexOf(key) + 1]);
    }
    return up(key);
  }
  function not(key) {
    // handle first and last key separately, for better readability
    const keyIndex = keys.indexOf(key);
    if (keyIndex === 0) {
      return up(keys[1]);
    }
    if (keyIndex === keys.length - 1) {
      return down(keys[keyIndex]);
    }
    return between(key, keys[keys.indexOf(key) + 1]).replace('@media', '@media not all and');
  }
  return {
    keys,
    values: sortedValues,
    up,
    down,
    between,
    only,
    not,
    unit,
    ...other
  };
}

const shape = {
  borderRadius: 4
};

// The different signatures imply different meaning for their arguments that can't be expressed structurally.
// We express the difference with variable names.

function createSpacing(spacingInput = 8,
// Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
// Smaller components, such as icons, can align to a 4dp grid.
// https://m2.material.io/design/layout/understanding-layout.html
transform = createUnarySpacing({
  spacing: spacingInput
})) {
  // Already transformed.
  if (spacingInput.mui) {
    return spacingInput;
  }
  const spacing = (...argsInput) => {
    if (process.env.NODE_ENV !== 'production') {
      if (!(argsInput.length <= 4)) {
        console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
      }
    }
    const args = argsInput.length === 0 ? [1] : argsInput;
    return args.map(argument => {
      const output = transform(argument);
      return typeof output === 'number' ? `${output}px` : output;
    }).join(' ');
  };
  spacing.mui = true;
  return spacing;
}

/**
 * A universal utility to style components with multiple color modes. Always use it from the theme object.
 * It works with:
 *  - [Basic theme](https://mui.com/material-ui/customization/dark-mode/)
 *  - [CSS theme variables](https://mui.com/material-ui/customization/css-theme-variables/overview/)
 *  - Zero-runtime engine
 *
 * Tips: Use an array over object spread and place `theme.applyStyles()` last.
 *
 * With the styled function:
 * ✅ [{ background: '#e5e5e5' }, theme.applyStyles('dark', { background: '#1c1c1c' })]
 * 🚫 { background: '#e5e5e5', ...theme.applyStyles('dark', { background: '#1c1c1c' })}
 *
 * With the sx prop:
 * ✅ [{ background: '#e5e5e5' }, theme => theme.applyStyles('dark', { background: '#1c1c1c' })]
 * 🚫 { background: '#e5e5e5', ...theme => theme.applyStyles('dark', { background: '#1c1c1c' })}
 *
 * @example
 * 1. using with `styled`:
 * ```jsx
 *   const Component = styled('div')(({ theme }) => [
 *     { background: '#e5e5e5' },
 *     theme.applyStyles('dark', {
 *       background: '#1c1c1c',
 *       color: '#fff',
 *     }),
 *   ]);
 * ```
 *
 * @example
 * 2. using with `sx` prop:
 * ```jsx
 *   <Box sx={[
 *     { background: '#e5e5e5' },
 *     theme => theme.applyStyles('dark', {
 *        background: '#1c1c1c',
 *        color: '#fff',
 *      }),
 *     ]}
 *   />
 * ```
 *
 * @example
 * 3. theming a component:
 * ```jsx
 *   extendTheme({
 *     components: {
 *       MuiButton: {
 *         styleOverrides: {
 *           root: ({ theme }) => [
 *             { background: '#e5e5e5' },
 *             theme.applyStyles('dark', {
 *               background: '#1c1c1c',
 *               color: '#fff',
 *             }),
 *           ],
 *         },
 *       }
 *     }
 *   })
 *```
 */
function applyStyles(key, styles) {
  // @ts-expect-error this is 'any' type
  const theme = this;
  if (theme.vars) {
    if (!theme.colorSchemes?.[key] || typeof theme.getColorSchemeSelector !== 'function') {
      return {};
    }
    // If CssVarsProvider is used as a provider, returns '*:where({selector}) &'
    let selector = theme.getColorSchemeSelector(key);
    if (selector === '&') {
      return styles;
    }
    if (selector.includes('data-') || selector.includes('.')) {
      // '*' is required as a workaround for Emotion issue (https://github.com/emotion-js/emotion/issues/2836)
      selector = `*:where(${selector.replace(/\s*&$/, '')}) &`;
    }
    return {
      [selector]: styles
    };
  }
  if (theme.palette.mode === key) {
    return styles;
  }
  return {};
}

function createTheme$1(options = {}, ...args) {
  const {
    breakpoints: breakpointsInput = {},
    palette: paletteInput = {},
    spacing: spacingInput,
    shape: shapeInput = {},
    ...other
  } = options;
  const breakpoints = createBreakpoints(breakpointsInput);
  const spacing = createSpacing(spacingInput);
  let muiTheme = deepmerge({
    breakpoints,
    direction: 'ltr',
    components: {},
    // Inject component definitions.
    palette: {
      mode: 'light',
      ...paletteInput
    },
    spacing,
    shape: {
      ...shape,
      ...shapeInput
    }
  }, other);
  muiTheme = cssContainerQueries(muiTheme);
  muiTheme.applyStyles = applyStyles;
  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
  muiTheme.unstable_sxConfig = {
    ...defaultSxConfig,
    ...other?.unstable_sxConfig
  };
  muiTheme.unstable_sx = function sx(props) {
    return styleFunctionSx({
      sx: props,
      theme: this
    });
  };
  return muiTheme;
}

function preprocessStyles(input) {
  const {
    variants,
    ...style
  } = input;
  const result = {
    variants,
    style: internal_serializeStyles(style),
    isProcessed: true
  };

  // Not supported on styled-components
  if (result.style === style) {
    return result;
  }
  if (variants) {
    variants.forEach(variant => {
      if (typeof variant.style !== 'function') {
        variant.style = internal_serializeStyles(variant.style);
      }
    });
  }
  return result;
}

/* eslint-disable no-underscore-dangle */
/* eslint-disable no-labels */
/* eslint-disable no-lone-blocks */

const systemDefaultTheme = createTheme$1();

// Update /system/styled/#api in case if this changes
function shouldForwardProp(prop) {
  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
}
function defaultOverridesResolver(slot) {
  if (!slot) {
    return null;
  }
  return (_props, styles) => styles[slot];
}
function attachTheme(props, themeId, defaultTheme) {
  props.theme = isObjectEmpty(props.theme) ? defaultTheme : props.theme[themeId] || props.theme;
}
function processStyle(props, style) {
  /*
   * Style types:
   *  - null/undefined
   *  - string
   *  - CSS style object: { [cssKey]: [cssValue], variants }
   *  - Processed style object: { style, variants, isProcessed: true }
   *  - Array of any of the above
   */

  const resolvedStyle = typeof style === 'function' ? style(props) : style;
  if (Array.isArray(resolvedStyle)) {
    return resolvedStyle.flatMap(subStyle => processStyle(props, subStyle));
  }
  if (Array.isArray(resolvedStyle?.variants)) {
    let rootStyle;
    if (resolvedStyle.isProcessed) {
      rootStyle = resolvedStyle.style;
    } else {
      const {
        variants,
        ...otherStyles
      } = resolvedStyle;
      rootStyle = otherStyles;
    }
    return processStyleVariants(props, resolvedStyle.variants, [rootStyle]);
  }
  if (resolvedStyle?.isProcessed) {
    return resolvedStyle.style;
  }
  return resolvedStyle;
}
function processStyleVariants(props, variants, results = []) {
  let mergedState; // We might not need it, initialized lazily

  variantLoop: for (let i = 0; i < variants.length; i += 1) {
    const variant = variants[i];
    if (typeof variant.props === 'function') {
      mergedState ??= {
        ...props,
        ...props.ownerState,
        ownerState: props.ownerState
      };
      if (!variant.props(mergedState)) {
        continue;
      }
    } else {
      for (const key in variant.props) {
        if (props[key] !== variant.props[key] && props.ownerState?.[key] !== variant.props[key]) {
          continue variantLoop;
        }
      }
    }
    if (typeof variant.style === 'function') {
      mergedState ??= {
        ...props,
        ...props.ownerState,
        ownerState: props.ownerState
      };
      results.push(variant.style(mergedState));
    } else {
      results.push(variant.style);
    }
  }
  return results;
}
function createStyled(input = {}) {
  const {
    themeId,
    defaultTheme = systemDefaultTheme,
    rootShouldForwardProp = shouldForwardProp,
    slotShouldForwardProp = shouldForwardProp
  } = input;
  function styleAttachTheme(props) {
    attachTheme(props, themeId, defaultTheme);
  }
  const styled = (tag, inputOptions = {}) => {
    // If `tag` is already a styled component, filter out the `sx` style function
    // to prevent unnecessary styles generated by the composite components.
    internal_mutateStyles(tag, styles => styles.filter(style => style !== styleFunctionSx));
    const {
      name: componentName,
      slot: componentSlot,
      skipVariantsResolver: inputSkipVariantsResolver,
      skipSx: inputSkipSx,
      // TODO v6: remove `lowercaseFirstLetter()` in the next major release
      // For more details: https://github.com/mui/material-ui/pull/37908
      overridesResolver = defaultOverridesResolver(lowercaseFirstLetter(componentSlot)),
      ...options
    } = inputOptions;

    // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver :
    // TODO v6: remove `Root` in the next major release
    // For more details: https://github.com/mui/material-ui/pull/37908
    componentSlot && componentSlot !== 'Root' && componentSlot !== 'root' || false;
    const skipSx = inputSkipSx || false;
    let shouldForwardPropOption = shouldForwardProp;

    // TODO v6: remove `Root` in the next major release
    // For more details: https://github.com/mui/material-ui/pull/37908
    if (componentSlot === 'Root' || componentSlot === 'root') {
      shouldForwardPropOption = rootShouldForwardProp;
    } else if (componentSlot) {
      // any other slot specified
      shouldForwardPropOption = slotShouldForwardProp;
    } else if (isStringTag(tag)) {
      // for string (html) tag, preserve the behavior in emotion & styled-components.
      shouldForwardPropOption = undefined;
    }
    const defaultStyledResolver = styled$1(tag, {
      shouldForwardProp: shouldForwardPropOption,
      label: generateStyledLabel(componentName, componentSlot),
      ...options
    });
    const transformStyle = style => {
      // On the server Emotion doesn't use React.forwardRef for creating components, so the created
      // component stays as a function. This condition makes sure that we do not interpolate functions
      // which are basically components used as a selectors.
      if (typeof style === 'function' && style.__emotion_real !== style) {
        return function styleFunctionProcessor(props) {
          return processStyle(props, style);
        };
      }
      if (isPlainObject(style)) {
        const serialized = preprocessStyles(style);
        if (!serialized.variants) {
          return serialized.style;
        }
        return function styleObjectProcessor(props) {
          return processStyle(props, serialized);
        };
      }
      return style;
    };
    const muiStyledResolver = (...expressionsInput) => {
      const expressionsHead = [];
      const expressionsBody = expressionsInput.map(transformStyle);
      const expressionsTail = [];

      // Preprocess `props` to set the scoped theme value.
      // This must run before any other expression.
      expressionsHead.push(styleAttachTheme);
      if (componentName && overridesResolver) {
        expressionsTail.push(function styleThemeOverrides(props) {
          const theme = props.theme;
          const styleOverrides = theme.components?.[componentName]?.styleOverrides;
          if (!styleOverrides) {
            return null;
          }
          const resolvedStyleOverrides = {};

          // TODO: v7 remove iteration and use `resolveStyleArg(styleOverrides[slot])` directly
          // eslint-disable-next-line guard-for-in
          for (const slotKey in styleOverrides) {
            resolvedStyleOverrides[slotKey] = processStyle(props, styleOverrides[slotKey]);
          }
          return overridesResolver(props, resolvedStyleOverrides);
        });
      }
      if (componentName && !skipVariantsResolver) {
        expressionsTail.push(function styleThemeVariants(props) {
          const theme = props.theme;
          const themeVariants = theme?.components?.[componentName]?.variants;
          if (!themeVariants) {
            return null;
          }
          return processStyleVariants(props, themeVariants);
        });
      }
      if (!skipSx) {
        expressionsTail.push(styleFunctionSx);
      }

      // This function can be called as a tagged template, so the first argument would contain
      // CSS `string[]` values.
      if (Array.isArray(expressionsBody[0])) {
        const inputStrings = expressionsBody.shift();

        // We need to add placeholders in the tagged template for the custom functions we have
        // possibly added (attachTheme, overrides, variants, and sx).
        const placeholdersHead = new Array(expressionsHead.length).fill('');
        const placeholdersTail = new Array(expressionsTail.length).fill('');
        let outputStrings;
        // prettier-ignore
        {
          outputStrings = [...placeholdersHead, ...inputStrings, ...placeholdersTail];
          outputStrings.raw = [...placeholdersHead, ...inputStrings.raw, ...placeholdersTail];
        }

        // The only case where we put something before `attachTheme`
        expressionsHead.unshift(outputStrings);
      }
      const expressions = [...expressionsHead, ...expressionsBody, ...expressionsTail];
      const Component = defaultStyledResolver(...expressions);
      if (tag.muiName) {
        Component.muiName = tag.muiName;
      }
      if (process.env.NODE_ENV !== 'production') {
        Component.displayName = generateDisplayName(componentName, componentSlot, tag);
      }
      return Component;
    };
    if (defaultStyledResolver.withConfig) {
      muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
    }
    return muiStyledResolver;
  };
  return styled;
}
function generateDisplayName(componentName, componentSlot, tag) {
  if (componentName) {
    return `${componentName}${capitalize(componentSlot || '')}`;
  }
  return `Styled(${getDisplayName(tag)})`;
}
function generateStyledLabel(componentName, componentSlot) {
  let label;
  if (process.env.NODE_ENV !== 'production') {
    if (componentName) {
      // TODO v6: remove `lowercaseFirstLetter()` in the next major release
      // For more details: https://github.com/mui/material-ui/pull/37908
      label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;
    }
  }
  return label;
}
function isObjectEmpty(object) {
  // eslint-disable-next-line
  for (const _ in object) {
    return false;
  }
  return true;
}

// https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40
function isStringTag(tag) {
  return typeof tag === 'string' &&
  // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag.charCodeAt(0) > 96;
}
function lowercaseFirstLetter(string) {
  if (!string) {
    return string;
  }
  return string.charAt(0).toLowerCase() + string.slice(1);
}

/**
 * Returns a number whose value is limited to the given range.
 * @param {number} value The value to be clamped
 * @param {number} min The lower boundary of the output range
 * @param {number} max The upper boundary of the output range
 * @returns {number} A number in the range [min, max]
 */
function clampWrapper(value, min = 0, max = 1) {
  if (process.env.NODE_ENV !== 'production') {
    if (value < min || value > max) {
      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
    }
  }
  return clamp(value, min, max);
}

/**
 * Converts a color from CSS hex format to CSS rgb format.
 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
 * @returns {string} A CSS rgb color string
 */
function hexToRgb(color) {
  color = color.slice(1);
  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');
  let colors = color.match(re);
  if (colors && colors[0].length === 1) {
    colors = colors.map(n => n + n);
  }
  if (process.env.NODE_ENV !== 'production') {
    if (color.length !== color.trim().length) {
      console.error(`MUI: The color: "${color}" is invalid. Make sure the color input doesn't contain leading/trailing space.`);
    }
  }
  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {
    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
  }).join(', ')})` : '';
}

/**
 * Returns an object with the type and values of a color.
 *
 * Note: Does not support rgb % values.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @returns {object} - A MUI color object: {type: string, values: number[]}
 */
function decomposeColor(color) {
  // Idempotent
  if (color.type) {
    return color;
  }
  if (color.charAt(0) === '#') {
    return decomposeColor(hexToRgb(color));
  }
  const marker = color.indexOf('(');
  const type = color.substring(0, marker);
  if (!['rgb', 'rgba', 'hsl', 'hsla', 'color'].includes(type)) {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Unsupported \`${color}\` color.\n` + 'The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().' : formatMuiErrorMessage(9, color));
  }
  let values = color.substring(marker + 1, color.length - 1);
  let colorSpace;
  if (type === 'color') {
    values = values.split(' ');
    colorSpace = values.shift();
    if (values.length === 4 && values[3].charAt(0) === '/') {
      values[3] = values[3].slice(1);
    }
    if (!['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].includes(colorSpace)) {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: unsupported \`${colorSpace}\` color space.\n` + 'The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.' : formatMuiErrorMessage(10, colorSpace));
    }
  } else {
    values = values.split(',');
  }
  values = values.map(value => parseFloat(value));
  return {
    type,
    values,
    colorSpace
  };
}

/**
 * Returns a channel created from the input color.
 *
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @returns {string} - The channel for the color, that can be used in rgba or hsla colors
 */
const colorChannel = color => {
  const decomposedColor = decomposeColor(color);
  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.includes('hsl') && idx !== 0 ? `${val}%` : val).join(' ');
};
const private_safeColorChannel = (color, warning) => {
  try {
    return colorChannel(color);
  } catch (error) {
    if (warning && process.env.NODE_ENV !== 'production') {
      console.warn(warning);
    }
    return color;
  }
};

/**
 * Converts a color object with type and values to a string.
 * @param {object} color - Decomposed color
 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'
 * @param {array} color.values - [n,n,n] or [n,n,n,n]
 * @returns {string} A CSS color string
 */
function recomposeColor(color) {
  const {
    type,
    colorSpace
  } = color;
  let {
    values
  } = color;
  if (type.includes('rgb')) {
    // Only convert the first 3 values to int (i.e. not alpha)
    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);
  } else if (type.includes('hsl')) {
    values[1] = `${values[1]}%`;
    values[2] = `${values[2]}%`;
  }
  if (type.includes('color')) {
    values = `${colorSpace} ${values.join(' ')}`;
  } else {
    values = `${values.join(', ')}`;
  }
  return `${type}(${values})`;
}

/**
 * Converts a color from hsl format to rgb format.
 * @param {string} color - HSL color values
 * @returns {string} rgb color values
 */
function hslToRgb(color) {
  color = decomposeColor(color);
  const {
    values
  } = color;
  const h = values[0];
  const s = values[1] / 100;
  const l = values[2] / 100;
  const a = s * Math.min(l, 1 - l);
  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
  let type = 'rgb';
  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
  if (color.type === 'hsla') {
    type += 'a';
    rgb.push(values[3]);
  }
  return recomposeColor({
    type,
    values: rgb
  });
}
/**
 * The relative brightness of any point in a color space,
 * normalized to 0 for darkest black and 1 for lightest white.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @returns {number} The relative brightness of the color in the range 0 - 1
 */
function getLuminance(color) {
  color = decomposeColor(color);
  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;
  rgb = rgb.map(val => {
    if (color.type !== 'color') {
      val /= 255; // normalized
    }
    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
  });

  // Truncate at 3 digits
  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
}

/**
 * Calculates the contrast ratio between two colors.
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
 * @returns {number} A contrast ratio value in the range 0 - 21.
 */
function getContrastRatio(foreground, background) {
  const lumA = getLuminance(foreground);
  const lumB = getLuminance(background);
  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
}

/**
 * Sets the absolute transparency of a color.
 * Any existing alpha values are overwritten.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} value - value to set the alpha channel to in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */
function alpha(color, value) {
  color = decomposeColor(color);
  value = clampWrapper(value);
  if (color.type === 'rgb' || color.type === 'hsl') {
    color.type += 'a';
  }
  if (color.type === 'color') {
    color.values[3] = `/${value}`;
  } else {
    color.values[3] = value;
  }
  return recomposeColor(color);
}
function private_safeAlpha(color, value, warning) {
  try {
    return alpha(color, value);
  } catch (error) {
    return color;
  }
}

/**
 * Darkens a color.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */
function darken(color, coefficient) {
  color = decomposeColor(color);
  coefficient = clampWrapper(coefficient);
  if (color.type.includes('hsl')) {
    color.values[2] *= 1 - coefficient;
  } else if (color.type.includes('rgb') || color.type.includes('color')) {
    for (let i = 0; i < 3; i += 1) {
      color.values[i] *= 1 - coefficient;
    }
  }
  return recomposeColor(color);
}
function private_safeDarken(color, coefficient, warning) {
  try {
    return darken(color, coefficient);
  } catch (error) {
    return color;
  }
}

/**
 * Lightens a color.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} coefficient - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */
function lighten(color, coefficient) {
  color = decomposeColor(color);
  coefficient = clampWrapper(coefficient);
  if (color.type.includes('hsl')) {
    color.values[2] += (100 - color.values[2]) * coefficient;
  } else if (color.type.includes('rgb')) {
    for (let i = 0; i < 3; i += 1) {
      color.values[i] += (255 - color.values[i]) * coefficient;
    }
  } else if (color.type.includes('color')) {
    for (let i = 0; i < 3; i += 1) {
      color.values[i] += (1 - color.values[i]) * coefficient;
    }
  }
  return recomposeColor(color);
}
function private_safeLighten(color, coefficient, warning) {
  try {
    return lighten(color, coefficient);
  } catch (error) {
    return color;
  }
}

/**
 * Darken or lighten a color, depending on its luminance.
 * Light colors are darkened, dark colors are lightened.
 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
 * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
 * @returns {string} A CSS color string. Hex input values are returned as rgb
 */
function emphasize(color, coefficient = 0.15) {
  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
}
function private_safeEmphasize(color, coefficient, warning) {
  try {
    return emphasize(color, coefficient);
  } catch (error) {
    return color;
  }
}

const PropsContext = /*#__PURE__*/reactExports.createContext(undefined);
process.env.NODE_ENV !== "production" ? {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * @ignore
   */
  value: PropTypes.object
} : undefined;
function getThemeProps(params) {
  const {
    theme,
    name,
    props
  } = params;
  if (!theme || !theme.components || !theme.components[name]) {
    return props;
  }
  const config = theme.components[name];
  if (config.defaultProps) {
    // compatible with v5 signature
    return resolveProps(config.defaultProps, props);
  }
  if (!config.styleOverrides && !config.variants) {
    // v6 signature, no property 'defaultProps'
    return resolveProps(config, props);
  }
  return props;
}
function useDefaultProps$1({
  props,
  name
}) {
  const ctx = reactExports.useContext(PropsContext);
  return getThemeProps({
    props,
    name,
    theme: {
      components: ctx
    }
  });
}

/* eslint-disable @typescript-eslint/naming-convention */

// We need to pass an argument as `{ theme }` for PigmentCSS, but we don't want to
// allocate more objects.
const arg = {
  theme: undefined
};

/**
 * Memoize style function on theme.
 * Intended to be used in styled() calls that only need access to the theme.
 */
function unstable_memoTheme(styleFn) {
  let lastValue;
  let lastTheme;
  return function styleMemoized(props) {
    let value = lastValue;
    if (value === undefined || props.theme !== lastTheme) {
      arg.theme = props.theme;
      value = preprocessStyles(styleFn(arg));
      lastValue = value;
      lastTheme = props.theme;
    }
    return value;
  };
}

/**
 * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable
 * and they does not need to remember the prefix (defined once).
 */
function createGetCssVar$1(prefix = '') {
  function appendVar(...vars) {
    if (!vars.length) {
      return '';
    }
    const value = vars[0];
    if (typeof value === 'string' && !value.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)) {
      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;
    }
    return `, ${value}`;
  }

  // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.
  const getCssVar = (field, ...fallbacks) => {
    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...fallbacks)})`;
  };
  return getCssVar;
}

/**
 * This function create an object from keys, value and then assign to target
 *
 * @param {Object} obj : the target object to be assigned
 * @param {string[]} keys
 * @param {string | number} value
 *
 * @example
 * const source = {}
 * assignNestedKeys(source, ['palette', 'primary'], 'var(--palette-primary)')
 * console.log(source) // { palette: { primary: 'var(--palette-primary)' } }
 *
 * @example
 * const source = { palette: { primary: 'var(--palette-primary)' } }
 * assignNestedKeys(source, ['palette', 'secondary'], 'var(--palette-secondary)')
 * console.log(source) // { palette: { primary: 'var(--palette-primary)', secondary: 'var(--palette-secondary)' } }
 */
const assignNestedKeys = (obj, keys, value, arrayKeys = []) => {
  let temp = obj;
  keys.forEach((k, index) => {
    if (index === keys.length - 1) {
      if (Array.isArray(temp)) {
        temp[Number(k)] = value;
      } else if (temp && typeof temp === 'object') {
        temp[k] = value;
      }
    } else if (temp && typeof temp === 'object') {
      if (!temp[k]) {
        temp[k] = arrayKeys.includes(k) ? [] : {};
      }
      temp = temp[k];
    }
  });
};

/**
 *
 * @param {Object} obj : source object
 * @param {Function} callback : a function that will be called when
 *                   - the deepest key in source object is reached
 *                   - the value of the deepest key is NOT `undefined` | `null`
 *
 * @example
 * walkObjectDeep({ palette: { primary: { main: '#000000' } } }, console.log)
 * // ['palette', 'primary', 'main'] '#000000'
 */
const walkObjectDeep = (obj, callback, shouldSkipPaths) => {
  function recurse(object, parentKeys = [], arrayKeys = []) {
    Object.entries(object).forEach(([key, value]) => {
      if (!shouldSkipPaths || !shouldSkipPaths([...parentKeys, key])) {
        if (value !== undefined && value !== null) {
          if (typeof value === 'object' && Object.keys(value).length > 0) {
            recurse(value, [...parentKeys, key], Array.isArray(value) ? [...arrayKeys, key] : arrayKeys);
          } else {
            callback([...parentKeys, key], value, arrayKeys);
          }
        }
      }
    });
  }
  recurse(obj);
};
const getCssValue = (keys, value) => {
  if (typeof value === 'number') {
    if (['lineHeight', 'fontWeight', 'opacity', 'zIndex'].some(prop => keys.includes(prop))) {
      // CSS property that are unitless
      return value;
    }
    const lastKey = keys[keys.length - 1];
    if (lastKey.toLowerCase().includes('opacity')) {
      // opacity values are unitless
      return value;
    }
    return `${value}px`;
  }
  return value;
};

/**
 * a function that parse theme and return { css, vars }
 *
 * @param {Object} theme
 * @param {{
 *  prefix?: string,
 *  shouldSkipGeneratingVar?: (objectPathKeys: Array<string>, value: string | number) => boolean
 * }} options.
 *  `prefix`: The prefix of the generated CSS variables. This function does not change the value.
 *
 * @returns {{ css: Object, vars: Object }} `css` is the stylesheet, `vars` is an object to get css variable (same structure as theme).
 *
 * @example
 * const { css, vars } = parser({
 *   fontSize: 12,
 *   lineHeight: 1.2,
 *   palette: { primary: { 500: 'var(--color)' } }
 * }, { prefix: 'foo' })
 *
 * console.log(css) // { '--foo-fontSize': '12px', '--foo-lineHeight': 1.2, '--foo-palette-primary-500': 'var(--color)' }
 * console.log(vars) // { fontSize: 'var(--foo-fontSize)', lineHeight: 'var(--foo-lineHeight)', palette: { primary: { 500: 'var(--foo-palette-primary-500)' } } }
 */
function cssVarsParser(theme, options) {
  const {
    prefix,
    shouldSkipGeneratingVar
  } = options || {};
  const css = {};
  const vars = {};
  const varsWithDefaults = {};
  walkObjectDeep(theme, (keys, value, arrayKeys) => {
    if (typeof value === 'string' || typeof value === 'number') {
      if (!shouldSkipGeneratingVar || !shouldSkipGeneratingVar(keys, value)) {
        // only create css & var if `shouldSkipGeneratingVar` return false
        const cssVar = `--${prefix ? `${prefix}-` : ''}${keys.join('-')}`;
        const resolvedValue = getCssValue(keys, value);
        Object.assign(css, {
          [cssVar]: resolvedValue
        });
        assignNestedKeys(vars, keys, `var(${cssVar})`, arrayKeys);
        assignNestedKeys(varsWithDefaults, keys, `var(${cssVar}, ${resolvedValue})`, arrayKeys);
      }
    }
  }, keys => keys[0] === 'vars' // skip 'vars/*' paths
  );
  return {
    css,
    vars,
    varsWithDefaults
  };
}

function prepareCssVars(theme, parserConfig = {}) {
  const {
    getSelector = defaultGetSelector,
    disableCssColorScheme,
    colorSchemeSelector: selector
  } = parserConfig;
  // @ts-ignore - ignore components do not exist
  const {
    colorSchemes = {},
    components,
    defaultColorScheme = 'light',
    ...otherTheme
  } = theme;
  const {
    vars: rootVars,
    css: rootCss,
    varsWithDefaults: rootVarsWithDefaults
  } = cssVarsParser(otherTheme, parserConfig);
  let themeVars = rootVarsWithDefaults;
  const colorSchemesMap = {};
  const {
    [defaultColorScheme]: defaultScheme,
    ...otherColorSchemes
  } = colorSchemes;
  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {
    const {
      vars,
      css,
      varsWithDefaults
    } = cssVarsParser(scheme, parserConfig);
    themeVars = deepmerge(themeVars, varsWithDefaults);
    colorSchemesMap[key] = {
      css,
      vars
    };
  });
  if (defaultScheme) {
    // default color scheme vars should be merged last to set as default
    const {
      css,
      vars,
      varsWithDefaults
    } = cssVarsParser(defaultScheme, parserConfig);
    themeVars = deepmerge(themeVars, varsWithDefaults);
    colorSchemesMap[defaultColorScheme] = {
      css,
      vars
    };
  }
  function defaultGetSelector(colorScheme, cssObject) {
    let rule = selector;
    if (selector === 'class') {
      rule = '.%s';
    }
    if (selector === 'data') {
      rule = '[data-%s]';
    }
    if (selector?.startsWith('data-') && !selector.includes('%s')) {
      // 'data-joy-color-scheme' -> '[data-joy-color-scheme="%s"]'
      rule = `[${selector}="%s"]`;
    }
    if (colorScheme) {
      if (rule === 'media') {
        if (theme.defaultColorScheme === colorScheme) {
          return ':root';
        }
        const mode = colorSchemes[colorScheme]?.palette?.mode || colorScheme;
        return {
          [`@media (prefers-color-scheme: ${mode})`]: {
            ':root': cssObject
          }
        };
      }
      if (rule) {
        if (theme.defaultColorScheme === colorScheme) {
          return `:root, ${rule.replace('%s', String(colorScheme))}`;
        }
        return rule.replace('%s', String(colorScheme));
      }
    }
    return ':root';
  }
  const generateThemeVars = () => {
    let vars = {
      ...rootVars
    };
    Object.entries(colorSchemesMap).forEach(([, {
      vars: schemeVars
    }]) => {
      vars = deepmerge(vars, schemeVars);
    });
    return vars;
  };
  const generateStyleSheets = () => {
    const stylesheets = [];
    const colorScheme = theme.defaultColorScheme || 'light';
    function insertStyleSheet(key, css) {
      if (Object.keys(css).length) {
        stylesheets.push(typeof key === 'string' ? {
          [key]: {
            ...css
          }
        } : key);
      }
    }
    insertStyleSheet(getSelector(undefined, {
      ...rootCss
    }), rootCss);
    const {
      [colorScheme]: defaultSchemeVal,
      ...other
    } = colorSchemesMap;
    if (defaultSchemeVal) {
      // default color scheme has to come before other color schemes
      const {
        css
      } = defaultSchemeVal;
      const cssColorSheme = colorSchemes[colorScheme]?.palette?.mode;
      const finalCss = !disableCssColorScheme && cssColorSheme ? {
        colorScheme: cssColorSheme,
        ...css
      } : {
        ...css
      };
      insertStyleSheet(getSelector(colorScheme, {
        ...finalCss
      }), finalCss);
    }
    Object.entries(other).forEach(([key, {
      css
    }]) => {
      const cssColorSheme = colorSchemes[key]?.palette?.mode;
      const finalCss = !disableCssColorScheme && cssColorSheme ? {
        colorScheme: cssColorSheme,
        ...css
      } : {
        ...css
      };
      insertStyleSheet(getSelector(key, {
        ...finalCss
      }), finalCss);
    });
    return stylesheets;
  };
  return {
    vars: themeVars,
    generateThemeVars,
    generateStyleSheets
  };
}

/* eslint-disable import/prefer-default-export */
function createGetColorSchemeSelector(selector) {
  return function getColorSchemeSelector(colorScheme) {
    if (selector === 'media') {
      if (process.env.NODE_ENV !== 'production') {
        if (colorScheme !== 'light' && colorScheme !== 'dark') {
          console.error(`MUI: @media (prefers-color-scheme) supports only 'light' or 'dark', but receive '${colorScheme}'.`);
        }
      }
      return `@media (prefers-color-scheme: ${colorScheme})`;
    }
    if (selector) {
      if (selector.startsWith('data-') && !selector.includes('%s')) {
        return `[${selector}="${colorScheme}"] &`;
      }
      if (selector === 'class') {
        return `.${colorScheme} &`;
      }
      if (selector === 'data') {
        return `[data-${colorScheme}] &`;
      }
      return `${selector.replace('%s', colorScheme)} &`;
    }
    return '&';
  };
}

const common = {
  black: '#000',
  white: '#fff'
};

const grey = {
  50: '#fafafa',
  100: '#f5f5f5',
  200: '#eeeeee',
  300: '#e0e0e0',
  400: '#bdbdbd',
  500: '#9e9e9e',
  600: '#757575',
  700: '#616161',
  800: '#424242',
  900: '#212121',
  A100: '#f5f5f5',
  A200: '#eeeeee',
  A400: '#bdbdbd',
  A700: '#616161'
};

const purple = {
  50: '#f3e5f5',
  100: '#e1bee7',
  200: '#ce93d8',
  300: '#ba68c8',
  400: '#ab47bc',
  500: '#9c27b0',
  600: '#8e24aa',
  700: '#7b1fa2',
  800: '#6a1b9a',
  900: '#4a148c',
  A100: '#ea80fc',
  A200: '#e040fb',
  A400: '#d500f9',
  A700: '#aa00ff'
};

const red = {
  50: '#ffebee',
  100: '#ffcdd2',
  200: '#ef9a9a',
  300: '#e57373',
  400: '#ef5350',
  500: '#f44336',
  600: '#e53935',
  700: '#d32f2f',
  800: '#c62828',
  900: '#b71c1c',
  A100: '#ff8a80',
  A200: '#ff5252',
  A400: '#ff1744',
  A700: '#d50000'
};

const orange = {
  50: '#fff3e0',
  100: '#ffe0b2',
  200: '#ffcc80',
  300: '#ffb74d',
  400: '#ffa726',
  500: '#ff9800',
  600: '#fb8c00',
  700: '#f57c00',
  800: '#ef6c00',
  900: '#e65100',
  A100: '#ffd180',
  A200: '#ffab40',
  A400: '#ff9100',
  A700: '#ff6d00'
};

const blue = {
  50: '#e3f2fd',
  100: '#bbdefb',
  200: '#90caf9',
  300: '#64b5f6',
  400: '#42a5f5',
  500: '#2196f3',
  600: '#1e88e5',
  700: '#1976d2',
  800: '#1565c0',
  900: '#0d47a1',
  A100: '#82b1ff',
  A200: '#448aff',
  A400: '#2979ff',
  A700: '#2962ff'
};

const lightBlue = {
  50: '#e1f5fe',
  100: '#b3e5fc',
  200: '#81d4fa',
  300: '#4fc3f7',
  400: '#29b6f6',
  500: '#03a9f4',
  600: '#039be5',
  700: '#0288d1',
  800: '#0277bd',
  900: '#01579b',
  A100: '#80d8ff',
  A200: '#40c4ff',
  A400: '#00b0ff',
  A700: '#0091ea'
};

const green = {
  50: '#e8f5e9',
  100: '#c8e6c9',
  200: '#a5d6a7',
  300: '#81c784',
  400: '#66bb6a',
  500: '#4caf50',
  600: '#43a047',
  700: '#388e3c',
  800: '#2e7d32',
  900: '#1b5e20',
  A100: '#b9f6ca',
  A200: '#69f0ae',
  A400: '#00e676',
  A700: '#00c853'
};

function getLight() {
  return {
    // The colors used to style the text.
    text: {
      // The most important text.
      primary: 'rgba(0, 0, 0, 0.87)',
      // Secondary text.
      secondary: 'rgba(0, 0, 0, 0.6)',
      // Disabled text have even lower visual prominence.
      disabled: 'rgba(0, 0, 0, 0.38)'
    },
    // The color used to divide different elements.
    divider: 'rgba(0, 0, 0, 0.12)',
    // The background colors used to style the surfaces.
    // Consistency between these values is important.
    background: {
      paper: common.white,
      default: common.white
    },
    // The colors used to style the action elements.
    action: {
      // The color of an active action like an icon button.
      active: 'rgba(0, 0, 0, 0.54)',
      // The color of an hovered action.
      hover: 'rgba(0, 0, 0, 0.04)',
      hoverOpacity: 0.04,
      // The color of a selected action.
      selected: 'rgba(0, 0, 0, 0.08)',
      selectedOpacity: 0.08,
      // The color of a disabled action.
      disabled: 'rgba(0, 0, 0, 0.26)',
      // The background color of a disabled action.
      disabledBackground: 'rgba(0, 0, 0, 0.12)',
      disabledOpacity: 0.38,
      focus: 'rgba(0, 0, 0, 0.12)',
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
}
const light = getLight();
function getDark() {
  return {
    text: {
      primary: common.white,
      secondary: 'rgba(255, 255, 255, 0.7)',
      disabled: 'rgba(255, 255, 255, 0.5)',
      icon: 'rgba(255, 255, 255, 0.5)'
    },
    divider: 'rgba(255, 255, 255, 0.12)',
    background: {
      paper: '#121212',
      default: '#121212'
    },
    action: {
      active: common.white,
      hover: 'rgba(255, 255, 255, 0.08)',
      hoverOpacity: 0.08,
      selected: 'rgba(255, 255, 255, 0.16)',
      selectedOpacity: 0.16,
      disabled: 'rgba(255, 255, 255, 0.3)',
      disabledBackground: 'rgba(255, 255, 255, 0.12)',
      disabledOpacity: 0.38,
      focus: 'rgba(255, 255, 255, 0.12)',
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
}
const dark = getDark();
function addLightOrDark(intent, direction, shade, tonalOffset) {
  const tonalOffsetLight = tonalOffset.light || tonalOffset;
  const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
  if (!intent[direction]) {
    if (intent.hasOwnProperty(shade)) {
      intent[direction] = intent[shade];
    } else if (direction === 'light') {
      intent.light = lighten(intent.main, tonalOffsetLight);
    } else if (direction === 'dark') {
      intent.dark = darken(intent.main, tonalOffsetDark);
    }
  }
}
function getDefaultPrimary(mode = 'light') {
  if (mode === 'dark') {
    return {
      main: blue[200],
      light: blue[50],
      dark: blue[400]
    };
  }
  return {
    main: blue[700],
    light: blue[400],
    dark: blue[800]
  };
}
function getDefaultSecondary(mode = 'light') {
  if (mode === 'dark') {
    return {
      main: purple[200],
      light: purple[50],
      dark: purple[400]
    };
  }
  return {
    main: purple[500],
    light: purple[300],
    dark: purple[700]
  };
}
function getDefaultError(mode = 'light') {
  if (mode === 'dark') {
    return {
      main: red[500],
      light: red[300],
      dark: red[700]
    };
  }
  return {
    main: red[700],
    light: red[400],
    dark: red[800]
  };
}
function getDefaultInfo(mode = 'light') {
  if (mode === 'dark') {
    return {
      main: lightBlue[400],
      light: lightBlue[300],
      dark: lightBlue[700]
    };
  }
  return {
    main: lightBlue[700],
    light: lightBlue[500],
    dark: lightBlue[900]
  };
}
function getDefaultSuccess(mode = 'light') {
  if (mode === 'dark') {
    return {
      main: green[400],
      light: green[300],
      dark: green[700]
    };
  }
  return {
    main: green[800],
    light: green[500],
    dark: green[900]
  };
}
function getDefaultWarning(mode = 'light') {
  if (mode === 'dark') {
    return {
      main: orange[400],
      light: orange[300],
      dark: orange[700]
    };
  }
  return {
    main: '#ed6c02',
    // closest to orange[800] that pass 3:1.
    light: orange[500],
    dark: orange[900]
  };
}
function createPalette(palette) {
  const {
    mode = 'light',
    contrastThreshold = 3,
    tonalOffset = 0.2,
    ...other
  } = palette;
  const primary = palette.primary || getDefaultPrimary(mode);
  const secondary = palette.secondary || getDefaultSecondary(mode);
  const error = palette.error || getDefaultError(mode);
  const info = palette.info || getDefaultInfo(mode);
  const success = palette.success || getDefaultSuccess(mode);
  const warning = palette.warning || getDefaultWarning(mode);

  // Use the same logic as
  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54
  function getContrastText(background) {
    const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
    if (process.env.NODE_ENV !== 'production') {
      const contrast = getContrastRatio(background, contrastText);
      if (contrast < 3) {
        console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\n'));
      }
    }
    return contrastText;
  }
  const augmentColor = ({
    color,
    name,
    mainShade = 500,
    lightShade = 300,
    darkShade = 700
  }) => {
    color = {
      ...color
    };
    if (!color.main && color[mainShade]) {
      color.main = color[mainShade];
    }
    if (!color.hasOwnProperty('main')) {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.\n` + `The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : formatMuiErrorMessage(11, name ? ` (${name})` : '', mainShade));
    }
    if (typeof color.main !== 'string') {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.\n` + `\`color.main\` should be a string, but \`${JSON.stringify(color.main)}\` was provided instead.\n` + '\n' + 'Did you intend to use one of the following approaches?\n' + '\n' + 'import { green } from "@mui/material/colors";\n' + '\n' + 'const theme1 = createTheme({ palette: {\n' + '  primary: green,\n' + '} });\n' + '\n' + 'const theme2 = createTheme({ palette: {\n' + '  primary: { main: green[500] },\n' + '} });' : formatMuiErrorMessage(12, name ? ` (${name})` : '', JSON.stringify(color.main)));
    }
    addLightOrDark(color, 'light', lightShade, tonalOffset);
    addLightOrDark(color, 'dark', darkShade, tonalOffset);
    if (!color.contrastText) {
      color.contrastText = getContrastText(color.main);
    }
    return color;
  };
  let modeHydrated;
  if (mode === 'light') {
    modeHydrated = getLight();
  } else if (mode === 'dark') {
    modeHydrated = getDark();
  }
  if (process.env.NODE_ENV !== 'production') {
    if (!modeHydrated) {
      console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
    }
  }
  const paletteOutput = deepmerge({
    // A collection of common colors.
    common: {
      ...common
    },
    // prevent mutable object.
    // The palette mode, can be light or dark.
    mode,
    // The colors used to represent primary interface elements for a user.
    primary: augmentColor({
      color: primary,
      name: 'primary'
    }),
    // The colors used to represent secondary interface elements for a user.
    secondary: augmentColor({
      color: secondary,
      name: 'secondary',
      mainShade: 'A400',
      lightShade: 'A200',
      darkShade: 'A700'
    }),
    // The colors used to represent interface elements that the user should be made aware of.
    error: augmentColor({
      color: error,
      name: 'error'
    }),
    // The colors used to represent potentially dangerous actions or important messages.
    warning: augmentColor({
      color: warning,
      name: 'warning'
    }),
    // The colors used to present information to the user that is neutral and not necessarily important.
    info: augmentColor({
      color: info,
      name: 'info'
    }),
    // The colors used to indicate the successful completion of an action that user triggered.
    success: augmentColor({
      color: success,
      name: 'success'
    }),
    // The grey colors.
    grey,
    // Used by `getContrastText()` to maximize the contrast between
    // the background and the text.
    contrastThreshold,
    // Takes a background color and returns the text color that maximizes the contrast.
    getContrastText,
    // Generate a rich color object.
    augmentColor,
    // Used by the functions below to shift a color's luminance by approximately
    // two indexes within its tonal palette.
    // E.g., shift from Red 500 to Red 300 or Red 700.
    tonalOffset,
    // The light and dark mode object.
    ...modeHydrated
  }, other);
  return paletteOutput;
}

function prepareTypographyVars(typography) {
  const vars = {};
  const entries = Object.entries(typography);
  entries.forEach(entry => {
    const [key, value] = entry;
    if (typeof value === 'object') {
      vars[key] = `${value.fontStyle ? `${value.fontStyle} ` : ''}${value.fontVariant ? `${value.fontVariant} ` : ''}${value.fontWeight ? `${value.fontWeight} ` : ''}${value.fontStretch ? `${value.fontStretch} ` : ''}${value.fontSize || ''}${value.lineHeight ? `/${value.lineHeight} ` : ''}${value.fontFamily || ''}`;
    }
  });
  return vars;
}

function createMixins(breakpoints, mixins) {
  return {
    toolbar: {
      minHeight: 56,
      [breakpoints.up('xs')]: {
        '@media (orientation: landscape)': {
          minHeight: 48
        }
      },
      [breakpoints.up('sm')]: {
        minHeight: 64
      }
    },
    ...mixins
  };
}

function round(value) {
  return Math.round(value * 1e5) / 1e5;
}
const caseAllCaps = {
  textTransform: 'uppercase'
};
const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';

/**
 * @see @link{https://m2.material.io/design/typography/the-type-system.html}
 * @see @link{https://m2.material.io/design/typography/understanding-typography.html}
 */
function createTypography(palette, typography) {
  const {
    fontFamily = defaultFontFamily,
    // The default font size of the Material Specification.
    fontSize = 14,
    // px
    fontWeightLight = 300,
    fontWeightRegular = 400,
    fontWeightMedium = 500,
    fontWeightBold = 700,
    // Tell MUI what's the font-size on the html element.
    // 16px is the default font-size used by browsers.
    htmlFontSize = 16,
    // Apply the CSS properties to all the variants.
    allVariants,
    pxToRem: pxToRem2,
    ...other
  } = typeof typography === 'function' ? typography(palette) : typography;
  if (process.env.NODE_ENV !== 'production') {
    if (typeof fontSize !== 'number') {
      console.error('MUI: `fontSize` is required to be a number.');
    }
    if (typeof htmlFontSize !== 'number') {
      console.error('MUI: `htmlFontSize` is required to be a number.');
    }
  }
  const coef = fontSize / 14;
  const pxToRem = pxToRem2 || (size => `${size / htmlFontSize * coef}rem`);
  const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => ({
    fontFamily,
    fontWeight,
    fontSize: pxToRem(size),
    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
    lineHeight,
    // The letter spacing was designed for the Roboto font-family. Using the same letter-spacing
    // across font-families can cause issues with the kerning.
    ...(fontFamily === defaultFontFamily ? {
      letterSpacing: `${round(letterSpacing / size)}em`
    } : {}),
    ...casing,
    ...allVariants
  });
  const variants = {
    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
    // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
    inherit: {
      fontFamily: 'inherit',
      fontWeight: 'inherit',
      fontSize: 'inherit',
      lineHeight: 'inherit',
      letterSpacing: 'inherit'
    }
  };
  return deepmerge({
    htmlFontSize,
    pxToRem,
    fontFamily,
    fontSize,
    fontWeightLight,
    fontWeightRegular,
    fontWeightMedium,
    fontWeightBold,
    ...variants
  }, other, {
    clone: false // No need to clone deep
  });
}

const shadowKeyUmbraOpacity = 0.2;
const shadowKeyPenumbraOpacity = 0.14;
const shadowAmbientShadowOpacity = 0.12;
function createShadow(...px) {
  return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(',');
}

// Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss
const shadows = ['none', createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];

// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
// to learn the context in which each easing should be used.
const easing = {
  // This is the most common easing curve.
  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
  // Objects enter the screen at full velocity from off-screen and
  // slowly decelerate to a resting point.
  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
  // The sharp curve is used by objects that may return to the screen at any time.
  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
};

// Follow https://m2.material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
// to learn when use what timing
const duration = {
  shortest: 150,
  shorter: 200,
  short: 250,
  // most basic recommended timing
  standard: 300,
  // this is to be used in complex animations
  complex: 375,
  // recommended when something is entering screen
  enteringScreen: 225,
  // recommended when something is leaving screen
  leavingScreen: 195
};
function formatMs(milliseconds) {
  return `${Math.round(milliseconds)}ms`;
}
function getAutoHeightDuration(height) {
  if (!height) {
    return 0;
  }
  const constant = height / 36;

  // https://www.desmos.com/calculator/vbrp3ggqet
  return Math.min(Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10), 3000);
}
function createTransitions(inputTransitions) {
  const mergedEasing = {
    ...easing,
    ...inputTransitions.easing
  };
  const mergedDuration = {
    ...duration,
    ...inputTransitions.duration
  };
  const create = (props = ['all'], options = {}) => {
    const {
      duration: durationOption = mergedDuration.standard,
      easing: easingOption = mergedEasing.easeInOut,
      delay = 0,
      ...other
    } = options;
    if (process.env.NODE_ENV !== 'production') {
      const isString = value => typeof value === 'string';
      const isNumber = value => !Number.isNaN(parseFloat(value));
      if (!isString(props) && !Array.isArray(props)) {
        console.error('MUI: Argument "props" must be a string or Array.');
      }
      if (!isNumber(durationOption) && !isString(durationOption)) {
        console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
      }
      if (!isString(easingOption)) {
        console.error('MUI: Argument "easing" must be a string.');
      }
      if (!isNumber(delay) && !isString(delay)) {
        console.error('MUI: Argument "delay" must be a number or a string.');
      }
      if (typeof options !== 'object') {
        console.error(['MUI: Secong argument of transition.create must be an object.', "Arguments should be either `create('prop1', options)` or `create(['prop1', 'prop2'], options)`"].join('\n'));
      }
      if (Object.keys(other).length !== 0) {
        console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(',')}].`);
      }
    }
    return (Array.isArray(props) ? props : [props]).map(animatedProp => `${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`).join(',');
  };
  return {
    getAutoHeightDuration,
    create,
    ...inputTransitions,
    easing: mergedEasing,
    duration: mergedDuration
  };
}

// We need to centralize the zIndex definitions as they work
// like global values in the browser.
const zIndex = {
  mobileStepper: 1000,
  fab: 1050,
  speedDial: 1050,
  appBar: 1100,
  drawer: 1200,
  modal: 1300,
  snackbar: 1400,
  tooltip: 1500
};

/* eslint-disable import/prefer-default-export */
function isSerializable(val) {
  return isPlainObject(val) || typeof val === 'undefined' || typeof val === 'string' || typeof val === 'boolean' || typeof val === 'number' || Array.isArray(val);
}

/**
 * `baseTheme` usually comes from `createTheme()` or `extendTheme()`.
 *
 * This function is intended to be used with zero-runtime CSS-in-JS like Pigment CSS
 * For example, in a Next.js project:
 *
 * ```js
 * // next.config.js
 * const { extendTheme } = require('@mui/material/styles');
 *
 * const theme = extendTheme();
 * // `.toRuntimeSource` is Pigment CSS specific to create a theme that is available at runtime.
 * theme.toRuntimeSource = stringifyTheme;
 *
 * module.exports = withPigment({
 *  theme,
 * });
 * ```
 */
function stringifyTheme(baseTheme = {}) {
  const serializableTheme = {
    ...baseTheme
  };
  function serializeTheme(object) {
    const array = Object.entries(object);
    // eslint-disable-next-line no-plusplus
    for (let index = 0; index < array.length; index++) {
      const [key, value] = array[index];
      if (!isSerializable(value) || key.startsWith('unstable_')) {
        delete object[key];
      } else if (isPlainObject(value)) {
        object[key] = {
          ...value
        };
        serializeTheme(object[key]);
      }
    }
  }
  serializeTheme(serializableTheme);
  return `import { unstable_createBreakpoints as createBreakpoints, createTransitions } from '@mui/material/styles';

const theme = ${JSON.stringify(serializableTheme, null, 2)};

theme.breakpoints = createBreakpoints(theme.breakpoints || {});
theme.transitions = createTransitions(theme.transitions || {});

export default theme;`;
}

function createThemeNoVars(options = {}, ...args) {
  const {
    breakpoints: breakpointsInput,
    mixins: mixinsInput = {},
    spacing: spacingInput,
    palette: paletteInput = {},
    transitions: transitionsInput = {},
    typography: typographyInput = {},
    shape: shapeInput,
    ...other
  } = options;
  if (options.vars) {
    throw new Error(process.env.NODE_ENV !== "production" ? 'MUI: `vars` is a private field used for CSS variables support.\n' + 'Please use another name.' : formatMuiErrorMessage(20));
  }
  const palette = createPalette(paletteInput);
  const systemTheme = createTheme$1(options);
  let muiTheme = deepmerge(systemTheme, {
    mixins: createMixins(systemTheme.breakpoints, mixinsInput),
    palette,
    // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
    shadows: shadows.slice(),
    typography: createTypography(palette, typographyInput),
    transitions: createTransitions(transitionsInput),
    zIndex: {
      ...zIndex
    }
  });
  muiTheme = deepmerge(muiTheme, other);
  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
  if (process.env.NODE_ENV !== 'production') {
    // TODO v6: Refactor to use globalStateClassesMapping from @mui/utils once `readOnly` state class is used in Rating component.
    const stateClasses = ['active', 'checked', 'completed', 'disabled', 'error', 'expanded', 'focused', 'focusVisible', 'required', 'selected'];
    const traverse = (node, component) => {
      let key;

      // eslint-disable-next-line guard-for-in
      for (key in node) {
        const child = node[key];
        if (stateClasses.includes(key) && Object.keys(child).length > 0) {
          if (process.env.NODE_ENV !== 'production') {
            const stateClass = generateUtilityClass('', key);
            console.error([`MUI: The \`${component}\` component increases ` + `the CSS specificity of the \`${key}\` internal state.`, 'You can not override it like this: ', JSON.stringify(node, null, 2), '', `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
              root: {
                [`&.${stateClass}`]: child
              }
            }, null, 2), '', 'https://mui.com/r/state-classes-guide'].join('\n'));
          }
          // Remove the style to prevent global conflicts.
          node[key] = {};
        }
      }
    };
    Object.keys(muiTheme.components).forEach(component => {
      const styleOverrides = muiTheme.components[component].styleOverrides;
      if (styleOverrides && component.startsWith('Mui')) {
        traverse(styleOverrides, component);
      }
    });
  }
  muiTheme.unstable_sxConfig = {
    ...defaultSxConfig,
    ...other?.unstable_sxConfig
  };
  muiTheme.unstable_sx = function sx(props) {
    return styleFunctionSx({
      sx: props,
      theme: this
    });
  };
  muiTheme.toRuntimeSource = stringifyTheme; // for Pigment CSS integration

  return muiTheme;
}

// Inspired by https://github.com/material-components/material-components-ios/blob/bca36107405594d5b7b16265a5b0ed698f85a5ee/components/Elevation/src/UIColor%2BMaterialElevation.m#L61
function getOverlayAlpha(elevation) {
  let alphaValue;
  if (elevation < 1) {
    alphaValue = 5.11916 * elevation ** 2;
  } else {
    alphaValue = 4.5 * Math.log(elevation + 1) + 2;
  }
  return Math.round(alphaValue * 10) / 1000;
}

const defaultDarkOverlays = [...Array(25)].map((_, index) => {
  if (index === 0) {
    return 'none';
  }
  const overlay = getOverlayAlpha(index);
  return `linear-gradient(rgba(255 255 255 / ${overlay}), rgba(255 255 255 / ${overlay}))`;
});
function getOpacity(mode) {
  return {
    inputPlaceholder: mode === 'dark' ? 0.5 : 0.42,
    inputUnderline: mode === 'dark' ? 0.7 : 0.42,
    switchTrackDisabled: mode === 'dark' ? 0.2 : 0.12,
    switchTrack: mode === 'dark' ? 0.3 : 0.38
  };
}
function getOverlays(mode) {
  return mode === 'dark' ? defaultDarkOverlays : [];
}
function createColorScheme(options) {
  const {
    palette: paletteInput = {
      mode: 'light'
    },
    // need to cast to avoid module augmentation test
    opacity,
    overlays,
    ...rest
  } = options;
  const palette = createPalette(paletteInput);
  return {
    palette,
    opacity: {
      ...getOpacity(palette.mode),
      ...opacity
    },
    overlays: overlays || getOverlays(palette.mode),
    ...rest
  };
}

function shouldSkipGeneratingVar(keys) {
  return !!keys[0].match(/(cssVarPrefix|colorSchemeSelector|rootSelector|typography|mixins|breakpoints|direction|transitions)/) || !!keys[0].match(/sxConfig$/) ||
  // ends with sxConfig
  keys[0] === 'palette' && !!keys[1]?.match(/(mode|contrastThreshold|tonalOffset)/);
}

/**
 * @internal These variables should not appear in the :root stylesheet when the `defaultColorScheme="dark"`
 */
const excludeVariablesFromRoot = cssVarPrefix => [...[...Array(25)].map((_, index) => `--${cssVarPrefix ? `${cssVarPrefix}-` : ''}overlays-${index}`), `--${cssVarPrefix ? `${cssVarPrefix}-` : ''}palette-AppBar-darkBg`, `--${cssVarPrefix ? `${cssVarPrefix}-` : ''}palette-AppBar-darkColor`];

var defaultGetSelector = theme => (colorScheme, css) => {
  const root = theme.rootSelector || ':root';
  const selector = theme.colorSchemeSelector;
  let rule = selector;
  if (selector === 'class') {
    rule = '.%s';
  }
  if (selector === 'data') {
    rule = '[data-%s]';
  }
  if (selector?.startsWith('data-') && !selector.includes('%s')) {
    // 'data-mui-color-scheme' -> '[data-mui-color-scheme="%s"]'
    rule = `[${selector}="%s"]`;
  }
  if (theme.defaultColorScheme === colorScheme) {
    if (colorScheme === 'dark') {
      const excludedVariables = {};
      excludeVariablesFromRoot(theme.cssVarPrefix).forEach(cssVar => {
        excludedVariables[cssVar] = css[cssVar];
        delete css[cssVar];
      });
      if (rule === 'media') {
        return {
          [root]: css,
          [`@media (prefers-color-scheme: dark)`]: {
            [root]: excludedVariables
          }
        };
      }
      if (rule) {
        return {
          [rule.replace('%s', colorScheme)]: excludedVariables,
          [`${root}, ${rule.replace('%s', colorScheme)}`]: css
        };
      }
      return {
        [root]: {
          ...css,
          ...excludedVariables
        }
      };
    }
    if (rule && rule !== 'media') {
      return `${root}, ${rule.replace('%s', String(colorScheme))}`;
    }
  } else if (colorScheme) {
    if (rule === 'media') {
      return {
        [`@media (prefers-color-scheme: ${String(colorScheme)})`]: {
          [root]: css
        }
      };
    }
    if (rule) {
      return rule.replace('%s', String(colorScheme));
    }
  }
  return root;
};

function assignNode(obj, keys) {
  keys.forEach(k => {
    if (!obj[k]) {
      obj[k] = {};
    }
  });
}
function setColor(obj, key, defaultValue) {
  if (!obj[key] && defaultValue) {
    obj[key] = defaultValue;
  }
}
function toRgb(color) {
  if (typeof color !== 'string' || !color.startsWith('hsl')) {
    return color;
  }
  return hslToRgb(color);
}
function setColorChannel(obj, key) {
  if (!(`${key}Channel` in obj)) {
    // custom channel token is not provided, generate one.
    // if channel token can't be generated, show a warning.
    obj[`${key}Channel`] = private_safeColorChannel(toRgb(obj[key]), `MUI: Can't create \`palette.${key}Channel\` because \`palette.${key}\` is not one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` + '\n' + `To suppress this warning, you need to explicitly provide the \`palette.${key}Channel\` as a string (in rgb format, for example "12 12 12") or undefined if you want to remove the channel token.`);
  }
}
function getSpacingVal(spacingInput) {
  if (typeof spacingInput === 'number') {
    return `${spacingInput}px`;
  }
  if (typeof spacingInput === 'string' || typeof spacingInput === 'function' || Array.isArray(spacingInput)) {
    return spacingInput;
  }
  return '8px';
}
const silent = fn => {
  try {
    return fn();
  } catch (error) {
    // ignore error
  }
  return undefined;
};
const createGetCssVar = (cssVarPrefix = 'mui') => createGetCssVar$1(cssVarPrefix);
function attachColorScheme$1(colorSchemes, scheme, restTheme, colorScheme) {
  if (!scheme) {
    return undefined;
  }
  scheme = scheme === true ? {} : scheme;
  const mode = colorScheme === 'dark' ? 'dark' : 'light';
  if (!restTheme) {
    colorSchemes[colorScheme] = createColorScheme({
      ...scheme,
      palette: {
        mode,
        ...scheme?.palette
      }
    });
    return undefined;
  }
  const {
    palette,
    ...muiTheme
  } = createThemeNoVars({
    ...restTheme,
    palette: {
      mode,
      ...scheme?.palette
    }
  });
  colorSchemes[colorScheme] = {
    ...scheme,
    palette,
    opacity: {
      ...getOpacity(mode),
      ...scheme?.opacity
    },
    overlays: scheme?.overlays || getOverlays(mode)
  };
  return muiTheme;
}

/**
 * A default `createThemeWithVars` comes with a single color scheme, either `light` or `dark` based on the `defaultColorScheme`.
 * This is better suited for apps that only need a single color scheme.
 *
 * To enable built-in `light` and `dark` color schemes, either:
 * 1. provide a `colorSchemeSelector` to define how the color schemes will change.
 * 2. provide `colorSchemes.dark` will set `colorSchemeSelector: 'media'` by default.
 */
function createThemeWithVars(options = {}, ...args) {
  const {
    colorSchemes: colorSchemesInput = {
      light: true
    },
    defaultColorScheme: defaultColorSchemeInput,
    disableCssColorScheme = false,
    cssVarPrefix = 'mui',
    shouldSkipGeneratingVar: shouldSkipGeneratingVar$1 = shouldSkipGeneratingVar,
    colorSchemeSelector: selector = colorSchemesInput.light && colorSchemesInput.dark ? 'media' : undefined,
    rootSelector = ':root',
    ...input
  } = options;
  const firstColorScheme = Object.keys(colorSchemesInput)[0];
  const defaultColorScheme = defaultColorSchemeInput || (colorSchemesInput.light && firstColorScheme !== 'light' ? 'light' : firstColorScheme);
  const getCssVar = createGetCssVar(cssVarPrefix);
  const {
    [defaultColorScheme]: defaultSchemeInput,
    light: builtInLight,
    dark: builtInDark,
    ...customColorSchemes
  } = colorSchemesInput;
  const colorSchemes = {
    ...customColorSchemes
  };
  let defaultScheme = defaultSchemeInput;

  // For built-in light and dark color schemes, ensure that the value is valid if they are the default color scheme.
  if (defaultColorScheme === 'dark' && !('dark' in colorSchemesInput) || defaultColorScheme === 'light' && !('light' in colorSchemesInput)) {
    defaultScheme = true;
  }
  if (!defaultScheme) {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The \`colorSchemes.${defaultColorScheme}\` option is either missing or invalid.` : formatMuiErrorMessage(21, defaultColorScheme));
  }

  // Create the palette for the default color scheme, either `light`, `dark`, or custom color scheme.
  const muiTheme = attachColorScheme$1(colorSchemes, defaultScheme, input, defaultColorScheme);
  if (builtInLight && !colorSchemes.light) {
    attachColorScheme$1(colorSchemes, builtInLight, undefined, 'light');
  }
  if (builtInDark && !colorSchemes.dark) {
    attachColorScheme$1(colorSchemes, builtInDark, undefined, 'dark');
  }
  let theme = {
    defaultColorScheme,
    ...muiTheme,
    cssVarPrefix,
    colorSchemeSelector: selector,
    rootSelector,
    getCssVar,
    colorSchemes,
    font: {
      ...prepareTypographyVars(muiTheme.typography),
      ...muiTheme.font
    },
    spacing: getSpacingVal(input.spacing)
  };
  Object.keys(theme.colorSchemes).forEach(key => {
    const palette = theme.colorSchemes[key].palette;
    const setCssVarColor = cssVar => {
      const tokens = cssVar.split('-');
      const color = tokens[1];
      const colorToken = tokens[2];
      return getCssVar(cssVar, palette[color][colorToken]);
    };

    // attach black & white channels to common node
    if (palette.mode === 'light') {
      setColor(palette.common, 'background', '#fff');
      setColor(palette.common, 'onBackground', '#000');
    }
    if (palette.mode === 'dark') {
      setColor(palette.common, 'background', '#000');
      setColor(palette.common, 'onBackground', '#fff');
    }

    // assign component variables
    assignNode(palette, ['Alert', 'AppBar', 'Avatar', 'Button', 'Chip', 'FilledInput', 'LinearProgress', 'Skeleton', 'Slider', 'SnackbarContent', 'SpeedDialAction', 'StepConnector', 'StepContent', 'Switch', 'TableCell', 'Tooltip']);
    if (palette.mode === 'light') {
      setColor(palette.Alert, 'errorColor', private_safeDarken(palette.error.light, 0.6));
      setColor(palette.Alert, 'infoColor', private_safeDarken(palette.info.light, 0.6));
      setColor(palette.Alert, 'successColor', private_safeDarken(palette.success.light, 0.6));
      setColor(palette.Alert, 'warningColor', private_safeDarken(palette.warning.light, 0.6));
      setColor(palette.Alert, 'errorFilledBg', setCssVarColor('palette-error-main'));
      setColor(palette.Alert, 'infoFilledBg', setCssVarColor('palette-info-main'));
      setColor(palette.Alert, 'successFilledBg', setCssVarColor('palette-success-main'));
      setColor(palette.Alert, 'warningFilledBg', setCssVarColor('palette-warning-main'));
      setColor(palette.Alert, 'errorFilledColor', silent(() => palette.getContrastText(palette.error.main)));
      setColor(palette.Alert, 'infoFilledColor', silent(() => palette.getContrastText(palette.info.main)));
      setColor(palette.Alert, 'successFilledColor', silent(() => palette.getContrastText(palette.success.main)));
      setColor(palette.Alert, 'warningFilledColor', silent(() => palette.getContrastText(palette.warning.main)));
      setColor(palette.Alert, 'errorStandardBg', private_safeLighten(palette.error.light, 0.9));
      setColor(palette.Alert, 'infoStandardBg', private_safeLighten(palette.info.light, 0.9));
      setColor(palette.Alert, 'successStandardBg', private_safeLighten(palette.success.light, 0.9));
      setColor(palette.Alert, 'warningStandardBg', private_safeLighten(palette.warning.light, 0.9));
      setColor(palette.Alert, 'errorIconColor', setCssVarColor('palette-error-main'));
      setColor(palette.Alert, 'infoIconColor', setCssVarColor('palette-info-main'));
      setColor(palette.Alert, 'successIconColor', setCssVarColor('palette-success-main'));
      setColor(palette.Alert, 'warningIconColor', setCssVarColor('palette-warning-main'));
      setColor(palette.AppBar, 'defaultBg', setCssVarColor('palette-grey-100'));
      setColor(palette.Avatar, 'defaultBg', setCssVarColor('palette-grey-400'));
      setColor(palette.Button, 'inheritContainedBg', setCssVarColor('palette-grey-300'));
      setColor(palette.Button, 'inheritContainedHoverBg', setCssVarColor('palette-grey-A100'));
      setColor(palette.Chip, 'defaultBorder', setCssVarColor('palette-grey-400'));
      setColor(palette.Chip, 'defaultAvatarColor', setCssVarColor('palette-grey-700'));
      setColor(palette.Chip, 'defaultIconColor', setCssVarColor('palette-grey-700'));
      setColor(palette.FilledInput, 'bg', 'rgba(0, 0, 0, 0.06)');
      setColor(palette.FilledInput, 'hoverBg', 'rgba(0, 0, 0, 0.09)');
      setColor(palette.FilledInput, 'disabledBg', 'rgba(0, 0, 0, 0.12)');
      setColor(palette.LinearProgress, 'primaryBg', private_safeLighten(palette.primary.main, 0.62));
      setColor(palette.LinearProgress, 'secondaryBg', private_safeLighten(palette.secondary.main, 0.62));
      setColor(palette.LinearProgress, 'errorBg', private_safeLighten(palette.error.main, 0.62));
      setColor(palette.LinearProgress, 'infoBg', private_safeLighten(palette.info.main, 0.62));
      setColor(palette.LinearProgress, 'successBg', private_safeLighten(palette.success.main, 0.62));
      setColor(palette.LinearProgress, 'warningBg', private_safeLighten(palette.warning.main, 0.62));
      setColor(palette.Skeleton, 'bg', `rgba(${setCssVarColor('palette-text-primaryChannel')} / 0.11)`);
      setColor(palette.Slider, 'primaryTrack', private_safeLighten(palette.primary.main, 0.62));
      setColor(palette.Slider, 'secondaryTrack', private_safeLighten(palette.secondary.main, 0.62));
      setColor(palette.Slider, 'errorTrack', private_safeLighten(palette.error.main, 0.62));
      setColor(palette.Slider, 'infoTrack', private_safeLighten(palette.info.main, 0.62));
      setColor(palette.Slider, 'successTrack', private_safeLighten(palette.success.main, 0.62));
      setColor(palette.Slider, 'warningTrack', private_safeLighten(palette.warning.main, 0.62));
      const snackbarContentBackground = private_safeEmphasize(palette.background.default, 0.8);
      setColor(palette.SnackbarContent, 'bg', snackbarContentBackground);
      setColor(palette.SnackbarContent, 'color', silent(() => palette.getContrastText(snackbarContentBackground)));
      setColor(palette.SpeedDialAction, 'fabHoverBg', private_safeEmphasize(palette.background.paper, 0.15));
      setColor(palette.StepConnector, 'border', setCssVarColor('palette-grey-400'));
      setColor(palette.StepContent, 'border', setCssVarColor('palette-grey-400'));
      setColor(palette.Switch, 'defaultColor', setCssVarColor('palette-common-white'));
      setColor(palette.Switch, 'defaultDisabledColor', setCssVarColor('palette-grey-100'));
      setColor(palette.Switch, 'primaryDisabledColor', private_safeLighten(palette.primary.main, 0.62));
      setColor(palette.Switch, 'secondaryDisabledColor', private_safeLighten(palette.secondary.main, 0.62));
      setColor(palette.Switch, 'errorDisabledColor', private_safeLighten(palette.error.main, 0.62));
      setColor(palette.Switch, 'infoDisabledColor', private_safeLighten(palette.info.main, 0.62));
      setColor(palette.Switch, 'successDisabledColor', private_safeLighten(palette.success.main, 0.62));
      setColor(palette.Switch, 'warningDisabledColor', private_safeLighten(palette.warning.main, 0.62));
      setColor(palette.TableCell, 'border', private_safeLighten(private_safeAlpha(palette.divider, 1), 0.88));
      setColor(palette.Tooltip, 'bg', private_safeAlpha(palette.grey[700], 0.92));
    }
    if (palette.mode === 'dark') {
      setColor(palette.Alert, 'errorColor', private_safeLighten(palette.error.light, 0.6));
      setColor(palette.Alert, 'infoColor', private_safeLighten(palette.info.light, 0.6));
      setColor(palette.Alert, 'successColor', private_safeLighten(palette.success.light, 0.6));
      setColor(palette.Alert, 'warningColor', private_safeLighten(palette.warning.light, 0.6));
      setColor(palette.Alert, 'errorFilledBg', setCssVarColor('palette-error-dark'));
      setColor(palette.Alert, 'infoFilledBg', setCssVarColor('palette-info-dark'));
      setColor(palette.Alert, 'successFilledBg', setCssVarColor('palette-success-dark'));
      setColor(palette.Alert, 'warningFilledBg', setCssVarColor('palette-warning-dark'));
      setColor(palette.Alert, 'errorFilledColor', silent(() => palette.getContrastText(palette.error.dark)));
      setColor(palette.Alert, 'infoFilledColor', silent(() => palette.getContrastText(palette.info.dark)));
      setColor(palette.Alert, 'successFilledColor', silent(() => palette.getContrastText(palette.success.dark)));
      setColor(palette.Alert, 'warningFilledColor', silent(() => palette.getContrastText(palette.warning.dark)));
      setColor(palette.Alert, 'errorStandardBg', private_safeDarken(palette.error.light, 0.9));
      setColor(palette.Alert, 'infoStandardBg', private_safeDarken(palette.info.light, 0.9));
      setColor(palette.Alert, 'successStandardBg', private_safeDarken(palette.success.light, 0.9));
      setColor(palette.Alert, 'warningStandardBg', private_safeDarken(palette.warning.light, 0.9));
      setColor(palette.Alert, 'errorIconColor', setCssVarColor('palette-error-main'));
      setColor(palette.Alert, 'infoIconColor', setCssVarColor('palette-info-main'));
      setColor(palette.Alert, 'successIconColor', setCssVarColor('palette-success-main'));
      setColor(palette.Alert, 'warningIconColor', setCssVarColor('palette-warning-main'));
      setColor(palette.AppBar, 'defaultBg', setCssVarColor('palette-grey-900'));
      setColor(palette.AppBar, 'darkBg', setCssVarColor('palette-background-paper')); // specific for dark mode
      setColor(palette.AppBar, 'darkColor', setCssVarColor('palette-text-primary')); // specific for dark mode
      setColor(palette.Avatar, 'defaultBg', setCssVarColor('palette-grey-600'));
      setColor(palette.Button, 'inheritContainedBg', setCssVarColor('palette-grey-800'));
      setColor(palette.Button, 'inheritContainedHoverBg', setCssVarColor('palette-grey-700'));
      setColor(palette.Chip, 'defaultBorder', setCssVarColor('palette-grey-700'));
      setColor(palette.Chip, 'defaultAvatarColor', setCssVarColor('palette-grey-300'));
      setColor(palette.Chip, 'defaultIconColor', setCssVarColor('palette-grey-300'));
      setColor(palette.FilledInput, 'bg', 'rgba(255, 255, 255, 0.09)');
      setColor(palette.FilledInput, 'hoverBg', 'rgba(255, 255, 255, 0.13)');
      setColor(palette.FilledInput, 'disabledBg', 'rgba(255, 255, 255, 0.12)');
      setColor(palette.LinearProgress, 'primaryBg', private_safeDarken(palette.primary.main, 0.5));
      setColor(palette.LinearProgress, 'secondaryBg', private_safeDarken(palette.secondary.main, 0.5));
      setColor(palette.LinearProgress, 'errorBg', private_safeDarken(palette.error.main, 0.5));
      setColor(palette.LinearProgress, 'infoBg', private_safeDarken(palette.info.main, 0.5));
      setColor(palette.LinearProgress, 'successBg', private_safeDarken(palette.success.main, 0.5));
      setColor(palette.LinearProgress, 'warningBg', private_safeDarken(palette.warning.main, 0.5));
      setColor(palette.Skeleton, 'bg', `rgba(${setCssVarColor('palette-text-primaryChannel')} / 0.13)`);
      setColor(palette.Slider, 'primaryTrack', private_safeDarken(palette.primary.main, 0.5));
      setColor(palette.Slider, 'secondaryTrack', private_safeDarken(palette.secondary.main, 0.5));
      setColor(palette.Slider, 'errorTrack', private_safeDarken(palette.error.main, 0.5));
      setColor(palette.Slider, 'infoTrack', private_safeDarken(palette.info.main, 0.5));
      setColor(palette.Slider, 'successTrack', private_safeDarken(palette.success.main, 0.5));
      setColor(palette.Slider, 'warningTrack', private_safeDarken(palette.warning.main, 0.5));
      const snackbarContentBackground = private_safeEmphasize(palette.background.default, 0.98);
      setColor(palette.SnackbarContent, 'bg', snackbarContentBackground);
      setColor(palette.SnackbarContent, 'color', silent(() => palette.getContrastText(snackbarContentBackground)));
      setColor(palette.SpeedDialAction, 'fabHoverBg', private_safeEmphasize(palette.background.paper, 0.15));
      setColor(palette.StepConnector, 'border', setCssVarColor('palette-grey-600'));
      setColor(palette.StepContent, 'border', setCssVarColor('palette-grey-600'));
      setColor(palette.Switch, 'defaultColor', setCssVarColor('palette-grey-300'));
      setColor(palette.Switch, 'defaultDisabledColor', setCssVarColor('palette-grey-600'));
      setColor(palette.Switch, 'primaryDisabledColor', private_safeDarken(palette.primary.main, 0.55));
      setColor(palette.Switch, 'secondaryDisabledColor', private_safeDarken(palette.secondary.main, 0.55));
      setColor(palette.Switch, 'errorDisabledColor', private_safeDarken(palette.error.main, 0.55));
      setColor(palette.Switch, 'infoDisabledColor', private_safeDarken(palette.info.main, 0.55));
      setColor(palette.Switch, 'successDisabledColor', private_safeDarken(palette.success.main, 0.55));
      setColor(palette.Switch, 'warningDisabledColor', private_safeDarken(palette.warning.main, 0.55));
      setColor(palette.TableCell, 'border', private_safeDarken(private_safeAlpha(palette.divider, 1), 0.68));
      setColor(palette.Tooltip, 'bg', private_safeAlpha(palette.grey[700], 0.92));
    }

    // MUI X - DataGrid needs this token.
    setColorChannel(palette.background, 'default');

    // added for consistency with the `background.default` token
    setColorChannel(palette.background, 'paper');
    setColorChannel(palette.common, 'background');
    setColorChannel(palette.common, 'onBackground');
    setColorChannel(palette, 'divider');
    Object.keys(palette).forEach(color => {
      const colors = palette[color];

      // The default palettes (primary, secondary, error, info, success, and warning) errors are handled by the above `createTheme(...)`.

      if (color !== 'tonalOffset' && colors && typeof colors === 'object') {
        // Silent the error for custom palettes.
        if (colors.main) {
          setColor(palette[color], 'mainChannel', private_safeColorChannel(toRgb(colors.main)));
        }
        if (colors.light) {
          setColor(palette[color], 'lightChannel', private_safeColorChannel(toRgb(colors.light)));
        }
        if (colors.dark) {
          setColor(palette[color], 'darkChannel', private_safeColorChannel(toRgb(colors.dark)));
        }
        if (colors.contrastText) {
          setColor(palette[color], 'contrastTextChannel', private_safeColorChannel(toRgb(colors.contrastText)));
        }
        if (color === 'text') {
          // Text colors: text.primary, text.secondary
          setColorChannel(palette[color], 'primary');
          setColorChannel(palette[color], 'secondary');
        }
        if (color === 'action') {
          // Action colors: action.active, action.selected
          if (colors.active) {
            setColorChannel(palette[color], 'active');
          }
          if (colors.selected) {
            setColorChannel(palette[color], 'selected');
          }
        }
      }
    });
  });
  theme = args.reduce((acc, argument) => deepmerge(acc, argument), theme);
  const parserConfig = {
    prefix: cssVarPrefix,
    disableCssColorScheme,
    shouldSkipGeneratingVar: shouldSkipGeneratingVar$1,
    getSelector: defaultGetSelector(theme)
  };
  const {
    vars,
    generateThemeVars,
    generateStyleSheets
  } = prepareCssVars(theme, parserConfig);
  theme.vars = vars;
  Object.entries(theme.colorSchemes[theme.defaultColorScheme]).forEach(([key, value]) => {
    theme[key] = value;
  });
  theme.generateThemeVars = generateThemeVars;
  theme.generateStyleSheets = generateStyleSheets;
  theme.generateSpacing = function generateSpacing() {
    return createSpacing(input.spacing, createUnarySpacing(this));
  };
  theme.getColorSchemeSelector = createGetColorSchemeSelector(selector);
  theme.spacing = theme.generateSpacing();
  theme.shouldSkipGeneratingVar = shouldSkipGeneratingVar$1;
  theme.unstable_sxConfig = {
    ...defaultSxConfig,
    ...input?.unstable_sxConfig
  };
  theme.unstable_sx = function sx(props) {
    return styleFunctionSx({
      sx: props,
      theme: this
    });
  };
  theme.toRuntimeSource = stringifyTheme; // for Pigment CSS integration

  return theme;
}

// eslint-disable-next-line consistent-return
function attachColorScheme(theme, scheme, colorScheme) {
  if (!theme.colorSchemes) {
    return undefined;
  }
  if (colorScheme) {
    theme.colorSchemes[scheme] = {
      ...(colorScheme !== true && colorScheme),
      palette: createPalette({
        ...(colorScheme === true ? {} : colorScheme.palette),
        mode: scheme
      }) // cast type to skip module augmentation test
    };
  }
}

/**
 * Generate a theme base on the options received.
 * @param options Takes an incomplete theme object and adds the missing parts.
 * @param args Deep merge the arguments with the about to be returned theme.
 * @returns A complete, ready-to-use theme object.
 */
function createTheme(options = {},
// cast type to skip module augmentation test
...args) {
  const {
    palette,
    cssVariables = false,
    colorSchemes: initialColorSchemes = !palette ? {
      light: true
    } : undefined,
    defaultColorScheme: initialDefaultColorScheme = palette?.mode,
    ...rest
  } = options;
  const defaultColorSchemeInput = initialDefaultColorScheme || 'light';
  const defaultScheme = initialColorSchemes?.[defaultColorSchemeInput];
  const colorSchemesInput = {
    ...initialColorSchemes,
    ...(palette ? {
      [defaultColorSchemeInput]: {
        ...(typeof defaultScheme !== 'boolean' && defaultScheme),
        palette
      }
    } : undefined)
  };
  if (cssVariables === false) {
    if (!('colorSchemes' in options)) {
      // Behaves exactly as v5
      return createThemeNoVars(options, ...args);
    }
    let paletteOptions = palette;
    if (!('palette' in options)) {
      if (colorSchemesInput[defaultColorSchemeInput]) {
        if (colorSchemesInput[defaultColorSchemeInput] !== true) {
          paletteOptions = colorSchemesInput[defaultColorSchemeInput].palette;
        } else if (defaultColorSchemeInput === 'dark') {
          // @ts-ignore to prevent the module augmentation test from failing
          paletteOptions = {
            mode: 'dark'
          };
        }
      }
    }
    const theme = createThemeNoVars({
      ...options,
      palette: paletteOptions
    }, ...args);
    theme.defaultColorScheme = defaultColorSchemeInput;
    theme.colorSchemes = colorSchemesInput;
    if (theme.palette.mode === 'light') {
      theme.colorSchemes.light = {
        ...(colorSchemesInput.light !== true && colorSchemesInput.light),
        palette: theme.palette
      };
      attachColorScheme(theme, 'dark', colorSchemesInput.dark);
    }
    if (theme.palette.mode === 'dark') {
      theme.colorSchemes.dark = {
        ...(colorSchemesInput.dark !== true && colorSchemesInput.dark),
        palette: theme.palette
      };
      attachColorScheme(theme, 'light', colorSchemesInput.light);
    }
    return theme;
  }
  if (!palette && !('light' in colorSchemesInput) && defaultColorSchemeInput === 'light') {
    colorSchemesInput.light = true;
  }
  return createThemeWithVars({
    ...rest,
    colorSchemes: colorSchemesInput,
    defaultColorScheme: defaultColorSchemeInput,
    ...(typeof cssVariables !== 'boolean' && cssVariables)
  }, ...args);
}

const defaultTheme = createTheme();

var THEME_ID = '$$material';

// copied from @mui/system/createStyled
function slotShouldForwardProp(prop) {
  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
}

const rootShouldForwardProp = prop => slotShouldForwardProp(prop) && prop !== 'classes';

const styled = createStyled({
  themeId: THEME_ID,
  defaultTheme,
  rootShouldForwardProp
});

const memoTheme = unstable_memoTheme;

process.env.NODE_ENV !== "production" ? {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * @ignore
   */
  value: PropTypes.object.isRequired
} : undefined;
function useDefaultProps(params) {
  return useDefaultProps$1(params);
}

function getSvgIconUtilityClass(slot) {
  return generateUtilityClass('MuiSvgIcon', slot);
}
generateUtilityClasses('MuiSvgIcon', ['root', 'colorPrimary', 'colorSecondary', 'colorAction', 'colorError', 'colorDisabled', 'fontSizeInherit', 'fontSizeSmall', 'fontSizeMedium', 'fontSizeLarge']);

const useUtilityClasses$1 = ownerState => {
  const {
    color,
    fontSize,
    classes
  } = ownerState;
  const slots = {
    root: ['root', color !== 'inherit' && `color${capitalize(color)}`, `fontSize${capitalize(fontSize)}`]
  };
  return composeClasses(slots, getSvgIconUtilityClass, classes);
};
const SvgIconRoot = styled('svg', {
  name: 'MuiSvgIcon',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`], styles[`fontSize${capitalize(ownerState.fontSize)}`]];
  }
})(memoTheme(({
  theme
}) => ({
  userSelect: 'none',
  width: '1em',
  height: '1em',
  display: 'inline-block',
  flexShrink: 0,
  transition: theme.transitions?.create?.('fill', {
    duration: (theme.vars ?? theme).transitions?.duration?.shorter
  }),
  variants: [{
    props: props => !props.hasSvgAsChild,
    style: {
      // the <svg> will define the property that has `currentColor`
      // for example heroicons uses fill="none" and stroke="currentColor"
      fill: 'currentColor'
    }
  }, {
    props: {
      fontSize: 'inherit'
    },
    style: {
      fontSize: 'inherit'
    }
  }, {
    props: {
      fontSize: 'small'
    },
    style: {
      fontSize: theme.typography?.pxToRem?.(20) || '1.25rem'
    }
  }, {
    props: {
      fontSize: 'medium'
    },
    style: {
      fontSize: theme.typography?.pxToRem?.(24) || '1.5rem'
    }
  }, {
    props: {
      fontSize: 'large'
    },
    style: {
      fontSize: theme.typography?.pxToRem?.(35) || '2.1875rem'
    }
  },
  // TODO v5 deprecate color prop, v6 remove for sx
  ...Object.entries((theme.vars ?? theme).palette).filter(([, value]) => value && value.main).map(([color]) => ({
    props: {
      color
    },
    style: {
      color: (theme.vars ?? theme).palette?.[color]?.main
    }
  })), {
    props: {
      color: 'action'
    },
    style: {
      color: (theme.vars ?? theme).palette?.action?.active
    }
  }, {
    props: {
      color: 'disabled'
    },
    style: {
      color: (theme.vars ?? theme).palette?.action?.disabled
    }
  }, {
    props: {
      color: 'inherit'
    },
    style: {
      color: undefined
    }
  }]
})));
const SvgIcon = /*#__PURE__*/reactExports.forwardRef(function SvgIcon(inProps, ref) {
  const props = useDefaultProps({
    props: inProps,
    name: 'MuiSvgIcon'
  });
  const {
    children,
    className,
    color = 'inherit',
    component = 'svg',
    fontSize = 'medium',
    htmlColor,
    inheritViewBox = false,
    titleAccess,
    viewBox = '0 0 24 24',
    ...other
  } = props;
  const hasSvgAsChild = /*#__PURE__*/reactExports.isValidElement(children) && children.type === 'svg';
  const ownerState = {
    ...props,
    color,
    component,
    fontSize,
    instanceFontSize: inProps.fontSize,
    inheritViewBox,
    viewBox,
    hasSvgAsChild
  };
  const more = {};
  if (!inheritViewBox) {
    more.viewBox = viewBox;
  }
  const classes = useUtilityClasses$1(ownerState);
  return /*#__PURE__*/jsxRuntimeExports.jsxs(SvgIconRoot, {
    as: component,
    className: clsx(classes.root, className),
    focusable: "false",
    color: htmlColor,
    "aria-hidden": titleAccess ? undefined : true,
    role: titleAccess ? 'img' : undefined,
    ref: ref,
    ...more,
    ...other,
    ...(hasSvgAsChild && children.props),
    ownerState: ownerState,
    children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /*#__PURE__*/jsxRuntimeExports.jsx("title", {
      children: titleAccess
    }) : null]
  });
});
process.env.NODE_ENV !== "production" ? SvgIcon.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Node passed into the SVG element.
   */
  children: PropTypes.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
   * @default 'inherit'
   */
  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'action', 'disabled', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
   * @default 'medium'
   */
  fontSize: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'large', 'medium', 'small']), PropTypes.string]),
  /**
   * Applies a color attribute to the SVG element.
   */
  htmlColor: PropTypes.string,
  /**
   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
   * prop will be ignored.
   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
   * `component`'s viewBox to the root node.
   * @default false
   */
  inheritViewBox: PropTypes.bool,
  /**
   * The shape-rendering attribute. The behavior of the different options is described on the
   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
   * If you are having issues with blurry icons you should investigate this prop.
   */
  shapeRendering: PropTypes.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * Provides a human-readable title for the element that contains it.
   * https://www.w3.org/TR/SVG-access/#Equivalent
   */
  titleAccess: PropTypes.string,
  /**
   * Allows you to redefine what the coordinates without units mean inside an SVG element.
   * For example, if the SVG element is 500 (width) by 200 (height),
   * and you pass viewBox="0 0 50 20",
   * this means that the coordinates inside the SVG will go from the top left corner (0,0)
   * to bottom right (50,20) and each unit will be worth 10px.
   * @default '0 0 24 24'
   */
  viewBox: PropTypes.string
} : undefined;
SvgIcon.muiName = 'SvgIcon';

function createSvgIcon(path, displayName) {
  function Component(props, ref) {
    return /*#__PURE__*/jsxRuntimeExports.jsx(SvgIcon, {
      "data-testid": `${displayName}Icon`,
      ref: ref,
      ...props,
      children: path
    });
  }
  if (process.env.NODE_ENV !== 'production') {
    // Need to set `displayName` on the inner component for React.memo.
    // React prior to 16.14 ignores `displayName` on the wrapper.
    Component.displayName = `${displayName}Icon`;
  }
  Component.muiName = SvgIcon.muiName;
  return /*#__PURE__*/reactExports.memo(/*#__PURE__*/reactExports.forwardRef(Component));
}

var VisibilityIcon = createSvgIcon(/*#__PURE__*/jsxRuntimeExports.jsx("path", {
  d: "M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3"
}), 'Visibility');

/***
   Copyright 2013 Teun Duynstee

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

var thenBy_module;
var hasRequiredThenBy_module;

function requireThenBy_module () {
	if (hasRequiredThenBy_module) return thenBy_module;
	hasRequiredThenBy_module = 1;
	thenBy_module = (function() {

	    function identity(v){return v;}

	    function ignoreCase(v){return typeof(v)==="string" ? v.toLowerCase() : v;}

	    function makeCompareFunction(f, opt){
	        opt = typeof(opt)==="object" ? opt : {direction:opt};
	        
	        if(typeof(f)!="function"){
	            var prop = f;
	            // make unary function
	            f = function(v1){return !!v1[prop] ? v1[prop] : "";};
	        }
	        if(f.length === 1) {
	            // f is a unary function mapping a single item to its sort score
	            var uf = f;
	            var preprocess = opt.ignoreCase?ignoreCase:identity;
	            var cmp = opt.cmp || function(v1,v2) {return v1 < v2 ? -1 : v1 > v2 ? 1 : 0;};
	            f = function(v1,v2) {return cmp(preprocess(uf(v1)), preprocess(uf(v2)));};
	        }
	        const descTokens = {"-1":'', desc:''};
	        if(opt.direction in descTokens) return function(v1,v2){return -f(v1,v2)};
	        return f;
	    }

	    /* adds a secondary compare function to the target function (`this` context)
	       which is applied in case the first one returns 0 (equal)
	       returns a new compare function, which has a `thenBy` method as well */
	    function tb(func, opt) {
	        /* should get value false for the first call. This can be done by calling the 
	        exported function, or the firstBy property on it (for es6 module compatibility)
	        */
	        var x = (typeof(this) == "function" && !this.firstBy) ? this : false;
	        var y = makeCompareFunction(func, opt);
	        var f = x ? function(a, b) {
	                        return x(a,b) || y(a,b);
	                    }
	                  : y;
	        f.thenBy = tb;
	        return f;
	    }
	    tb.firstBy = tb;
	    return tb;
	})();
	return thenBy_module;
}

var thenBy_moduleExports = requireThenBy_module();

var invertObj = function (data) { return Object.fromEntries(Object.entries(data).map(function (_a) {
    var key = _a[0], value = _a[1];
    return [value, key];
})); };
var unminifySpeciesData = function (data) {
    var taxons = data.taxons;
    var map = invertObj(data.taxonMap);
    var fullData = {};
    Object.keys(data.taxonData).forEach(function (taxonId) {
        // Assumes that this is now an ordered array of the taxons specified in visibleTaxons. The user should
        // have supplied the same list of taxons used in creating the minified file
        var rowData = data.taxonData[taxonId].split('|');
        var expandedTaxonData = {}; // find out what this is
        for (var i = 0; i < taxons.length; i++) {
            var visibleTaxon = taxons[i];
            if (!visibleTaxon) {
                continue;
            }
            // only the species row isn't minified. Everything else is found in the map
            if (visibleTaxon === 'species') {
                expandedTaxonData[visibleTaxon] = rowData[i];
            }
            else {
                // not every taxon will be filled for each row
                if (rowData[i] && !map[rowData[i]]) {
                    console.log('missing', i, rowData);
                }
                expandedTaxonData[visibleTaxon] = rowData[i] ? map[rowData[i]] : '';
            }
        }
        fullData[taxonId] = {
            data: expandedTaxonData,
            count: rowData[rowData.length - 1],
        };
    });
    return fullData;
};

var INAT_API_URL = 'https://api.inaturalist.org/v1/observations';
var INAT_OBSERVATIONS_URL$2 = 'https://www.inaturalist.org/observations';
var INAT_TAXON_CHANGES_URL = 'https://www.inaturalist.org/taxon_changes';

var constants = /*#__PURE__*/Object.freeze({
    __proto__: null,
    INAT_API_URL: INAT_API_URL,
    INAT_OBSERVATIONS_URL: INAT_OBSERVATIONS_URL$2,
    INAT_TAXON_CHANGES_URL: INAT_TAXON_CHANGES_URL
});

const { INAT_OBSERVATIONS_URL: INAT_OBSERVATIONS_URL$1 } = constants;
/**
 * Renders the data table alone.
 */
const DataTable = ({ data, taxons, curatorUsernames, placeId, showRowNumbers = true, showReviewerCount = false, }) => {
    const [sortedData, setSortedData] = reactExports.useState([]);
    const [taxonCols, setTaxonCols] = reactExports.useState([]);
    reactExports.useEffect(() => {
        setTaxonCols(taxons);
        const arr = Object.keys(data).map((taxonId) => ({
            data: data[taxonId].data,
            count: data[taxonId].count,
            taxonId,
        }));
        let sorted = null;
        taxonCols.forEach((taxon) => {
            if (!sorted) {
                sorted = thenBy_moduleExports.firstBy((a) => a.data[taxon] || 'Zzzzz', {
                    direction: 'asc',
                });
            }
            else {
                sorted = sorted.thenBy((a) => a.data[taxon] || 'Zzzzz', {
                    direction: 'asc',
                });
            }
        });
        if (sorted) {
            arr.sort(sorted);
            setSortedData(arr);
        }
    }, [data, taxonCols, taxons]);
    if (!sortedData.length) {
        return null;
    }
    return (jsxRuntimeExports.jsxs("table", { className: "icsl-table", cellSpacing: 0, cellPadding: 2, children: [jsxRuntimeExports.jsx("thead", { children: jsxRuntimeExports.jsxs("tr", { children: [showRowNumbers && jsxRuntimeExports.jsx("th", {}), taxonCols.map((rank) => {
                            if (rank === 'genus') {
                                return null;
                            }
                            return jsxRuntimeExports.jsx("th", { children: rank }, rank);
                        }), showReviewerCount && jsxRuntimeExports.jsx("th", {}), jsxRuntimeExports.jsx("th", {})] }, "header") }), jsxRuntimeExports.jsx("tbody", { children: sortedData.map((row, index) => (jsxRuntimeExports.jsxs("tr", { children: [showRowNumbers && (jsxRuntimeExports.jsx("td", { children: jsxRuntimeExports.jsx("b", { children: index + 1 }) })), taxonCols.map((currentRank) => {
                            if (currentRank === 'genus') {
                                return null;
                            }
                            return (jsxRuntimeExports.jsx("td", { children: row.data[currentRank] ? row.data[currentRank] : '' }, `${row.taxonId}-${currentRank}`));
                        }), showReviewerCount && jsxRuntimeExports.jsxs("td", { children: ["(", row.count, ")"] }), jsxRuntimeExports.jsx("td", { style: { display: 'flex' }, children: jsxRuntimeExports.jsx("a", { href: `${INAT_OBSERVATIONS_URL$1}?ident_user_id=${curatorUsernames.join(',')}&place_id=${placeId}&taxon_id=${row.taxonId}&verifiable=any`, target: "_blank", rel: "noreferrer", children: jsxRuntimeExports.jsx(VisibilityIcon, {}) }) })] }, row.taxonId))) })] }));
};

var debounce$1 = {exports: {}};

var hasRequiredDebounce;

function requireDebounce () {
	if (hasRequiredDebounce) return debounce$1.exports;
	hasRequiredDebounce = 1;
	function debounce(function_, wait = 100, options = {}) {
		if (typeof function_ !== 'function') {
			throw new TypeError(`Expected the first parameter to be a function, got \`${typeof function_}\`.`);
		}

		if (wait < 0) {
			throw new RangeError('`wait` must not be negative.');
		}

		// TODO: Deprecate the boolean parameter at some point.
		const {immediate} = typeof options === 'boolean' ? {immediate: options} : options;

		let storedContext;
		let storedArguments;
		let timeoutId;
		let timestamp;
		let result;

		function run() {
			const callContext = storedContext;
			const callArguments = storedArguments;
			storedContext = undefined;
			storedArguments = undefined;
			result = function_.apply(callContext, callArguments);
			return result;
		}

		function later() {
			const last = Date.now() - timestamp;

			if (last < wait && last >= 0) {
				timeoutId = setTimeout(later, wait - last);
			} else {
				timeoutId = undefined;

				if (!immediate) {
					result = run();
				}
			}
		}

		const debounced = function (...arguments_) {
			if (
				storedContext
				&& this !== storedContext
				&& Object.getPrototypeOf(this) === Object.getPrototypeOf(storedContext)
			) {
				throw new Error('Debounced method called with different contexts of the same prototype.');
			}

			storedContext = this; // eslint-disable-line unicorn/no-this-assignment
			storedArguments = arguments_;
			timestamp = Date.now();

			const callNow = immediate && !timeoutId;

			if (!timeoutId) {
				timeoutId = setTimeout(later, wait);
			}

			if (callNow) {
				result = run();
			}

			return result;
		};

		Object.defineProperty(debounced, 'isPending', {
			get() {
				return timeoutId !== undefined;
			},
		});

		debounced.clear = () => {
			if (!timeoutId) {
				return;
			}

			clearTimeout(timeoutId);
			timeoutId = undefined;
		};

		debounced.flush = () => {
			if (!timeoutId) {
				return;
			}

			debounced.trigger();
		};

		debounced.trigger = () => {
			result = run();

			debounced.clear();
		};

		return debounced;
	}

	// Adds compatibility for ES modules
	debounce$1.exports.debounce = debounce;

	debounce$1.exports = debounce;
	return debounce$1.exports;
}

var debounceExports = /*@__PURE__*/ requireDebounce();
var debounce = /*@__PURE__*/getDefaultExportFromCjs(debounceExports);

/**
 * Type guard to check if the object has a "main" property of type string.
 *
 * @param obj - the object to check
 * @returns boolean
 */
function hasCorrectMainProperty(obj) {
  return typeof obj.main === 'string';
}
/**
 * Checks if the object conforms to the SimplePaletteColorOptions type.
 * The minimum requirement is that the object has a "main" property of type string, this is always checked.
 * Optionally, you can pass additional properties to check.
 *
 * @param obj - The object to check
 * @param additionalPropertiesToCheck - Array containing "light", "dark", and/or "contrastText"
 * @returns boolean
 */
function checkSimplePaletteColorValues(obj, additionalPropertiesToCheck = []) {
  if (!hasCorrectMainProperty(obj)) {
    return false;
  }
  for (const value of additionalPropertiesToCheck) {
    if (!obj.hasOwnProperty(value) || typeof obj[value] !== 'string') {
      return false;
    }
  }
  return true;
}

/**
 * Creates a filter function used to filter simple palette color options.
 * The minimum requirement is that the object has a "main" property of type string, this is always checked.
 * Optionally, you can pass additional properties to check.
 *
 * @param additionalPropertiesToCheck - Array containing "light", "dark", and/or "contrastText"
 * @returns ([, value]: [any, PaletteColorOptions]) => boolean
 */
function createSimplePaletteValueFilter(additionalPropertiesToCheck = []) {
  return ([, value]) => value && checkSimplePaletteColorValues(value, additionalPropertiesToCheck);
}

function getCircularProgressUtilityClass(slot) {
  return generateUtilityClass('MuiCircularProgress', slot);
}
generateUtilityClasses('MuiCircularProgress', ['root', 'determinate', 'indeterminate', 'colorPrimary', 'colorSecondary', 'svg', 'circle', 'circleDeterminate', 'circleIndeterminate', 'circleDisableShrink']);

const SIZE = 44;
const circularRotateKeyframe = keyframes`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`;
const circularDashKeyframe = keyframes`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`;

// This implementation is for supporting both Styled-components v4+ and Pigment CSS.
// A global animation has to be created here for Styled-components v4+ (https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#12).
// which can be done by checking typeof indeterminate1Keyframe !== 'string' (at runtime, Pigment CSS transform keyframes`` to a string).
const rotateAnimation = typeof circularRotateKeyframe !== 'string' ? css`
        animation: ${circularRotateKeyframe} 1.4s linear infinite;
      ` : null;
const dashAnimation = typeof circularDashKeyframe !== 'string' ? css`
        animation: ${circularDashKeyframe} 1.4s ease-in-out infinite;
      ` : null;
const useUtilityClasses = ownerState => {
  const {
    classes,
    variant,
    color,
    disableShrink
  } = ownerState;
  const slots = {
    root: ['root', variant, `color${capitalize(color)}`],
    svg: ['svg'],
    circle: ['circle', `circle${capitalize(variant)}`, disableShrink && 'circleDisableShrink']
  };
  return composeClasses(slots, getCircularProgressUtilityClass, classes);
};
const CircularProgressRoot = styled('span', {
  name: 'MuiCircularProgress',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, styles[ownerState.variant], styles[`color${capitalize(ownerState.color)}`]];
  }
})(memoTheme(({
  theme
}) => ({
  display: 'inline-block',
  variants: [{
    props: {
      variant: 'determinate'
    },
    style: {
      transition: theme.transitions.create('transform')
    }
  }, {
    props: {
      variant: 'indeterminate'
    },
    style: rotateAnimation || {
      animation: `${circularRotateKeyframe} 1.4s linear infinite`
    }
  }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({
    props: {
      color
    },
    style: {
      color: (theme.vars || theme).palette[color].main
    }
  }))]
})));
const CircularProgressSVG = styled('svg', {
  name: 'MuiCircularProgress',
  slot: 'Svg',
  overridesResolver: (props, styles) => styles.svg
})({
  display: 'block' // Keeps the progress centered
});
const CircularProgressCircle = styled('circle', {
  name: 'MuiCircularProgress',
  slot: 'Circle',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.circle, styles[`circle${capitalize(ownerState.variant)}`], ownerState.disableShrink && styles.circleDisableShrink];
  }
})(memoTheme(({
  theme
}) => ({
  stroke: 'currentColor',
  variants: [{
    props: {
      variant: 'determinate'
    },
    style: {
      transition: theme.transitions.create('stroke-dashoffset')
    }
  }, {
    props: {
      variant: 'indeterminate'
    },
    style: {
      // Some default value that looks fine waiting for the animation to kicks in.
      strokeDasharray: '80px, 200px',
      strokeDashoffset: 0 // Add the unit to fix a Edge 16 and below bug.
    }
  }, {
    props: ({
      ownerState
    }) => ownerState.variant === 'indeterminate' && !ownerState.disableShrink,
    style: dashAnimation || {
      // At runtime for Pigment CSS, `bufferAnimation` will be null and the generated keyframe will be used.
      animation: `${circularDashKeyframe} 1.4s ease-in-out infinite`
    }
  }]
})));

/**
 * ## ARIA
 *
 * If the progress bar is describing the loading progress of a particular region of a page,
 * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`
 * attribute to `true` on that region until it has finished loading.
 */
const CircularProgress = /*#__PURE__*/reactExports.forwardRef(function CircularProgress(inProps, ref) {
  const props = useDefaultProps({
    props: inProps,
    name: 'MuiCircularProgress'
  });
  const {
    className,
    color = 'primary',
    disableShrink = false,
    size = 40,
    style,
    thickness = 3.6,
    value = 0,
    variant = 'indeterminate',
    ...other
  } = props;
  const ownerState = {
    ...props,
    color,
    disableShrink,
    size,
    thickness,
    value,
    variant
  };
  const classes = useUtilityClasses(ownerState);
  const circleStyle = {};
  const rootStyle = {};
  const rootProps = {};
  if (variant === 'determinate') {
    const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
    circleStyle.strokeDasharray = circumference.toFixed(3);
    rootProps['aria-valuenow'] = Math.round(value);
    circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;
    rootStyle.transform = 'rotate(-90deg)';
  }
  return /*#__PURE__*/jsxRuntimeExports.jsx(CircularProgressRoot, {
    className: clsx(classes.root, className),
    style: {
      width: size,
      height: size,
      ...rootStyle,
      ...style
    },
    ownerState: ownerState,
    ref: ref,
    role: "progressbar",
    ...rootProps,
    ...other,
    children: /*#__PURE__*/jsxRuntimeExports.jsx(CircularProgressSVG, {
      className: classes.svg,
      ownerState: ownerState,
      viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
      children: /*#__PURE__*/jsxRuntimeExports.jsx(CircularProgressCircle, {
        className: classes.circle,
        style: circleStyle,
        ownerState: ownerState,
        cx: SIZE,
        cy: SIZE,
        r: (SIZE - thickness) / 2,
        fill: "none",
        strokeWidth: thickness
      })
    })
  });
});
process.env.NODE_ENV !== "production" ? CircularProgress.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),
  /**
   * If `true`, the shrink animation is disabled.
   * This only works if variant is `indeterminate`.
   * @default false
   */
  disableShrink: chainPropTypes(PropTypes.bool, props => {
    if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {
      return new Error('MUI: You have provided the `disableShrink` prop ' + 'with a variant other than `indeterminate`. This will have no effect.');
    }
    return null;
  }),
  /**
   * The size of the component.
   * If using a number, the pixel unit is assumed.
   * If using a string, you need to provide the CSS unit, for example '3rem'.
   * @default 40
   */
  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /**
   * @ignore
   */
  style: PropTypes.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * The thickness of the circle.
   * @default 3.6
   */
  thickness: PropTypes.number,
  /**
   * The value of the progress indicator for the determinate variant.
   * Value between 0 and 100.
   * @default 0
   */
  value: PropTypes.number,
  /**
   * The variant to use.
   * Use indeterminate when there is no progress value.
   * @default 'indeterminate'
   */
  variant: PropTypes.oneOf(['determinate', 'indeterminate'])
} : undefined;

const Loader = () => (jsxRuntimeExports.jsxs("div", { className: "icsl-loader-outer", children: [jsxRuntimeExports.jsx("div", { className: "icsl-loader-inner" }), jsxRuntimeExports.jsx(CircularProgress, { className: "icsl-loader-graphic" })] }));

const SpeciesTab = ({ dataUrl, onLoad, curatorUsernames, placeId, showRowNumbers, showReviewerCount, }) => {
    const [loaded, setLoaded] = reactExports.useState(false);
    const [error, setError] = reactExports.useState(false);
    const [filter, setFilter] = reactExports.useState('');
    const [debouncedFilter, setDebouncedFilter] = reactExports.useState('');
    const [data, setData] = reactExports.useState();
    const [taxons, setTaxons] = reactExports.useState();
    const [filteredData, setFilteredData] = reactExports.useState();
    const updateFilter = (e) => {
        setFilter(e.target.value);
        debounceVal(e.target.value);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
    const debounceVal = reactExports.useCallback(debounce((val) => {
        setDebouncedFilter(val);
    }, 200), []);
    reactExports.useEffect(() => {
        fetch(dataUrl, {
            headers: {
                Accept: 'application/json',
            },
        })
            .then((resp) => resp.json())
            .then((minifiedData) => {
            onLoad(minifiedData);
            setTaxons(minifiedData.taxons);
            setData(unminifySpeciesData(minifiedData));
            setLoaded(true);
        })
            .catch(() => setError(true));
    }, [dataUrl]);
    reactExports.useEffect(() => {
        if (!data) {
            return;
        }
        if (!debouncedFilter) {
            setFilteredData(data);
            return;
        }
        const newObj = {};
        const re = new RegExp(debouncedFilter, 'i');
        Object.keys(data).forEach((id) => {
            let found = false;
            Object.keys(data[id].data).forEach((taxon) => {
                if (re.test(data[id].data[taxon])) {
                    found = true;
                }
            });
            if (found) {
                newObj[id] = data[id];
            }
        });
        setFilteredData(newObj);
    }, [data, debouncedFilter]);
    if ((!loaded || !data || !filteredData || !taxons) && !error) {
        return (jsxRuntimeExports.jsx("div", { className: "icsl-loader", children: jsxRuntimeExports.jsx(Loader, {}) }));
    }
    if (error) {
        return jsxRuntimeExports.jsx("p", { children: "Sorry, there was an error loading the data." });
    }
    const numFilteredItems = Object.keys(filteredData).length;
    return (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsxs("div", { className: "icsl-filter", children: [jsxRuntimeExports.jsx("label", { children: "Filter:" }), jsxRuntimeExports.jsx("input", { type: "text", value: filter, onChange: updateFilter }), jsxRuntimeExports.jsx("span", { className: "icsl-filter-counts", children: jsxRuntimeExports.jsxs("b", { children: [numFilteredItems, " / ", Object.keys(data).length] }) })] }), !numFilteredItems && !!debouncedFilter && jsxRuntimeExports.jsx("p", { children: "No species found." }), numFilteredItems > 0 && (jsxRuntimeExports.jsx(DataTable, { data: filteredData, taxons: taxons, curatorUsernames: curatorUsernames, placeId: placeId, showRowNumbers: showRowNumbers, showReviewerCount: showReviewerCount }))] }));
};

const YearDropdown = ({ years, onChange }) => {
    const [sortedYears] = reactExports.useState(() => years.sort().reverse());
    return (jsxRuntimeExports.jsx("select", { onChange: (e) => onChange(e.target.value), children: sortedYears.map((year) => (jsxRuntimeExports.jsx("option", { value: year, children: year }, year))) }));
};

/**
 * @module constants
 * @summary Useful constants
 * @description
 * Collection of useful date constants.
 *
 * The constants could be imported from `date-fns/constants`:
 *
 * ```ts
 * import { maxTime, minTime } from "./constants/date-fns/constants";
 *
 * function isAllowedTime(time) {
 *   return time <= maxTime && time >= minTime;
 * }
 * ```
 */


/**
 * @constant
 * @name millisecondsInWeek
 * @summary Milliseconds in 1 week.
 */
const millisecondsInWeek = 604800000;

/**
 * @constant
 * @name millisecondsInDay
 * @summary Milliseconds in 1 day.
 */
const millisecondsInDay = 86400000;

/**
 * @constant
 * @name constructFromSymbol
 * @summary Symbol enabling Date extensions to inherit properties from the reference date.
 *
 * The symbol is used to enable the `constructFrom` function to construct a date
 * using a reference date and a value. It allows to transfer extra properties
 * from the reference date to the new date. It's useful for extensions like
 * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as
 * a constructor argument.
 */
const constructFromSymbol = Symbol.for("constructDateFrom");

/**
 * @name constructFrom
 * @category Generic Helpers
 * @summary Constructs a date using the reference date and the value
 *
 * @description
 * The function constructs a new date using the constructor from the reference
 * date and the given value. It helps to build generic functions that accept
 * date extensions.
 *
 * It defaults to `Date` if the passed reference date is a number or a string.
 *
 * Starting from v3.7.0, it allows to construct a date using `[Symbol.for("constructDateFrom")]`
 * enabling to transfer extra properties from the reference date to the new date.
 * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)
 * that accept a time zone as a constructor argument.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The reference date to take constructor from
 * @param value - The value to create the date
 *
 * @returns Date initialized using the given date and value
 *
 * @example
 * import { constructFrom } from "./constructFrom/date-fns";
 *
 * // A function that clones a date preserving the original type
 * function cloneDate<DateType extends Date>(date: DateType): DateType {
 *   return constructFrom(
 *     date, // Use constructor from the given date
 *     date.getTime() // Use the date value to create a new date
 *   );
 * }
 */
function constructFrom(date, value) {
  if (typeof date === "function") return date(value);

  if (date && typeof date === "object" && constructFromSymbol in date)
    return date[constructFromSymbol](value);

  if (date instanceof Date) return new date.constructor(value);

  return new Date(value);
}

/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * Starting from v3.7.0, it clones a date using `[Symbol.for("constructDateFrom")]`
 * enabling to transfer extra properties from the reference date to the new date.
 * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)
 * that accept a time zone as a constructor argument.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param argument - The value to convert
 *
 * @returns The parsed date in the local time zone
 *
 * @example
 * // Clone the date:
 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert the timestamp to date:
 * const result = toDate(1392098430000)
 * //=> Tue Feb 11 2014 11:30:30
 */
function toDate(argument, context) {
  // [TODO] Get rid of `toDate` or `constructFrom`?
  return constructFrom(context || argument, argument);
}

let defaultOptions = {};

function getDefaultOptions() {
  return defaultOptions;
}

/**
 * The {@link startOfWeek} function options.
 */

/**
 * @name startOfWeek
 * @category Week Helpers
 * @summary Return the start of a week for the given date.
 *
 * @description
 * Return the start of a week for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The start of a week
 *
 * @example
 * // The start of a week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfWeek(date, options) {
  const defaultOptions = getDefaultOptions();
  const weekStartsOn =
    options?.weekStartsOn ??
    options?.locale?.options?.weekStartsOn ??
    defaultOptions.weekStartsOn ??
    defaultOptions.locale?.options?.weekStartsOn ??
    0;

  const _date = toDate(date, options?.in);
  const day = _date.getDay();
  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;

  _date.setDate(_date.getDate() - diff);
  _date.setHours(0, 0, 0, 0);
  return _date;
}

/**
 * The {@link startOfISOWeek} function options.
 */

/**
 * @name startOfISOWeek
 * @category ISO Week Helpers
 * @summary Return the start of an ISO week for the given date.
 *
 * @description
 * Return the start of an ISO week for the given date.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The start of an ISO week
 *
 * @example
 * // The start of an ISO week for 2 September 2014 11:55:00:
 * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfISOWeek(date, options) {
  return startOfWeek(date, { ...options, weekStartsOn: 1 });
}

/**
 * The {@link getISOWeekYear} function options.
 */

/**
 * @name getISOWeekYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the ISO week-numbering year of the given date.
 *
 * @description
 * Get the ISO week-numbering year of the given date,
 * which always starts 3 days before the year's first Thursday.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param date - The given date
 *
 * @returns The ISO week-numbering year
 *
 * @example
 * // Which ISO-week numbering year is 2 January 2005?
 * const result = getISOWeekYear(new Date(2005, 0, 2))
 * //=> 2004
 */
function getISOWeekYear(date, options) {
  const _date = toDate(date, options?.in);
  const year = _date.getFullYear();

  const fourthOfJanuaryOfNextYear = constructFrom(_date, 0);
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);

  const fourthOfJanuaryOfThisYear = constructFrom(_date, 0);
  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);

  if (_date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (_date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

/**
 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
 * They usually appear for dates that denote time before the timezones were introduced
 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
 * and GMT+01:00:00 after that date)
 *
 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
 * which would lead to incorrect calculations.
 *
 * This function returns the timezone offset in milliseconds that takes seconds in account.
 */
function getTimezoneOffsetInMilliseconds(date) {
  const _date = toDate(date);
  const utcDate = new Date(
    Date.UTC(
      _date.getFullYear(),
      _date.getMonth(),
      _date.getDate(),
      _date.getHours(),
      _date.getMinutes(),
      _date.getSeconds(),
      _date.getMilliseconds(),
    ),
  );
  utcDate.setUTCFullYear(_date.getFullYear());
  return +date - +utcDate;
}

function normalizeDates(context, ...dates) {
  const normalize = constructFrom.bind(
    null,
    dates.find((date) => typeof date === "object"),
  );
  return dates.map(normalize);
}

/**
 * The {@link startOfDay} function options.
 */

/**
 * @name startOfDay
 * @category Day Helpers
 * @summary Return the start of a day for the given date.
 *
 * @description
 * Return the start of a day for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - The options
 *
 * @returns The start of a day
 *
 * @example
 * // The start of a day for 2 September 2014 11:55:00:
 * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 00:00:00
 */
function startOfDay(date, options) {
  const _date = toDate(date, options?.in);
  _date.setHours(0, 0, 0, 0);
  return _date;
}

/**
 * The {@link differenceInCalendarDays} function options.
 */

/**
 * @name differenceInCalendarDays
 * @category Day Helpers
 * @summary Get the number of calendar days between the given dates.
 *
 * @description
 * Get the number of calendar days between the given dates. This means that the times are removed
 * from the dates and then the difference in days is calculated.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - The options object
 *
 * @returns The number of calendar days
 *
 * @example
 * // How many calendar days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * const result = differenceInCalendarDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 366
 * // How many calendar days are between
 * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
 * const result = differenceInCalendarDays(
 *   new Date(2011, 6, 3, 0, 1),
 *   new Date(2011, 6, 2, 23, 59)
 * )
 * //=> 1
 */
function differenceInCalendarDays(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options?.in,
    laterDate,
    earlierDate,
  );

  const laterStartOfDay = startOfDay(laterDate_);
  const earlierStartOfDay = startOfDay(earlierDate_);

  const laterTimestamp =
    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);
  const earlierTimestamp =
    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);

  // Round the number of days to the nearest integer because the number of
  // milliseconds in a day is not constant (e.g. it's different in the week of
  // the daylight saving time clock shift).
  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);
}

/**
 * The {@link startOfISOWeekYear} function options.
 */

/**
 * @name startOfISOWeekYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Return the start of an ISO week-numbering year for the given date.
 *
 * @description
 * Return the start of an ISO week-numbering year,
 * which always starts 3 days before the year's first Thursday.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The start of an ISO week-numbering year
 *
 * @example
 * // The start of an ISO week-numbering year for 2 July 2005:
 * const result = startOfISOWeekYear(new Date(2005, 6, 2))
 * //=> Mon Jan 03 2005 00:00:00
 */
function startOfISOWeekYear(date, options) {
  const year = getISOWeekYear(date, options);
  const fourthOfJanuary = constructFrom(date, 0);
  fourthOfJanuary.setFullYear(year, 0, 4);
  fourthOfJanuary.setHours(0, 0, 0, 0);
  return startOfISOWeek(fourthOfJanuary);
}

/**
 * @name isDate
 * @category Common Helpers
 * @summary Is the given value a date?
 *
 * @description
 * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
 *
 * @param value - The value to check
 *
 * @returns True if the given value is a date
 *
 * @example
 * // For a valid date:
 * const result = isDate(new Date())
 * //=> true
 *
 * @example
 * // For an invalid date:
 * const result = isDate(new Date(NaN))
 * //=> true
 *
 * @example
 * // For some value:
 * const result = isDate('2014-02-31')
 * //=> false
 *
 * @example
 * // For an object:
 * const result = isDate({})
 * //=> false
 */
function isDate(value) {
  return (
    value instanceof Date ||
    (typeof value === "object" &&
      Object.prototype.toString.call(value) === "[object Date]")
  );
}

/**
 * @name isValid
 * @category Common Helpers
 * @summary Is the given date valid?
 *
 * @description
 * Returns false if argument is Invalid Date and true otherwise.
 * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)
 * Invalid Date is a Date, whose time value is NaN.
 *
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * @param date - The date to check
 *
 * @returns The date is valid
 *
 * @example
 * // For the valid date:
 * const result = isValid(new Date(2014, 1, 31))
 * //=> true
 *
 * @example
 * // For the value, convertible into a date:
 * const result = isValid(1393804800000)
 * //=> true
 *
 * @example
 * // For the invalid date:
 * const result = isValid(new Date(''))
 * //=> false
 */
function isValid(date) {
  return !((!isDate(date) && typeof date !== "number") || isNaN(+toDate(date)));
}

/**
 * The {@link startOfYear} function options.
 */

/**
 * @name startOfYear
 * @category Year Helpers
 * @summary Return the start of a year for the given date.
 *
 * @description
 * Return the start of a year for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - The options
 *
 * @returns The start of a year
 *
 * @example
 * // The start of a year for 2 September 2014 11:55:00:
 * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))
 * //=> Wed Jan 01 2014 00:00:00
 */
function startOfYear(date, options) {
  const date_ = toDate(date, options?.in);
  date_.setFullYear(date_.getFullYear(), 0, 1);
  date_.setHours(0, 0, 0, 0);
  return date_;
}

const formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds",
  },

  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds",
  },

  halfAMinute: "half a minute",

  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes",
  },

  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes",
  },

  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours",
  },

  xHours: {
    one: "1 hour",
    other: "{{count}} hours",
  },

  xDays: {
    one: "1 day",
    other: "{{count}} days",
  },

  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks",
  },

  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks",
  },

  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months",
  },

  xMonths: {
    one: "1 month",
    other: "{{count}} months",
  },

  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years",
  },

  xYears: {
    one: "1 year",
    other: "{{count}} years",
  },

  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years",
  },

  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years",
  },
};

const formatDistance = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }

  return result;
};

function buildFormatLongFn(args) {
  return (options = {}) => {
    // TODO: Remove String()
    const width = options.width ? String(options.width) : args.defaultWidth;
    const format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}

const dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy",
};

const timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

const formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full",
  }),

  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full",
  }),

  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full",
  }),
};

const formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P",
};

const formatRelative = (token, _date, _baseDate, _options) =>
  formatRelativeLocale[token];

/**
 * The localize function argument callback which allows to convert raw value to
 * the actual type.
 *
 * @param value - The value to convert
 *
 * @returns The converted value
 */

/**
 * The map of localized values for each width.
 */

/**
 * The index type of the locale unit value. It types conversion of units of
 * values that don't start at 0 (i.e. quarters).
 */

/**
 * Converts the unit value to the tuple of values.
 */

/**
 * The tuple of localized era values. The first element represents BC,
 * the second element represents AD.
 */

/**
 * The tuple of localized quarter values. The first element represents Q1.
 */

/**
 * The tuple of localized day values. The first element represents Sunday.
 */

/**
 * The tuple of localized month values. The first element represents January.
 */

function buildLocalizeFn(args) {
  return (value, options) => {
    const context = options?.context ? String(options.context) : "standalone";

    let valuesArray;
    if (context === "formatting" && args.formattingValues) {
      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      const width = options?.width ? String(options.width) : defaultWidth;

      valuesArray =
        args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      const defaultWidth = args.defaultWidth;
      const width = options?.width ? String(options.width) : args.defaultWidth;

      valuesArray = args.values[width] || args.values[defaultWidth];
    }
    const index = args.argumentCallback ? args.argumentCallback(value) : value;

    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
    return valuesArray[index];
  };
}

const eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"],
};

const quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"],
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec",
  ],

  wide: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ],
};

const dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
  ],
};

const dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night",
  },
};

const formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night",
  },
};

const ordinalNumber = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);

  // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`.
  //
  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'.

  const rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};

const localize = {
  ordinalNumber,

  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide",
  }),

  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide",
  }),

  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide",
  }),

  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide",
  }),
};

function buildMatchFn(args) {
  return (string, options = {}) => {
    const width = options.width;

    const matchPattern =
      (width && args.matchPatterns[width]) ||
      args.matchPatterns[args.defaultMatchWidth];
    const matchResult = string.match(matchPattern);

    if (!matchResult) {
      return null;
    }
    const matchedString = matchResult[0];

    const parsePatterns =
      (width && args.parsePatterns[width]) ||
      args.parsePatterns[args.defaultParseWidth];

    const key = Array.isArray(parsePatterns)
      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))
      : // [TODO] -- I challenge you to fix the type
        findKey(parsePatterns, (pattern) => pattern.test(matchedString));

    let value;

    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback
      ? // [TODO] -- I challenge you to fix the type
        options.valueCallback(value)
      : value;

    const rest = string.slice(matchedString.length);

    return { value, rest };
  };
}

function findKey(object, predicate) {
  for (const key in object) {
    if (
      Object.prototype.hasOwnProperty.call(object, key) &&
      predicate(object[key])
    ) {
      return key;
    }
  }
  return undefined;
}

function findIndex(array, predicate) {
  for (let key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return undefined;
}

function buildMatchPatternFn(args) {
  return (string, options = {}) => {
    const matchResult = string.match(args.matchPattern);
    if (!matchResult) return null;
    const matchedString = matchResult[0];

    const parseResult = string.match(args.parsePattern);
    if (!parseResult) return null;
    let value = args.valueCallback
      ? args.valueCallback(parseResult[0])
      : parseResult[0];

    // [TODO] I challenge you to fix the type
    value = options.valueCallback ? options.valueCallback(value) : value;

    const rest = string.slice(matchedString.length);

    return { value, rest };
  };
}

const matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern = /\d+/i;

const matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i,
};
const parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i],
};

const matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i,
};
const parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,
};
const parseMonthPatterns = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^may/i,
    /^jun/i,
    /^jul/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,
};
const parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],
};

const matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,
};
const parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i,
  },
};

const match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any",
  }),

  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any",
  }),

  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any",
  }),

  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any",
  }),
};

/**
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)
 * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)
 */
const enUS = {
  code: "en-US",
  formatDistance: formatDistance,
  formatLong: formatLong,
  formatRelative: formatRelative,
  localize: localize,
  match: match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
};

/**
 * The {@link getDayOfYear} function options.
 */

/**
 * @name getDayOfYear
 * @category Day Helpers
 * @summary Get the day of the year of the given date.
 *
 * @description
 * Get the day of the year of the given date.
 *
 * @param date - The given date
 * @param options - The options
 *
 * @returns The day of year
 *
 * @example
 * // Which day of the year is 2 July 2014?
 * const result = getDayOfYear(new Date(2014, 6, 2))
 * //=> 183
 */
function getDayOfYear(date, options) {
  const _date = toDate(date, options?.in);
  const diff = differenceInCalendarDays(_date, startOfYear(_date));
  const dayOfYear = diff + 1;
  return dayOfYear;
}

/**
 * The {@link getISOWeek} function options.
 */

/**
 * @name getISOWeek
 * @category ISO Week Helpers
 * @summary Get the ISO week of the given date.
 *
 * @description
 * Get the ISO week of the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param date - The given date
 * @param options - The options
 *
 * @returns The ISO week
 *
 * @example
 * // Which week of the ISO-week numbering year is 2 January 2005?
 * const result = getISOWeek(new Date(2005, 0, 2))
 * //=> 53
 */
function getISOWeek(date, options) {
  const _date = toDate(date, options?.in);
  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);

  // Round the number of weeks to the nearest integer because the number of
  // milliseconds in a week is not constant (e.g. it's different in the week of
  // the daylight saving time clock shift).
  return Math.round(diff / millisecondsInWeek) + 1;
}

/**
 * The {@link getWeekYear} function options.
 */

/**
 * @name getWeekYear
 * @category Week-Numbering Year Helpers
 * @summary Get the local week-numbering year of the given date.
 *
 * @description
 * Get the local week-numbering year of the given date.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The local week-numbering year
 *
 * @example
 * // Which week numbering year is 26 December 2004 with the default settings?
 * const result = getWeekYear(new Date(2004, 11, 26))
 * //=> 2005
 *
 * @example
 * // Which week numbering year is 26 December 2004 if week starts on Saturday?
 * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })
 * //=> 2004
 *
 * @example
 * // Which week numbering year is 26 December 2004 if the first week contains 4 January?
 * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })
 * //=> 2004
 */
function getWeekYear(date, options) {
  const _date = toDate(date, options?.in);
  const year = _date.getFullYear();

  const defaultOptions = getDefaultOptions();
  const firstWeekContainsDate =
    options?.firstWeekContainsDate ??
    options?.locale?.options?.firstWeekContainsDate ??
    defaultOptions.firstWeekContainsDate ??
    defaultOptions.locale?.options?.firstWeekContainsDate ??
    1;

  const firstWeekOfNextYear = constructFrom(options?.in || date, 0);
  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setHours(0, 0, 0, 0);
  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);

  const firstWeekOfThisYear = constructFrom(options?.in || date, 0);
  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setHours(0, 0, 0, 0);
  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);

  if (+_date >= +startOfNextYear) {
    return year + 1;
  } else if (+_date >= +startOfThisYear) {
    return year;
  } else {
    return year - 1;
  }
}

/**
 * The {@link startOfWeekYear} function options.
 */

/**
 * @name startOfWeekYear
 * @category Week-Numbering Year Helpers
 * @summary Return the start of a local week-numbering year for the given date.
 *
 * @description
 * Return the start of a local week-numbering year.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The start of a week-numbering year
 *
 * @example
 * // The start of an a week-numbering year for 2 July 2005 with default settings:
 * const result = startOfWeekYear(new Date(2005, 6, 2))
 * //=> Sun Dec 26 2004 00:00:00
 *
 * @example
 * // The start of a week-numbering year for 2 July 2005
 * // if Monday is the first day of week
 * // and 4 January is always in the first week of the year:
 * const result = startOfWeekYear(new Date(2005, 6, 2), {
 *   weekStartsOn: 1,
 *   firstWeekContainsDate: 4
 * })
 * //=> Mon Jan 03 2005 00:00:00
 */
function startOfWeekYear(date, options) {
  const defaultOptions = getDefaultOptions();
  const firstWeekContainsDate =
    options?.firstWeekContainsDate ??
    options?.locale?.options?.firstWeekContainsDate ??
    defaultOptions.firstWeekContainsDate ??
    defaultOptions.locale?.options?.firstWeekContainsDate ??
    1;

  const year = getWeekYear(date, options);
  const firstWeek = constructFrom(options?.in || date, 0);
  firstWeek.setFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setHours(0, 0, 0, 0);
  const _date = startOfWeek(firstWeek, options);
  return _date;
}

/**
 * The {@link getWeek} function options.
 */

/**
 * @name getWeek
 * @category Week Helpers
 * @summary Get the local week index of the given date.
 *
 * @description
 * Get the local week index of the given date.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The week
 *
 * @example
 * // Which week of the local week numbering year is 2 January 2005 with default options?
 * const result = getWeek(new Date(2005, 0, 2))
 * //=> 2
 *
 * @example
 * // Which week of the local week numbering year is 2 January 2005,
 * // if Monday is the first day of the week,
 * // and the first week of the year always contains 4 January?
 * const result = getWeek(new Date(2005, 0, 2), {
 *   weekStartsOn: 1,
 *   firstWeekContainsDate: 4
 * })
 * //=> 53
 */
function getWeek(date, options) {
  const _date = toDate(date, options?.in);
  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);

  // Round the number of weeks to the nearest integer because the number of
  // milliseconds in a week is not constant (e.g. it's different in the week of
  // the daylight saving time clock shift).
  return Math.round(diff / millisecondsInWeek) + 1;
}

function addLeadingZeros(number, targetLength) {
  const sign = number < 0 ? "-" : "";
  const output = Math.abs(number).toString().padStart(targetLength, "0");
  return sign + output;
}

/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* |                                |
 * |  d  | Day of month                   |  D  |                                |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  m  | Minute                         |  M  | Month                          |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  y  | Year (abs)                     |  Y  |                                |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 */

const lightFormatters = {
  // Year
  y(date, token) {
    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
    // |----------|-------|----|-------|-------|-------|
    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |

    const signedYear = date.getFullYear();
    // Returns 1 for 1 BC (which is year 0 in JavaScript)
    const year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },

  // Month
  M(date, token) {
    const month = date.getMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },

  // Day of the month
  d(date, token) {
    return addLeadingZeros(date.getDate(), token.length);
  },

  // AM or PM
  a(date, token) {
    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? "pm" : "am";

    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },

  // Hour [1-12]
  h(date, token) {
    return addLeadingZeros(date.getHours() % 12 || 12, token.length);
  },

  // Hour [0-23]
  H(date, token) {
    return addLeadingZeros(date.getHours(), token.length);
  },

  // Minute
  m(date, token) {
    return addLeadingZeros(date.getMinutes(), token.length);
  },

  // Second
  s(date, token) {
    return addLeadingZeros(date.getSeconds(), token.length);
  },

  // Fraction of second
  S(date, token) {
    const numberOfDigits = token.length;
    const milliseconds = date.getMilliseconds();
    const fractionalSeconds = Math.trunc(
      milliseconds * Math.pow(10, numberOfDigits - 3),
    );
    return addLeadingZeros(fractionalSeconds, token.length);
  },
};

const dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night",
};

/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
 * |  p! | Long localized time            |  P! | Long localized date            |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 * - `P` is long localized date format
 * - `p` is long localized time format
 */

const formatters = {
  // Era
  G: function (date, token, localize) {
    const era = date.getFullYear() > 0 ? 1 : 0;
    switch (token) {
      // AD, BC
      case "G":
      case "GG":
      case "GGG":
        return localize.era(era, { width: "abbreviated" });
      // A, B
      case "GGGGG":
        return localize.era(era, { width: "narrow" });
      // Anno Domini, Before Christ
      case "GGGG":
      default:
        return localize.era(era, { width: "wide" });
    }
  },

  // Year
  y: function (date, token, localize) {
    // Ordinal number
    if (token === "yo") {
      const signedYear = date.getFullYear();
      // Returns 1 for 1 BC (which is year 0 in JavaScript)
      const year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize.ordinalNumber(year, { unit: "year" });
    }

    return lightFormatters.y(date, token);
  },

  // Local week-numbering year
  Y: function (date, token, localize, options) {
    const signedWeekYear = getWeekYear(date, options);
    // Returns 1 for 1 BC (which is year 0 in JavaScript)
    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;

    // Two digit year
    if (token === "YY") {
      const twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }

    // Ordinal number
    if (token === "Yo") {
      return localize.ordinalNumber(weekYear, { unit: "year" });
    }

    // Padding
    return addLeadingZeros(weekYear, token.length);
  },

  // ISO week-numbering year
  R: function (date, token) {
    const isoWeekYear = getISOWeekYear(date);

    // Padding
    return addLeadingZeros(isoWeekYear, token.length);
  },

  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function (date, token) {
    const year = date.getFullYear();
    return addLeadingZeros(year, token.length);
  },

  // Quarter
  Q: function (date, token, localize) {
    const quarter = Math.ceil((date.getMonth() + 1) / 3);
    switch (token) {
      // 1, 2, 3, 4
      case "Q":
        return String(quarter);
      // 01, 02, 03, 04
      case "QQ":
        return addLeadingZeros(quarter, 2);
      // 1st, 2nd, 3rd, 4th
      case "Qo":
        return localize.ordinalNumber(quarter, { unit: "quarter" });
      // Q1, Q2, Q3, Q4
      case "QQQ":
        return localize.quarter(quarter, {
          width: "abbreviated",
          context: "formatting",
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case "QQQQQ":
        return localize.quarter(quarter, {
          width: "narrow",
          context: "formatting",
        });
      // 1st quarter, 2nd quarter, ...
      case "QQQQ":
      default:
        return localize.quarter(quarter, {
          width: "wide",
          context: "formatting",
        });
    }
  },

  // Stand-alone quarter
  q: function (date, token, localize) {
    const quarter = Math.ceil((date.getMonth() + 1) / 3);
    switch (token) {
      // 1, 2, 3, 4
      case "q":
        return String(quarter);
      // 01, 02, 03, 04
      case "qq":
        return addLeadingZeros(quarter, 2);
      // 1st, 2nd, 3rd, 4th
      case "qo":
        return localize.ordinalNumber(quarter, { unit: "quarter" });
      // Q1, Q2, Q3, Q4
      case "qqq":
        return localize.quarter(quarter, {
          width: "abbreviated",
          context: "standalone",
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case "qqqqq":
        return localize.quarter(quarter, {
          width: "narrow",
          context: "standalone",
        });
      // 1st quarter, 2nd quarter, ...
      case "qqqq":
      default:
        return localize.quarter(quarter, {
          width: "wide",
          context: "standalone",
        });
    }
  },

  // Month
  M: function (date, token, localize) {
    const month = date.getMonth();
    switch (token) {
      case "M":
      case "MM":
        return lightFormatters.M(date, token);
      // 1st, 2nd, ..., 12th
      case "Mo":
        return localize.ordinalNumber(month + 1, { unit: "month" });
      // Jan, Feb, ..., Dec
      case "MMM":
        return localize.month(month, {
          width: "abbreviated",
          context: "formatting",
        });
      // J, F, ..., D
      case "MMMMM":
        return localize.month(month, {
          width: "narrow",
          context: "formatting",
        });
      // January, February, ..., December
      case "MMMM":
      default:
        return localize.month(month, { width: "wide", context: "formatting" });
    }
  },

  // Stand-alone month
  L: function (date, token, localize) {
    const month = date.getMonth();
    switch (token) {
      // 1, 2, ..., 12
      case "L":
        return String(month + 1);
      // 01, 02, ..., 12
      case "LL":
        return addLeadingZeros(month + 1, 2);
      // 1st, 2nd, ..., 12th
      case "Lo":
        return localize.ordinalNumber(month + 1, { unit: "month" });
      // Jan, Feb, ..., Dec
      case "LLL":
        return localize.month(month, {
          width: "abbreviated",
          context: "standalone",
        });
      // J, F, ..., D
      case "LLLLL":
        return localize.month(month, {
          width: "narrow",
          context: "standalone",
        });
      // January, February, ..., December
      case "LLLL":
      default:
        return localize.month(month, { width: "wide", context: "standalone" });
    }
  },

  // Local week of year
  w: function (date, token, localize, options) {
    const week = getWeek(date, options);

    if (token === "wo") {
      return localize.ordinalNumber(week, { unit: "week" });
    }

    return addLeadingZeros(week, token.length);
  },

  // ISO week of year
  I: function (date, token, localize) {
    const isoWeek = getISOWeek(date);

    if (token === "Io") {
      return localize.ordinalNumber(isoWeek, { unit: "week" });
    }

    return addLeadingZeros(isoWeek, token.length);
  },

  // Day of the month
  d: function (date, token, localize) {
    if (token === "do") {
      return localize.ordinalNumber(date.getDate(), { unit: "date" });
    }

    return lightFormatters.d(date, token);
  },

  // Day of year
  D: function (date, token, localize) {
    const dayOfYear = getDayOfYear(date);

    if (token === "Do") {
      return localize.ordinalNumber(dayOfYear, { unit: "dayOfYear" });
    }

    return addLeadingZeros(dayOfYear, token.length);
  },

  // Day of week
  E: function (date, token, localize) {
    const dayOfWeek = date.getDay();
    switch (token) {
      // Tue
      case "E":
      case "EE":
      case "EEE":
        return localize.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting",
        });
      // T
      case "EEEEE":
        return localize.day(dayOfWeek, {
          width: "narrow",
          context: "formatting",
        });
      // Tu
      case "EEEEEE":
        return localize.day(dayOfWeek, {
          width: "short",
          context: "formatting",
        });
      // Tuesday
      case "EEEE":
      default:
        return localize.day(dayOfWeek, {
          width: "wide",
          context: "formatting",
        });
    }
  },

  // Local day of week
  e: function (date, token, localize, options) {
    const dayOfWeek = date.getDay();
    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      // Numerical value (Nth day of week with current locale or weekStartsOn)
      case "e":
        return String(localDayOfWeek);
      // Padded numerical value
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      // 1st, 2nd, ..., 7th
      case "eo":
        return localize.ordinalNumber(localDayOfWeek, { unit: "day" });
      case "eee":
        return localize.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting",
        });
      // T
      case "eeeee":
        return localize.day(dayOfWeek, {
          width: "narrow",
          context: "formatting",
        });
      // Tu
      case "eeeeee":
        return localize.day(dayOfWeek, {
          width: "short",
          context: "formatting",
        });
      // Tuesday
      case "eeee":
      default:
        return localize.day(dayOfWeek, {
          width: "wide",
          context: "formatting",
        });
    }
  },

  // Stand-alone local day of week
  c: function (date, token, localize, options) {
    const dayOfWeek = date.getDay();
    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      // Numerical value (same as in `e`)
      case "c":
        return String(localDayOfWeek);
      // Padded numerical value
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      // 1st, 2nd, ..., 7th
      case "co":
        return localize.ordinalNumber(localDayOfWeek, { unit: "day" });
      case "ccc":
        return localize.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone",
        });
      // T
      case "ccccc":
        return localize.day(dayOfWeek, {
          width: "narrow",
          context: "standalone",
        });
      // Tu
      case "cccccc":
        return localize.day(dayOfWeek, {
          width: "short",
          context: "standalone",
        });
      // Tuesday
      case "cccc":
      default:
        return localize.day(dayOfWeek, {
          width: "wide",
          context: "standalone",
        });
    }
  },

  // ISO day of week
  i: function (date, token, localize) {
    const dayOfWeek = date.getDay();
    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      // 2
      case "i":
        return String(isoDayOfWeek);
      // 02
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      // 2nd
      case "io":
        return localize.ordinalNumber(isoDayOfWeek, { unit: "day" });
      // Tue
      case "iii":
        return localize.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting",
        });
      // T
      case "iiiii":
        return localize.day(dayOfWeek, {
          width: "narrow",
          context: "formatting",
        });
      // Tu
      case "iiiiii":
        return localize.day(dayOfWeek, {
          width: "short",
          context: "formatting",
        });
      // Tuesday
      case "iiii":
      default:
        return localize.day(dayOfWeek, {
          width: "wide",
          context: "formatting",
        });
    }
  },

  // AM or PM
  a: function (date, token, localize) {
    const hours = date.getHours();
    const dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";

    switch (token) {
      case "a":
      case "aa":
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting",
        });
      case "aaa":
        return localize
          .dayPeriod(dayPeriodEnumValue, {
            width: "abbreviated",
            context: "formatting",
          })
          .toLowerCase();
      case "aaaaa":
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting",
        });
      case "aaaa":
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting",
        });
    }
  },

  // AM, PM, midnight, noon
  b: function (date, token, localize) {
    const hours = date.getHours();
    let dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }

    switch (token) {
      case "b":
      case "bb":
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting",
        });
      case "bbb":
        return localize
          .dayPeriod(dayPeriodEnumValue, {
            width: "abbreviated",
            context: "formatting",
          })
          .toLowerCase();
      case "bbbbb":
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting",
        });
      case "bbbb":
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting",
        });
    }
  },

  // in the morning, in the afternoon, in the evening, at night
  B: function (date, token, localize) {
    const hours = date.getHours();
    let dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }

    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting",
        });
      case "BBBBB":
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting",
        });
      case "BBBB":
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting",
        });
    }
  },

  // Hour [1-12]
  h: function (date, token, localize) {
    if (token === "ho") {
      let hours = date.getHours() % 12;
      if (hours === 0) hours = 12;
      return localize.ordinalNumber(hours, { unit: "hour" });
    }

    return lightFormatters.h(date, token);
  },

  // Hour [0-23]
  H: function (date, token, localize) {
    if (token === "Ho") {
      return localize.ordinalNumber(date.getHours(), { unit: "hour" });
    }

    return lightFormatters.H(date, token);
  },

  // Hour [0-11]
  K: function (date, token, localize) {
    const hours = date.getHours() % 12;

    if (token === "Ko") {
      return localize.ordinalNumber(hours, { unit: "hour" });
    }

    return addLeadingZeros(hours, token.length);
  },

  // Hour [1-24]
  k: function (date, token, localize) {
    let hours = date.getHours();
    if (hours === 0) hours = 24;

    if (token === "ko") {
      return localize.ordinalNumber(hours, { unit: "hour" });
    }

    return addLeadingZeros(hours, token.length);
  },

  // Minute
  m: function (date, token, localize) {
    if (token === "mo") {
      return localize.ordinalNumber(date.getMinutes(), { unit: "minute" });
    }

    return lightFormatters.m(date, token);
  },

  // Second
  s: function (date, token, localize) {
    if (token === "so") {
      return localize.ordinalNumber(date.getSeconds(), { unit: "second" });
    }

    return lightFormatters.s(date, token);
  },

  // Fraction of second
  S: function (date, token) {
    return lightFormatters.S(date, token);
  },

  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function (date, token, _localize) {
    const timezoneOffset = date.getTimezoneOffset();

    if (timezoneOffset === 0) {
      return "Z";
    }

    switch (token) {
      // Hours and optional minutes
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);

      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XX`
      case "XXXX":
      case "XX": // Hours and minutes without `:` delimiter
        return formatTimezone(timezoneOffset);

      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XXX`
      case "XXXXX":
      case "XXX": // Hours and minutes with `:` delimiter
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },

  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function (date, token, _localize) {
    const timezoneOffset = date.getTimezoneOffset();

    switch (token) {
      // Hours and optional minutes
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);

      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xx`
      case "xxxx":
      case "xx": // Hours and minutes without `:` delimiter
        return formatTimezone(timezoneOffset);

      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xxx`
      case "xxxxx":
      case "xxx": // Hours and minutes with `:` delimiter
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },

  // Timezone (GMT)
  O: function (date, token, _localize) {
    const timezoneOffset = date.getTimezoneOffset();

    switch (token) {
      // Short
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      // Long
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },

  // Timezone (specific non-location)
  z: function (date, token, _localize) {
    const timezoneOffset = date.getTimezoneOffset();

    switch (token) {
      // Short
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      // Long
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },

  // Seconds timestamp
  t: function (date, token, _localize) {
    const timestamp = Math.trunc(+date / 1000);
    return addLeadingZeros(timestamp, token.length);
  },

  // Milliseconds timestamp
  T: function (date, token, _localize) {
    return addLeadingZeros(+date, token.length);
  },
};

function formatTimezoneShort(offset, delimiter = "") {
  const sign = offset > 0 ? "-" : "+";
  const absOffset = Math.abs(offset);
  const hours = Math.trunc(absOffset / 60);
  const minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}

function formatTimezoneWithOptionalMinutes(offset, delimiter) {
  if (offset % 60 === 0) {
    const sign = offset > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, delimiter);
}

function formatTimezone(offset, delimiter = "") {
  const sign = offset > 0 ? "-" : "+";
  const absOffset = Math.abs(offset);
  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);
  const minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}

const dateLongFormatter = (pattern, formatLong) => {
  switch (pattern) {
    case "P":
      return formatLong.date({ width: "short" });
    case "PP":
      return formatLong.date({ width: "medium" });
    case "PPP":
      return formatLong.date({ width: "long" });
    case "PPPP":
    default:
      return formatLong.date({ width: "full" });
  }
};

const timeLongFormatter = (pattern, formatLong) => {
  switch (pattern) {
    case "p":
      return formatLong.time({ width: "short" });
    case "pp":
      return formatLong.time({ width: "medium" });
    case "ppp":
      return formatLong.time({ width: "long" });
    case "pppp":
    default:
      return formatLong.time({ width: "full" });
  }
};

const dateTimeLongFormatter = (pattern, formatLong) => {
  const matchResult = pattern.match(/(P+)(p+)?/) || [];
  const datePattern = matchResult[1];
  const timePattern = matchResult[2];

  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong);
  }

  let dateTimeFormat;

  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong.dateTime({ width: "short" });
      break;
    case "PP":
      dateTimeFormat = formatLong.dateTime({ width: "medium" });
      break;
    case "PPP":
      dateTimeFormat = formatLong.dateTime({ width: "long" });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong.dateTime({ width: "full" });
      break;
  }

  return dateTimeFormat
    .replace("{{date}}", dateLongFormatter(datePattern, formatLong))
    .replace("{{time}}", timeLongFormatter(timePattern, formatLong));
};

const longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter,
};

const dayOfYearTokenRE = /^D+$/;
const weekYearTokenRE = /^Y+$/;

const throwTokens = ["D", "DD", "YY", "YYYY"];

function isProtectedDayOfYearToken(token) {
  return dayOfYearTokenRE.test(token);
}

function isProtectedWeekYearToken(token) {
  return weekYearTokenRE.test(token);
}

function warnOrThrowProtectedError(token, format, input) {
  const _message = message(token, format, input);
  console.warn(_message);
  if (throwTokens.includes(token)) throw new RangeError(_message);
}

function message(token, format, input) {
  const subject = token[0] === "Y" ? "years" : "days of the month";
  return `Use \`${token.toLowerCase()}\` instead of \`${token}\` (in \`${format}\`) for formatting ${subject} to the input \`${input}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;
}

// This RegExp consists of three parts separated by `|`:
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
const formattingTokensRegExp =
  /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

// This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
const longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;

const escapedStringRegExp = /^'([^]*?)'?$/;
const doubleQuoteRegExp = /''/g;
const unescapedLatinCharacterRegExp = /[a-zA-Z]/;

/**
 * The {@link format} function options.
 */

/**
 * @name format
 * @alias formatDate
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format. The result may vary by locale.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * The characters wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 * (see the last example)
 *
 * Format of the string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 7 below the table).
 *
 * Accepted patterns:
 * | Unit                            | Pattern | Result examples                   | Notes |
 * |---------------------------------|---------|-----------------------------------|-------|
 * | Era                             | G..GGG  | AD, BC                            |       |
 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 | GGGGG   | A, B                              |       |
 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
 * |                                 | yyyyy   | ...                               | 3,5   |
 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
 * |                                 | YYYYY   | ...                               | 3,5   |
 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
 * |                                 | RRRRR   | ...                               | 3,5,7 |
 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
 * |                                 | uuuuu   | ...                               | 3,5   |
 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | QQ      | 01, 02, 03, 04                    |       |
 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | qq      | 01, 02, 03, 04                    |       |
 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | MM      | 01, 02, ..., 12                   |       |
 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 | MMMM    | January, February, ..., December  | 2     |
 * |                                 | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | LL      | 01, 02, ..., 12                   |       |
 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 | LLLL    | January, February, ..., December  | 2     |
 * |                                 | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | II      | 01, 02, ..., 53                   | 7     |
 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
 * |                                 | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 | DDDD    | ...                               | 3     |
 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
 * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | ee      | 02, 03, ..., 01                   |       |
 * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | cc      | 02, 03, ..., 01                   |       |
 * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          | a..aa   | AM, PM                            |       |
 * |                                 | aaa     | am, pm                            |       |
 * |                                 | aaaa    | a.m., p.m.                        | 2     |
 * |                                 | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
 * |                                 | bbb     | am, pm, noon, midnight            |       |
 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
 * |                                 | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          | m       | 0, 1, ..., 59                     |       |
 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | mm      | 00, 01, ..., 59                   |       |
 * | Second                          | s       | 0, 1, ..., 59                     |       |
 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | ss      | 00, 01, ..., 59                   |       |
 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
 * |                                 | SS      | 00, 01, ..., 99                   |       |
 * |                                 | SSS     | 000, 001, ..., 999                |       |
 * |                                 | SSSS    | ...                               | 3     |
 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
 * |                                 | XX      | -0800, +0530, Z                   |       |
 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
 * |                                 | xx      | -0800, +0530, +0000               |       |
 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
 * | Seconds timestamp               | t       | 512969520                         | 7     |
 * |                                 | tt      | ...                               | 3,7   |
 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
 * |                                 | TT      | ...                               | 3,7   |
 * | Long localized date             | P       | 04/29/1453                        | 7     |
 * |                                 | PP      | Apr 29, 1453                      | 7     |
 * |                                 | PPP     | April 29th, 1453                  | 7     |
 * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
 * | Long localized time             | p       | 12:00 AM                          | 7     |
 * |                                 | pp      | 12:00:00 AM                       | 7     |
 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
 * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
 * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
 * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
 * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
 *    the output will be the same as default pattern for this unit, usually
 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
 *    are marked with "2" in the last column of the table.
 *
 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
 *
 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
 *    The output will be padded with zeros to match the length of the pattern.
 *
 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
 *
 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 5. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` always returns the last two digits of a year,
 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
 *
 *    | Year | `yy` | `uu` |
 *    |------|------|------|
 *    | 1    |   01 |   01 |
 *    | 14   |   14 |   14 |
 *    | 376  |   76 |  376 |
 *    | 1453 |   53 | 1453 |
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)
 *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).
 *
 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
 *    so right now these tokens fall back to GMT timezones.
 *
 * 7. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `t`: seconds timestamp
 *    - `T`: milliseconds timestamp
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * @param date - The original date
 * @param format - The string of tokens
 * @param options - An object with options
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 * @throws `options.locale` must contain `localize` property
 * @throws `options.locale` must contain `formatLong` property
 * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws format string contains an unescaped latin alphabet character
 *
 * @example
 * // Represent 11 February 2014 in middle-endian format:
 * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
 * //=> '02/11/2014'
 *
 * @example
 * // Represent 2 July 2014 in Esperanto:
 * import { eoLocale } from 'date-fns/locale/eo'
 * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
 *   locale: eoLocale
 * })
 * //=> '2-a de julio 2014'
 *
 * @example
 * // Escape string by single quote characters:
 * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
 * //=> "3 o'clock"
 */
function format(date, formatStr, options) {
  const defaultOptions = getDefaultOptions();
  const locale = defaultOptions.locale ?? enUS;

  const firstWeekContainsDate =
    defaultOptions.firstWeekContainsDate ??
    defaultOptions.locale?.options?.firstWeekContainsDate ??
    1;

  const weekStartsOn =
    defaultOptions.weekStartsOn ??
    defaultOptions.locale?.options?.weekStartsOn ??
    0;

  const originalDate = toDate(date, options?.in);

  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }

  let parts = formatStr
    .match(longFormattingTokensRegExp)
    .map((substring) => {
      const firstCharacter = substring[0];
      if (firstCharacter === "p" || firstCharacter === "P") {
        const longFormatter = longFormatters[firstCharacter];
        return longFormatter(substring, locale.formatLong);
      }
      return substring;
    })
    .join("")
    .match(formattingTokensRegExp)
    .map((substring) => {
      // Replace two single quote characters with one single quote character
      if (substring === "''") {
        return { isToken: false, value: "'" };
      }

      const firstCharacter = substring[0];
      if (firstCharacter === "'") {
        return { isToken: false, value: cleanEscapedString(substring) };
      }

      if (formatters[firstCharacter]) {
        return { isToken: true, value: substring };
      }

      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
        throw new RangeError(
          "Format string contains an unescaped latin alphabet character `" +
            firstCharacter +
            "`",
        );
      }

      return { isToken: false, value: substring };
    });

  // invoke localize preprocessor (only for french locales at the moment)
  if (locale.localize.preprocessor) {
    parts = locale.localize.preprocessor(originalDate, parts);
  }

  const formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale,
  };

  return parts
    .map((part) => {
      if (!part.isToken) return part.value;

      const token = part.value;

      if (
        (isProtectedWeekYearToken(token)) ||
        (isProtectedDayOfYearToken(token))
      ) {
        warnOrThrowProtectedError(token, formatStr, String(date));
      }

      const formatter = formatters[token[0]];
      return formatter(originalDate, token, locale.localize, formatterOptions);
    })
    .join("");
}

function cleanEscapedString(input) {
  const matched = input.match(escapedStringRegExp);

  if (!matched) {
    return input;
  }

  return matched[1].replace(doubleQuoteRegExp, "'");
}

const getNewAdditionDataForUI = (data) => {
    const groupedByYear = {};
    data.forEach((row) => {
        const { confirmationDate } = row;
        const year = new Date(confirmationDate).getFullYear();
        if (!groupedByYear[year]) {
            groupedByYear[year] = [];
        }
        groupedByYear[year].push(row);
    });
    const years = Object.keys(groupedByYear);
    const currentYear = new Date().getFullYear();
    if (!years.length) {
        return {
            currentYear: currentYear.toString(),
            years: [],
            groupedByYear: {},
        };
    }
    const yearsWithNewAdditions = years.sort();
    const earliestYear = parseInt(yearsWithNewAdditions[0]);
    const yearArray = [];
    for (let i = earliestYear; i <= currentYear; i++) {
        yearArray.push(i.toString());
    }
    return {
        currentYear: currentYear.toString(),
        years: yearArray,
        groupedByYear,
    };
};
const formatDate = (date) => format(new Date(date), 'MMM d, yyyy');

const { INAT_OBSERVATIONS_URL } = constants;
const NewAdditionsTab = ({ dataUrl }) => {
    const [loaded, setLoaded] = reactExports.useState(false);
    const [error, setError] = reactExports.useState(false);
    const [data, setData] = reactExports.useState();
    const [years, setYears] = reactExports.useState([]);
    const [currentYear, setCurrentYear] = reactExports.useState();
    const onChangeYear = (year) => setCurrentYear(year);
    reactExports.useEffect(() => {
        fetch(dataUrl, {
            headers: {
                Accept: 'application/json',
            },
        })
            .then((resp) => resp.json())
            .then((data) => {
            const { currentYear, years, groupedByYear } = getNewAdditionDataForUI(data);
            setCurrentYear(currentYear);
            setYears(years);
            setData(groupedByYear);
            setLoaded(true);
        })
            .catch(() => setError(true));
    }, [dataUrl]);
    if (error) {
        return jsxRuntimeExports.jsx("p", { children: "Sorry, there was an error loading the data." });
    }
    if (!loaded || !data || !currentYear) {
        return (jsxRuntimeExports.jsx("div", { className: "icsl-loader", children: jsxRuntimeExports.jsx(Loader, {}) }));
    }
    const newYearRecords = data[currentYear];
    let dataContent = jsxRuntimeExports.jsx("p", { children: "There are no new records for this year" });
    if (newYearRecords) {
        dataContent = (jsxRuntimeExports.jsxs("table", { className: "icsl-table", cellSpacing: 0, cellPadding: 2, children: [jsxRuntimeExports.jsx("thead", { children: jsxRuntimeExports.jsxs("tr", { children: [jsxRuntimeExports.jsx("th", { children: "Species" }), jsxRuntimeExports.jsx("th", { children: "Observer" }), jsxRuntimeExports.jsx("th", { children: "Date observed" }), jsxRuntimeExports.jsx("th", { children: "Date confirmed" }), jsxRuntimeExports.jsx("th", { children: "Curator" }), jsxRuntimeExports.jsx("th", {})] }) }), jsxRuntimeExports.jsx("tbody", { children: newYearRecords.map(({ speciesName, taxonId, observationId, curator, dateObserved, confirmationDate, observer }) => {
                        return (jsxRuntimeExports.jsxs("tr", { children: [jsxRuntimeExports.jsx("td", { children: jsxRuntimeExports.jsx("a", { href: `${INAT_OBSERVATIONS_URL}/${observationId}`, target: "_blank", rel: "noreferrer", children: jsxRuntimeExports.jsx("i", { children: speciesName }) }) }), jsxRuntimeExports.jsx("td", { children: observer.username }), jsxRuntimeExports.jsx("td", { children: formatDate(dateObserved) }), jsxRuntimeExports.jsx("td", { children: formatDate(confirmationDate) }), jsxRuntimeExports.jsx("td", { children: curator }), jsxRuntimeExports.jsx("td", { children: jsxRuntimeExports.jsx("a", { href: `${INAT_OBSERVATIONS_URL}/${observationId}`, children: jsxRuntimeExports.jsx(VisibilityIcon, {}) }) })] }, taxonId));
                    }) })] }));
    }
    return (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsxs("div", { className: "icsl-new-additions-year-filter", children: [jsxRuntimeExports.jsx("label", { children: "Filter by year:" }), " ", jsxRuntimeExports.jsx(YearDropdown, { years: years, onChange: onChangeYear })] }), dataContent] }));
};

const CuratedSpeciesTable = ({ speciesDataUrl, curatorUsernames, placeId, showLastGeneratedDate, showRowNumbers, showReviewerCount, showNewAdditions, newAdditionsDataUrl, }) => {
    const [tabIndex, setTabIndex] = reactExports.useState(0);
    const [lastGenerated, setLastGeneratedDate] = reactExports.useState('');
    const hasNewAdditions = showNewAdditions && newAdditionsDataUrl;
    const onLoadSpeciesData = reactExports.useCallback((data) => {
        setLastGeneratedDate(formatDate(data.dateGenerated));
    }, []);
    const getTabs = () => {
        if (!hasNewAdditions) {
            return null;
        }
        const speciesTabClass = tabIndex === 0 ? 'icsl-tab-selected' : '';
        const newAdditionsTabClass = tabIndex === 1 ? 'icsl-tab-selected' : '';
        return (jsxRuntimeExports.jsxs("div", { style: { position: 'relative' }, children: [showLastGeneratedDate && lastGenerated && (jsxRuntimeExports.jsxs("div", { className: "icsl-last-generated-date", children: ["Last generated: ", jsxRuntimeExports.jsx("span", { children: lastGenerated })] })), jsxRuntimeExports.jsxs("ul", { className: "icsl-tabs", children: [jsxRuntimeExports.jsx("li", { className: speciesTabClass, onClick: () => setTabIndex(0), children: jsxRuntimeExports.jsx("button", { children: "Species" }) }), jsxRuntimeExports.jsx("li", { className: newAdditionsTabClass, onClick: () => setTabIndex(1), children: jsxRuntimeExports.jsx("button", { children: "New Additions" }) })] })] }));
    };
    return (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [getTabs(), jsxRuntimeExports.jsx("div", { style: { display: tabIndex === 0 ? 'block' : 'none' }, children: jsxRuntimeExports.jsx(SpeciesTab, { dataUrl: speciesDataUrl, onLoad: onLoadSpeciesData, curatorUsernames: curatorUsernames, placeId: placeId, showRowNumbers: showRowNumbers, showReviewerCount: showReviewerCount }) }), hasNewAdditions && (jsxRuntimeExports.jsx("div", { style: { display: tabIndex === 1 ? 'block' : 'none' }, children: jsxRuntimeExports.jsx(NewAdditionsTab, { dataUrl: newAdditionsDataUrl }) }))] }));
};

// expose an initialization method on the window object
window.initInatCuratedSpeciesList = function (domElementId, config) {
    var domNode = document.getElementById(domElementId);
    var root = clientExports.createRoot(domNode);
    root.render(React.createElement(CuratedSpeciesTable, __assign({}, config)));
};
